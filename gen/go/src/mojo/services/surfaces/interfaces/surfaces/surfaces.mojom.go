// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/surfaces/interfaces/surfaces.mojom
//

package surfaces

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	geometry "mojo/services/geometry/interfaces/geometry"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	quads "mojo/services/surfaces/interfaces/quads"
)


type ResourceFormat int32

const (
	ResourceFormat_Rgba8888 ResourceFormat = 0
	ResourceFormat_Rgba4444 = ResourceFormat_Rgba8888 + 1;
	ResourceFormat_Bgra8888 = ResourceFormat_Rgba4444 + 1;
	ResourceFormat_Alpha8 = ResourceFormat_Bgra8888 + 1;
	ResourceFormat_Luminance8 = ResourceFormat_Alpha8 + 1;
	ResourceFormat_Rgb565 = ResourceFormat_Luminance8 + 1;
	ResourceFormat_Etc1 = ResourceFormat_Rgb565 + 1;
)


type ResourceReturner interface {
	ReturnResources(inResources []ReturnedResource) (err error)
}




type ResourceReturner_Request bindings.InterfaceRequest



type ResourceReturner_Pointer bindings.InterfacePointer


type ResourceReturner_ServiceFactory struct{
	Delegate ResourceReturner_Factory
}

type ResourceReturner_Factory interface {
	Create(request ResourceReturner_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *ResourceReturner_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &ResourceReturner_ServiceDescription{}
}

func (f *ResourceReturner_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := ResourceReturner_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForResourceReturner creates a message pipe for use with the
// ResourceReturner interface with a ResourceReturner_Request on one end and a ResourceReturner_Pointer on the other.
func CreateMessagePipeForResourceReturner() (ResourceReturner_Request, ResourceReturner_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return ResourceReturner_Request(r), ResourceReturner_Pointer(p)
}

const resourceReturner_ReturnResources_Name uint32 = 0

type ResourceReturner_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewResourceReturnerProxy(p ResourceReturner_Pointer, waiter bindings.AsyncWaiter) *ResourceReturner_Proxy {
	return &ResourceReturner_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *ResourceReturner_Proxy) Close_Proxy() {
	p.router.Close()
}

type resourceReturner_ReturnResources_Params struct {
	inResources []ReturnedResource
}


func (s *resourceReturner_ReturnResources_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.inResources)), 64)
	for _, elem0 := range s.inResources {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var resourceReturner_ReturnResources_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *resourceReturner_ReturnResources_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(resourceReturner_ReturnResources_Params_Versions), func(i int) bool {
		return resourceReturner_ReturnResources_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(resourceReturner_ReturnResources_Params_Versions) {
		if resourceReturner_ReturnResources_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := resourceReturner_ReturnResources_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.inResources = make([]ReturnedResource, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.inResources[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ResourceReturner_Proxy) ReturnResources(inResources []ReturnedResource) (err error) {
	payload := &resourceReturner_ReturnResources_Params{
		inResources,
	}
	header := bindings.MessageHeader{
		Type: resourceReturner_ReturnResources_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type resourceReturner_Stub struct {
	connector *bindings.Connector
	impl ResourceReturner
}

func NewResourceReturnerStub(r ResourceReturner_Request, impl ResourceReturner, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &resourceReturner_Stub{connector, impl})
}


func (f *ResourceReturner_Request) ServiceDescription() service_describer.ServiceDescription {
	return &ResourceReturner_ServiceDescription{}
}


type ResourceReturner_ServiceDescription struct{}

func (sd *ResourceReturner_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *ResourceReturner_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *ResourceReturner_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*ResourceReturner_ServiceDescription)(nil)


func (s *resourceReturner_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case resourceReturner_ReturnResources_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request resourceReturner_ReturnResources_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.ReturnResources(request.inResources)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type Surface interface {
	GetIdNamespace() (outIdNamespace uint32, err error)
	SetResourceReturner(inReturner ResourceReturner_Pointer) (err error)
	CreateSurface(inIdLocal uint32) (err error)
	SubmitFrame(inIdLocal uint32, inFrame Frame) (err error)
	DestroySurface(inIdLocal uint32) (err error)
}



var surface_Name = "mojo::Surface"

type Surface_Request bindings.InterfaceRequest

func (r *Surface_Request) Name() string {
	return surface_Name
}


type Surface_Pointer bindings.InterfacePointer

func (p *Surface_Pointer) Name() string {
	return surface_Name
}

type Surface_ServiceFactory struct{
	Delegate Surface_Factory
}

type Surface_Factory interface {
	Create(request Surface_Request)
}

func (f *Surface_ServiceFactory) Name() string {
	return surface_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Surface_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Surface_ServiceDescription{}
}

func (f *Surface_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Surface_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForSurface creates a message pipe for use with the
// Surface interface with a Surface_Request on one end and a Surface_Pointer on the other.
func CreateMessagePipeForSurface() (Surface_Request, Surface_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Surface_Request(r), Surface_Pointer(p)
}

const surface_GetIdNamespace_Name uint32 = 0
const surface_SetResourceReturner_Name uint32 = 1
const surface_CreateSurface_Name uint32 = 2
const surface_SubmitFrame_Name uint32 = 3
const surface_DestroySurface_Name uint32 = 4

type Surface_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewSurfaceProxy(p Surface_Pointer, waiter bindings.AsyncWaiter) *Surface_Proxy {
	return &Surface_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Surface_Proxy) Close_Proxy() {
	p.router.Close()
}

type surface_GetIdNamespace_Params struct {
}


func (s *surface_GetIdNamespace_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surface_GetIdNamespace_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *surface_GetIdNamespace_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surface_GetIdNamespace_Params_Versions), func(i int) bool {
		return surface_GetIdNamespace_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surface_GetIdNamespace_Params_Versions) {
		if surface_GetIdNamespace_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surface_GetIdNamespace_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type surface_GetIdNamespace_ResponseParams struct {
	outIdNamespace uint32
}


func (s *surface_GetIdNamespace_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.outIdNamespace); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surface_GetIdNamespace_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *surface_GetIdNamespace_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surface_GetIdNamespace_ResponseParams_Versions), func(i int) bool {
		return surface_GetIdNamespace_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surface_GetIdNamespace_ResponseParams_Versions) {
		if surface_GetIdNamespace_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surface_GetIdNamespace_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.outIdNamespace = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Surface_Proxy) GetIdNamespace() (outIdNamespace uint32, err error) {
	payload := &surface_GetIdNamespace_Params{
	}
	header := bindings.MessageHeader{
		Type: surface_GetIdNamespace_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, surface_GetIdNamespace_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response surface_GetIdNamespace_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outIdNamespace = response.outIdNamespace
	return
}

type surface_SetResourceReturner_Params struct {
	inReturner ResourceReturner_Pointer
}


func (s *surface_SetResourceReturner_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInterface(s.inReturner.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surface_SetResourceReturner_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *surface_SetResourceReturner_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surface_SetResourceReturner_Params_Versions), func(i int) bool {
		return surface_SetResourceReturner_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surface_SetResourceReturner_Params_Versions) {
		if surface_SetResourceReturner_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surface_SetResourceReturner_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inReturner = ResourceReturner_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Surface_Proxy) SetResourceReturner(inReturner ResourceReturner_Pointer) (err error) {
	payload := &surface_SetResourceReturner_Params{
		inReturner,
	}
	header := bindings.MessageHeader{
		Type: surface_SetResourceReturner_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type surface_CreateSurface_Params struct {
	inIdLocal uint32
}


func (s *surface_CreateSurface_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.inIdLocal); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surface_CreateSurface_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *surface_CreateSurface_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surface_CreateSurface_Params_Versions), func(i int) bool {
		return surface_CreateSurface_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surface_CreateSurface_Params_Versions) {
		if surface_CreateSurface_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surface_CreateSurface_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inIdLocal = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Surface_Proxy) CreateSurface(inIdLocal uint32) (err error) {
	payload := &surface_CreateSurface_Params{
		inIdLocal,
	}
	header := bindings.MessageHeader{
		Type: surface_CreateSurface_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type surface_SubmitFrame_Params struct {
	inIdLocal uint32
	inFrame Frame
}


func (s *surface_SubmitFrame_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteUint32(s.inIdLocal); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inFrame.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surface_SubmitFrame_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *surface_SubmitFrame_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surface_SubmitFrame_Params_Versions), func(i int) bool {
		return surface_SubmitFrame_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surface_SubmitFrame_Params_Versions) {
		if surface_SubmitFrame_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surface_SubmitFrame_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inIdLocal = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inFrame.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type surface_SubmitFrame_ResponseParams struct {
}


func (s *surface_SubmitFrame_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surface_SubmitFrame_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *surface_SubmitFrame_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surface_SubmitFrame_ResponseParams_Versions), func(i int) bool {
		return surface_SubmitFrame_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surface_SubmitFrame_ResponseParams_Versions) {
		if surface_SubmitFrame_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surface_SubmitFrame_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Surface_Proxy) SubmitFrame(inIdLocal uint32, inFrame Frame) (err error) {
	payload := &surface_SubmitFrame_Params{
		inIdLocal,
		inFrame,
	}
	header := bindings.MessageHeader{
		Type: surface_SubmitFrame_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, surface_SubmitFrame_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response surface_SubmitFrame_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type surface_DestroySurface_Params struct {
	inIdLocal uint32
}


func (s *surface_DestroySurface_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.inIdLocal); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surface_DestroySurface_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *surface_DestroySurface_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surface_DestroySurface_Params_Versions), func(i int) bool {
		return surface_DestroySurface_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surface_DestroySurface_Params_Versions) {
		if surface_DestroySurface_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surface_DestroySurface_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inIdLocal = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Surface_Proxy) DestroySurface(inIdLocal uint32) (err error) {
	payload := &surface_DestroySurface_Params{
		inIdLocal,
	}
	header := bindings.MessageHeader{
		Type: surface_DestroySurface_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type surface_Stub struct {
	connector *bindings.Connector
	impl Surface
}

func NewSurfaceStub(r Surface_Request, impl Surface, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &surface_Stub{connector, impl})
}


func (f *Surface_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Surface_ServiceDescription{}
}


type Surface_ServiceDescription struct{}

func (sd *Surface_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Surface_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Surface_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Surface_ServiceDescription)(nil)


func (s *surface_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case surface_GetIdNamespace_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request surface_GetIdNamespace_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response surface_GetIdNamespace_ResponseParams
		response.outIdNamespace, err = s.impl.GetIdNamespace()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: surface_GetIdNamespace_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case surface_SetResourceReturner_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request surface_SetResourceReturner_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.SetResourceReturner(request.inReturner)
		if err != nil {
			return
		}
	case surface_CreateSurface_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request surface_CreateSurface_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateSurface(request.inIdLocal)
		if err != nil {
			return
		}
	case surface_SubmitFrame_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request surface_SubmitFrame_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response surface_SubmitFrame_ResponseParams
		err = s.impl.SubmitFrame(request.inIdLocal, request.inFrame)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: surface_SubmitFrame_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case surface_DestroySurface_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request surface_DestroySurface_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.DestroySurface(request.inIdLocal)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type Mailbox struct {
	Name [64]int8
}


func (s *Mailbox) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.Name)), 8)
	for _, elem0 := range s.Name {
		if err := encoder.WriteInt8(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var mailbox_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *Mailbox) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(mailbox_Versions), func(i int) bool {
		return mailbox_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(mailbox_Versions) {
		if mailbox_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := mailbox_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			if len0 != 64 {
				return &bindings.ValidationError{bindings.UnexpectedArrayHeader,
					fmt.Sprintf("invalid array length: expected %d, got %d", 64, len0),
				}
			}
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadInt8()
				if err != nil {
					return err
				}
				s.Name[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type MailboxHolder struct {
	Mailbox Mailbox
	TextureTarget uint32
	SyncPoint uint32
}


func (s *MailboxHolder) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.Mailbox.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.TextureTarget); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.SyncPoint); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var mailboxHolder_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *MailboxHolder) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(mailboxHolder_Versions), func(i int) bool {
		return mailboxHolder_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(mailboxHolder_Versions) {
		if mailboxHolder_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := mailboxHolder_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.Mailbox.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.TextureTarget = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.SyncPoint = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type TransferableResource struct {
	Id uint32
	Format ResourceFormat
	Filter uint32
	Size geometry.Size
	MailboxHolder MailboxHolder
	IsRepeated bool
	IsSoftware bool
}


func (s *TransferableResource) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(32, 0)
	if err := encoder.WriteUint32(s.Id); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.Format)); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.Filter); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.IsRepeated); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.IsSoftware); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.Size.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.MailboxHolder.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var transferableResource_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{40, 0},
}

func (s *TransferableResource) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(transferableResource_Versions), func(i int) bool {
		return transferableResource_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(transferableResource_Versions) {
		if transferableResource_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := transferableResource_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.Id = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Format = ResourceFormat(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.Filter = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.IsRepeated = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.IsSoftware = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.Size.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.MailboxHolder.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type ReturnedResource struct {
	Id uint32
	SyncPoint uint32
	Count int32
	Lost bool
}


func (s *ReturnedResource) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteUint32(s.Id); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.SyncPoint); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.Count); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.Lost); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var returnedResource_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *ReturnedResource) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(returnedResource_Versions), func(i int) bool {
		return returnedResource_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(returnedResource_Versions) {
		if returnedResource_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := returnedResource_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.Id = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.SyncPoint = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Count = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.Lost = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type Frame struct {
	Resources []TransferableResource
	Passes []quads.Pass
}


func (s *Frame) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.Resources)), 64)
	for _, elem0 := range s.Resources {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.Passes)), 64)
	for _, elem0 := range s.Passes {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var frame_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *Frame) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(frame_Versions), func(i int) bool {
		return frame_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(frame_Versions) {
		if frame_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := frame_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.Resources = make([]TransferableResource, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.Resources[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.Passes = make([]quads.Pass, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.Passes[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

