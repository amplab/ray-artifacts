// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom-common.h"
#include "mojo/public/interfaces/network/url_request.mojom.h"
#include "mojo/public/interfaces/network/url_response.mojom.h"
namespace mojo {

// --- Interface Forward Declarations ---

using URLLoaderInterceptorFactoryPtr = mojo::InterfacePtr<URLLoaderInterceptorFactory>;

using URLLoaderInterceptorPtr = mojo::InterfacePtr<URLLoaderInterceptor>;


// --- Interface Proxies ---


class URLLoaderInterceptorFactoryProxy
    : public URLLoaderInterceptorFactory,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit URLLoaderInterceptorFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  void Create(
      mojo::InterfaceRequest<URLLoaderInterceptor> interceptor
  ) override;
};


class URLLoaderInterceptorProxy
    : public URLLoaderInterceptor,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit URLLoaderInterceptorProxy(mojo::MessageReceiverWithResponder* receiver);
  void InterceptRequest(
      mojo::URLRequestPtr request, const InterceptRequestCallback& callback
  ) override;
  void InterceptFollowRedirect(
      const InterceptFollowRedirectCallback& callback
  ) override;
  void InterceptResponse(
      mojo::URLResponsePtr response, const InterceptResponseCallback& callback
  ) override;
};


// --- Interface Stubs ---

class URLLoaderInterceptorFactoryStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  URLLoaderInterceptorFactoryStub();
  ~URLLoaderInterceptorFactoryStub() override;
  void set_sink(URLLoaderInterceptorFactory* sink) { sink_ = sink; }
  URLLoaderInterceptorFactory* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  URLLoaderInterceptorFactory* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class URLLoaderInterceptorStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  URLLoaderInterceptorStub();
  ~URLLoaderInterceptorStub() override;
  void set_sink(URLLoaderInterceptor* sink) { sink_ = sink; }
  URLLoaderInterceptor* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  URLLoaderInterceptor* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_H_
