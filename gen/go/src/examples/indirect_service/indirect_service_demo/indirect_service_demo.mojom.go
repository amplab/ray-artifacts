// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     examples/indirect_service/indirect_service_demo.mojom
//

package indirect_service_demo

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type IntegerService interface {
	Increment() (outValue int32, err error)
}



var integerService_Name = "mojo::examples::IntegerService"

type IntegerService_Request bindings.InterfaceRequest

func (r *IntegerService_Request) Name() string {
	return integerService_Name
}


type IntegerService_Pointer bindings.InterfacePointer

func (p *IntegerService_Pointer) Name() string {
	return integerService_Name
}

type IntegerService_ServiceFactory struct{
	Delegate IntegerService_Factory
}

type IntegerService_Factory interface {
	Create(request IntegerService_Request)
}

func (f *IntegerService_ServiceFactory) Name() string {
	return integerService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *IntegerService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &IntegerService_ServiceDescription{}
}

func (f *IntegerService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := IntegerService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForIntegerService creates a message pipe for use with the
// IntegerService interface with a IntegerService_Request on one end and a IntegerService_Pointer on the other.
func CreateMessagePipeForIntegerService() (IntegerService_Request, IntegerService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return IntegerService_Request(r), IntegerService_Pointer(p)
}

const integerService_Increment_Name uint32 = 0

type IntegerService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewIntegerServiceProxy(p IntegerService_Pointer, waiter bindings.AsyncWaiter) *IntegerService_Proxy {
	return &IntegerService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *IntegerService_Proxy) Close_Proxy() {
	p.router.Close()
}

type integerService_Increment_Params struct {
}


func (s *integerService_Increment_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var integerService_Increment_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *integerService_Increment_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(integerService_Increment_Params_Versions), func(i int) bool {
		return integerService_Increment_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(integerService_Increment_Params_Versions) {
		if integerService_Increment_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := integerService_Increment_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type integerService_Increment_ResponseParams struct {
	outValue int32
}


func (s *integerService_Increment_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(s.outValue); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var integerService_Increment_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *integerService_Increment_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(integerService_Increment_ResponseParams_Versions), func(i int) bool {
		return integerService_Increment_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(integerService_Increment_ResponseParams_Versions) {
		if integerService_Increment_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := integerService_Increment_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outValue = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *IntegerService_Proxy) Increment() (outValue int32, err error) {
	payload := &integerService_Increment_Params{
	}
	header := bindings.MessageHeader{
		Type: integerService_Increment_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, integerService_Increment_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response integerService_Increment_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outValue = response.outValue
	return
}

type integerService_Stub struct {
	connector *bindings.Connector
	impl IntegerService
}

func NewIntegerServiceStub(r IntegerService_Request, impl IntegerService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &integerService_Stub{connector, impl})
}


func (f *IntegerService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &IntegerService_ServiceDescription{}
}


type IntegerService_ServiceDescription struct{}

func (sd *IntegerService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *IntegerService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *IntegerService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*IntegerService_ServiceDescription)(nil)


func (s *integerService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case integerService_Increment_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request integerService_Increment_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response integerService_Increment_ResponseParams
		response.outValue, err = s.impl.Increment()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: integerService_Increment_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type IndirectIntegerService interface {
	Set(inService *IntegerService_Pointer) (err error)
	Get(inService *IntegerService_Request) (err error)
}



var indirectIntegerService_Name = "mojo::examples::IndirectIntegerService"

type IndirectIntegerService_Request bindings.InterfaceRequest

func (r *IndirectIntegerService_Request) Name() string {
	return indirectIntegerService_Name
}


type IndirectIntegerService_Pointer bindings.InterfacePointer

func (p *IndirectIntegerService_Pointer) Name() string {
	return indirectIntegerService_Name
}

type IndirectIntegerService_ServiceFactory struct{
	Delegate IndirectIntegerService_Factory
}

type IndirectIntegerService_Factory interface {
	Create(request IndirectIntegerService_Request)
}

func (f *IndirectIntegerService_ServiceFactory) Name() string {
	return indirectIntegerService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *IndirectIntegerService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &IndirectIntegerService_ServiceDescription{}
}

func (f *IndirectIntegerService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := IndirectIntegerService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForIndirectIntegerService creates a message pipe for use with the
// IndirectIntegerService interface with a IndirectIntegerService_Request on one end and a IndirectIntegerService_Pointer on the other.
func CreateMessagePipeForIndirectIntegerService() (IndirectIntegerService_Request, IndirectIntegerService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return IndirectIntegerService_Request(r), IndirectIntegerService_Pointer(p)
}

const indirectIntegerService_Set_Name uint32 = 0
const indirectIntegerService_Get_Name uint32 = 1

type IndirectIntegerService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewIndirectIntegerServiceProxy(p IndirectIntegerService_Pointer, waiter bindings.AsyncWaiter) *IndirectIntegerService_Proxy {
	return &IndirectIntegerService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *IndirectIntegerService_Proxy) Close_Proxy() {
	p.router.Close()
}

type indirectIntegerService_Set_Params struct {
	inService *IntegerService_Pointer
}


func (s *indirectIntegerService_Set_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.inService == nil {
		encoder.WriteInvalidInterface()
	} else {
		if err := encoder.WriteInterface((*s.inService).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var indirectIntegerService_Set_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *indirectIntegerService_Set_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(indirectIntegerService_Set_Params_Versions), func(i int) bool {
		return indirectIntegerService_Set_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(indirectIntegerService_Set_Params_Versions) {
		if indirectIntegerService_Set_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := indirectIntegerService_Set_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inService = &IntegerService_Pointer{handleOwner}
		} else {
			s.inService = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *IndirectIntegerService_Proxy) Set(inService *IntegerService_Pointer) (err error) {
	payload := &indirectIntegerService_Set_Params{
		inService,
	}
	header := bindings.MessageHeader{
		Type: indirectIntegerService_Set_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type indirectIntegerService_Get_Params struct {
	inService *IntegerService_Request
}


func (s *indirectIntegerService_Get_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.inService == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.inService).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var indirectIntegerService_Get_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *indirectIntegerService_Get_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(indirectIntegerService_Get_Params_Versions), func(i int) bool {
		return indirectIntegerService_Get_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(indirectIntegerService_Get_Params_Versions) {
		if indirectIntegerService_Get_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := indirectIntegerService_Get_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inService = &IntegerService_Request{handleOwner}
		} else {
			s.inService = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *IndirectIntegerService_Proxy) Get(inService *IntegerService_Request) (err error) {
	payload := &indirectIntegerService_Get_Params{
		inService,
	}
	header := bindings.MessageHeader{
		Type: indirectIntegerService_Get_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type indirectIntegerService_Stub struct {
	connector *bindings.Connector
	impl IndirectIntegerService
}

func NewIndirectIntegerServiceStub(r IndirectIntegerService_Request, impl IndirectIntegerService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &indirectIntegerService_Stub{connector, impl})
}


func (f *IndirectIntegerService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &IndirectIntegerService_ServiceDescription{}
}


type IndirectIntegerService_ServiceDescription struct{}

func (sd *IndirectIntegerService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *IndirectIntegerService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *IndirectIntegerService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*IndirectIntegerService_ServiceDescription)(nil)


func (s *indirectIntegerService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case indirectIntegerService_Set_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request indirectIntegerService_Set_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Set(request.inService)
		if err != nil {
			return
		}
	case indirectIntegerService_Get_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request indirectIntegerService_Get_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Get(request.inService)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

