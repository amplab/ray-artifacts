// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_UDP_SOCKET_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_UDP_SOCKET_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/network/network_error.mojom-internal.h"
#include "mojo/services/network/interfaces/net_address.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {



namespace internal {




#pragma pack(push, 1)



class UDPSocket_AllowAddressReuse_Params_Data {
 public:
  static UDPSocket_AllowAddressReuse_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  UDPSocket_AllowAddressReuse_Params_Data();
  ~UDPSocket_AllowAddressReuse_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_AllowAddressReuse_Params_Data) == 8,
              "Bad sizeof(UDPSocket_AllowAddressReuse_Params_Data)");

class UDPSocket_AllowAddressReuse_ResponseParams_Data {
 public:
  static UDPSocket_AllowAddressReuse_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;

 private:
  UDPSocket_AllowAddressReuse_ResponseParams_Data();
  ~UDPSocket_AllowAddressReuse_ResponseParams_Data() = delete;
};
static_assert(sizeof(UDPSocket_AllowAddressReuse_ResponseParams_Data) == 16,
              "Bad sizeof(UDPSocket_AllowAddressReuse_ResponseParams_Data)");


class UDPSocket_Bind_Params_Data {
 public:
  static UDPSocket_Bind_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> addr;

 private:
  UDPSocket_Bind_Params_Data();
  ~UDPSocket_Bind_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_Bind_Params_Data) == 16,
              "Bad sizeof(UDPSocket_Bind_Params_Data)");

class UDPSocket_Bind_ResponseParams_Data {
 public:
  static UDPSocket_Bind_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> bound_addr;
  mojo::MessagePipeHandle receiver;
  uint8_t padfinal_[4];

 private:
  UDPSocket_Bind_ResponseParams_Data();
  ~UDPSocket_Bind_ResponseParams_Data() = delete;
};
static_assert(sizeof(UDPSocket_Bind_ResponseParams_Data) == 32,
              "Bad sizeof(UDPSocket_Bind_ResponseParams_Data)");


class UDPSocket_Connect_Params_Data {
 public:
  static UDPSocket_Connect_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> remote_addr;

 private:
  UDPSocket_Connect_Params_Data();
  ~UDPSocket_Connect_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_Connect_Params_Data) == 16,
              "Bad sizeof(UDPSocket_Connect_Params_Data)");

class UDPSocket_Connect_ResponseParams_Data {
 public:
  static UDPSocket_Connect_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> local_addr;
  mojo::MessagePipeHandle receiver;
  uint8_t padfinal_[4];

 private:
  UDPSocket_Connect_ResponseParams_Data();
  ~UDPSocket_Connect_ResponseParams_Data() = delete;
};
static_assert(sizeof(UDPSocket_Connect_ResponseParams_Data) == 32,
              "Bad sizeof(UDPSocket_Connect_ResponseParams_Data)");


class UDPSocket_SetSendBufferSize_Params_Data {
 public:
  static UDPSocket_SetSendBufferSize_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t size;
  uint8_t padfinal_[4];

 private:
  UDPSocket_SetSendBufferSize_Params_Data();
  ~UDPSocket_SetSendBufferSize_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_SetSendBufferSize_Params_Data) == 16,
              "Bad sizeof(UDPSocket_SetSendBufferSize_Params_Data)");

class UDPSocket_SetSendBufferSize_ResponseParams_Data {
 public:
  static UDPSocket_SetSendBufferSize_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;

 private:
  UDPSocket_SetSendBufferSize_ResponseParams_Data();
  ~UDPSocket_SetSendBufferSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(UDPSocket_SetSendBufferSize_ResponseParams_Data) == 16,
              "Bad sizeof(UDPSocket_SetSendBufferSize_ResponseParams_Data)");


class UDPSocket_SetReceiveBufferSize_Params_Data {
 public:
  static UDPSocket_SetReceiveBufferSize_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t size;
  uint8_t padfinal_[4];

 private:
  UDPSocket_SetReceiveBufferSize_Params_Data();
  ~UDPSocket_SetReceiveBufferSize_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_SetReceiveBufferSize_Params_Data) == 16,
              "Bad sizeof(UDPSocket_SetReceiveBufferSize_Params_Data)");

class UDPSocket_SetReceiveBufferSize_ResponseParams_Data {
 public:
  static UDPSocket_SetReceiveBufferSize_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;

 private:
  UDPSocket_SetReceiveBufferSize_ResponseParams_Data();
  ~UDPSocket_SetReceiveBufferSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(UDPSocket_SetReceiveBufferSize_ResponseParams_Data) == 16,
              "Bad sizeof(UDPSocket_SetReceiveBufferSize_ResponseParams_Data)");


class UDPSocket_NegotiateMaxPendingSendRequests_Params_Data {
 public:
  static UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t requested_size;
  uint8_t padfinal_[4];

 private:
  UDPSocket_NegotiateMaxPendingSendRequests_Params_Data();
  ~UDPSocket_NegotiateMaxPendingSendRequests_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_NegotiateMaxPendingSendRequests_Params_Data) == 16,
              "Bad sizeof(UDPSocket_NegotiateMaxPendingSendRequests_Params_Data)");

class UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data {
 public:
  static UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t actual_size;
  uint8_t padfinal_[4];

 private:
  UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data();
  ~UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data() = delete;
};
static_assert(sizeof(UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data) == 16,
              "Bad sizeof(UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data)");


class UDPSocket_ReceiveMore_Params_Data {
 public:
  static UDPSocket_ReceiveMore_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t datagram_number;
  uint8_t padfinal_[4];

 private:
  UDPSocket_ReceiveMore_Params_Data();
  ~UDPSocket_ReceiveMore_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_ReceiveMore_Params_Data) == 16,
              "Bad sizeof(UDPSocket_ReceiveMore_Params_Data)");


class UDPSocket_SendTo_Params_Data {
 public:
  static UDPSocket_SendTo_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> dest_addr;
  mojo::internal::ArrayPointer<uint8_t> data;

 private:
  UDPSocket_SendTo_Params_Data();
  ~UDPSocket_SendTo_Params_Data() = delete;
};
static_assert(sizeof(UDPSocket_SendTo_Params_Data) == 24,
              "Bad sizeof(UDPSocket_SendTo_Params_Data)");

class UDPSocket_SendTo_ResponseParams_Data {
 public:
  static UDPSocket_SendTo_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;

 private:
  UDPSocket_SendTo_ResponseParams_Data();
  ~UDPSocket_SendTo_ResponseParams_Data() = delete;
};
static_assert(sizeof(UDPSocket_SendTo_ResponseParams_Data) == 16,
              "Bad sizeof(UDPSocket_SendTo_ResponseParams_Data)");


class UDPSocketReceiver_OnReceived_Params_Data {
 public:
  static UDPSocketReceiver_OnReceived_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> src_addr;
  mojo::internal::ArrayPointer<uint8_t> data;

 private:
  UDPSocketReceiver_OnReceived_Params_Data();
  ~UDPSocketReceiver_OnReceived_Params_Data() = delete;
};
static_assert(sizeof(UDPSocketReceiver_OnReceived_Params_Data) == 32,
              "Bad sizeof(UDPSocketReceiver_OnReceived_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_UDP_SOCKET_MOJOM_INTERNAL_H_
