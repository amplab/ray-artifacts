// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/udp_socket.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
UDPSocket_AllowAddressReuse_Params_Data* UDPSocket_AllowAddressReuse_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_AllowAddressReuse_Params_Data))) UDPSocket_AllowAddressReuse_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_AllowAddressReuse_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_AllowAddressReuse_Params_Data* object = static_cast<const UDPSocket_AllowAddressReuse_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_AllowAddressReuse_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void UDPSocket_AllowAddressReuse_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

UDPSocket_AllowAddressReuse_Params_Data::UDPSocket_AllowAddressReuse_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
UDPSocket_AllowAddressReuse_ResponseParams_Data* UDPSocket_AllowAddressReuse_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_AllowAddressReuse_ResponseParams_Data))) UDPSocket_AllowAddressReuse_ResponseParams_Data();
}

// static
mojo::internal::ValidationError UDPSocket_AllowAddressReuse_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_AllowAddressReuse_ResponseParams_Data* object = static_cast<const UDPSocket_AllowAddressReuse_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in UDPSocket_AllowAddressReuse_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_AllowAddressReuse_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
}

void UDPSocket_AllowAddressReuse_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
}

UDPSocket_AllowAddressReuse_ResponseParams_Data::UDPSocket_AllowAddressReuse_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocket_Bind_Params_Data* UDPSocket_Bind_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_Bind_Params_Data))) UDPSocket_Bind_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_Bind_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_Bind_Params_Data* object = static_cast<const UDPSocket_Bind_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->addr.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null addr field in UDPSocket_Bind_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->addr.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_Bind_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->addr, handles);
}

void UDPSocket_Bind_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->addr, handles);
}

UDPSocket_Bind_Params_Data::UDPSocket_Bind_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
UDPSocket_Bind_ResponseParams_Data* UDPSocket_Bind_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_Bind_ResponseParams_Data))) UDPSocket_Bind_ResponseParams_Data();
}

// static
mojo::internal::ValidationError UDPSocket_Bind_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_Bind_ResponseParams_Data* object = static_cast<const UDPSocket_Bind_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in UDPSocket_Bind_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->bound_addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->bound_addr.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle receiver_handle = object->receiver;
  if (!bounds_checker->ClaimHandle(receiver_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_Bind_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
  mojo::internal::Encode(&this->bound_addr, handles);
  mojo::internal::EncodeHandle(&this->receiver, handles);
}

void UDPSocket_Bind_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
  mojo::internal::Decode(&this->bound_addr, handles);
  mojo::internal::DecodeHandle(&this->receiver, handles);
}

UDPSocket_Bind_ResponseParams_Data::UDPSocket_Bind_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocket_Connect_Params_Data* UDPSocket_Connect_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_Connect_Params_Data))) UDPSocket_Connect_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_Connect_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_Connect_Params_Data* object = static_cast<const UDPSocket_Connect_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->remote_addr.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null remote_addr field in UDPSocket_Connect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->remote_addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->remote_addr.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_Connect_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->remote_addr, handles);
}

void UDPSocket_Connect_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->remote_addr, handles);
}

UDPSocket_Connect_Params_Data::UDPSocket_Connect_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
UDPSocket_Connect_ResponseParams_Data* UDPSocket_Connect_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_Connect_ResponseParams_Data))) UDPSocket_Connect_ResponseParams_Data();
}

// static
mojo::internal::ValidationError UDPSocket_Connect_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_Connect_ResponseParams_Data* object = static_cast<const UDPSocket_Connect_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in UDPSocket_Connect_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->local_addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->local_addr.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle receiver_handle = object->receiver;
  if (!bounds_checker->ClaimHandle(receiver_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_Connect_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
  mojo::internal::Encode(&this->local_addr, handles);
  mojo::internal::EncodeHandle(&this->receiver, handles);
}

void UDPSocket_Connect_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
  mojo::internal::Decode(&this->local_addr, handles);
  mojo::internal::DecodeHandle(&this->receiver, handles);
}

UDPSocket_Connect_ResponseParams_Data::UDPSocket_Connect_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocket_SetSendBufferSize_Params_Data* UDPSocket_SetSendBufferSize_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_SetSendBufferSize_Params_Data))) UDPSocket_SetSendBufferSize_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_SetSendBufferSize_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_SetSendBufferSize_Params_Data* object = static_cast<const UDPSocket_SetSendBufferSize_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_SetSendBufferSize_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void UDPSocket_SetSendBufferSize_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

UDPSocket_SetSendBufferSize_Params_Data::UDPSocket_SetSendBufferSize_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
UDPSocket_SetSendBufferSize_ResponseParams_Data* UDPSocket_SetSendBufferSize_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_SetSendBufferSize_ResponseParams_Data))) UDPSocket_SetSendBufferSize_ResponseParams_Data();
}

// static
mojo::internal::ValidationError UDPSocket_SetSendBufferSize_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_SetSendBufferSize_ResponseParams_Data* object = static_cast<const UDPSocket_SetSendBufferSize_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in UDPSocket_SetSendBufferSize_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_SetSendBufferSize_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
}

void UDPSocket_SetSendBufferSize_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
}

UDPSocket_SetSendBufferSize_ResponseParams_Data::UDPSocket_SetSendBufferSize_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocket_SetReceiveBufferSize_Params_Data* UDPSocket_SetReceiveBufferSize_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_SetReceiveBufferSize_Params_Data))) UDPSocket_SetReceiveBufferSize_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_SetReceiveBufferSize_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_SetReceiveBufferSize_Params_Data* object = static_cast<const UDPSocket_SetReceiveBufferSize_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_SetReceiveBufferSize_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void UDPSocket_SetReceiveBufferSize_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

UDPSocket_SetReceiveBufferSize_Params_Data::UDPSocket_SetReceiveBufferSize_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
UDPSocket_SetReceiveBufferSize_ResponseParams_Data* UDPSocket_SetReceiveBufferSize_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_SetReceiveBufferSize_ResponseParams_Data))) UDPSocket_SetReceiveBufferSize_ResponseParams_Data();
}

// static
mojo::internal::ValidationError UDPSocket_SetReceiveBufferSize_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_SetReceiveBufferSize_ResponseParams_Data* object = static_cast<const UDPSocket_SetReceiveBufferSize_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in UDPSocket_SetReceiveBufferSize_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_SetReceiveBufferSize_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
}

void UDPSocket_SetReceiveBufferSize_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
}

UDPSocket_SetReceiveBufferSize_ResponseParams_Data::UDPSocket_SetReceiveBufferSize_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_NegotiateMaxPendingSendRequests_Params_Data))) UDPSocket_NegotiateMaxPendingSendRequests_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* object = static_cast<const UDPSocket_NegotiateMaxPendingSendRequests_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data))) UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data();
}

// static
mojo::internal::ValidationError UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* object = static_cast<const UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocket_ReceiveMore_Params_Data* UDPSocket_ReceiveMore_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_ReceiveMore_Params_Data))) UDPSocket_ReceiveMore_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_ReceiveMore_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_ReceiveMore_Params_Data* object = static_cast<const UDPSocket_ReceiveMore_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_ReceiveMore_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void UDPSocket_ReceiveMore_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

UDPSocket_ReceiveMore_Params_Data::UDPSocket_ReceiveMore_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocket_SendTo_Params_Data* UDPSocket_SendTo_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_SendTo_Params_Data))) UDPSocket_SendTo_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocket_SendTo_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_SendTo_Params_Data* object = static_cast<const UDPSocket_SendTo_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->dest_addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->dest_addr.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->data.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null data field in UDPSocket_SendTo_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->data.offset),
          bounds_checker, &data_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_SendTo_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->dest_addr, handles);
  mojo::internal::Encode(&this->data, handles);
}

void UDPSocket_SendTo_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->dest_addr, handles);
  mojo::internal::Decode(&this->data, handles);
}

UDPSocket_SendTo_Params_Data::UDPSocket_SendTo_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
UDPSocket_SendTo_ResponseParams_Data* UDPSocket_SendTo_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocket_SendTo_ResponseParams_Data))) UDPSocket_SendTo_ResponseParams_Data();
}

// static
mojo::internal::ValidationError UDPSocket_SendTo_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocket_SendTo_ResponseParams_Data* object = static_cast<const UDPSocket_SendTo_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in UDPSocket_SendTo_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocket_SendTo_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
}

void UDPSocket_SendTo_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
}

UDPSocket_SendTo_ResponseParams_Data::UDPSocket_SendTo_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
UDPSocketReceiver_OnReceived_Params_Data* UDPSocketReceiver_OnReceived_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(UDPSocketReceiver_OnReceived_Params_Data))) UDPSocketReceiver_OnReceived_Params_Data();
}

// static
mojo::internal::ValidationError UDPSocketReceiver_OnReceived_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const UDPSocketReceiver_OnReceived_Params_Data* object = static_cast<const UDPSocketReceiver_OnReceived_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in UDPSocketReceiver_OnReceived_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->src_addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->src_addr.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->data.offset),
          bounds_checker, &data_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void UDPSocketReceiver_OnReceived_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
  mojo::internal::Encode(&this->src_addr, handles);
  mojo::internal::Encode(&this->data, handles);
}

void UDPSocketReceiver_OnReceived_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
  mojo::internal::Decode(&this->src_addr, handles);
  mojo::internal::Decode(&this->data, handles);
}

UDPSocketReceiver_OnReceived_Params_Data::UDPSocketReceiver_OnReceived_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError UDPSocketRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'UDPSocket', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::UDPSocket_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UDPSocket_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UDPSocket_Base::MessageOrdinals::AllowAddressReuse: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_AllowAddressReuse_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Bind: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_Bind_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Connect: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_Connect_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetSendBufferSize: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_SetSendBufferSize_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetReceiveBufferSize: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_SetReceiveBufferSize_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::NegotiateMaxPendingSendRequests: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::ReceiveMore: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_ReceiveMore_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SendTo: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocket_SendTo_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'UDPSocket'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError UDPSocketResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'UDPSocket', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::UDPSocket_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UDPSocket_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UDPSocket_Base::MessageOrdinals::AllowAddressReuse: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::UDPSocket_AllowAddressReuse_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Bind: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::UDPSocket_Bind_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Connect: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::UDPSocket_Connect_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetSendBufferSize: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::UDPSocket_SetSendBufferSize_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetReceiveBufferSize: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::NegotiateMaxPendingSendRequests: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SendTo: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::UDPSocket_SendTo_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'UDPSocket',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'UDPSocket'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError UDPSocketReceiverRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'UDPSocketReceiver', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::UDPSocketReceiver_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UDPSocketReceiver_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UDPSocketReceiver_Base::MessageOrdinals::OnReceived: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'UDPSocketReceiver', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::UDPSocketReceiver_OnReceived_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'UDPSocketReceiver', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'UDPSocketReceiver'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::UDPSocket_Base::Version_;

// Constants

// Enums
const uint32_t internal::UDPSocketReceiver_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
UDPSocket_AllowAddressReuse_ParamsPtr UDPSocket_AllowAddressReuse_Params::New() {
  UDPSocket_AllowAddressReuse_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_AllowAddressReuse_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_AllowAddressReuse_Params::UDPSocket_AllowAddressReuse_Params() {
}

UDPSocket_AllowAddressReuse_Params::~UDPSocket_AllowAddressReuse_Params() {
}


UDPSocket_AllowAddressReuse_ParamsPtr UDPSocket_AllowAddressReuse_Params::Clone() const {
  UDPSocket_AllowAddressReuse_ParamsPtr rv(New());
  return rv;
}


bool UDPSocket_AllowAddressReuse_Params::Equals(const UDPSocket_AllowAddressReuse_Params& other) const {
  return true;
}


size_t UDPSocket_AllowAddressReuse_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_AllowAddressReuse_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_AllowAddressReuse_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_AllowAddressReuse_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_AllowAddressReuse_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_AllowAddressReuse_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_AllowAddressReuse_Params_Data* input =
      static_cast<internal::UDPSocket_AllowAddressReuse_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_AllowAddressReuse_Params& input) {
  size_t size = sizeof(internal::UDPSocket_AllowAddressReuse_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_AllowAddressReuse_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_AllowAddressReuse_Params_Data** output) {
  if (input) {
    internal::UDPSocket_AllowAddressReuse_Params_Data* result =
        internal::UDPSocket_AllowAddressReuse_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_AllowAddressReuse_Params_Data* input,
                  UDPSocket_AllowAddressReuse_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
UDPSocket_AllowAddressReuse_ResponseParamsPtr UDPSocket_AllowAddressReuse_ResponseParams::New() {
  UDPSocket_AllowAddressReuse_ResponseParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_AllowAddressReuse_ResponseParams>::Initialize(&rv);
  return rv;
}

UDPSocket_AllowAddressReuse_ResponseParams::UDPSocket_AllowAddressReuse_ResponseParams()
    : result() {
}

UDPSocket_AllowAddressReuse_ResponseParams::~UDPSocket_AllowAddressReuse_ResponseParams() {
}


UDPSocket_AllowAddressReuse_ResponseParamsPtr UDPSocket_AllowAddressReuse_ResponseParams::Clone() const {
  UDPSocket_AllowAddressReuse_ResponseParamsPtr rv(New());
  rv->result = result.Clone();
  return rv;
}


bool UDPSocket_AllowAddressReuse_ResponseParams::Equals(const UDPSocket_AllowAddressReuse_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  return true;
}


size_t UDPSocket_AllowAddressReuse_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_AllowAddressReuse_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_AllowAddressReuse_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_AllowAddressReuse_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_AllowAddressReuse_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_AllowAddressReuse_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_AllowAddressReuse_ResponseParams_Data* input =
      static_cast<internal::UDPSocket_AllowAddressReuse_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_AllowAddressReuse_ResponseParams& input) {
  size_t size = sizeof(internal::UDPSocket_AllowAddressReuse_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_AllowAddressReuse_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_AllowAddressReuse_ResponseParams_Data** output) {
  if (input) {
    internal::UDPSocket_AllowAddressReuse_ResponseParams_Data* result =
        internal::UDPSocket_AllowAddressReuse_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket_AllowAddressReuse_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_AllowAddressReuse_ResponseParams_Data* input,
                  UDPSocket_AllowAddressReuse_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
    } while (false);
  }
}



// static
UDPSocket_Bind_ParamsPtr UDPSocket_Bind_Params::New() {
  UDPSocket_Bind_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_Bind_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_Bind_Params::UDPSocket_Bind_Params()
    : addr() {
}

UDPSocket_Bind_Params::~UDPSocket_Bind_Params() {
}


UDPSocket_Bind_ParamsPtr UDPSocket_Bind_Params::Clone() const {
  UDPSocket_Bind_ParamsPtr rv(New());
  rv->addr = addr.Clone();
  return rv;
}


bool UDPSocket_Bind_Params::Equals(const UDPSocket_Bind_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->addr, other.addr))
    return false;
  return true;
}


size_t UDPSocket_Bind_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_Bind_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_Bind_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_Bind_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_Bind_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_Bind_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_Bind_Params_Data* input =
      static_cast<internal::UDPSocket_Bind_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_Bind_Params& input) {
  size_t size = sizeof(internal::UDPSocket_Bind_Params_Data);
  size += input.addr.is_null()
              ? 0
              : GetSerializedSize_(*input.addr);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_Bind_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_Bind_Params_Data** output) {
  if (input) {
    internal::UDPSocket_Bind_Params_Data* result =
        internal::UDPSocket_Bind_Params_Data::New(buf);
    {auto retval =Serialize_(input->addr.get(),
                 buf,
                 &result->addr.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->addr.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null addr in UDPSocket_Bind_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_Bind_Params_Data* input,
                  UDPSocket_Bind_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->addr.ptr) {
        result->addr = mojo::NetAddress::New();
        Deserialize_(input->addr.ptr, result->addr.get());
      }
    } while (false);
  }
}


// static
UDPSocket_Bind_ResponseParamsPtr UDPSocket_Bind_ResponseParams::New() {
  UDPSocket_Bind_ResponseParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_Bind_ResponseParams>::Initialize(&rv);
  return rv;
}

UDPSocket_Bind_ResponseParams::UDPSocket_Bind_ResponseParams()
    : result(),
      bound_addr(),
      receiver() {
}

UDPSocket_Bind_ResponseParams::~UDPSocket_Bind_ResponseParams() {
}



bool UDPSocket_Bind_ResponseParams::Equals(const UDPSocket_Bind_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->bound_addr, other.bound_addr))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<UDPSocketReceiver>>::Equals(this->receiver, other.receiver))
    return false;
  return true;
}


size_t UDPSocket_Bind_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_Bind_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_Bind_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_Bind_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_Bind_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_Bind_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_Bind_ResponseParams_Data* input =
      static_cast<internal::UDPSocket_Bind_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_Bind_ResponseParams& input) {
  size_t size = sizeof(internal::UDPSocket_Bind_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  size += input.bound_addr.is_null()
              ? 0
              : GetSerializedSize_(*input.bound_addr);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_Bind_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_Bind_ResponseParams_Data** output) {
  if (input) {
    internal::UDPSocket_Bind_ResponseParams_Data* result =
        internal::UDPSocket_Bind_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket_Bind_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->bound_addr.get(),
                 buf,
                 &result->bound_addr.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    result->receiver = input->receiver.PassMessagePipe().release();
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_Bind_ResponseParams_Data* input,
                  UDPSocket_Bind_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
      if (input->bound_addr.ptr) {
        result->bound_addr = mojo::NetAddress::New();
        Deserialize_(input->bound_addr.ptr, result->bound_addr.get());
      }
      result->receiver.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->receiver)));
    } while (false);
  }
}



// static
UDPSocket_Connect_ParamsPtr UDPSocket_Connect_Params::New() {
  UDPSocket_Connect_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_Connect_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_Connect_Params::UDPSocket_Connect_Params()
    : remote_addr() {
}

UDPSocket_Connect_Params::~UDPSocket_Connect_Params() {
}


UDPSocket_Connect_ParamsPtr UDPSocket_Connect_Params::Clone() const {
  UDPSocket_Connect_ParamsPtr rv(New());
  rv->remote_addr = remote_addr.Clone();
  return rv;
}


bool UDPSocket_Connect_Params::Equals(const UDPSocket_Connect_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->remote_addr, other.remote_addr))
    return false;
  return true;
}


size_t UDPSocket_Connect_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_Connect_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_Connect_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_Connect_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_Connect_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_Connect_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_Connect_Params_Data* input =
      static_cast<internal::UDPSocket_Connect_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_Connect_Params& input) {
  size_t size = sizeof(internal::UDPSocket_Connect_Params_Data);
  size += input.remote_addr.is_null()
              ? 0
              : GetSerializedSize_(*input.remote_addr);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_Connect_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_Connect_Params_Data** output) {
  if (input) {
    internal::UDPSocket_Connect_Params_Data* result =
        internal::UDPSocket_Connect_Params_Data::New(buf);
    {auto retval =Serialize_(input->remote_addr.get(),
                 buf,
                 &result->remote_addr.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->remote_addr.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null remote_addr in UDPSocket_Connect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_Connect_Params_Data* input,
                  UDPSocket_Connect_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->remote_addr.ptr) {
        result->remote_addr = mojo::NetAddress::New();
        Deserialize_(input->remote_addr.ptr, result->remote_addr.get());
      }
    } while (false);
  }
}


// static
UDPSocket_Connect_ResponseParamsPtr UDPSocket_Connect_ResponseParams::New() {
  UDPSocket_Connect_ResponseParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_Connect_ResponseParams>::Initialize(&rv);
  return rv;
}

UDPSocket_Connect_ResponseParams::UDPSocket_Connect_ResponseParams()
    : result(),
      local_addr(),
      receiver() {
}

UDPSocket_Connect_ResponseParams::~UDPSocket_Connect_ResponseParams() {
}



bool UDPSocket_Connect_ResponseParams::Equals(const UDPSocket_Connect_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->local_addr, other.local_addr))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<UDPSocketReceiver>>::Equals(this->receiver, other.receiver))
    return false;
  return true;
}


size_t UDPSocket_Connect_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_Connect_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_Connect_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_Connect_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_Connect_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_Connect_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_Connect_ResponseParams_Data* input =
      static_cast<internal::UDPSocket_Connect_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_Connect_ResponseParams& input) {
  size_t size = sizeof(internal::UDPSocket_Connect_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  size += input.local_addr.is_null()
              ? 0
              : GetSerializedSize_(*input.local_addr);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_Connect_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_Connect_ResponseParams_Data** output) {
  if (input) {
    internal::UDPSocket_Connect_ResponseParams_Data* result =
        internal::UDPSocket_Connect_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket_Connect_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->local_addr.get(),
                 buf,
                 &result->local_addr.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    result->receiver = input->receiver.PassMessagePipe().release();
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_Connect_ResponseParams_Data* input,
                  UDPSocket_Connect_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
      if (input->local_addr.ptr) {
        result->local_addr = mojo::NetAddress::New();
        Deserialize_(input->local_addr.ptr, result->local_addr.get());
      }
      result->receiver.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->receiver)));
    } while (false);
  }
}



// static
UDPSocket_SetSendBufferSize_ParamsPtr UDPSocket_SetSendBufferSize_Params::New() {
  UDPSocket_SetSendBufferSize_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_SetSendBufferSize_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_SetSendBufferSize_Params::UDPSocket_SetSendBufferSize_Params()
    : size() {
}

UDPSocket_SetSendBufferSize_Params::~UDPSocket_SetSendBufferSize_Params() {
}


UDPSocket_SetSendBufferSize_ParamsPtr UDPSocket_SetSendBufferSize_Params::Clone() const {
  UDPSocket_SetSendBufferSize_ParamsPtr rv(New());
  rv->size = size;
  return rv;
}


bool UDPSocket_SetSendBufferSize_Params::Equals(const UDPSocket_SetSendBufferSize_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->size, other.size))
    return false;
  return true;
}


size_t UDPSocket_SetSendBufferSize_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_SetSendBufferSize_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_SetSendBufferSize_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_SetSendBufferSize_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_SetSendBufferSize_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_SetSendBufferSize_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_SetSendBufferSize_Params_Data* input =
      static_cast<internal::UDPSocket_SetSendBufferSize_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_SetSendBufferSize_Params& input) {
  size_t size = sizeof(internal::UDPSocket_SetSendBufferSize_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_SetSendBufferSize_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_SetSendBufferSize_Params_Data** output) {
  if (input) {
    internal::UDPSocket_SetSendBufferSize_Params_Data* result =
        internal::UDPSocket_SetSendBufferSize_Params_Data::New(buf);
    result->size = input->size;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_SetSendBufferSize_Params_Data* input,
                  UDPSocket_SetSendBufferSize_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->size = input->size;
    } while (false);
  }
}


// static
UDPSocket_SetSendBufferSize_ResponseParamsPtr UDPSocket_SetSendBufferSize_ResponseParams::New() {
  UDPSocket_SetSendBufferSize_ResponseParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_SetSendBufferSize_ResponseParams>::Initialize(&rv);
  return rv;
}

UDPSocket_SetSendBufferSize_ResponseParams::UDPSocket_SetSendBufferSize_ResponseParams()
    : result() {
}

UDPSocket_SetSendBufferSize_ResponseParams::~UDPSocket_SetSendBufferSize_ResponseParams() {
}


UDPSocket_SetSendBufferSize_ResponseParamsPtr UDPSocket_SetSendBufferSize_ResponseParams::Clone() const {
  UDPSocket_SetSendBufferSize_ResponseParamsPtr rv(New());
  rv->result = result.Clone();
  return rv;
}


bool UDPSocket_SetSendBufferSize_ResponseParams::Equals(const UDPSocket_SetSendBufferSize_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  return true;
}


size_t UDPSocket_SetSendBufferSize_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_SetSendBufferSize_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_SetSendBufferSize_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_SetSendBufferSize_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_SetSendBufferSize_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_SetSendBufferSize_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_SetSendBufferSize_ResponseParams_Data* input =
      static_cast<internal::UDPSocket_SetSendBufferSize_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_SetSendBufferSize_ResponseParams& input) {
  size_t size = sizeof(internal::UDPSocket_SetSendBufferSize_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_SetSendBufferSize_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_SetSendBufferSize_ResponseParams_Data** output) {
  if (input) {
    internal::UDPSocket_SetSendBufferSize_ResponseParams_Data* result =
        internal::UDPSocket_SetSendBufferSize_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket_SetSendBufferSize_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_SetSendBufferSize_ResponseParams_Data* input,
                  UDPSocket_SetSendBufferSize_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
    } while (false);
  }
}



// static
UDPSocket_SetReceiveBufferSize_ParamsPtr UDPSocket_SetReceiveBufferSize_Params::New() {
  UDPSocket_SetReceiveBufferSize_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_SetReceiveBufferSize_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_SetReceiveBufferSize_Params::UDPSocket_SetReceiveBufferSize_Params()
    : size() {
}

UDPSocket_SetReceiveBufferSize_Params::~UDPSocket_SetReceiveBufferSize_Params() {
}


UDPSocket_SetReceiveBufferSize_ParamsPtr UDPSocket_SetReceiveBufferSize_Params::Clone() const {
  UDPSocket_SetReceiveBufferSize_ParamsPtr rv(New());
  rv->size = size;
  return rv;
}


bool UDPSocket_SetReceiveBufferSize_Params::Equals(const UDPSocket_SetReceiveBufferSize_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->size, other.size))
    return false;
  return true;
}


size_t UDPSocket_SetReceiveBufferSize_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_SetReceiveBufferSize_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_SetReceiveBufferSize_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_SetReceiveBufferSize_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_SetReceiveBufferSize_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_SetReceiveBufferSize_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_SetReceiveBufferSize_Params_Data* input =
      static_cast<internal::UDPSocket_SetReceiveBufferSize_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_SetReceiveBufferSize_Params& input) {
  size_t size = sizeof(internal::UDPSocket_SetReceiveBufferSize_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_SetReceiveBufferSize_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_SetReceiveBufferSize_Params_Data** output) {
  if (input) {
    internal::UDPSocket_SetReceiveBufferSize_Params_Data* result =
        internal::UDPSocket_SetReceiveBufferSize_Params_Data::New(buf);
    result->size = input->size;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_SetReceiveBufferSize_Params_Data* input,
                  UDPSocket_SetReceiveBufferSize_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->size = input->size;
    } while (false);
  }
}


// static
UDPSocket_SetReceiveBufferSize_ResponseParamsPtr UDPSocket_SetReceiveBufferSize_ResponseParams::New() {
  UDPSocket_SetReceiveBufferSize_ResponseParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_SetReceiveBufferSize_ResponseParams>::Initialize(&rv);
  return rv;
}

UDPSocket_SetReceiveBufferSize_ResponseParams::UDPSocket_SetReceiveBufferSize_ResponseParams()
    : result() {
}

UDPSocket_SetReceiveBufferSize_ResponseParams::~UDPSocket_SetReceiveBufferSize_ResponseParams() {
}


UDPSocket_SetReceiveBufferSize_ResponseParamsPtr UDPSocket_SetReceiveBufferSize_ResponseParams::Clone() const {
  UDPSocket_SetReceiveBufferSize_ResponseParamsPtr rv(New());
  rv->result = result.Clone();
  return rv;
}


bool UDPSocket_SetReceiveBufferSize_ResponseParams::Equals(const UDPSocket_SetReceiveBufferSize_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  return true;
}


size_t UDPSocket_SetReceiveBufferSize_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_SetReceiveBufferSize_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_SetReceiveBufferSize_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_SetReceiveBufferSize_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data* input =
      static_cast<internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_SetReceiveBufferSize_ResponseParams& input) {
  size_t size = sizeof(internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_SetReceiveBufferSize_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data** output) {
  if (input) {
    internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data* result =
        internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket_SetReceiveBufferSize_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data* input,
                  UDPSocket_SetReceiveBufferSize_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
    } while (false);
  }
}



// static
UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr UDPSocket_NegotiateMaxPendingSendRequests_Params::New() {
  UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_NegotiateMaxPendingSendRequests_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_NegotiateMaxPendingSendRequests_Params::UDPSocket_NegotiateMaxPendingSendRequests_Params()
    : requested_size() {
}

UDPSocket_NegotiateMaxPendingSendRequests_Params::~UDPSocket_NegotiateMaxPendingSendRequests_Params() {
}


UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr UDPSocket_NegotiateMaxPendingSendRequests_Params::Clone() const {
  UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr rv(New());
  rv->requested_size = requested_size;
  return rv;
}


bool UDPSocket_NegotiateMaxPendingSendRequests_Params::Equals(const UDPSocket_NegotiateMaxPendingSendRequests_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->requested_size, other.requested_size))
    return false;
  return true;
}


size_t UDPSocket_NegotiateMaxPendingSendRequests_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_NegotiateMaxPendingSendRequests_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_NegotiateMaxPendingSendRequests_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_NegotiateMaxPendingSendRequests_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* input =
      static_cast<internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_NegotiateMaxPendingSendRequests_Params& input) {
  size_t size = sizeof(internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_NegotiateMaxPendingSendRequests_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data** output) {
  if (input) {
    internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* result =
        internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::New(buf);
    result->requested_size = input->requested_size;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* input,
                  UDPSocket_NegotiateMaxPendingSendRequests_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->requested_size = input->requested_size;
    } while (false);
  }
}


// static
UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::New() {
  UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams>::Initialize(&rv);
  return rv;
}

UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams()
    : actual_size() {
}

UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::~UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams() {
}


UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::Clone() const {
  UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr rv(New());
  rv->actual_size = actual_size;
  return rv;
}


bool UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::Equals(const UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->actual_size, other.actual_size))
    return false;
  return true;
}


size_t UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* input =
      static_cast<internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams& input) {
  size_t size = sizeof(internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data** output) {
  if (input) {
    internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* result =
        internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::New(buf);
    result->actual_size = input->actual_size;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* input,
                  UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->actual_size = input->actual_size;
    } while (false);
  }
}



// static
UDPSocket_ReceiveMore_ParamsPtr UDPSocket_ReceiveMore_Params::New() {
  UDPSocket_ReceiveMore_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_ReceiveMore_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_ReceiveMore_Params::UDPSocket_ReceiveMore_Params()
    : datagram_number() {
}

UDPSocket_ReceiveMore_Params::~UDPSocket_ReceiveMore_Params() {
}


UDPSocket_ReceiveMore_ParamsPtr UDPSocket_ReceiveMore_Params::Clone() const {
  UDPSocket_ReceiveMore_ParamsPtr rv(New());
  rv->datagram_number = datagram_number;
  return rv;
}


bool UDPSocket_ReceiveMore_Params::Equals(const UDPSocket_ReceiveMore_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->datagram_number, other.datagram_number))
    return false;
  return true;
}


size_t UDPSocket_ReceiveMore_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_ReceiveMore_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_ReceiveMore_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_ReceiveMore_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_ReceiveMore_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_ReceiveMore_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_ReceiveMore_Params_Data* input =
      static_cast<internal::UDPSocket_ReceiveMore_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_ReceiveMore_Params& input) {
  size_t size = sizeof(internal::UDPSocket_ReceiveMore_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_ReceiveMore_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_ReceiveMore_Params_Data** output) {
  if (input) {
    internal::UDPSocket_ReceiveMore_Params_Data* result =
        internal::UDPSocket_ReceiveMore_Params_Data::New(buf);
    result->datagram_number = input->datagram_number;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_ReceiveMore_Params_Data* input,
                  UDPSocket_ReceiveMore_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->datagram_number = input->datagram_number;
    } while (false);
  }
}



// static
UDPSocket_SendTo_ParamsPtr UDPSocket_SendTo_Params::New() {
  UDPSocket_SendTo_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_SendTo_Params>::Initialize(&rv);
  return rv;
}

UDPSocket_SendTo_Params::UDPSocket_SendTo_Params()
    : dest_addr(),
      data() {
}

UDPSocket_SendTo_Params::~UDPSocket_SendTo_Params() {
}


UDPSocket_SendTo_ParamsPtr UDPSocket_SendTo_Params::Clone() const {
  UDPSocket_SendTo_ParamsPtr rv(New());
  rv->dest_addr = dest_addr.Clone();
  rv->data = data.Clone();
  return rv;
}


bool UDPSocket_SendTo_Params::Equals(const UDPSocket_SendTo_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->dest_addr, other.dest_addr))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->data, other.data))
    return false;
  return true;
}


size_t UDPSocket_SendTo_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_SendTo_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_SendTo_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_SendTo_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_SendTo_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_SendTo_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_SendTo_Params_Data* input =
      static_cast<internal::UDPSocket_SendTo_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_SendTo_Params& input) {
  size_t size = sizeof(internal::UDPSocket_SendTo_Params_Data);
  size += input.dest_addr.is_null()
              ? 0
              : GetSerializedSize_(*input.dest_addr);
  size += GetSerializedSize_(input.data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_SendTo_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_SendTo_Params_Data** output) {
  if (input) {
    internal::UDPSocket_SendTo_Params_Data* result =
        internal::UDPSocket_SendTo_Params_Data::New(buf);
    {auto retval =Serialize_(input->dest_addr.get(),
                 buf,
                 &result->dest_addr.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams data_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->data, buf, &result->data.ptr,
                            &data_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->data.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null data in UDPSocket_SendTo_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_SendTo_Params_Data* input,
                  UDPSocket_SendTo_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->dest_addr.ptr) {
        result->dest_addr = mojo::NetAddress::New();
        Deserialize_(input->dest_addr.ptr, result->dest_addr.get());
      }
      Deserialize_(input->data.ptr, &result->data);
    } while (false);
  }
}


// static
UDPSocket_SendTo_ResponseParamsPtr UDPSocket_SendTo_ResponseParams::New() {
  UDPSocket_SendTo_ResponseParamsPtr rv;
  mojo::internal::StructHelper<UDPSocket_SendTo_ResponseParams>::Initialize(&rv);
  return rv;
}

UDPSocket_SendTo_ResponseParams::UDPSocket_SendTo_ResponseParams()
    : result() {
}

UDPSocket_SendTo_ResponseParams::~UDPSocket_SendTo_ResponseParams() {
}


UDPSocket_SendTo_ResponseParamsPtr UDPSocket_SendTo_ResponseParams::Clone() const {
  UDPSocket_SendTo_ResponseParamsPtr rv(New());
  rv->result = result.Clone();
  return rv;
}


bool UDPSocket_SendTo_ResponseParams::Equals(const UDPSocket_SendTo_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  return true;
}


size_t UDPSocket_SendTo_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocket_SendTo_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocket_SendTo_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocket_SendTo_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocket_SendTo_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocket_SendTo_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocket_SendTo_ResponseParams_Data* input =
      static_cast<internal::UDPSocket_SendTo_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocket_SendTo_ResponseParams& input) {
  size_t size = sizeof(internal::UDPSocket_SendTo_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocket_SendTo_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocket_SendTo_ResponseParams_Data** output) {
  if (input) {
    internal::UDPSocket_SendTo_ResponseParams_Data* result =
        internal::UDPSocket_SendTo_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket_SendTo_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocket_SendTo_ResponseParams_Data* input,
                  UDPSocket_SendTo_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
    } while (false);
  }
}



// static
UDPSocketReceiver_OnReceived_ParamsPtr UDPSocketReceiver_OnReceived_Params::New() {
  UDPSocketReceiver_OnReceived_ParamsPtr rv;
  mojo::internal::StructHelper<UDPSocketReceiver_OnReceived_Params>::Initialize(&rv);
  return rv;
}

UDPSocketReceiver_OnReceived_Params::UDPSocketReceiver_OnReceived_Params()
    : result(),
      src_addr(),
      data() {
}

UDPSocketReceiver_OnReceived_Params::~UDPSocketReceiver_OnReceived_Params() {
}


UDPSocketReceiver_OnReceived_ParamsPtr UDPSocketReceiver_OnReceived_Params::Clone() const {
  UDPSocketReceiver_OnReceived_ParamsPtr rv(New());
  rv->result = result.Clone();
  rv->src_addr = src_addr.Clone();
  rv->data = data.Clone();
  return rv;
}


bool UDPSocketReceiver_OnReceived_Params::Equals(const UDPSocketReceiver_OnReceived_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->src_addr, other.src_addr))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->data, other.data))
    return false;
  return true;
}


size_t UDPSocketReceiver_OnReceived_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool UDPSocketReceiver_OnReceived_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::UDPSocketReceiver_OnReceived_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool UDPSocketReceiver_OnReceived_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::UDPSocketReceiver_OnReceived_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void UDPSocketReceiver_OnReceived_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::UDPSocketReceiver_OnReceived_Params_Data* input =
      static_cast<internal::UDPSocketReceiver_OnReceived_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const UDPSocketReceiver_OnReceived_Params& input) {
  size_t size = sizeof(internal::UDPSocketReceiver_OnReceived_Params_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  size += input.src_addr.is_null()
              ? 0
              : GetSerializedSize_(*input.src_addr);
  size += GetSerializedSize_(input.data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    UDPSocketReceiver_OnReceived_Params* input,
    mojo::internal::Buffer* buf,
    internal::UDPSocketReceiver_OnReceived_Params_Data** output) {
  if (input) {
    internal::UDPSocketReceiver_OnReceived_Params_Data* result =
        internal::UDPSocketReceiver_OnReceived_Params_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocketReceiver_OnReceived_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->src_addr.get(),
                 buf,
                 &result->src_addr.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams data_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->data, buf, &result->data.ptr,
                            &data_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::UDPSocketReceiver_OnReceived_Params_Data* input,
                  UDPSocketReceiver_OnReceived_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
      if (input->src_addr.ptr) {
        result->src_addr = mojo::NetAddress::New();
        Deserialize_(input->src_addr.ptr, result->src_addr.get());
      }
      Deserialize_(input->data.ptr, &result->data);
    } while (false);
  }
}

}  // namespace mojo
