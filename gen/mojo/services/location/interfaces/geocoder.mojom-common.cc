// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/location/interfaces/geocoder.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
LocationType_Data* LocationType_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(LocationType_Data))) LocationType_Data();
}

// static
mojo::internal::ValidationError LocationType_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const LocationType_Data* object = static_cast<const LocationType_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void LocationType_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void LocationType_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

LocationType_Data::LocationType_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Bounds_Data* Bounds_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Bounds_Data))) Bounds_Data();
}

// static
mojo::internal::ValidationError Bounds_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Bounds_Data* object = static_cast<const Bounds_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->northeast.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null northeast field in Bounds struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->northeast.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Location::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->northeast.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->southwest.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null southwest field in Bounds struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->southwest.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Location::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->southwest.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Bounds_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->northeast, handles);
  mojo::internal::Encode(&this->southwest, handles);
}

void Bounds_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->northeast, handles);
  mojo::internal::Decode(&this->southwest, handles);
}

Bounds_Data::Bounds_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ComponentRestrictions_Data* ComponentRestrictions_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ComponentRestrictions_Data))) ComponentRestrictions_Data();
}

// static
mojo::internal::ValidationError ComponentRestrictions_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ComponentRestrictions_Data* object = static_cast<const ComponentRestrictions_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 48 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->administrative_area.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams administrative_area_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->administrative_area.offset),
          bounds_checker, &administrative_area_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->country.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams country_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->country.offset),
          bounds_checker, &country_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->locality.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams locality_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->locality.offset),
          bounds_checker, &locality_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->postal_code.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams postal_code_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->postal_code.offset),
          bounds_checker, &postal_code_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->route.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams route_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->route.offset),
          bounds_checker, &route_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ComponentRestrictions_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->administrative_area, handles);
  mojo::internal::Encode(&this->country, handles);
  mojo::internal::Encode(&this->locality, handles);
  mojo::internal::Encode(&this->postal_code, handles);
  mojo::internal::Encode(&this->route, handles);
}

void ComponentRestrictions_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->administrative_area, handles);
  mojo::internal::Decode(&this->country, handles);
  mojo::internal::Decode(&this->locality, handles);
  mojo::internal::Decode(&this->postal_code, handles);
  mojo::internal::Decode(&this->route, handles);
}

ComponentRestrictions_Data::ComponentRestrictions_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Options_Data* Options_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Options_Data))) Options_Data();
}

// static
mojo::internal::ValidationError Options_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Options_Data* object = static_cast<const Options_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->restrictions.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = ComponentRestrictions::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->restrictions.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->location.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Location::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->location.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->region.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams region_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->region.offset),
          bounds_checker, &region_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Options_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->restrictions, handles);
  mojo::internal::Encode(&this->location, handles);
  mojo::internal::Encode(&this->region, handles);
}

void Options_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->restrictions, handles);
  mojo::internal::Decode(&this->location, handles);
  mojo::internal::Decode(&this->region, handles);
}

Options_Data::Options_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Geometry_Data* Geometry_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Geometry_Data))) Geometry_Data();
}

// static
mojo::internal::ValidationError Geometry_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Geometry_Data* object = static_cast<const Geometry_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->location.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null location field in Geometry struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->location.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Location::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->location.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->location_type.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null location_type field in Geometry struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->location_type.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = LocationType::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->location_type.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->viewport.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null viewport field in Geometry struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->viewport.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Bounds::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->viewport.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->bounds.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Bounds::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->bounds.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Geometry_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->location, handles);
  mojo::internal::Encode(&this->location_type, handles);
  mojo::internal::Encode(&this->viewport, handles);
  mojo::internal::Encode(&this->bounds, handles);
}

void Geometry_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->location, handles);
  mojo::internal::Decode(&this->location_type, handles);
  mojo::internal::Decode(&this->viewport, handles);
  mojo::internal::Decode(&this->bounds, handles);
}

Geometry_Data::Geometry_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Result_Data* Result_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Result_Data))) Result_Data();
}

// static
mojo::internal::ValidationError Result_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Result_Data* object = static_cast<const Result_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->geometry.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null geometry field in Result struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->geometry.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Geometry::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->geometry.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->formatted_address.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null formatted_address field in Result struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->formatted_address.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams formatted_address_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->formatted_address.offset),
          bounds_checker, &formatted_address_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->types.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null types field in Result struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->types.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams types_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));
  auto validate_retval =
      mojo::Array<mojo::String>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->types.offset),
          bounds_checker, &types_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Result_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->geometry, handles);
  mojo::internal::Encode(&this->formatted_address, handles);
  mojo::internal::Encode(&this->types, handles);
}

void Result_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->geometry, handles);
  mojo::internal::Decode(&this->formatted_address, handles);
  mojo::internal::Decode(&this->types, handles);
}

Result_Data::Result_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Status_Data* Status_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Status_Data))) Status_Data();
}

// static
mojo::internal::ValidationError Status_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Status_Data* object = static_cast<const Status_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Status_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Status_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Status_Data::Status_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
Geocoder_AddressToLocation_Params_Data* Geocoder_AddressToLocation_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Geocoder_AddressToLocation_Params_Data))) Geocoder_AddressToLocation_Params_Data();
}

// static
mojo::internal::ValidationError Geocoder_AddressToLocation_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Geocoder_AddressToLocation_Params_Data* object = static_cast<const Geocoder_AddressToLocation_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->address.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null address field in Geocoder_AddressToLocation_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->address.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams address_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->address.offset),
          bounds_checker, &address_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->options.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Options::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->options.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Geocoder_AddressToLocation_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->address, handles);
  mojo::internal::Encode(&this->options, handles);
}

void Geocoder_AddressToLocation_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->address, handles);
  mojo::internal::Decode(&this->options, handles);
}

Geocoder_AddressToLocation_Params_Data::Geocoder_AddressToLocation_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Geocoder_AddressToLocation_ResponseParams_Data* Geocoder_AddressToLocation_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Geocoder_AddressToLocation_ResponseParams_Data))) Geocoder_AddressToLocation_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Geocoder_AddressToLocation_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Geocoder_AddressToLocation_ResponseParams_Data* object = static_cast<const Geocoder_AddressToLocation_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->status.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null status field in Geocoder_AddressToLocation_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->status.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams status_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->status.offset),
          bounds_checker, &status_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->results.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams results_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<ResultPtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->results.offset),
          bounds_checker, &results_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Geocoder_AddressToLocation_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->status, handles);
  mojo::internal::Encode(&this->results, handles);
}

void Geocoder_AddressToLocation_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->status, handles);
  mojo::internal::Decode(&this->results, handles);
}

Geocoder_AddressToLocation_ResponseParams_Data::Geocoder_AddressToLocation_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Geocoder_LocationToAddress_Params_Data* Geocoder_LocationToAddress_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Geocoder_LocationToAddress_Params_Data))) Geocoder_LocationToAddress_Params_Data();
}

// static
mojo::internal::ValidationError Geocoder_LocationToAddress_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Geocoder_LocationToAddress_Params_Data* object = static_cast<const Geocoder_LocationToAddress_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->location.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null location field in Geocoder_LocationToAddress_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->location.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Location::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->location.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->options.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Options::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->options.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Geocoder_LocationToAddress_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->location, handles);
  mojo::internal::Encode(&this->options, handles);
}

void Geocoder_LocationToAddress_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->location, handles);
  mojo::internal::Decode(&this->options, handles);
}

Geocoder_LocationToAddress_Params_Data::Geocoder_LocationToAddress_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Geocoder_LocationToAddress_ResponseParams_Data* Geocoder_LocationToAddress_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Geocoder_LocationToAddress_ResponseParams_Data))) Geocoder_LocationToAddress_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Geocoder_LocationToAddress_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Geocoder_LocationToAddress_ResponseParams_Data* object = static_cast<const Geocoder_LocationToAddress_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->status.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null status field in Geocoder_LocationToAddress_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->status.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams status_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->status.offset),
          bounds_checker, &status_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->results.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams results_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<ResultPtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->results.offset),
          bounds_checker, &results_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Geocoder_LocationToAddress_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->status, handles);
  mojo::internal::Encode(&this->results, handles);
}

void Geocoder_LocationToAddress_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->status, handles);
  mojo::internal::Decode(&this->results, handles);
}

Geocoder_LocationToAddress_ResponseParams_Data::Geocoder_LocationToAddress_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError GeocoderRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'Geocoder', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::Geocoder_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Geocoder_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Geocoder_Base::MessageOrdinals::AddressToLocation: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Geocoder', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Geocoder_AddressToLocation_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Geocoder', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Geocoder_Base::MessageOrdinals::LocationToAddress: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Geocoder', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Geocoder_LocationToAddress_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Geocoder', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'Geocoder'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError GeocoderResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'Geocoder', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Geocoder', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::Geocoder_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Geocoder_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Geocoder_Base::MessageOrdinals::AddressToLocation: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Geocoder_AddressToLocation_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Geocoder',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Geocoder_Base::MessageOrdinals::LocationToAddress: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Geocoder_LocationToAddress_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Geocoder',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'Geocoder'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::Geocoder_Base::Version_;

// Constants

// Enums

// Struct Constants
const char* LocationType::ROOFTOP = "ROOFTOP";
const char* LocationType::RANGE_INTERPOLATED = "RANGE_INTERPOLATED";
const char* LocationType::GEOMETRIC_CENTER = "GEOMETRIC_CENTER";
const char* LocationType::APPROXIMATE = "APPROXIMATE";
const char* Status::OK = "OK";
const char* Status::ZERO_RESULTS = "ZERO_RESULTS";
const char* Status::OVER_QUERY_LIMIT = "OVER_QUERY_LIMIT";
const char* Status::REQUEST_DENIED = "REQUEST_DENIED";
const char* Status::INVALID_REQUEST = "INVALID_REQUEST";

// --- Struct builder definitions ---

// static
LocationTypePtr LocationType::New() {
  LocationTypePtr rv;
  mojo::internal::StructHelper<LocationType>::Initialize(&rv);
  return rv;
}

LocationType::LocationType() {
}

LocationType::~LocationType() {
}


LocationTypePtr LocationType::Clone() const {
  LocationTypePtr rv(New());
  return rv;
}


bool LocationType::Equals(const LocationType& other) const {
  return true;
}


// static
BoundsPtr Bounds::New() {
  BoundsPtr rv;
  mojo::internal::StructHelper<Bounds>::Initialize(&rv);
  return rv;
}

Bounds::Bounds()
    : northeast(),
      southwest() {
}

Bounds::~Bounds() {
}


BoundsPtr Bounds::Clone() const {
  BoundsPtr rv(New());
  rv->northeast = northeast.Clone();
  rv->southwest = southwest.Clone();
  return rv;
}


bool Bounds::Equals(const Bounds& other) const {
  if (!mojo::internal::ValueTraits<mojo::LocationPtr>::Equals(this->northeast, other.northeast))
    return false;
  if (!mojo::internal::ValueTraits<mojo::LocationPtr>::Equals(this->southwest, other.southwest))
    return false;
  return true;
}


// static
ComponentRestrictionsPtr ComponentRestrictions::New() {
  ComponentRestrictionsPtr rv;
  mojo::internal::StructHelper<ComponentRestrictions>::Initialize(&rv);
  return rv;
}

ComponentRestrictions::ComponentRestrictions()
    : administrative_area(),
      country(),
      locality(),
      postal_code(),
      route() {
}

ComponentRestrictions::~ComponentRestrictions() {
}


ComponentRestrictionsPtr ComponentRestrictions::Clone() const {
  ComponentRestrictionsPtr rv(New());
  rv->administrative_area = administrative_area;
  rv->country = country;
  rv->locality = locality;
  rv->postal_code = postal_code;
  rv->route = route;
  return rv;
}


bool ComponentRestrictions::Equals(const ComponentRestrictions& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->administrative_area, other.administrative_area))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->country, other.country))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->locality, other.locality))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->postal_code, other.postal_code))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->route, other.route))
    return false;
  return true;
}


// static
OptionsPtr Options::New() {
  OptionsPtr rv;
  mojo::internal::StructHelper<Options>::Initialize(&rv);
  return rv;
}

Options::Options()
    : restrictions(),
      location(),
      region() {
}

Options::~Options() {
}


OptionsPtr Options::Clone() const {
  OptionsPtr rv(New());
  rv->restrictions = restrictions.Clone();
  rv->location = location.Clone();
  rv->region = region;
  return rv;
}


bool Options::Equals(const Options& other) const {
  if (!mojo::internal::ValueTraits<ComponentRestrictionsPtr>::Equals(this->restrictions, other.restrictions))
    return false;
  if (!mojo::internal::ValueTraits<mojo::LocationPtr>::Equals(this->location, other.location))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->region, other.region))
    return false;
  return true;
}


// static
GeometryPtr Geometry::New() {
  GeometryPtr rv;
  mojo::internal::StructHelper<Geometry>::Initialize(&rv);
  return rv;
}

Geometry::Geometry()
    : location(),
      location_type(),
      viewport(),
      bounds() {
}

Geometry::~Geometry() {
}


GeometryPtr Geometry::Clone() const {
  GeometryPtr rv(New());
  rv->location = location.Clone();
  rv->location_type = location_type.Clone();
  rv->viewport = viewport.Clone();
  rv->bounds = bounds.Clone();
  return rv;
}


bool Geometry::Equals(const Geometry& other) const {
  if (!mojo::internal::ValueTraits<mojo::LocationPtr>::Equals(this->location, other.location))
    return false;
  if (!mojo::internal::ValueTraits<LocationTypePtr>::Equals(this->location_type, other.location_type))
    return false;
  if (!mojo::internal::ValueTraits<BoundsPtr>::Equals(this->viewport, other.viewport))
    return false;
  if (!mojo::internal::ValueTraits<BoundsPtr>::Equals(this->bounds, other.bounds))
    return false;
  return true;
}


// static
ResultPtr Result::New() {
  ResultPtr rv;
  mojo::internal::StructHelper<Result>::Initialize(&rv);
  return rv;
}

Result::Result()
    : partial_match(),
      geometry(),
      formatted_address(),
      types() {
}

Result::~Result() {
}


ResultPtr Result::Clone() const {
  ResultPtr rv(New());
  rv->partial_match = partial_match;
  rv->geometry = geometry.Clone();
  rv->formatted_address = formatted_address;
  rv->types = types.Clone();
  return rv;
}


bool Result::Equals(const Result& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->partial_match, other.partial_match))
    return false;
  if (!mojo::internal::ValueTraits<GeometryPtr>::Equals(this->geometry, other.geometry))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->formatted_address, other.formatted_address))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::String>>::Equals(this->types, other.types))
    return false;
  return true;
}


// static
StatusPtr Status::New() {
  StatusPtr rv;
  mojo::internal::StructHelper<Status>::Initialize(&rv);
  return rv;
}

Status::Status() {
}

Status::~Status() {
}


StatusPtr Status::Clone() const {
  StatusPtr rv(New());
  return rv;
}


bool Status::Equals(const Status& other) const {
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t LocationType::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool LocationType::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::LocationType_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool LocationType::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::LocationType_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void LocationType::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::LocationType_Data* input =
      static_cast<internal::LocationType_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const LocationType& input) {
  size_t size = sizeof(internal::LocationType_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    LocationType* input,
    mojo::internal::Buffer* buf,
    internal::LocationType_Data** output) {
  if (input) {
    internal::LocationType_Data* result =
        internal::LocationType_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::LocationType_Data* input,
                  LocationType* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


size_t Bounds::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Bounds::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Bounds_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Bounds::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Bounds_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Bounds::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Bounds_Data* input =
      static_cast<internal::Bounds_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Bounds& input) {
  size_t size = sizeof(internal::Bounds_Data);
  size += input.northeast.is_null()
              ? 0
              : GetSerializedSize_(*input.northeast);
  size += input.southwest.is_null()
              ? 0
              : GetSerializedSize_(*input.southwest);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Bounds* input,
    mojo::internal::Buffer* buf,
    internal::Bounds_Data** output) {
  if (input) {
    internal::Bounds_Data* result =
        internal::Bounds_Data::New(buf);
    {auto retval =Serialize_(input->northeast.get(),
                 buf,
                 &result->northeast.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->northeast.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null northeast in Bounds struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->southwest.get(),
                 buf,
                 &result->southwest.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->southwest.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null southwest in Bounds struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Bounds_Data* input,
                  Bounds* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->northeast.ptr) {
        result->northeast = mojo::Location::New();
        Deserialize_(input->northeast.ptr, result->northeast.get());
      }
      if (input->southwest.ptr) {
        result->southwest = mojo::Location::New();
        Deserialize_(input->southwest.ptr, result->southwest.get());
      }
    } while (false);
  }
}


size_t ComponentRestrictions::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ComponentRestrictions::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ComponentRestrictions_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ComponentRestrictions::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ComponentRestrictions_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ComponentRestrictions::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ComponentRestrictions_Data* input =
      static_cast<internal::ComponentRestrictions_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ComponentRestrictions& input) {
  size_t size = sizeof(internal::ComponentRestrictions_Data);
  size += GetSerializedSize_(input.administrative_area);
  size += GetSerializedSize_(input.country);
  size += GetSerializedSize_(input.locality);
  size += GetSerializedSize_(input.postal_code);
  size += GetSerializedSize_(input.route);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ComponentRestrictions* input,
    mojo::internal::Buffer* buf,
    internal::ComponentRestrictions_Data** output) {
  if (input) {
    internal::ComponentRestrictions_Data* result =
        internal::ComponentRestrictions_Data::New(buf);
    SerializeString_(input->administrative_area, buf, &result->administrative_area.ptr);
    SerializeString_(input->country, buf, &result->country.ptr);
    SerializeString_(input->locality, buf, &result->locality.ptr);
    SerializeString_(input->postal_code, buf, &result->postal_code.ptr);
    SerializeString_(input->route, buf, &result->route.ptr);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ComponentRestrictions_Data* input,
                  ComponentRestrictions* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->administrative_area.ptr, &result->administrative_area);
      Deserialize_(input->country.ptr, &result->country);
      Deserialize_(input->locality.ptr, &result->locality);
      Deserialize_(input->postal_code.ptr, &result->postal_code);
      Deserialize_(input->route.ptr, &result->route);
    } while (false);
  }
}


size_t Options::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Options::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Options_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Options::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Options_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Options::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Options_Data* input =
      static_cast<internal::Options_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Options& input) {
  size_t size = sizeof(internal::Options_Data);
  size += input.restrictions.is_null()
              ? 0
              : GetSerializedSize_(*input.restrictions);
  size += input.location.is_null()
              ? 0
              : GetSerializedSize_(*input.location);
  size += GetSerializedSize_(input.region);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Options* input,
    mojo::internal::Buffer* buf,
    internal::Options_Data** output) {
  if (input) {
    internal::Options_Data* result =
        internal::Options_Data::New(buf);
    {auto retval =Serialize_(input->restrictions.get(),
                 buf,
                 &result->restrictions.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {auto retval =Serialize_(input->location.get(),
                 buf,
                 &result->location.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    SerializeString_(input->region, buf, &result->region.ptr);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Options_Data* input,
                  Options* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->restrictions.ptr) {
        result->restrictions = ComponentRestrictions::New();
        Deserialize_(input->restrictions.ptr, result->restrictions.get());
      }
      if (input->location.ptr) {
        result->location = mojo::Location::New();
        Deserialize_(input->location.ptr, result->location.get());
      }
      Deserialize_(input->region.ptr, &result->region);
    } while (false);
  }
}


size_t Geometry::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Geometry::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Geometry_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Geometry::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Geometry_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Geometry::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Geometry_Data* input =
      static_cast<internal::Geometry_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Geometry& input) {
  size_t size = sizeof(internal::Geometry_Data);
  size += input.location.is_null()
              ? 0
              : GetSerializedSize_(*input.location);
  size += input.location_type.is_null()
              ? 0
              : GetSerializedSize_(*input.location_type);
  size += input.viewport.is_null()
              ? 0
              : GetSerializedSize_(*input.viewport);
  size += input.bounds.is_null()
              ? 0
              : GetSerializedSize_(*input.bounds);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Geometry* input,
    mojo::internal::Buffer* buf,
    internal::Geometry_Data** output) {
  if (input) {
    internal::Geometry_Data* result =
        internal::Geometry_Data::New(buf);
    {auto retval =Serialize_(input->location.get(),
                 buf,
                 &result->location.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->location.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null location in Geometry struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->location_type.get(),
                 buf,
                 &result->location_type.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->location_type.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null location_type in Geometry struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->viewport.get(),
                 buf,
                 &result->viewport.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->viewport.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null viewport in Geometry struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->bounds.get(),
                 buf,
                 &result->bounds.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Geometry_Data* input,
                  Geometry* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->location.ptr) {
        result->location = mojo::Location::New();
        Deserialize_(input->location.ptr, result->location.get());
      }
      if (input->location_type.ptr) {
        result->location_type = LocationType::New();
        Deserialize_(input->location_type.ptr, result->location_type.get());
      }
      if (input->viewport.ptr) {
        result->viewport = Bounds::New();
        Deserialize_(input->viewport.ptr, result->viewport.get());
      }
      if (input->bounds.ptr) {
        result->bounds = Bounds::New();
        Deserialize_(input->bounds.ptr, result->bounds.get());
      }
    } while (false);
  }
}


size_t Result::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Result::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Result_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Result::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Result_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Result::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Result_Data* input =
      static_cast<internal::Result_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Result& input) {
  size_t size = sizeof(internal::Result_Data);
  size += input.geometry.is_null()
              ? 0
              : GetSerializedSize_(*input.geometry);
  size += GetSerializedSize_(input.formatted_address);
  size += GetSerializedSize_(input.types);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Result* input,
    mojo::internal::Buffer* buf,
    internal::Result_Data** output) {
  if (input) {
    internal::Result_Data* result =
        internal::Result_Data::New(buf);
    result->partial_match = input->partial_match;
    {auto retval =Serialize_(input->geometry.get(),
                 buf,
                 &result->geometry.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->geometry.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null geometry in Result struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    SerializeString_(input->formatted_address, buf, &result->formatted_address.ptr);
    if (!result->formatted_address.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null formatted_address in Result struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams types_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));auto retval =mojo::SerializeArray_(&input->types, buf, &result->types.ptr,
                            &types_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->types.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null types in Result struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Result_Data* input,
                  Result* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->partial_match = input->partial_match;
      if (input->geometry.ptr) {
        result->geometry = Geometry::New();
        Deserialize_(input->geometry.ptr, result->geometry.get());
      }
      Deserialize_(input->formatted_address.ptr, &result->formatted_address);
      Deserialize_(input->types.ptr, &result->types);
    } while (false);
  }
}


size_t Status::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Status::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Status_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Status::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Status_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Status::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Status_Data* input =
      static_cast<internal::Status_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Status& input) {
  size_t size = sizeof(internal::Status_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Status* input,
    mojo::internal::Buffer* buf,
    internal::Status_Data** output) {
  if (input) {
    internal::Status_Data* result =
        internal::Status_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Status_Data* input,
                  Status* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
Geocoder_AddressToLocation_ParamsPtr Geocoder_AddressToLocation_Params::New() {
  Geocoder_AddressToLocation_ParamsPtr rv;
  mojo::internal::StructHelper<Geocoder_AddressToLocation_Params>::Initialize(&rv);
  return rv;
}

Geocoder_AddressToLocation_Params::Geocoder_AddressToLocation_Params()
    : address(),
      options() {
}

Geocoder_AddressToLocation_Params::~Geocoder_AddressToLocation_Params() {
}


Geocoder_AddressToLocation_ParamsPtr Geocoder_AddressToLocation_Params::Clone() const {
  Geocoder_AddressToLocation_ParamsPtr rv(New());
  rv->address = address;
  rv->options = options.Clone();
  return rv;
}


bool Geocoder_AddressToLocation_Params::Equals(const Geocoder_AddressToLocation_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->address, other.address))
    return false;
  if (!mojo::internal::ValueTraits<OptionsPtr>::Equals(this->options, other.options))
    return false;
  return true;
}


size_t Geocoder_AddressToLocation_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Geocoder_AddressToLocation_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Geocoder_AddressToLocation_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Geocoder_AddressToLocation_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Geocoder_AddressToLocation_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Geocoder_AddressToLocation_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Geocoder_AddressToLocation_Params_Data* input =
      static_cast<internal::Geocoder_AddressToLocation_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Geocoder_AddressToLocation_Params& input) {
  size_t size = sizeof(internal::Geocoder_AddressToLocation_Params_Data);
  size += GetSerializedSize_(input.address);
  size += input.options.is_null()
              ? 0
              : GetSerializedSize_(*input.options);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Geocoder_AddressToLocation_Params* input,
    mojo::internal::Buffer* buf,
    internal::Geocoder_AddressToLocation_Params_Data** output) {
  if (input) {
    internal::Geocoder_AddressToLocation_Params_Data* result =
        internal::Geocoder_AddressToLocation_Params_Data::New(buf);
    SerializeString_(input->address, buf, &result->address.ptr);
    if (!result->address.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null address in Geocoder_AddressToLocation_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->options.get(),
                 buf,
                 &result->options.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Geocoder_AddressToLocation_Params_Data* input,
                  Geocoder_AddressToLocation_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->address.ptr, &result->address);
      if (input->options.ptr) {
        result->options = Options::New();
        Deserialize_(input->options.ptr, result->options.get());
      }
    } while (false);
  }
}


// static
Geocoder_AddressToLocation_ResponseParamsPtr Geocoder_AddressToLocation_ResponseParams::New() {
  Geocoder_AddressToLocation_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Geocoder_AddressToLocation_ResponseParams>::Initialize(&rv);
  return rv;
}

Geocoder_AddressToLocation_ResponseParams::Geocoder_AddressToLocation_ResponseParams()
    : status(),
      results() {
}

Geocoder_AddressToLocation_ResponseParams::~Geocoder_AddressToLocation_ResponseParams() {
}


Geocoder_AddressToLocation_ResponseParamsPtr Geocoder_AddressToLocation_ResponseParams::Clone() const {
  Geocoder_AddressToLocation_ResponseParamsPtr rv(New());
  rv->status = status;
  rv->results = results.Clone();
  return rv;
}


bool Geocoder_AddressToLocation_ResponseParams::Equals(const Geocoder_AddressToLocation_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->status, other.status))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<ResultPtr>>::Equals(this->results, other.results))
    return false;
  return true;
}


size_t Geocoder_AddressToLocation_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Geocoder_AddressToLocation_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Geocoder_AddressToLocation_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Geocoder_AddressToLocation_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Geocoder_AddressToLocation_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Geocoder_AddressToLocation_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Geocoder_AddressToLocation_ResponseParams_Data* input =
      static_cast<internal::Geocoder_AddressToLocation_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Geocoder_AddressToLocation_ResponseParams& input) {
  size_t size = sizeof(internal::Geocoder_AddressToLocation_ResponseParams_Data);
  size += GetSerializedSize_(input.status);
  size += GetSerializedSize_(input.results);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Geocoder_AddressToLocation_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Geocoder_AddressToLocation_ResponseParams_Data** output) {
  if (input) {
    internal::Geocoder_AddressToLocation_ResponseParams_Data* result =
        internal::Geocoder_AddressToLocation_ResponseParams_Data::New(buf);
    SerializeString_(input->status, buf, &result->status.ptr);
    if (!result->status.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null status in Geocoder_AddressToLocation_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams results_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->results, buf, &result->results.ptr,
                            &results_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Geocoder_AddressToLocation_ResponseParams_Data* input,
                  Geocoder_AddressToLocation_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->status.ptr, &result->status);
      Deserialize_(input->results.ptr, &result->results);
    } while (false);
  }
}



// static
Geocoder_LocationToAddress_ParamsPtr Geocoder_LocationToAddress_Params::New() {
  Geocoder_LocationToAddress_ParamsPtr rv;
  mojo::internal::StructHelper<Geocoder_LocationToAddress_Params>::Initialize(&rv);
  return rv;
}

Geocoder_LocationToAddress_Params::Geocoder_LocationToAddress_Params()
    : location(),
      options() {
}

Geocoder_LocationToAddress_Params::~Geocoder_LocationToAddress_Params() {
}


Geocoder_LocationToAddress_ParamsPtr Geocoder_LocationToAddress_Params::Clone() const {
  Geocoder_LocationToAddress_ParamsPtr rv(New());
  rv->location = location.Clone();
  rv->options = options.Clone();
  return rv;
}


bool Geocoder_LocationToAddress_Params::Equals(const Geocoder_LocationToAddress_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::LocationPtr>::Equals(this->location, other.location))
    return false;
  if (!mojo::internal::ValueTraits<OptionsPtr>::Equals(this->options, other.options))
    return false;
  return true;
}


size_t Geocoder_LocationToAddress_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Geocoder_LocationToAddress_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Geocoder_LocationToAddress_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Geocoder_LocationToAddress_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Geocoder_LocationToAddress_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Geocoder_LocationToAddress_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Geocoder_LocationToAddress_Params_Data* input =
      static_cast<internal::Geocoder_LocationToAddress_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Geocoder_LocationToAddress_Params& input) {
  size_t size = sizeof(internal::Geocoder_LocationToAddress_Params_Data);
  size += input.location.is_null()
              ? 0
              : GetSerializedSize_(*input.location);
  size += input.options.is_null()
              ? 0
              : GetSerializedSize_(*input.options);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Geocoder_LocationToAddress_Params* input,
    mojo::internal::Buffer* buf,
    internal::Geocoder_LocationToAddress_Params_Data** output) {
  if (input) {
    internal::Geocoder_LocationToAddress_Params_Data* result =
        internal::Geocoder_LocationToAddress_Params_Data::New(buf);
    {auto retval =Serialize_(input->location.get(),
                 buf,
                 &result->location.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->location.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null location in Geocoder_LocationToAddress_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->options.get(),
                 buf,
                 &result->options.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Geocoder_LocationToAddress_Params_Data* input,
                  Geocoder_LocationToAddress_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->location.ptr) {
        result->location = mojo::Location::New();
        Deserialize_(input->location.ptr, result->location.get());
      }
      if (input->options.ptr) {
        result->options = Options::New();
        Deserialize_(input->options.ptr, result->options.get());
      }
    } while (false);
  }
}


// static
Geocoder_LocationToAddress_ResponseParamsPtr Geocoder_LocationToAddress_ResponseParams::New() {
  Geocoder_LocationToAddress_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Geocoder_LocationToAddress_ResponseParams>::Initialize(&rv);
  return rv;
}

Geocoder_LocationToAddress_ResponseParams::Geocoder_LocationToAddress_ResponseParams()
    : status(),
      results() {
}

Geocoder_LocationToAddress_ResponseParams::~Geocoder_LocationToAddress_ResponseParams() {
}


Geocoder_LocationToAddress_ResponseParamsPtr Geocoder_LocationToAddress_ResponseParams::Clone() const {
  Geocoder_LocationToAddress_ResponseParamsPtr rv(New());
  rv->status = status;
  rv->results = results.Clone();
  return rv;
}


bool Geocoder_LocationToAddress_ResponseParams::Equals(const Geocoder_LocationToAddress_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->status, other.status))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<ResultPtr>>::Equals(this->results, other.results))
    return false;
  return true;
}


size_t Geocoder_LocationToAddress_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Geocoder_LocationToAddress_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Geocoder_LocationToAddress_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Geocoder_LocationToAddress_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Geocoder_LocationToAddress_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Geocoder_LocationToAddress_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Geocoder_LocationToAddress_ResponseParams_Data* input =
      static_cast<internal::Geocoder_LocationToAddress_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Geocoder_LocationToAddress_ResponseParams& input) {
  size_t size = sizeof(internal::Geocoder_LocationToAddress_ResponseParams_Data);
  size += GetSerializedSize_(input.status);
  size += GetSerializedSize_(input.results);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Geocoder_LocationToAddress_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Geocoder_LocationToAddress_ResponseParams_Data** output) {
  if (input) {
    internal::Geocoder_LocationToAddress_ResponseParams_Data* result =
        internal::Geocoder_LocationToAddress_ResponseParams_Data::New(buf);
    SerializeString_(input->status, buf, &result->status.ptr);
    if (!result->status.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null status in Geocoder_LocationToAddress_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams results_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->results, buf, &result->results.ptr,
                            &results_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Geocoder_LocationToAddress_ResponseParams_Data* input,
                  Geocoder_LocationToAddress_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->status.ptr, &result->status);
      Deserialize_(input->results.ptr, &result->results);
    } while (false);
  }
}

}  // namespace mojo
