// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/url_loader.mojom-internal.h"
#include "mojo/public/interfaces/network/network_error.mojom-common.h"
#include "mojo/public/interfaces/network/url_request.mojom-common.h"
#include "mojo/public/interfaces/network/url_response.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class URLLoader;
class URLLoaderRequestValidator;
class URLLoaderResponseValidator;
class URLLoader_Synchronous;

// --- Struct Forward Declarations ---
class URLLoaderStatus;

using URLLoaderStatusPtr = mojo::StructPtr<URLLoaderStatus>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class URLLoader_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = URLLoaderRequestValidator;
  using ResponseValidator_ = URLLoaderResponseValidator;
  using Synchronous_ = URLLoader_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Start = 0,
    FollowRedirect = 1,
    QueryStatus = 2,
  };


  virtual ~URLLoader_Base() {}
};

}  // namespace internal

// Async interface declaration

class URLLoaderProxy;
class URLLoaderStub;
class URLLoader_Synchronous;

class URLLoaderRequestValidator;
class URLLoaderResponseValidator;

class URLLoader : public internal::URLLoader_Base {
 public:
  virtual ~URLLoader() override {}

  using Proxy_ = URLLoaderProxy;
  using Stub_ = URLLoaderStub;
  using StartCallback = mojo::Callback<void(mojo::URLResponsePtr)>;
  virtual void Start(mojo::URLRequestPtr request, const StartCallback& callback) = 0;
  using FollowRedirectCallback = mojo::Callback<void(mojo::URLResponsePtr)>;
  virtual void FollowRedirect(const FollowRedirectCallback& callback) = 0;
  using QueryStatusCallback = mojo::Callback<void(URLLoaderStatusPtr)>;
  virtual void QueryStatus(const QueryStatusCallback& callback) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::URLLoaderStatusPtr, true, false> {
  using DataType = mojo::internal::URLLoaderStatus_Data*;
};

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class URLLoaderRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class URLLoaderResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class URLLoaderStatus {
 public:
  using Data_ = internal::URLLoaderStatus_Data;

  static URLLoaderStatusPtr New();

  template <typename U>
  static URLLoaderStatusPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderStatusPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderStatus>::Convert(*this);
  }

  URLLoaderStatus();
  ~URLLoaderStatus();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  URLLoaderStatusPtr Clone() const;
  bool Equals(const URLLoaderStatus& other) const;

  mojo::NetworkErrorPtr error;
  bool is_loading;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const URLLoaderStatus& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderStatus* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderStatus_Data** output);
void Deserialize_(internal::URLLoaderStatus_Data* input,
                  URLLoaderStatus* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class URLLoader_Start_Params;

using URLLoader_Start_ParamsPtr = mojo::StructPtr<URLLoader_Start_Params>;


size_t GetSerializedSize_(const URLLoader_Start_Params& input);
mojo::internal::ValidationError Serialize_(
    URLLoader_Start_Params* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoader_Start_Params_Data** output);
void Deserialize_(internal::URLLoader_Start_Params_Data* input,
                  URLLoader_Start_Params* output);

class URLLoader_Start_Params {
 public:
  using Data_ = internal::URLLoader_Start_Params_Data;

  static URLLoader_Start_ParamsPtr New();

  template <typename U>
  static URLLoader_Start_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoader_Start_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoader_Start_Params>::Convert(*this);
  }

  URLLoader_Start_Params();
  ~URLLoader_Start_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoader_Start_Params& other) const;

  mojo::URLRequestPtr request;
};



class URLLoader_Start_ResponseParams;

using URLLoader_Start_ResponseParamsPtr = mojo::StructPtr<URLLoader_Start_ResponseParams>;


size_t GetSerializedSize_(const URLLoader_Start_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    URLLoader_Start_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoader_Start_ResponseParams_Data** output);
void Deserialize_(internal::URLLoader_Start_ResponseParams_Data* input,
                  URLLoader_Start_ResponseParams* output);

class URLLoader_Start_ResponseParams {
 public:
  using Data_ = internal::URLLoader_Start_ResponseParams_Data;

  static URLLoader_Start_ResponseParamsPtr New();

  template <typename U>
  static URLLoader_Start_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoader_Start_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoader_Start_ResponseParams>::Convert(*this);
  }

  URLLoader_Start_ResponseParams();
  ~URLLoader_Start_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoader_Start_ResponseParams& other) const;

  mojo::URLResponsePtr response;
};



class URLLoader_FollowRedirect_Params;

using URLLoader_FollowRedirect_ParamsPtr = mojo::InlinedStructPtr<URLLoader_FollowRedirect_Params>;


size_t GetSerializedSize_(const URLLoader_FollowRedirect_Params& input);
mojo::internal::ValidationError Serialize_(
    URLLoader_FollowRedirect_Params* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoader_FollowRedirect_Params_Data** output);
void Deserialize_(internal::URLLoader_FollowRedirect_Params_Data* input,
                  URLLoader_FollowRedirect_Params* output);

class URLLoader_FollowRedirect_Params {
 public:
  using Data_ = internal::URLLoader_FollowRedirect_Params_Data;

  static URLLoader_FollowRedirect_ParamsPtr New();

  template <typename U>
  static URLLoader_FollowRedirect_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoader_FollowRedirect_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoader_FollowRedirect_Params>::Convert(*this);
  }

  URLLoader_FollowRedirect_Params();
  ~URLLoader_FollowRedirect_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  URLLoader_FollowRedirect_ParamsPtr Clone() const;
  bool Equals(const URLLoader_FollowRedirect_Params& other) const;

};



class URLLoader_FollowRedirect_ResponseParams;

using URLLoader_FollowRedirect_ResponseParamsPtr = mojo::StructPtr<URLLoader_FollowRedirect_ResponseParams>;


size_t GetSerializedSize_(const URLLoader_FollowRedirect_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    URLLoader_FollowRedirect_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoader_FollowRedirect_ResponseParams_Data** output);
void Deserialize_(internal::URLLoader_FollowRedirect_ResponseParams_Data* input,
                  URLLoader_FollowRedirect_ResponseParams* output);

class URLLoader_FollowRedirect_ResponseParams {
 public:
  using Data_ = internal::URLLoader_FollowRedirect_ResponseParams_Data;

  static URLLoader_FollowRedirect_ResponseParamsPtr New();

  template <typename U>
  static URLLoader_FollowRedirect_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoader_FollowRedirect_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoader_FollowRedirect_ResponseParams>::Convert(*this);
  }

  URLLoader_FollowRedirect_ResponseParams();
  ~URLLoader_FollowRedirect_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoader_FollowRedirect_ResponseParams& other) const;

  mojo::URLResponsePtr response;
};



class URLLoader_QueryStatus_Params;

using URLLoader_QueryStatus_ParamsPtr = mojo::InlinedStructPtr<URLLoader_QueryStatus_Params>;


size_t GetSerializedSize_(const URLLoader_QueryStatus_Params& input);
mojo::internal::ValidationError Serialize_(
    URLLoader_QueryStatus_Params* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoader_QueryStatus_Params_Data** output);
void Deserialize_(internal::URLLoader_QueryStatus_Params_Data* input,
                  URLLoader_QueryStatus_Params* output);

class URLLoader_QueryStatus_Params {
 public:
  using Data_ = internal::URLLoader_QueryStatus_Params_Data;

  static URLLoader_QueryStatus_ParamsPtr New();

  template <typename U>
  static URLLoader_QueryStatus_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoader_QueryStatus_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoader_QueryStatus_Params>::Convert(*this);
  }

  URLLoader_QueryStatus_Params();
  ~URLLoader_QueryStatus_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  URLLoader_QueryStatus_ParamsPtr Clone() const;
  bool Equals(const URLLoader_QueryStatus_Params& other) const;

};



class URLLoader_QueryStatus_ResponseParams;

using URLLoader_QueryStatus_ResponseParamsPtr = mojo::StructPtr<URLLoader_QueryStatus_ResponseParams>;


size_t GetSerializedSize_(const URLLoader_QueryStatus_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    URLLoader_QueryStatus_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoader_QueryStatus_ResponseParams_Data** output);
void Deserialize_(internal::URLLoader_QueryStatus_ResponseParams_Data* input,
                  URLLoader_QueryStatus_ResponseParams* output);

class URLLoader_QueryStatus_ResponseParams {
 public:
  using Data_ = internal::URLLoader_QueryStatus_ResponseParams_Data;

  static URLLoader_QueryStatus_ResponseParamsPtr New();

  template <typename U>
  static URLLoader_QueryStatus_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoader_QueryStatus_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoader_QueryStatus_ResponseParams>::Convert(*this);
  }

  URLLoader_QueryStatus_ResponseParams();
  ~URLLoader_QueryStatus_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  URLLoader_QueryStatus_ResponseParamsPtr Clone() const;
  bool Equals(const URLLoader_QueryStatus_ResponseParams& other) const;

  URLLoaderStatusPtr status;
};


}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_MOJOM_COMMON_H_
