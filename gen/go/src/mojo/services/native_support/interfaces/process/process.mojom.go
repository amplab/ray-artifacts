// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/native_support/interfaces/process.mojom
//

package process

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	types "mojo/services/files/interfaces/types"
	fmt "fmt"
	file "mojo/services/files/interfaces/file"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type Process interface {
	Spawn(inPath []uint8, inArgv *[][]uint8, inEnvp *[][]uint8, inStdinFile *file.File_Pointer, inStdoutFile *file.File_Pointer, inStderrFile *file.File_Pointer, inProcessController ProcessController_Request) (outError types.Error, err error)
	SpawnWithTerminal(inPath []uint8, inArgv *[][]uint8, inEnvp *[][]uint8, inTerminalFile file.File_Pointer, inProcessController ProcessController_Request) (outError types.Error, err error)
}



var process_Name = "native_support::Process"

type Process_Request bindings.InterfaceRequest

func (r *Process_Request) Name() string {
	return process_Name
}


type Process_Pointer bindings.InterfacePointer

func (p *Process_Pointer) Name() string {
	return process_Name
}

type Process_ServiceFactory struct{
	Delegate Process_Factory
}

type Process_Factory interface {
	Create(request Process_Request)
}

func (f *Process_ServiceFactory) Name() string {
	return process_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Process_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Process_ServiceDescription{}
}

func (f *Process_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Process_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForProcess creates a message pipe for use with the
// Process interface with a Process_Request on one end and a Process_Pointer on the other.
func CreateMessagePipeForProcess() (Process_Request, Process_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Process_Request(r), Process_Pointer(p)
}

const process_Spawn_Name uint32 = 0
const process_SpawnWithTerminal_Name uint32 = 1

type Process_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewProcessProxy(p Process_Pointer, waiter bindings.AsyncWaiter) *Process_Proxy {
	return &Process_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Process_Proxy) Close_Proxy() {
	p.router.Close()
}

type process_Spawn_Params struct {
	inPath []uint8
	inArgv *[][]uint8
	inEnvp *[][]uint8
	inStdinFile *file.File_Pointer
	inStdoutFile *file.File_Pointer
	inStderrFile *file.File_Pointer
	inProcessController ProcessController_Request
}


func (s *process_Spawn_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(56, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.inPath)), 8)
	for _, elem0 := range s.inPath {
		if err := encoder.WriteUint8(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if s.inArgv == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.inArgv))), 64)
		for _, elem0 := range (*s.inArgv) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(elem0)), 8)
			for _, elem1 := range elem0 {
				if err := encoder.WriteUint8(elem1); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if s.inEnvp == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.inEnvp))), 64)
		for _, elem0 := range (*s.inEnvp) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(elem0)), 8)
			for _, elem1 := range elem0 {
				if err := encoder.WriteUint8(elem1); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if s.inStdinFile == nil {
		encoder.WriteInvalidInterface()
	} else {
		if err := encoder.WriteInterface((*s.inStdinFile).PassMessagePipe()); err != nil {
			return err
		}
	}
	if s.inStdoutFile == nil {
		encoder.WriteInvalidInterface()
	} else {
		if err := encoder.WriteInterface((*s.inStdoutFile).PassMessagePipe()); err != nil {
			return err
		}
	}
	if s.inStderrFile == nil {
		encoder.WriteInvalidInterface()
	} else {
		if err := encoder.WriteInterface((*s.inStderrFile).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.WriteHandle(s.inProcessController.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var process_Spawn_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{64, 0},
}

func (s *process_Spawn_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(process_Spawn_Params_Versions), func(i int) bool {
		return process_Spawn_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(process_Spawn_Params_Versions) {
		if process_Spawn_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := process_Spawn_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			s.inPath = make([]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadUint8()
				if err != nil {
					return err
				}
				s.inPath[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inArgv = nil
		} else {
			s.inArgv = new([][]uint8)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.inArgv) = make([][]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(8)
					if err != nil {
						return err
					}
					(*s.inArgv)[i0] = make([]uint8, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						value2, err := decoder.ReadUint8()
						if err != nil {
							return err
						}
						(*s.inArgv)[i0][i1] = value2
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inEnvp = nil
		} else {
			s.inEnvp = new([][]uint8)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.inEnvp) = make([][]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(8)
					if err != nil {
						return err
					}
					(*s.inEnvp)[i0] = make([]uint8, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						value2, err := decoder.ReadUint8()
						if err != nil {
							return err
						}
						(*s.inEnvp)[i0][i1] = value2
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inStdinFile = &file.File_Pointer{handleOwner}
		} else {
			s.inStdinFile = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inStdoutFile = &file.File_Pointer{handleOwner}
		} else {
			s.inStdoutFile = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inStderrFile = &file.File_Pointer{handleOwner}
		} else {
			s.inStderrFile = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inProcessController = ProcessController_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type process_Spawn_ResponseParams struct {
	outError types.Error
}


func (s *process_Spawn_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var process_Spawn_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *process_Spawn_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(process_Spawn_ResponseParams_Versions), func(i int) bool {
		return process_Spawn_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(process_Spawn_ResponseParams_Versions) {
		if process_Spawn_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := process_Spawn_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Process_Proxy) Spawn(inPath []uint8, inArgv *[][]uint8, inEnvp *[][]uint8, inStdinFile *file.File_Pointer, inStdoutFile *file.File_Pointer, inStderrFile *file.File_Pointer, inProcessController ProcessController_Request) (outError types.Error, err error) {
	payload := &process_Spawn_Params{
		inPath,
		inArgv,
		inEnvp,
		inStdinFile,
		inStdoutFile,
		inStderrFile,
		inProcessController,
	}
	header := bindings.MessageHeader{
		Type: process_Spawn_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, process_Spawn_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response process_Spawn_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type process_SpawnWithTerminal_Params struct {
	inPath []uint8
	inArgv *[][]uint8
	inEnvp *[][]uint8
	inTerminalFile file.File_Pointer
	inProcessController ProcessController_Request
}


func (s *process_SpawnWithTerminal_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(40, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.inPath)), 8)
	for _, elem0 := range s.inPath {
		if err := encoder.WriteUint8(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if s.inArgv == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.inArgv))), 64)
		for _, elem0 := range (*s.inArgv) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(elem0)), 8)
			for _, elem1 := range elem0 {
				if err := encoder.WriteUint8(elem1); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if s.inEnvp == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.inEnvp))), 64)
		for _, elem0 := range (*s.inEnvp) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(elem0)), 8)
			for _, elem1 := range elem0 {
				if err := encoder.WriteUint8(elem1); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.WriteInterface(s.inTerminalFile.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inProcessController.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var process_SpawnWithTerminal_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{48, 0},
}

func (s *process_SpawnWithTerminal_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(process_SpawnWithTerminal_Params_Versions), func(i int) bool {
		return process_SpawnWithTerminal_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(process_SpawnWithTerminal_Params_Versions) {
		if process_SpawnWithTerminal_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := process_SpawnWithTerminal_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			s.inPath = make([]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadUint8()
				if err != nil {
					return err
				}
				s.inPath[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inArgv = nil
		} else {
			s.inArgv = new([][]uint8)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.inArgv) = make([][]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(8)
					if err != nil {
						return err
					}
					(*s.inArgv)[i0] = make([]uint8, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						value2, err := decoder.ReadUint8()
						if err != nil {
							return err
						}
						(*s.inArgv)[i0][i1] = value2
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inEnvp = nil
		} else {
			s.inEnvp = new([][]uint8)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.inEnvp) = make([][]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(8)
					if err != nil {
						return err
					}
					(*s.inEnvp)[i0] = make([]uint8, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						value2, err := decoder.ReadUint8()
						if err != nil {
							return err
						}
						(*s.inEnvp)[i0][i1] = value2
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inTerminalFile = file.File_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inProcessController = ProcessController_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type process_SpawnWithTerminal_ResponseParams struct {
	outError types.Error
}


func (s *process_SpawnWithTerminal_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var process_SpawnWithTerminal_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *process_SpawnWithTerminal_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(process_SpawnWithTerminal_ResponseParams_Versions), func(i int) bool {
		return process_SpawnWithTerminal_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(process_SpawnWithTerminal_ResponseParams_Versions) {
		if process_SpawnWithTerminal_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := process_SpawnWithTerminal_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Process_Proxy) SpawnWithTerminal(inPath []uint8, inArgv *[][]uint8, inEnvp *[][]uint8, inTerminalFile file.File_Pointer, inProcessController ProcessController_Request) (outError types.Error, err error) {
	payload := &process_SpawnWithTerminal_Params{
		inPath,
		inArgv,
		inEnvp,
		inTerminalFile,
		inProcessController,
	}
	header := bindings.MessageHeader{
		Type: process_SpawnWithTerminal_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, process_SpawnWithTerminal_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response process_SpawnWithTerminal_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type process_Stub struct {
	connector *bindings.Connector
	impl Process
}

func NewProcessStub(r Process_Request, impl Process, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &process_Stub{connector, impl})
}


func (f *Process_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Process_ServiceDescription{}
}


type Process_ServiceDescription struct{}

func (sd *Process_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Process_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Process_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Process_ServiceDescription)(nil)


func (s *process_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case process_Spawn_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request process_Spawn_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response process_Spawn_ResponseParams
		response.outError, err = s.impl.Spawn(request.inPath, request.inArgv, request.inEnvp, request.inStdinFile, request.inStdoutFile, request.inStderrFile, request.inProcessController)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: process_Spawn_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case process_SpawnWithTerminal_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request process_SpawnWithTerminal_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response process_SpawnWithTerminal_ResponseParams
		response.outError, err = s.impl.SpawnWithTerminal(request.inPath, request.inArgv, request.inEnvp, request.inTerminalFile, request.inProcessController)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: process_SpawnWithTerminal_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type ProcessController interface {
	Wait() (outError types.Error, outExitStatus int32, err error)
	Kill(inSignal int32) (outError types.Error, err error)
}




type ProcessController_Request bindings.InterfaceRequest



type ProcessController_Pointer bindings.InterfacePointer


type ProcessController_ServiceFactory struct{
	Delegate ProcessController_Factory
}

type ProcessController_Factory interface {
	Create(request ProcessController_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *ProcessController_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &ProcessController_ServiceDescription{}
}

func (f *ProcessController_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := ProcessController_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForProcessController creates a message pipe for use with the
// ProcessController interface with a ProcessController_Request on one end and a ProcessController_Pointer on the other.
func CreateMessagePipeForProcessController() (ProcessController_Request, ProcessController_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return ProcessController_Request(r), ProcessController_Pointer(p)
}

const processController_Wait_Name uint32 = 0
const processController_Kill_Name uint32 = 1

type ProcessController_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewProcessControllerProxy(p ProcessController_Pointer, waiter bindings.AsyncWaiter) *ProcessController_Proxy {
	return &ProcessController_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *ProcessController_Proxy) Close_Proxy() {
	p.router.Close()
}

type processController_Wait_Params struct {
}


func (s *processController_Wait_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var processController_Wait_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *processController_Wait_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(processController_Wait_Params_Versions), func(i int) bool {
		return processController_Wait_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(processController_Wait_Params_Versions) {
		if processController_Wait_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := processController_Wait_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type processController_Wait_ResponseParams struct {
	outError types.Error
	outExitStatus int32
}


func (s *processController_Wait_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.outExitStatus); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var processController_Wait_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *processController_Wait_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(processController_Wait_ResponseParams_Versions), func(i int) bool {
		return processController_Wait_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(processController_Wait_ResponseParams_Versions) {
		if processController_Wait_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := processController_Wait_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outExitStatus = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ProcessController_Proxy) Wait() (outError types.Error, outExitStatus int32, err error) {
	payload := &processController_Wait_Params{
	}
	header := bindings.MessageHeader{
		Type: processController_Wait_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, processController_Wait_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response processController_Wait_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	outExitStatus = response.outExitStatus
	return
}

type processController_Kill_Params struct {
	inSignal int32
}


func (s *processController_Kill_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(s.inSignal); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var processController_Kill_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *processController_Kill_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(processController_Kill_Params_Versions), func(i int) bool {
		return processController_Kill_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(processController_Kill_Params_Versions) {
		if processController_Kill_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := processController_Kill_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inSignal = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type processController_Kill_ResponseParams struct {
	outError types.Error
}


func (s *processController_Kill_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var processController_Kill_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *processController_Kill_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(processController_Kill_ResponseParams_Versions), func(i int) bool {
		return processController_Kill_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(processController_Kill_ResponseParams_Versions) {
		if processController_Kill_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := processController_Kill_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ProcessController_Proxy) Kill(inSignal int32) (outError types.Error, err error) {
	payload := &processController_Kill_Params{
		inSignal,
	}
	header := bindings.MessageHeader{
		Type: processController_Kill_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, processController_Kill_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response processController_Kill_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type processController_Stub struct {
	connector *bindings.Connector
	impl ProcessController
}

func NewProcessControllerStub(r ProcessController_Request, impl ProcessController, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &processController_Stub{connector, impl})
}


func (f *ProcessController_Request) ServiceDescription() service_describer.ServiceDescription {
	return &ProcessController_ServiceDescription{}
}


type ProcessController_ServiceDescription struct{}

func (sd *ProcessController_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *ProcessController_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *ProcessController_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*ProcessController_ServiceDescription)(nil)


func (s *processController_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case processController_Wait_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request processController_Wait_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response processController_Wait_ResponseParams
		response.outError, 		response.outExitStatus, err = s.impl.Wait()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: processController_Wait_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case processController_Kill_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request processController_Kill_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response processController_Kill_ResponseParams
		response.outError, err = s.impl.Kill(request.inSignal)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: processController_Kill_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

