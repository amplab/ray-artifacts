// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/nfc/interfaces/nfc.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace nfc {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
NfcData_Data* NfcData_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NfcData_Data))) NfcData_Data();
}

// static
mojo::internal::ValidationError NfcData_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NfcData_Data* object = static_cast<const NfcData_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->data.offset),
          bounds_checker, &data_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NfcData_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->data, handles);
}

void NfcData_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->data, handles);
}

NfcData_Data::NfcData_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
NfcTransmission_Cancel_Params_Data* NfcTransmission_Cancel_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NfcTransmission_Cancel_Params_Data))) NfcTransmission_Cancel_Params_Data();
}

// static
mojo::internal::ValidationError NfcTransmission_Cancel_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NfcTransmission_Cancel_Params_Data* object = static_cast<const NfcTransmission_Cancel_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void NfcTransmission_Cancel_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void NfcTransmission_Cancel_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

NfcTransmission_Cancel_Params_Data::NfcTransmission_Cancel_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NfcReceiver_OnReceivedNfcData_Params_Data* NfcReceiver_OnReceivedNfcData_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NfcReceiver_OnReceivedNfcData_Params_Data))) NfcReceiver_OnReceivedNfcData_Params_Data();
}

// static
mojo::internal::ValidationError NfcReceiver_OnReceivedNfcData_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NfcReceiver_OnReceivedNfcData_Params_Data* object = static_cast<const NfcReceiver_OnReceivedNfcData_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->nfc_data.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nfc_data field in NfcReceiver_OnReceivedNfcData_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nfc_data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = NfcData::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nfc_data.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NfcReceiver_OnReceivedNfcData_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->nfc_data, handles);
}

void NfcReceiver_OnReceivedNfcData_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->nfc_data, handles);
}

NfcReceiver_OnReceivedNfcData_Params_Data::NfcReceiver_OnReceivedNfcData_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Nfc_TransmitOnNextConnection_Params_Data* Nfc_TransmitOnNextConnection_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Nfc_TransmitOnNextConnection_Params_Data))) Nfc_TransmitOnNextConnection_Params_Data();
}

// static
mojo::internal::ValidationError Nfc_TransmitOnNextConnection_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Nfc_TransmitOnNextConnection_Params_Data* object = static_cast<const Nfc_TransmitOnNextConnection_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->nfc_data.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nfc_data field in Nfc_TransmitOnNextConnection_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nfc_data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = NfcData::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nfc_data.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle transmission_handle = object->transmission;
  if (!bounds_checker->ClaimHandle(transmission_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Nfc_TransmitOnNextConnection_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->nfc_data, handles);
  mojo::internal::EncodeHandle(&this->transmission, handles);
}

void Nfc_TransmitOnNextConnection_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->nfc_data, handles);
  mojo::internal::DecodeHandle(&this->transmission, handles);
}

Nfc_TransmitOnNextConnection_Params_Data::Nfc_TransmitOnNextConnection_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Nfc_TransmitOnNextConnection_ResponseParams_Data* Nfc_TransmitOnNextConnection_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Nfc_TransmitOnNextConnection_ResponseParams_Data))) Nfc_TransmitOnNextConnection_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Nfc_TransmitOnNextConnection_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Nfc_TransmitOnNextConnection_ResponseParams_Data* object = static_cast<const Nfc_TransmitOnNextConnection_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Nfc_TransmitOnNextConnection_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Nfc_TransmitOnNextConnection_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Nfc_TransmitOnNextConnection_ResponseParams_Data::Nfc_TransmitOnNextConnection_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Nfc_Register_Params_Data* Nfc_Register_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Nfc_Register_Params_Data))) Nfc_Register_Params_Data();
}

// static
mojo::internal::ValidationError Nfc_Register_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Nfc_Register_Params_Data* object = static_cast<const Nfc_Register_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Nfc_Register_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Nfc_Register_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Nfc_Register_Params_Data::Nfc_Register_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Nfc_Unregister_Params_Data* Nfc_Unregister_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Nfc_Unregister_Params_Data))) Nfc_Unregister_Params_Data();
}

// static
mojo::internal::ValidationError Nfc_Unregister_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Nfc_Unregister_Params_Data* object = static_cast<const Nfc_Unregister_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Nfc_Unregister_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Nfc_Unregister_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Nfc_Unregister_Params_Data::Nfc_Unregister_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError NfcTransmissionRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'NfcTransmission', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::NfcTransmission_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NfcTransmission_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NfcTransmission_Base::MessageOrdinals::Cancel: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NfcTransmission', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NfcTransmission_Cancel_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NfcTransmission', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'NfcTransmission'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError NfcReceiverRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'NfcReceiver', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::NfcReceiver_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NfcReceiver_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NfcReceiver_Base::MessageOrdinals::OnReceivedNfcData: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NfcReceiver', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NfcReceiver_OnReceivedNfcData_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NfcReceiver', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'NfcReceiver'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError NfcRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'Nfc', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::Nfc_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Nfc_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Nfc_Base::MessageOrdinals::TransmitOnNextConnection: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Nfc', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Nfc_TransmitOnNextConnection_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Nfc', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Nfc_Base::MessageOrdinals::Register: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Nfc', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Nfc_Register_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Nfc', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Nfc_Base::MessageOrdinals::Unregister: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Nfc', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Nfc_Unregister_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Nfc', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'Nfc'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError NfcResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'Nfc', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Nfc', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::Nfc_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Nfc_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Nfc_Base::MessageOrdinals::TransmitOnNextConnection: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Nfc_TransmitOnNextConnection_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Nfc',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'Nfc'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::NfcTransmission_Base::Version_;

// Constants

// Enums
const char internal::NfcReceiver_Base::Name_[] = "nfc::NfcReceiver";
const uint32_t internal::NfcReceiver_Base::Version_;

// Constants

// Enums
const char internal::Nfc_Base::Name_[] = "nfc::Nfc";
const uint32_t internal::Nfc_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
NfcDataPtr NfcData::New() {
  NfcDataPtr rv;
  mojo::internal::StructHelper<NfcData>::Initialize(&rv);
  return rv;
}

NfcData::NfcData()
    : data() {
}

NfcData::~NfcData() {
}


NfcDataPtr NfcData::Clone() const {
  NfcDataPtr rv(New());
  rv->data = data.Clone();
  return rv;
}


bool NfcData::Equals(const NfcData& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->data, other.data))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t NfcData::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NfcData::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NfcData_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NfcData::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NfcData_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NfcData::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NfcData_Data* input =
      static_cast<internal::NfcData_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NfcData& input) {
  size_t size = sizeof(internal::NfcData_Data);
  size += GetSerializedSize_(input.data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NfcData* input,
    mojo::internal::Buffer* buf,
    internal::NfcData_Data** output) {
  if (input) {
    internal::NfcData_Data* result =
        internal::NfcData_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams data_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->data, buf, &result->data.ptr,
                            &data_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NfcData_Data* input,
                  NfcData* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->data.ptr, &result->data);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
NfcTransmission_Cancel_ParamsPtr NfcTransmission_Cancel_Params::New() {
  NfcTransmission_Cancel_ParamsPtr rv;
  mojo::internal::StructHelper<NfcTransmission_Cancel_Params>::Initialize(&rv);
  return rv;
}

NfcTransmission_Cancel_Params::NfcTransmission_Cancel_Params() {
}

NfcTransmission_Cancel_Params::~NfcTransmission_Cancel_Params() {
}


NfcTransmission_Cancel_ParamsPtr NfcTransmission_Cancel_Params::Clone() const {
  NfcTransmission_Cancel_ParamsPtr rv(New());
  return rv;
}


bool NfcTransmission_Cancel_Params::Equals(const NfcTransmission_Cancel_Params& other) const {
  return true;
}


size_t NfcTransmission_Cancel_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NfcTransmission_Cancel_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NfcTransmission_Cancel_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NfcTransmission_Cancel_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NfcTransmission_Cancel_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NfcTransmission_Cancel_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NfcTransmission_Cancel_Params_Data* input =
      static_cast<internal::NfcTransmission_Cancel_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NfcTransmission_Cancel_Params& input) {
  size_t size = sizeof(internal::NfcTransmission_Cancel_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NfcTransmission_Cancel_Params* input,
    mojo::internal::Buffer* buf,
    internal::NfcTransmission_Cancel_Params_Data** output) {
  if (input) {
    internal::NfcTransmission_Cancel_Params_Data* result =
        internal::NfcTransmission_Cancel_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NfcTransmission_Cancel_Params_Data* input,
                  NfcTransmission_Cancel_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
NfcReceiver_OnReceivedNfcData_ParamsPtr NfcReceiver_OnReceivedNfcData_Params::New() {
  NfcReceiver_OnReceivedNfcData_ParamsPtr rv;
  mojo::internal::StructHelper<NfcReceiver_OnReceivedNfcData_Params>::Initialize(&rv);
  return rv;
}

NfcReceiver_OnReceivedNfcData_Params::NfcReceiver_OnReceivedNfcData_Params()
    : nfc_data() {
}

NfcReceiver_OnReceivedNfcData_Params::~NfcReceiver_OnReceivedNfcData_Params() {
}


NfcReceiver_OnReceivedNfcData_ParamsPtr NfcReceiver_OnReceivedNfcData_Params::Clone() const {
  NfcReceiver_OnReceivedNfcData_ParamsPtr rv(New());
  rv->nfc_data = nfc_data.Clone();
  return rv;
}


bool NfcReceiver_OnReceivedNfcData_Params::Equals(const NfcReceiver_OnReceivedNfcData_Params& other) const {
  if (!mojo::internal::ValueTraits<NfcDataPtr>::Equals(this->nfc_data, other.nfc_data))
    return false;
  return true;
}


size_t NfcReceiver_OnReceivedNfcData_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NfcReceiver_OnReceivedNfcData_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NfcReceiver_OnReceivedNfcData_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NfcReceiver_OnReceivedNfcData_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NfcReceiver_OnReceivedNfcData_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NfcReceiver_OnReceivedNfcData_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NfcReceiver_OnReceivedNfcData_Params_Data* input =
      static_cast<internal::NfcReceiver_OnReceivedNfcData_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NfcReceiver_OnReceivedNfcData_Params& input) {
  size_t size = sizeof(internal::NfcReceiver_OnReceivedNfcData_Params_Data);
  size += input.nfc_data.is_null()
              ? 0
              : GetSerializedSize_(*input.nfc_data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NfcReceiver_OnReceivedNfcData_Params* input,
    mojo::internal::Buffer* buf,
    internal::NfcReceiver_OnReceivedNfcData_Params_Data** output) {
  if (input) {
    internal::NfcReceiver_OnReceivedNfcData_Params_Data* result =
        internal::NfcReceiver_OnReceivedNfcData_Params_Data::New(buf);
    {auto retval =Serialize_(input->nfc_data.get(),
                 buf,
                 &result->nfc_data.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nfc_data.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nfc_data in NfcReceiver_OnReceivedNfcData_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NfcReceiver_OnReceivedNfcData_Params_Data* input,
                  NfcReceiver_OnReceivedNfcData_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->nfc_data.ptr) {
        result->nfc_data = NfcData::New();
        Deserialize_(input->nfc_data.ptr, result->nfc_data.get());
      }
    } while (false);
  }
}



// static
Nfc_TransmitOnNextConnection_ParamsPtr Nfc_TransmitOnNextConnection_Params::New() {
  Nfc_TransmitOnNextConnection_ParamsPtr rv;
  mojo::internal::StructHelper<Nfc_TransmitOnNextConnection_Params>::Initialize(&rv);
  return rv;
}

Nfc_TransmitOnNextConnection_Params::Nfc_TransmitOnNextConnection_Params()
    : nfc_data(),
      transmission() {
}

Nfc_TransmitOnNextConnection_Params::~Nfc_TransmitOnNextConnection_Params() {
}



bool Nfc_TransmitOnNextConnection_Params::Equals(const Nfc_TransmitOnNextConnection_Params& other) const {
  if (!mojo::internal::ValueTraits<NfcDataPtr>::Equals(this->nfc_data, other.nfc_data))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<NfcTransmission>>::Equals(this->transmission, other.transmission))
    return false;
  return true;
}


size_t Nfc_TransmitOnNextConnection_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Nfc_TransmitOnNextConnection_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Nfc_TransmitOnNextConnection_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Nfc_TransmitOnNextConnection_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Nfc_TransmitOnNextConnection_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Nfc_TransmitOnNextConnection_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Nfc_TransmitOnNextConnection_Params_Data* input =
      static_cast<internal::Nfc_TransmitOnNextConnection_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Nfc_TransmitOnNextConnection_Params& input) {
  size_t size = sizeof(internal::Nfc_TransmitOnNextConnection_Params_Data);
  size += input.nfc_data.is_null()
              ? 0
              : GetSerializedSize_(*input.nfc_data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Nfc_TransmitOnNextConnection_Params* input,
    mojo::internal::Buffer* buf,
    internal::Nfc_TransmitOnNextConnection_Params_Data** output) {
  if (input) {
    internal::Nfc_TransmitOnNextConnection_Params_Data* result =
        internal::Nfc_TransmitOnNextConnection_Params_Data::New(buf);
    {auto retval =Serialize_(input->nfc_data.get(),
                 buf,
                 &result->nfc_data.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nfc_data.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nfc_data in Nfc_TransmitOnNextConnection_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->transmission = input->transmission.PassMessagePipe().release();
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Nfc_TransmitOnNextConnection_Params_Data* input,
                  Nfc_TransmitOnNextConnection_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->nfc_data.ptr) {
        result->nfc_data = NfcData::New();
        Deserialize_(input->nfc_data.ptr, result->nfc_data.get());
      }
      result->transmission.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->transmission)));
    } while (false);
  }
}


// static
Nfc_TransmitOnNextConnection_ResponseParamsPtr Nfc_TransmitOnNextConnection_ResponseParams::New() {
  Nfc_TransmitOnNextConnection_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Nfc_TransmitOnNextConnection_ResponseParams>::Initialize(&rv);
  return rv;
}

Nfc_TransmitOnNextConnection_ResponseParams::Nfc_TransmitOnNextConnection_ResponseParams()
    : success() {
}

Nfc_TransmitOnNextConnection_ResponseParams::~Nfc_TransmitOnNextConnection_ResponseParams() {
}


Nfc_TransmitOnNextConnection_ResponseParamsPtr Nfc_TransmitOnNextConnection_ResponseParams::Clone() const {
  Nfc_TransmitOnNextConnection_ResponseParamsPtr rv(New());
  rv->success = success;
  return rv;
}


bool Nfc_TransmitOnNextConnection_ResponseParams::Equals(const Nfc_TransmitOnNextConnection_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->success, other.success))
    return false;
  return true;
}


size_t Nfc_TransmitOnNextConnection_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Nfc_TransmitOnNextConnection_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Nfc_TransmitOnNextConnection_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Nfc_TransmitOnNextConnection_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Nfc_TransmitOnNextConnection_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Nfc_TransmitOnNextConnection_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Nfc_TransmitOnNextConnection_ResponseParams_Data* input =
      static_cast<internal::Nfc_TransmitOnNextConnection_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Nfc_TransmitOnNextConnection_ResponseParams& input) {
  size_t size = sizeof(internal::Nfc_TransmitOnNextConnection_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Nfc_TransmitOnNextConnection_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Nfc_TransmitOnNextConnection_ResponseParams_Data** output) {
  if (input) {
    internal::Nfc_TransmitOnNextConnection_ResponseParams_Data* result =
        internal::Nfc_TransmitOnNextConnection_ResponseParams_Data::New(buf);
    result->success = input->success;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Nfc_TransmitOnNextConnection_ResponseParams_Data* input,
                  Nfc_TransmitOnNextConnection_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->success = input->success;
    } while (false);
  }
}



// static
Nfc_Register_ParamsPtr Nfc_Register_Params::New() {
  Nfc_Register_ParamsPtr rv;
  mojo::internal::StructHelper<Nfc_Register_Params>::Initialize(&rv);
  return rv;
}

Nfc_Register_Params::Nfc_Register_Params() {
}

Nfc_Register_Params::~Nfc_Register_Params() {
}


Nfc_Register_ParamsPtr Nfc_Register_Params::Clone() const {
  Nfc_Register_ParamsPtr rv(New());
  return rv;
}


bool Nfc_Register_Params::Equals(const Nfc_Register_Params& other) const {
  return true;
}


size_t Nfc_Register_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Nfc_Register_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Nfc_Register_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Nfc_Register_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Nfc_Register_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Nfc_Register_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Nfc_Register_Params_Data* input =
      static_cast<internal::Nfc_Register_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Nfc_Register_Params& input) {
  size_t size = sizeof(internal::Nfc_Register_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Nfc_Register_Params* input,
    mojo::internal::Buffer* buf,
    internal::Nfc_Register_Params_Data** output) {
  if (input) {
    internal::Nfc_Register_Params_Data* result =
        internal::Nfc_Register_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Nfc_Register_Params_Data* input,
                  Nfc_Register_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
Nfc_Unregister_ParamsPtr Nfc_Unregister_Params::New() {
  Nfc_Unregister_ParamsPtr rv;
  mojo::internal::StructHelper<Nfc_Unregister_Params>::Initialize(&rv);
  return rv;
}

Nfc_Unregister_Params::Nfc_Unregister_Params() {
}

Nfc_Unregister_Params::~Nfc_Unregister_Params() {
}


Nfc_Unregister_ParamsPtr Nfc_Unregister_Params::Clone() const {
  Nfc_Unregister_ParamsPtr rv(New());
  return rv;
}


bool Nfc_Unregister_Params::Equals(const Nfc_Unregister_Params& other) const {
  return true;
}


size_t Nfc_Unregister_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Nfc_Unregister_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Nfc_Unregister_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Nfc_Unregister_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Nfc_Unregister_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Nfc_Unregister_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Nfc_Unregister_Params_Data* input =
      static_cast<internal::Nfc_Unregister_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Nfc_Unregister_Params& input) {
  size_t size = sizeof(internal::Nfc_Unregister_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Nfc_Unregister_Params* input,
    mojo::internal::Buffer* buf,
    internal::Nfc_Unregister_Params_Data** output) {
  if (input) {
    internal::Nfc_Unregister_Params_Data* result =
        internal::Nfc_Unregister_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Nfc_Unregister_Params_Data* input,
                  Nfc_Unregister_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}

}  // namespace nfc
