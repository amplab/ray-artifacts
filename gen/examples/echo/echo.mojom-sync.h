// NOTE: This file was generated by the Mojo bindings generator.
#ifndef EXAMPLES_ECHO_ECHO_MOJOM_SYNC_H_
#define EXAMPLES_ECHO_ECHO_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "examples/echo/echo.mojom-internal.h"
#include "examples/echo/echo.mojom-common.h"


namespace mojo {
namespace examples {

// --- Synchronous interface declaration ---

class Echo_SynchronousProxy;
class Echo_Synchronous
  : public internal::Echo_Base {
 public:
  virtual ~Echo_Synchronous() override {}
  
  using Proxy_ = Echo_SynchronousProxy;
  virtual bool EchoString(
      const mojo::String& in_value, mojo::String* out_value)= 0;
};

class Echo_SynchronousProxy
    : public Echo_Synchronous {
 public:
  explicit Echo_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool EchoString(const mojo::String& in_value, mojo::String* out_value) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace examples
}  // namespace mojo

#endif  // EXAMPLES_ECHO_ECHO_MOJOM_SYNC_H_
