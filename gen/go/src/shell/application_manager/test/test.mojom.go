// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     shell/application_manager/test.mojom
//

package test

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type TestService interface {
	Test(inTestString string) (err error)
}



var testService_Name = "shell.TestService"

type TestService_Request bindings.InterfaceRequest

func (r *TestService_Request) Name() string {
	return testService_Name
}


type TestService_Pointer bindings.InterfacePointer

func (p *TestService_Pointer) Name() string {
	return testService_Name
}

type TestService_ServiceFactory struct{
	Delegate TestService_Factory
}

type TestService_Factory interface {
	Create(request TestService_Request)
}

func (f *TestService_ServiceFactory) Name() string {
	return testService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestService_ServiceDescription{}
}

func (f *TestService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestService creates a message pipe for use with the
// TestService interface with a TestService_Request on one end and a TestService_Pointer on the other.
func CreateMessagePipeForTestService() (TestService_Request, TestService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestService_Request(r), TestService_Pointer(p)
}

const testService_Test_Name uint32 = 0

type TestService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestServiceProxy(p TestService_Pointer, waiter bindings.AsyncWaiter) *TestService_Proxy {
	return &TestService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestService_Proxy) Close_Proxy() {
	p.router.Close()
}

type testService_Test_Params struct {
	inTestString string
}


func (s *testService_Test_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inTestString); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_Test_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *testService_Test_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_Test_Params_Versions), func(i int) bool {
		return testService_Test_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_Test_Params_Versions) {
		if testService_Test_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_Test_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inTestString = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testService_Test_ResponseParams struct {
}


func (s *testService_Test_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_Test_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testService_Test_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_Test_ResponseParams_Versions), func(i int) bool {
		return testService_Test_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_Test_ResponseParams_Versions) {
		if testService_Test_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_Test_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestService_Proxy) Test(inTestString string) (err error) {
	payload := &testService_Test_Params{
		inTestString,
	}
	header := bindings.MessageHeader{
		Type: testService_Test_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testService_Test_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testService_Test_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testService_Stub struct {
	connector *bindings.Connector
	impl TestService
}

func NewTestServiceStub(r TestService_Request, impl TestService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testService_Stub{connector, impl})
}


func (f *TestService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestService_ServiceDescription{}
}


type TestService_ServiceDescription struct{}

func (sd *TestService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestService_ServiceDescription)(nil)


func (s *testService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testService_Test_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testService_Test_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testService_Test_ResponseParams
		err = s.impl.Test(request.inTestString)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testService_Test_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type TestA interface {
	CallB() (err error)
}



var testA_Name = "shell.TestA"

type TestA_Request bindings.InterfaceRequest

func (r *TestA_Request) Name() string {
	return testA_Name
}


type TestA_Pointer bindings.InterfacePointer

func (p *TestA_Pointer) Name() string {
	return testA_Name
}

type TestA_ServiceFactory struct{
	Delegate TestA_Factory
}

type TestA_Factory interface {
	Create(request TestA_Request)
}

func (f *TestA_ServiceFactory) Name() string {
	return testA_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestA_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestA_ServiceDescription{}
}

func (f *TestA_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestA_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestA creates a message pipe for use with the
// TestA interface with a TestA_Request on one end and a TestA_Pointer on the other.
func CreateMessagePipeForTestA() (TestA_Request, TestA_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestA_Request(r), TestA_Pointer(p)
}

const testA_CallB_Name uint32 = 0

type TestA_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestAProxy(p TestA_Pointer, waiter bindings.AsyncWaiter) *TestA_Proxy {
	return &TestA_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestA_Proxy) Close_Proxy() {
	p.router.Close()
}

type testA_CallB_Params struct {
}


func (s *testA_CallB_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testA_CallB_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testA_CallB_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testA_CallB_Params_Versions), func(i int) bool {
		return testA_CallB_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testA_CallB_Params_Versions) {
		if testA_CallB_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testA_CallB_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestA_Proxy) CallB() (err error) {
	payload := &testA_CallB_Params{
	}
	header := bindings.MessageHeader{
		Type: testA_CallB_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testA_Stub struct {
	connector *bindings.Connector
	impl TestA
}

func NewTestAStub(r TestA_Request, impl TestA, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testA_Stub{connector, impl})
}


func (f *TestA_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestA_ServiceDescription{}
}


type TestA_ServiceDescription struct{}

func (sd *TestA_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestA_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestA_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestA_ServiceDescription)(nil)


func (s *testA_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testA_CallB_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testA_CallB_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CallB()
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type TestB interface {
	B() (err error)
}



var testB_Name = "shell.TestB"

type TestB_Request bindings.InterfaceRequest

func (r *TestB_Request) Name() string {
	return testB_Name
}


type TestB_Pointer bindings.InterfacePointer

func (p *TestB_Pointer) Name() string {
	return testB_Name
}

type TestB_ServiceFactory struct{
	Delegate TestB_Factory
}

type TestB_Factory interface {
	Create(request TestB_Request)
}

func (f *TestB_ServiceFactory) Name() string {
	return testB_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestB_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestB_ServiceDescription{}
}

func (f *TestB_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestB_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestB creates a message pipe for use with the
// TestB interface with a TestB_Request on one end and a TestB_Pointer on the other.
func CreateMessagePipeForTestB() (TestB_Request, TestB_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestB_Request(r), TestB_Pointer(p)
}

const testB_B_Name uint32 = 0

type TestB_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestBProxy(p TestB_Pointer, waiter bindings.AsyncWaiter) *TestB_Proxy {
	return &TestB_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestB_Proxy) Close_Proxy() {
	p.router.Close()
}

type testB_B_Params struct {
}


func (s *testB_B_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testB_B_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testB_B_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testB_B_Params_Versions), func(i int) bool {
		return testB_B_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testB_B_Params_Versions) {
		if testB_B_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testB_B_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testB_B_ResponseParams struct {
}


func (s *testB_B_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testB_B_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testB_B_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testB_B_ResponseParams_Versions), func(i int) bool {
		return testB_B_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testB_B_ResponseParams_Versions) {
		if testB_B_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testB_B_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestB_Proxy) B() (err error) {
	payload := &testB_B_Params{
	}
	header := bindings.MessageHeader{
		Type: testB_B_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testB_B_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testB_B_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testB_Stub struct {
	connector *bindings.Connector
	impl TestB
}

func NewTestBStub(r TestB_Request, impl TestB, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testB_Stub{connector, impl})
}


func (f *TestB_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestB_ServiceDescription{}
}


type TestB_ServiceDescription struct{}

func (sd *TestB_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestB_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestB_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestB_ServiceDescription)(nil)


func (s *testB_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testB_B_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testB_B_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testB_B_ResponseParams
		err = s.impl.B()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testB_B_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type TestC interface {
	C() (err error)
}



var testC_Name = "shell.TestC"

type TestC_Request bindings.InterfaceRequest

func (r *TestC_Request) Name() string {
	return testC_Name
}


type TestC_Pointer bindings.InterfacePointer

func (p *TestC_Pointer) Name() string {
	return testC_Name
}

type TestC_ServiceFactory struct{
	Delegate TestC_Factory
}

type TestC_Factory interface {
	Create(request TestC_Request)
}

func (f *TestC_ServiceFactory) Name() string {
	return testC_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestC_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestC_ServiceDescription{}
}

func (f *TestC_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestC_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestC creates a message pipe for use with the
// TestC interface with a TestC_Request on one end and a TestC_Pointer on the other.
func CreateMessagePipeForTestC() (TestC_Request, TestC_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestC_Request(r), TestC_Pointer(p)
}

const testC_C_Name uint32 = 0

type TestC_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestCProxy(p TestC_Pointer, waiter bindings.AsyncWaiter) *TestC_Proxy {
	return &TestC_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestC_Proxy) Close_Proxy() {
	p.router.Close()
}

type testC_C_Params struct {
}


func (s *testC_C_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testC_C_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testC_C_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testC_C_Params_Versions), func(i int) bool {
		return testC_C_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testC_C_Params_Versions) {
		if testC_C_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testC_C_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testC_C_ResponseParams struct {
}


func (s *testC_C_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testC_C_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testC_C_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testC_C_ResponseParams_Versions), func(i int) bool {
		return testC_C_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testC_C_ResponseParams_Versions) {
		if testC_C_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testC_C_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestC_Proxy) C() (err error) {
	payload := &testC_C_Params{
	}
	header := bindings.MessageHeader{
		Type: testC_C_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testC_C_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testC_C_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testC_Stub struct {
	connector *bindings.Connector
	impl TestC
}

func NewTestCStub(r TestC_Request, impl TestC, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testC_Stub{connector, impl})
}


func (f *TestC_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestC_ServiceDescription{}
}


type TestC_ServiceDescription struct{}

func (sd *TestC_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestC_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestC_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestC_ServiceDescription)(nil)


func (s *testC_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testC_C_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testC_C_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testC_C_ResponseParams
		err = s.impl.C()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testC_C_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

