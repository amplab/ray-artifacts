// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/files/interfaces/file.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {
namespace files {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
File_Close_Params_Data* File_Close_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Close_Params_Data))) File_Close_Params_Data();
}

// static
mojo::internal::ValidationError File_Close_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Close_Params_Data* object = static_cast<const File_Close_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Close_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Close_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Close_Params_Data::File_Close_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Close_ResponseParams_Data* File_Close_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Close_ResponseParams_Data))) File_Close_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Close_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Close_ResponseParams_Data* object = static_cast<const File_Close_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Close_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Close_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Close_ResponseParams_Data::File_Close_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Read_Params_Data* File_Read_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Read_Params_Data))) File_Read_Params_Data();
}

// static
mojo::internal::ValidationError File_Read_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Read_Params_Data* object = static_cast<const File_Read_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Read_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Read_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Read_Params_Data::File_Read_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Read_ResponseParams_Data* File_Read_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Read_ResponseParams_Data))) File_Read_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Read_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Read_ResponseParams_Data* object = static_cast<const File_Read_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->bytes_read.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams bytes_read_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->bytes_read.offset),
          bounds_checker, &bytes_read_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Read_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->bytes_read, handles);
}

void File_Read_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->bytes_read, handles);
}

File_Read_ResponseParams_Data::File_Read_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Write_Params_Data* File_Write_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Write_Params_Data))) File_Write_Params_Data();
}

// static
mojo::internal::ValidationError File_Write_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Write_Params_Data* object = static_cast<const File_Write_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->bytes_to_write.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null bytes_to_write field in File_Write_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->bytes_to_write.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams bytes_to_write_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->bytes_to_write.offset),
          bounds_checker, &bytes_to_write_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Write_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->bytes_to_write, handles);
}

void File_Write_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->bytes_to_write, handles);
}

File_Write_Params_Data::File_Write_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Write_ResponseParams_Data* File_Write_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Write_ResponseParams_Data))) File_Write_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Write_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Write_ResponseParams_Data* object = static_cast<const File_Write_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Write_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Write_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Write_ResponseParams_Data::File_Write_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_ReadToStream_Params_Data* File_ReadToStream_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_ReadToStream_Params_Data))) File_ReadToStream_Params_Data();
}

// static
mojo::internal::ValidationError File_ReadToStream_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_ReadToStream_Params_Data* object = static_cast<const File_ReadToStream_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle source_handle = object->source;
  if (source_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid source field in File_ReadToStream_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(source_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_ReadToStream_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->source, handles);
}

void File_ReadToStream_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->source, handles);
}

File_ReadToStream_Params_Data::File_ReadToStream_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_ReadToStream_ResponseParams_Data* File_ReadToStream_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_ReadToStream_ResponseParams_Data))) File_ReadToStream_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_ReadToStream_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_ReadToStream_ResponseParams_Data* object = static_cast<const File_ReadToStream_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_ReadToStream_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_ReadToStream_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_ReadToStream_ResponseParams_Data::File_ReadToStream_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_WriteFromStream_Params_Data* File_WriteFromStream_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_WriteFromStream_Params_Data))) File_WriteFromStream_Params_Data();
}

// static
mojo::internal::ValidationError File_WriteFromStream_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_WriteFromStream_Params_Data* object = static_cast<const File_WriteFromStream_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle sink_handle = object->sink;
  if (sink_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid sink field in File_WriteFromStream_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(sink_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_WriteFromStream_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->sink, handles);
}

void File_WriteFromStream_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->sink, handles);
}

File_WriteFromStream_Params_Data::File_WriteFromStream_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_WriteFromStream_ResponseParams_Data* File_WriteFromStream_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_WriteFromStream_ResponseParams_Data))) File_WriteFromStream_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_WriteFromStream_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_WriteFromStream_ResponseParams_Data* object = static_cast<const File_WriteFromStream_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_WriteFromStream_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_WriteFromStream_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_WriteFromStream_ResponseParams_Data::File_WriteFromStream_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Tell_Params_Data* File_Tell_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Tell_Params_Data))) File_Tell_Params_Data();
}

// static
mojo::internal::ValidationError File_Tell_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Tell_Params_Data* object = static_cast<const File_Tell_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Tell_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Tell_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Tell_Params_Data::File_Tell_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Tell_ResponseParams_Data* File_Tell_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Tell_ResponseParams_Data))) File_Tell_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Tell_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Tell_ResponseParams_Data* object = static_cast<const File_Tell_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Tell_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Tell_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Tell_ResponseParams_Data::File_Tell_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Seek_Params_Data* File_Seek_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Seek_Params_Data))) File_Seek_Params_Data();
}

// static
mojo::internal::ValidationError File_Seek_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Seek_Params_Data* object = static_cast<const File_Seek_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Seek_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Seek_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Seek_Params_Data::File_Seek_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Seek_ResponseParams_Data* File_Seek_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Seek_ResponseParams_Data))) File_Seek_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Seek_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Seek_ResponseParams_Data* object = static_cast<const File_Seek_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Seek_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Seek_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Seek_ResponseParams_Data::File_Seek_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Stat_Params_Data* File_Stat_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Stat_Params_Data))) File_Stat_Params_Data();
}

// static
mojo::internal::ValidationError File_Stat_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Stat_Params_Data* object = static_cast<const File_Stat_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Stat_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Stat_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Stat_Params_Data::File_Stat_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Stat_ResponseParams_Data* File_Stat_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Stat_ResponseParams_Data))) File_Stat_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Stat_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Stat_ResponseParams_Data* object = static_cast<const File_Stat_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->file_information.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::files::FileInformation::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->file_information.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Stat_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->file_information, handles);
}

void File_Stat_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->file_information, handles);
}

File_Stat_ResponseParams_Data::File_Stat_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Truncate_Params_Data* File_Truncate_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Truncate_Params_Data))) File_Truncate_Params_Data();
}

// static
mojo::internal::ValidationError File_Truncate_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Truncate_Params_Data* object = static_cast<const File_Truncate_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Truncate_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Truncate_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Truncate_Params_Data::File_Truncate_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Truncate_ResponseParams_Data* File_Truncate_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Truncate_ResponseParams_Data))) File_Truncate_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Truncate_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Truncate_ResponseParams_Data* object = static_cast<const File_Truncate_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Truncate_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Truncate_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Truncate_ResponseParams_Data::File_Truncate_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Touch_Params_Data* File_Touch_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Touch_Params_Data))) File_Touch_Params_Data();
}

// static
mojo::internal::ValidationError File_Touch_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Touch_Params_Data* object = static_cast<const File_Touch_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->atime.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::files::TimespecOrNow::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->atime.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->mtime.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::files::TimespecOrNow::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->mtime.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Touch_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->atime, handles);
  mojo::internal::Encode(&this->mtime, handles);
}

void File_Touch_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->atime, handles);
  mojo::internal::Decode(&this->mtime, handles);
}

File_Touch_Params_Data::File_Touch_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Touch_ResponseParams_Data* File_Touch_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Touch_ResponseParams_Data))) File_Touch_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Touch_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Touch_ResponseParams_Data* object = static_cast<const File_Touch_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Touch_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Touch_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Touch_ResponseParams_Data::File_Touch_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Dup_Params_Data* File_Dup_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Dup_Params_Data))) File_Dup_Params_Data();
}

// static
mojo::internal::ValidationError File_Dup_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Dup_Params_Data* object = static_cast<const File_Dup_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle file_handle = object->file;
  if (file_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid file field in File_Dup_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(file_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Dup_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->file, handles);
}

void File_Dup_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->file, handles);
}

File_Dup_Params_Data::File_Dup_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Dup_ResponseParams_Data* File_Dup_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Dup_ResponseParams_Data))) File_Dup_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Dup_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Dup_ResponseParams_Data* object = static_cast<const File_Dup_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Dup_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Dup_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Dup_ResponseParams_Data::File_Dup_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Reopen_Params_Data* File_Reopen_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Reopen_Params_Data))) File_Reopen_Params_Data();
}

// static
mojo::internal::ValidationError File_Reopen_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Reopen_Params_Data* object = static_cast<const File_Reopen_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle file_handle = object->file;
  if (file_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid file field in File_Reopen_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(file_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Reopen_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->file, handles);
}

void File_Reopen_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->file, handles);
}

File_Reopen_Params_Data::File_Reopen_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Reopen_ResponseParams_Data* File_Reopen_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Reopen_ResponseParams_Data))) File_Reopen_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Reopen_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Reopen_ResponseParams_Data* object = static_cast<const File_Reopen_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Reopen_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_Reopen_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_Reopen_ResponseParams_Data::File_Reopen_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_AsBuffer_Params_Data* File_AsBuffer_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_AsBuffer_Params_Data))) File_AsBuffer_Params_Data();
}

// static
mojo::internal::ValidationError File_AsBuffer_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_AsBuffer_Params_Data* object = static_cast<const File_AsBuffer_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void File_AsBuffer_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void File_AsBuffer_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

File_AsBuffer_Params_Data::File_AsBuffer_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_AsBuffer_ResponseParams_Data* File_AsBuffer_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_AsBuffer_ResponseParams_Data))) File_AsBuffer_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_AsBuffer_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_AsBuffer_ResponseParams_Data* object = static_cast<const File_AsBuffer_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle buffer_handle = object->buffer;
  if (!bounds_checker->ClaimHandle(buffer_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_AsBuffer_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->buffer, handles);
}

void File_AsBuffer_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->buffer, handles);
}

File_AsBuffer_ResponseParams_Data::File_AsBuffer_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
File_Ioctl_Params_Data* File_Ioctl_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Ioctl_Params_Data))) File_Ioctl_Params_Data();
}

// static
mojo::internal::ValidationError File_Ioctl_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Ioctl_Params_Data* object = static_cast<const File_Ioctl_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->in_values.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams in_values_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint32_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->in_values.offset),
          bounds_checker, &in_values_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Ioctl_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->in_values, handles);
}

void File_Ioctl_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->in_values, handles);
}

File_Ioctl_Params_Data::File_Ioctl_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
File_Ioctl_ResponseParams_Data* File_Ioctl_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(File_Ioctl_ResponseParams_Data))) File_Ioctl_ResponseParams_Data();
}

// static
mojo::internal::ValidationError File_Ioctl_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const File_Ioctl_ResponseParams_Data* object = static_cast<const File_Ioctl_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->out_values.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams out_values_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint32_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->out_values.offset),
          bounds_checker, &out_values_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void File_Ioctl_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->out_values, handles);
}

void File_Ioctl_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->out_values, handles);
}

File_Ioctl_ResponseParams_Data::File_Ioctl_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError FileRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'File', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::File_Base::MessageOrdinals method_ordinal =
      static_cast<internal::File_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::File_Base::MessageOrdinals::Close: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Close_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Read: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Read_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Write: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Write_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::ReadToStream: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_ReadToStream_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::WriteFromStream: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_WriteFromStream_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Tell: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Tell_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Seek: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Seek_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Stat: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Stat_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Truncate: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Truncate_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Touch: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Touch_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Dup: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Dup_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Reopen: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Reopen_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::AsBuffer: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_AsBuffer_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Ioctl: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'File', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::File_Ioctl_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'File'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError FileResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'File', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::File_Base::MessageOrdinals method_ordinal =
      static_cast<internal::File_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::File_Base::MessageOrdinals::Close: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Close_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Read: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Read_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Write: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Write_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::ReadToStream: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_ReadToStream_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::WriteFromStream: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_WriteFromStream_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Tell: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Tell_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Seek: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Seek_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Stat: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Stat_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Truncate: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Truncate_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Touch: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Touch_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Dup: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Dup_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Reopen: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Reopen_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::AsBuffer: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_AsBuffer_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::File_Base::MessageOrdinals::Ioctl: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::File_Ioctl_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'File',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'File'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::File_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
File_Close_ParamsPtr File_Close_Params::New() {
  File_Close_ParamsPtr rv;
  mojo::internal::StructHelper<File_Close_Params>::Initialize(&rv);
  return rv;
}

File_Close_Params::File_Close_Params() {
}

File_Close_Params::~File_Close_Params() {
}


File_Close_ParamsPtr File_Close_Params::Clone() const {
  File_Close_ParamsPtr rv(New());
  return rv;
}


bool File_Close_Params::Equals(const File_Close_Params& other) const {
  return true;
}


size_t File_Close_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Close_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Close_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Close_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Close_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Close_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Close_Params_Data* input =
      static_cast<internal::File_Close_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Close_Params& input) {
  size_t size = sizeof(internal::File_Close_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Close_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Close_Params_Data** output) {
  if (input) {
    internal::File_Close_Params_Data* result =
        internal::File_Close_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Close_Params_Data* input,
                  File_Close_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
File_Close_ResponseParamsPtr File_Close_ResponseParams::New() {
  File_Close_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Close_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Close_ResponseParams::File_Close_ResponseParams()
    : err() {
}

File_Close_ResponseParams::~File_Close_ResponseParams() {
}


File_Close_ResponseParamsPtr File_Close_ResponseParams::Clone() const {
  File_Close_ResponseParamsPtr rv(New());
  rv->err = err;
  return rv;
}


bool File_Close_ResponseParams::Equals(const File_Close_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->err, other.err))
    return false;
  return true;
}


size_t File_Close_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Close_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Close_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Close_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Close_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Close_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Close_ResponseParams_Data* input =
      static_cast<internal::File_Close_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Close_ResponseParams& input) {
  size_t size = sizeof(internal::File_Close_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Close_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Close_ResponseParams_Data** output) {
  if (input) {
    internal::File_Close_ResponseParams_Data* result =
        internal::File_Close_ResponseParams_Data::New(buf);
    result->err =
      static_cast<int32_t>(input->err);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Close_ResponseParams_Data* input,
                  File_Close_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->err = static_cast<mojo::files::Error>(input->err);
    } while (false);
  }
}



// static
File_Read_ParamsPtr File_Read_Params::New() {
  File_Read_ParamsPtr rv;
  mojo::internal::StructHelper<File_Read_Params>::Initialize(&rv);
  return rv;
}

File_Read_Params::File_Read_Params()
    : num_bytes_to_read(),
      offset(),
      whence() {
}

File_Read_Params::~File_Read_Params() {
}


File_Read_ParamsPtr File_Read_Params::Clone() const {
  File_Read_ParamsPtr rv(New());
  rv->num_bytes_to_read = num_bytes_to_read;
  rv->offset = offset;
  rv->whence = whence;
  return rv;
}


bool File_Read_Params::Equals(const File_Read_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->num_bytes_to_read, other.num_bytes_to_read))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->offset, other.offset))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::Whence>::Equals(this->whence, other.whence))
    return false;
  return true;
}


size_t File_Read_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Read_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Read_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Read_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Read_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Read_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Read_Params_Data* input =
      static_cast<internal::File_Read_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Read_Params& input) {
  size_t size = sizeof(internal::File_Read_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Read_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Read_Params_Data** output) {
  if (input) {
    internal::File_Read_Params_Data* result =
        internal::File_Read_Params_Data::New(buf);
    result->num_bytes_to_read = input->num_bytes_to_read;
    result->offset = input->offset;
    result->whence =
      static_cast<int32_t>(input->whence);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Read_Params_Data* input,
                  File_Read_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->num_bytes_to_read = input->num_bytes_to_read;
      result->offset = input->offset;
      result->whence = static_cast<mojo::files::Whence>(input->whence);
    } while (false);
  }
}


// static
File_Read_ResponseParamsPtr File_Read_ResponseParams::New() {
  File_Read_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Read_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Read_ResponseParams::File_Read_ResponseParams()
    : error(),
      bytes_read() {
}

File_Read_ResponseParams::~File_Read_ResponseParams() {
}


File_Read_ResponseParamsPtr File_Read_ResponseParams::Clone() const {
  File_Read_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->bytes_read = bytes_read.Clone();
  return rv;
}


bool File_Read_ResponseParams::Equals(const File_Read_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->bytes_read, other.bytes_read))
    return false;
  return true;
}


size_t File_Read_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Read_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Read_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Read_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Read_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Read_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Read_ResponseParams_Data* input =
      static_cast<internal::File_Read_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Read_ResponseParams& input) {
  size_t size = sizeof(internal::File_Read_ResponseParams_Data);
  size += GetSerializedSize_(input.bytes_read);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Read_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Read_ResponseParams_Data** output) {
  if (input) {
    internal::File_Read_ResponseParams_Data* result =
        internal::File_Read_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    {
      const mojo::internal::ArrayValidateParams bytes_read_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->bytes_read, buf, &result->bytes_read.ptr,
                            &bytes_read_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Read_ResponseParams_Data* input,
                  File_Read_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      Deserialize_(input->bytes_read.ptr, &result->bytes_read);
    } while (false);
  }
}



// static
File_Write_ParamsPtr File_Write_Params::New() {
  File_Write_ParamsPtr rv;
  mojo::internal::StructHelper<File_Write_Params>::Initialize(&rv);
  return rv;
}

File_Write_Params::File_Write_Params()
    : bytes_to_write(),
      offset(),
      whence() {
}

File_Write_Params::~File_Write_Params() {
}


File_Write_ParamsPtr File_Write_Params::Clone() const {
  File_Write_ParamsPtr rv(New());
  rv->bytes_to_write = bytes_to_write.Clone();
  rv->offset = offset;
  rv->whence = whence;
  return rv;
}


bool File_Write_Params::Equals(const File_Write_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->bytes_to_write, other.bytes_to_write))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->offset, other.offset))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::Whence>::Equals(this->whence, other.whence))
    return false;
  return true;
}


size_t File_Write_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Write_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Write_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Write_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Write_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Write_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Write_Params_Data* input =
      static_cast<internal::File_Write_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Write_Params& input) {
  size_t size = sizeof(internal::File_Write_Params_Data);
  size += GetSerializedSize_(input.bytes_to_write);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Write_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Write_Params_Data** output) {
  if (input) {
    internal::File_Write_Params_Data* result =
        internal::File_Write_Params_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams bytes_to_write_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->bytes_to_write, buf, &result->bytes_to_write.ptr,
                            &bytes_to_write_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->bytes_to_write.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null bytes_to_write in File_Write_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->offset = input->offset;
    result->whence =
      static_cast<int32_t>(input->whence);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Write_Params_Data* input,
                  File_Write_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->bytes_to_write.ptr, &result->bytes_to_write);
      result->offset = input->offset;
      result->whence = static_cast<mojo::files::Whence>(input->whence);
    } while (false);
  }
}


// static
File_Write_ResponseParamsPtr File_Write_ResponseParams::New() {
  File_Write_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Write_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Write_ResponseParams::File_Write_ResponseParams()
    : error(),
      num_bytes_written() {
}

File_Write_ResponseParams::~File_Write_ResponseParams() {
}


File_Write_ResponseParamsPtr File_Write_ResponseParams::Clone() const {
  File_Write_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->num_bytes_written = num_bytes_written;
  return rv;
}


bool File_Write_ResponseParams::Equals(const File_Write_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->num_bytes_written, other.num_bytes_written))
    return false;
  return true;
}


size_t File_Write_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Write_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Write_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Write_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Write_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Write_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Write_ResponseParams_Data* input =
      static_cast<internal::File_Write_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Write_ResponseParams& input) {
  size_t size = sizeof(internal::File_Write_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Write_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Write_ResponseParams_Data** output) {
  if (input) {
    internal::File_Write_ResponseParams_Data* result =
        internal::File_Write_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    result->num_bytes_written = input->num_bytes_written;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Write_ResponseParams_Data* input,
                  File_Write_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      result->num_bytes_written = input->num_bytes_written;
    } while (false);
  }
}



// static
File_ReadToStream_ParamsPtr File_ReadToStream_Params::New() {
  File_ReadToStream_ParamsPtr rv;
  mojo::internal::StructHelper<File_ReadToStream_Params>::Initialize(&rv);
  return rv;
}

File_ReadToStream_Params::File_ReadToStream_Params()
    : source(),
      offset(),
      whence(),
      num_bytes_to_read() {
}

File_ReadToStream_Params::~File_ReadToStream_Params() {
}



bool File_ReadToStream_Params::Equals(const File_ReadToStream_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeProducerHandle>::Equals(this->source, other.source))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->offset, other.offset))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::Whence>::Equals(this->whence, other.whence))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->num_bytes_to_read, other.num_bytes_to_read))
    return false;
  return true;
}


size_t File_ReadToStream_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_ReadToStream_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_ReadToStream_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_ReadToStream_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_ReadToStream_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_ReadToStream_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_ReadToStream_Params_Data* input =
      static_cast<internal::File_ReadToStream_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_ReadToStream_Params& input) {
  size_t size = sizeof(internal::File_ReadToStream_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_ReadToStream_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_ReadToStream_Params_Data** output) {
  if (input) {
    internal::File_ReadToStream_Params_Data* result =
        internal::File_ReadToStream_Params_Data::New(buf);
    result->source = input->source.release();
    if (!result->source.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid source in File_ReadToStream_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->offset = input->offset;
    result->whence =
      static_cast<int32_t>(input->whence);
    result->num_bytes_to_read = input->num_bytes_to_read;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_ReadToStream_Params_Data* input,
                  File_ReadToStream_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->source.reset(mojo::internal::FetchAndReset(&input->source));
      result->offset = input->offset;
      result->whence = static_cast<mojo::files::Whence>(input->whence);
      result->num_bytes_to_read = input->num_bytes_to_read;
    } while (false);
  }
}


// static
File_ReadToStream_ResponseParamsPtr File_ReadToStream_ResponseParams::New() {
  File_ReadToStream_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_ReadToStream_ResponseParams>::Initialize(&rv);
  return rv;
}

File_ReadToStream_ResponseParams::File_ReadToStream_ResponseParams()
    : error() {
}

File_ReadToStream_ResponseParams::~File_ReadToStream_ResponseParams() {
}


File_ReadToStream_ResponseParamsPtr File_ReadToStream_ResponseParams::Clone() const {
  File_ReadToStream_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool File_ReadToStream_ResponseParams::Equals(const File_ReadToStream_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t File_ReadToStream_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_ReadToStream_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_ReadToStream_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_ReadToStream_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_ReadToStream_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_ReadToStream_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_ReadToStream_ResponseParams_Data* input =
      static_cast<internal::File_ReadToStream_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_ReadToStream_ResponseParams& input) {
  size_t size = sizeof(internal::File_ReadToStream_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_ReadToStream_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_ReadToStream_ResponseParams_Data** output) {
  if (input) {
    internal::File_ReadToStream_ResponseParams_Data* result =
        internal::File_ReadToStream_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_ReadToStream_ResponseParams_Data* input,
                  File_ReadToStream_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
File_WriteFromStream_ParamsPtr File_WriteFromStream_Params::New() {
  File_WriteFromStream_ParamsPtr rv;
  mojo::internal::StructHelper<File_WriteFromStream_Params>::Initialize(&rv);
  return rv;
}

File_WriteFromStream_Params::File_WriteFromStream_Params()
    : sink(),
      offset(),
      whence() {
}

File_WriteFromStream_Params::~File_WriteFromStream_Params() {
}



bool File_WriteFromStream_Params::Equals(const File_WriteFromStream_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->sink, other.sink))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->offset, other.offset))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::Whence>::Equals(this->whence, other.whence))
    return false;
  return true;
}


size_t File_WriteFromStream_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_WriteFromStream_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_WriteFromStream_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_WriteFromStream_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_WriteFromStream_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_WriteFromStream_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_WriteFromStream_Params_Data* input =
      static_cast<internal::File_WriteFromStream_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_WriteFromStream_Params& input) {
  size_t size = sizeof(internal::File_WriteFromStream_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_WriteFromStream_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_WriteFromStream_Params_Data** output) {
  if (input) {
    internal::File_WriteFromStream_Params_Data* result =
        internal::File_WriteFromStream_Params_Data::New(buf);
    result->sink = input->sink.release();
    if (!result->sink.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid sink in File_WriteFromStream_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->offset = input->offset;
    result->whence =
      static_cast<int32_t>(input->whence);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_WriteFromStream_Params_Data* input,
                  File_WriteFromStream_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->sink.reset(mojo::internal::FetchAndReset(&input->sink));
      result->offset = input->offset;
      result->whence = static_cast<mojo::files::Whence>(input->whence);
    } while (false);
  }
}


// static
File_WriteFromStream_ResponseParamsPtr File_WriteFromStream_ResponseParams::New() {
  File_WriteFromStream_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_WriteFromStream_ResponseParams>::Initialize(&rv);
  return rv;
}

File_WriteFromStream_ResponseParams::File_WriteFromStream_ResponseParams()
    : error() {
}

File_WriteFromStream_ResponseParams::~File_WriteFromStream_ResponseParams() {
}


File_WriteFromStream_ResponseParamsPtr File_WriteFromStream_ResponseParams::Clone() const {
  File_WriteFromStream_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool File_WriteFromStream_ResponseParams::Equals(const File_WriteFromStream_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t File_WriteFromStream_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_WriteFromStream_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_WriteFromStream_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_WriteFromStream_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_WriteFromStream_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_WriteFromStream_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_WriteFromStream_ResponseParams_Data* input =
      static_cast<internal::File_WriteFromStream_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_WriteFromStream_ResponseParams& input) {
  size_t size = sizeof(internal::File_WriteFromStream_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_WriteFromStream_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_WriteFromStream_ResponseParams_Data** output) {
  if (input) {
    internal::File_WriteFromStream_ResponseParams_Data* result =
        internal::File_WriteFromStream_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_WriteFromStream_ResponseParams_Data* input,
                  File_WriteFromStream_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
File_Tell_ParamsPtr File_Tell_Params::New() {
  File_Tell_ParamsPtr rv;
  mojo::internal::StructHelper<File_Tell_Params>::Initialize(&rv);
  return rv;
}

File_Tell_Params::File_Tell_Params() {
}

File_Tell_Params::~File_Tell_Params() {
}


File_Tell_ParamsPtr File_Tell_Params::Clone() const {
  File_Tell_ParamsPtr rv(New());
  return rv;
}


bool File_Tell_Params::Equals(const File_Tell_Params& other) const {
  return true;
}


size_t File_Tell_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Tell_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Tell_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Tell_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Tell_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Tell_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Tell_Params_Data* input =
      static_cast<internal::File_Tell_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Tell_Params& input) {
  size_t size = sizeof(internal::File_Tell_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Tell_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Tell_Params_Data** output) {
  if (input) {
    internal::File_Tell_Params_Data* result =
        internal::File_Tell_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Tell_Params_Data* input,
                  File_Tell_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
File_Tell_ResponseParamsPtr File_Tell_ResponseParams::New() {
  File_Tell_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Tell_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Tell_ResponseParams::File_Tell_ResponseParams()
    : error(),
      position() {
}

File_Tell_ResponseParams::~File_Tell_ResponseParams() {
}


File_Tell_ResponseParamsPtr File_Tell_ResponseParams::Clone() const {
  File_Tell_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->position = position;
  return rv;
}


bool File_Tell_ResponseParams::Equals(const File_Tell_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->position, other.position))
    return false;
  return true;
}


size_t File_Tell_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Tell_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Tell_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Tell_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Tell_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Tell_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Tell_ResponseParams_Data* input =
      static_cast<internal::File_Tell_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Tell_ResponseParams& input) {
  size_t size = sizeof(internal::File_Tell_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Tell_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Tell_ResponseParams_Data** output) {
  if (input) {
    internal::File_Tell_ResponseParams_Data* result =
        internal::File_Tell_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    result->position = input->position;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Tell_ResponseParams_Data* input,
                  File_Tell_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      result->position = input->position;
    } while (false);
  }
}



// static
File_Seek_ParamsPtr File_Seek_Params::New() {
  File_Seek_ParamsPtr rv;
  mojo::internal::StructHelper<File_Seek_Params>::Initialize(&rv);
  return rv;
}

File_Seek_Params::File_Seek_Params()
    : offset(),
      whence() {
}

File_Seek_Params::~File_Seek_Params() {
}


File_Seek_ParamsPtr File_Seek_Params::Clone() const {
  File_Seek_ParamsPtr rv(New());
  rv->offset = offset;
  rv->whence = whence;
  return rv;
}


bool File_Seek_Params::Equals(const File_Seek_Params& other) const {
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->offset, other.offset))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::Whence>::Equals(this->whence, other.whence))
    return false;
  return true;
}


size_t File_Seek_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Seek_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Seek_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Seek_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Seek_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Seek_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Seek_Params_Data* input =
      static_cast<internal::File_Seek_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Seek_Params& input) {
  size_t size = sizeof(internal::File_Seek_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Seek_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Seek_Params_Data** output) {
  if (input) {
    internal::File_Seek_Params_Data* result =
        internal::File_Seek_Params_Data::New(buf);
    result->offset = input->offset;
    result->whence =
      static_cast<int32_t>(input->whence);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Seek_Params_Data* input,
                  File_Seek_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->offset = input->offset;
      result->whence = static_cast<mojo::files::Whence>(input->whence);
    } while (false);
  }
}


// static
File_Seek_ResponseParamsPtr File_Seek_ResponseParams::New() {
  File_Seek_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Seek_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Seek_ResponseParams::File_Seek_ResponseParams()
    : error(),
      position() {
}

File_Seek_ResponseParams::~File_Seek_ResponseParams() {
}


File_Seek_ResponseParamsPtr File_Seek_ResponseParams::Clone() const {
  File_Seek_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->position = position;
  return rv;
}


bool File_Seek_ResponseParams::Equals(const File_Seek_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->position, other.position))
    return false;
  return true;
}


size_t File_Seek_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Seek_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Seek_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Seek_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Seek_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Seek_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Seek_ResponseParams_Data* input =
      static_cast<internal::File_Seek_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Seek_ResponseParams& input) {
  size_t size = sizeof(internal::File_Seek_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Seek_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Seek_ResponseParams_Data** output) {
  if (input) {
    internal::File_Seek_ResponseParams_Data* result =
        internal::File_Seek_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    result->position = input->position;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Seek_ResponseParams_Data* input,
                  File_Seek_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      result->position = input->position;
    } while (false);
  }
}



// static
File_Stat_ParamsPtr File_Stat_Params::New() {
  File_Stat_ParamsPtr rv;
  mojo::internal::StructHelper<File_Stat_Params>::Initialize(&rv);
  return rv;
}

File_Stat_Params::File_Stat_Params() {
}

File_Stat_Params::~File_Stat_Params() {
}


File_Stat_ParamsPtr File_Stat_Params::Clone() const {
  File_Stat_ParamsPtr rv(New());
  return rv;
}


bool File_Stat_Params::Equals(const File_Stat_Params& other) const {
  return true;
}


size_t File_Stat_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Stat_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Stat_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Stat_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Stat_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Stat_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Stat_Params_Data* input =
      static_cast<internal::File_Stat_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Stat_Params& input) {
  size_t size = sizeof(internal::File_Stat_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Stat_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Stat_Params_Data** output) {
  if (input) {
    internal::File_Stat_Params_Data* result =
        internal::File_Stat_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Stat_Params_Data* input,
                  File_Stat_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
File_Stat_ResponseParamsPtr File_Stat_ResponseParams::New() {
  File_Stat_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Stat_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Stat_ResponseParams::File_Stat_ResponseParams()
    : error(),
      file_information() {
}

File_Stat_ResponseParams::~File_Stat_ResponseParams() {
}


File_Stat_ResponseParamsPtr File_Stat_ResponseParams::Clone() const {
  File_Stat_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->file_information = file_information.Clone();
  return rv;
}


bool File_Stat_ResponseParams::Equals(const File_Stat_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::FileInformationPtr>::Equals(this->file_information, other.file_information))
    return false;
  return true;
}


size_t File_Stat_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Stat_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Stat_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Stat_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Stat_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Stat_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Stat_ResponseParams_Data* input =
      static_cast<internal::File_Stat_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Stat_ResponseParams& input) {
  size_t size = sizeof(internal::File_Stat_ResponseParams_Data);
  size += input.file_information.is_null()
              ? 0
              : GetSerializedSize_(*input.file_information);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Stat_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Stat_ResponseParams_Data** output) {
  if (input) {
    internal::File_Stat_ResponseParams_Data* result =
        internal::File_Stat_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    {auto retval =Serialize_(input->file_information.get(),
                 buf,
                 &result->file_information.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Stat_ResponseParams_Data* input,
                  File_Stat_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      if (input->file_information.ptr) {
        result->file_information = mojo::files::FileInformation::New();
        Deserialize_(input->file_information.ptr, result->file_information.get());
      }
    } while (false);
  }
}



// static
File_Truncate_ParamsPtr File_Truncate_Params::New() {
  File_Truncate_ParamsPtr rv;
  mojo::internal::StructHelper<File_Truncate_Params>::Initialize(&rv);
  return rv;
}

File_Truncate_Params::File_Truncate_Params()
    : size() {
}

File_Truncate_Params::~File_Truncate_Params() {
}


File_Truncate_ParamsPtr File_Truncate_Params::Clone() const {
  File_Truncate_ParamsPtr rv(New());
  rv->size = size;
  return rv;
}


bool File_Truncate_Params::Equals(const File_Truncate_Params& other) const {
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->size, other.size))
    return false;
  return true;
}


size_t File_Truncate_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Truncate_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Truncate_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Truncate_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Truncate_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Truncate_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Truncate_Params_Data* input =
      static_cast<internal::File_Truncate_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Truncate_Params& input) {
  size_t size = sizeof(internal::File_Truncate_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Truncate_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Truncate_Params_Data** output) {
  if (input) {
    internal::File_Truncate_Params_Data* result =
        internal::File_Truncate_Params_Data::New(buf);
    result->size = input->size;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Truncate_Params_Data* input,
                  File_Truncate_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->size = input->size;
    } while (false);
  }
}


// static
File_Truncate_ResponseParamsPtr File_Truncate_ResponseParams::New() {
  File_Truncate_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Truncate_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Truncate_ResponseParams::File_Truncate_ResponseParams()
    : error() {
}

File_Truncate_ResponseParams::~File_Truncate_ResponseParams() {
}


File_Truncate_ResponseParamsPtr File_Truncate_ResponseParams::Clone() const {
  File_Truncate_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool File_Truncate_ResponseParams::Equals(const File_Truncate_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t File_Truncate_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Truncate_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Truncate_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Truncate_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Truncate_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Truncate_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Truncate_ResponseParams_Data* input =
      static_cast<internal::File_Truncate_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Truncate_ResponseParams& input) {
  size_t size = sizeof(internal::File_Truncate_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Truncate_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Truncate_ResponseParams_Data** output) {
  if (input) {
    internal::File_Truncate_ResponseParams_Data* result =
        internal::File_Truncate_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Truncate_ResponseParams_Data* input,
                  File_Truncate_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
File_Touch_ParamsPtr File_Touch_Params::New() {
  File_Touch_ParamsPtr rv;
  mojo::internal::StructHelper<File_Touch_Params>::Initialize(&rv);
  return rv;
}

File_Touch_Params::File_Touch_Params()
    : atime(),
      mtime() {
}

File_Touch_Params::~File_Touch_Params() {
}


File_Touch_ParamsPtr File_Touch_Params::Clone() const {
  File_Touch_ParamsPtr rv(New());
  rv->atime = atime.Clone();
  rv->mtime = mtime.Clone();
  return rv;
}


bool File_Touch_Params::Equals(const File_Touch_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::TimespecOrNowPtr>::Equals(this->atime, other.atime))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::TimespecOrNowPtr>::Equals(this->mtime, other.mtime))
    return false;
  return true;
}


size_t File_Touch_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Touch_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Touch_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Touch_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Touch_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Touch_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Touch_Params_Data* input =
      static_cast<internal::File_Touch_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Touch_Params& input) {
  size_t size = sizeof(internal::File_Touch_Params_Data);
  size += input.atime.is_null()
              ? 0
              : GetSerializedSize_(*input.atime);
  size += input.mtime.is_null()
              ? 0
              : GetSerializedSize_(*input.mtime);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Touch_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Touch_Params_Data** output) {
  if (input) {
    internal::File_Touch_Params_Data* result =
        internal::File_Touch_Params_Data::New(buf);
    {auto retval =Serialize_(input->atime.get(),
                 buf,
                 &result->atime.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {auto retval =Serialize_(input->mtime.get(),
                 buf,
                 &result->mtime.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Touch_Params_Data* input,
                  File_Touch_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->atime.ptr) {
        result->atime = mojo::files::TimespecOrNow::New();
        Deserialize_(input->atime.ptr, result->atime.get());
      }
      if (input->mtime.ptr) {
        result->mtime = mojo::files::TimespecOrNow::New();
        Deserialize_(input->mtime.ptr, result->mtime.get());
      }
    } while (false);
  }
}


// static
File_Touch_ResponseParamsPtr File_Touch_ResponseParams::New() {
  File_Touch_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Touch_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Touch_ResponseParams::File_Touch_ResponseParams()
    : error() {
}

File_Touch_ResponseParams::~File_Touch_ResponseParams() {
}


File_Touch_ResponseParamsPtr File_Touch_ResponseParams::Clone() const {
  File_Touch_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool File_Touch_ResponseParams::Equals(const File_Touch_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t File_Touch_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Touch_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Touch_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Touch_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Touch_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Touch_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Touch_ResponseParams_Data* input =
      static_cast<internal::File_Touch_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Touch_ResponseParams& input) {
  size_t size = sizeof(internal::File_Touch_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Touch_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Touch_ResponseParams_Data** output) {
  if (input) {
    internal::File_Touch_ResponseParams_Data* result =
        internal::File_Touch_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Touch_ResponseParams_Data* input,
                  File_Touch_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
File_Dup_ParamsPtr File_Dup_Params::New() {
  File_Dup_ParamsPtr rv;
  mojo::internal::StructHelper<File_Dup_Params>::Initialize(&rv);
  return rv;
}

File_Dup_Params::File_Dup_Params()
    : file() {
}

File_Dup_Params::~File_Dup_Params() {
}



bool File_Dup_Params::Equals(const File_Dup_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<File>>::Equals(this->file, other.file))
    return false;
  return true;
}


size_t File_Dup_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Dup_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Dup_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Dup_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Dup_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Dup_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Dup_Params_Data* input =
      static_cast<internal::File_Dup_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Dup_Params& input) {
  size_t size = sizeof(internal::File_Dup_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Dup_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Dup_Params_Data** output) {
  if (input) {
    internal::File_Dup_Params_Data* result =
        internal::File_Dup_Params_Data::New(buf);
    result->file = input->file.PassMessagePipe().release();
    if (!result->file.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid file in File_Dup_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Dup_Params_Data* input,
                  File_Dup_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->file.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->file)));
    } while (false);
  }
}


// static
File_Dup_ResponseParamsPtr File_Dup_ResponseParams::New() {
  File_Dup_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Dup_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Dup_ResponseParams::File_Dup_ResponseParams()
    : error() {
}

File_Dup_ResponseParams::~File_Dup_ResponseParams() {
}


File_Dup_ResponseParamsPtr File_Dup_ResponseParams::Clone() const {
  File_Dup_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool File_Dup_ResponseParams::Equals(const File_Dup_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t File_Dup_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Dup_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Dup_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Dup_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Dup_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Dup_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Dup_ResponseParams_Data* input =
      static_cast<internal::File_Dup_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Dup_ResponseParams& input) {
  size_t size = sizeof(internal::File_Dup_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Dup_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Dup_ResponseParams_Data** output) {
  if (input) {
    internal::File_Dup_ResponseParams_Data* result =
        internal::File_Dup_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Dup_ResponseParams_Data* input,
                  File_Dup_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
File_Reopen_ParamsPtr File_Reopen_Params::New() {
  File_Reopen_ParamsPtr rv;
  mojo::internal::StructHelper<File_Reopen_Params>::Initialize(&rv);
  return rv;
}

File_Reopen_Params::File_Reopen_Params()
    : file(),
      open_flags() {
}

File_Reopen_Params::~File_Reopen_Params() {
}



bool File_Reopen_Params::Equals(const File_Reopen_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<File>>::Equals(this->file, other.file))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->open_flags, other.open_flags))
    return false;
  return true;
}


size_t File_Reopen_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Reopen_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Reopen_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Reopen_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Reopen_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Reopen_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Reopen_Params_Data* input =
      static_cast<internal::File_Reopen_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Reopen_Params& input) {
  size_t size = sizeof(internal::File_Reopen_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Reopen_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Reopen_Params_Data** output) {
  if (input) {
    internal::File_Reopen_Params_Data* result =
        internal::File_Reopen_Params_Data::New(buf);
    result->file = input->file.PassMessagePipe().release();
    if (!result->file.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid file in File_Reopen_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->open_flags = input->open_flags;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Reopen_Params_Data* input,
                  File_Reopen_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->file.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->file)));
      result->open_flags = input->open_flags;
    } while (false);
  }
}


// static
File_Reopen_ResponseParamsPtr File_Reopen_ResponseParams::New() {
  File_Reopen_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Reopen_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Reopen_ResponseParams::File_Reopen_ResponseParams()
    : error() {
}

File_Reopen_ResponseParams::~File_Reopen_ResponseParams() {
}


File_Reopen_ResponseParamsPtr File_Reopen_ResponseParams::Clone() const {
  File_Reopen_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool File_Reopen_ResponseParams::Equals(const File_Reopen_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t File_Reopen_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Reopen_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Reopen_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Reopen_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Reopen_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Reopen_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Reopen_ResponseParams_Data* input =
      static_cast<internal::File_Reopen_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Reopen_ResponseParams& input) {
  size_t size = sizeof(internal::File_Reopen_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Reopen_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Reopen_ResponseParams_Data** output) {
  if (input) {
    internal::File_Reopen_ResponseParams_Data* result =
        internal::File_Reopen_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Reopen_ResponseParams_Data* input,
                  File_Reopen_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
File_AsBuffer_ParamsPtr File_AsBuffer_Params::New() {
  File_AsBuffer_ParamsPtr rv;
  mojo::internal::StructHelper<File_AsBuffer_Params>::Initialize(&rv);
  return rv;
}

File_AsBuffer_Params::File_AsBuffer_Params() {
}

File_AsBuffer_Params::~File_AsBuffer_Params() {
}


File_AsBuffer_ParamsPtr File_AsBuffer_Params::Clone() const {
  File_AsBuffer_ParamsPtr rv(New());
  return rv;
}


bool File_AsBuffer_Params::Equals(const File_AsBuffer_Params& other) const {
  return true;
}


size_t File_AsBuffer_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_AsBuffer_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_AsBuffer_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_AsBuffer_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_AsBuffer_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_AsBuffer_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_AsBuffer_Params_Data* input =
      static_cast<internal::File_AsBuffer_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_AsBuffer_Params& input) {
  size_t size = sizeof(internal::File_AsBuffer_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_AsBuffer_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_AsBuffer_Params_Data** output) {
  if (input) {
    internal::File_AsBuffer_Params_Data* result =
        internal::File_AsBuffer_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_AsBuffer_Params_Data* input,
                  File_AsBuffer_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
File_AsBuffer_ResponseParamsPtr File_AsBuffer_ResponseParams::New() {
  File_AsBuffer_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_AsBuffer_ResponseParams>::Initialize(&rv);
  return rv;
}

File_AsBuffer_ResponseParams::File_AsBuffer_ResponseParams()
    : error(),
      buffer() {
}

File_AsBuffer_ResponseParams::~File_AsBuffer_ResponseParams() {
}



bool File_AsBuffer_ResponseParams::Equals(const File_AsBuffer_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedSharedBufferHandle>::Equals(this->buffer, other.buffer))
    return false;
  return true;
}


size_t File_AsBuffer_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_AsBuffer_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_AsBuffer_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_AsBuffer_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_AsBuffer_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_AsBuffer_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_AsBuffer_ResponseParams_Data* input =
      static_cast<internal::File_AsBuffer_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_AsBuffer_ResponseParams& input) {
  size_t size = sizeof(internal::File_AsBuffer_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_AsBuffer_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_AsBuffer_ResponseParams_Data** output) {
  if (input) {
    internal::File_AsBuffer_ResponseParams_Data* result =
        internal::File_AsBuffer_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    result->buffer = input->buffer.release();
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_AsBuffer_ResponseParams_Data* input,
                  File_AsBuffer_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      result->buffer.reset(mojo::internal::FetchAndReset(&input->buffer));
    } while (false);
  }
}



// static
File_Ioctl_ParamsPtr File_Ioctl_Params::New() {
  File_Ioctl_ParamsPtr rv;
  mojo::internal::StructHelper<File_Ioctl_Params>::Initialize(&rv);
  return rv;
}

File_Ioctl_Params::File_Ioctl_Params()
    : request(),
      in_values() {
}

File_Ioctl_Params::~File_Ioctl_Params() {
}


File_Ioctl_ParamsPtr File_Ioctl_Params::Clone() const {
  File_Ioctl_ParamsPtr rv(New());
  rv->request = request;
  rv->in_values = in_values.Clone();
  return rv;
}


bool File_Ioctl_Params::Equals(const File_Ioctl_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->request, other.request))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint32_t>>::Equals(this->in_values, other.in_values))
    return false;
  return true;
}


size_t File_Ioctl_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Ioctl_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Ioctl_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Ioctl_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Ioctl_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Ioctl_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Ioctl_Params_Data* input =
      static_cast<internal::File_Ioctl_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Ioctl_Params& input) {
  size_t size = sizeof(internal::File_Ioctl_Params_Data);
  size += GetSerializedSize_(input.in_values);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Ioctl_Params* input,
    mojo::internal::Buffer* buf,
    internal::File_Ioctl_Params_Data** output) {
  if (input) {
    internal::File_Ioctl_Params_Data* result =
        internal::File_Ioctl_Params_Data::New(buf);
    result->request = input->request;
    {
      const mojo::internal::ArrayValidateParams in_values_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->in_values, buf, &result->in_values.ptr,
                            &in_values_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Ioctl_Params_Data* input,
                  File_Ioctl_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->request = input->request;
      Deserialize_(input->in_values.ptr, &result->in_values);
    } while (false);
  }
}


// static
File_Ioctl_ResponseParamsPtr File_Ioctl_ResponseParams::New() {
  File_Ioctl_ResponseParamsPtr rv;
  mojo::internal::StructHelper<File_Ioctl_ResponseParams>::Initialize(&rv);
  return rv;
}

File_Ioctl_ResponseParams::File_Ioctl_ResponseParams()
    : error(),
      out_values() {
}

File_Ioctl_ResponseParams::~File_Ioctl_ResponseParams() {
}


File_Ioctl_ResponseParamsPtr File_Ioctl_ResponseParams::Clone() const {
  File_Ioctl_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->out_values = out_values.Clone();
  return rv;
}


bool File_Ioctl_ResponseParams::Equals(const File_Ioctl_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint32_t>>::Equals(this->out_values, other.out_values))
    return false;
  return true;
}


size_t File_Ioctl_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool File_Ioctl_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::File_Ioctl_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool File_Ioctl_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::File_Ioctl_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void File_Ioctl_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::File_Ioctl_ResponseParams_Data* input =
      static_cast<internal::File_Ioctl_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const File_Ioctl_ResponseParams& input) {
  size_t size = sizeof(internal::File_Ioctl_ResponseParams_Data);
  size += GetSerializedSize_(input.out_values);
  return size;
}

mojo::internal::ValidationError Serialize_(
    File_Ioctl_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::File_Ioctl_ResponseParams_Data** output) {
  if (input) {
    internal::File_Ioctl_ResponseParams_Data* result =
        internal::File_Ioctl_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    {
      const mojo::internal::ArrayValidateParams out_values_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->out_values, buf, &result->out_values.ptr,
                            &out_values_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::File_Ioctl_ResponseParams_Data* input,
                  File_Ioctl_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      Deserialize_(input->out_values.ptr, &result->out_values);
    } while (false);
  }
}

}  // namespace files
}  // namespace mojo
