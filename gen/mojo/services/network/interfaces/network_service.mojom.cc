// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/network_service.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class NetworkService_CreateTCPBoundSocket_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  NetworkService_CreateTCPBoundSocket_ForwardToCallback(
      const NetworkService::CreateTCPBoundSocketCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  NetworkService::CreateTCPBoundSocketCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NetworkService_CreateTCPBoundSocket_ForwardToCallback);
};
bool NetworkService_CreateTCPBoundSocket_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data* params =
      reinterpret_cast<internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  mojo::NetAddressPtr p_bound_to {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
    if (params->bound_to.ptr) {
      p_bound_to = mojo::NetAddress::New();
      Deserialize_(params->bound_to.ptr, p_bound_to.get());
    }
  } while (false);
  callback_.Run(p_result.Pass(), p_bound_to.Pass());
  return true;
}
class NetworkService_CreateTCPConnectedSocket_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  NetworkService_CreateTCPConnectedSocket_ForwardToCallback(
      const NetworkService::CreateTCPConnectedSocketCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  NetworkService::CreateTCPConnectedSocketCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NetworkService_CreateTCPConnectedSocket_ForwardToCallback);
};
bool NetworkService_CreateTCPConnectedSocket_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* params =
      reinterpret_cast<internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  mojo::NetAddressPtr p_local_address {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
    if (params->local_address.ptr) {
      p_local_address = mojo::NetAddress::New();
      Deserialize_(params->local_address.ptr, p_local_address.get());
    }
  } while (false);
  callback_.Run(p_result.Pass(), p_local_address.Pass());
  return true;
}
class NetworkService_CreateHttpServer_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  NetworkService_CreateHttpServer_ForwardToCallback(
      const NetworkService::CreateHttpServerCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  NetworkService::CreateHttpServerCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NetworkService_CreateHttpServer_ForwardToCallback);
};
bool NetworkService_CreateHttpServer_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::NetworkService_CreateHttpServer_ResponseParams_Data* params =
      reinterpret_cast<internal::NetworkService_CreateHttpServer_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  mojo::NetAddressPtr p_bound_to {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
    if (params->bound_to.ptr) {
      p_bound_to = mojo::NetAddress::New();
      Deserialize_(params->bound_to.ptr, p_bound_to.get());
    }
  } while (false);
  callback_.Run(p_result.Pass(), p_bound_to.Pass());
  return true;
}

NetworkServiceProxy::NetworkServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void NetworkServiceProxy::CreateURLLoader(
    mojo::InterfaceRequest<mojo::URLLoader> in_loader) {
  size_t size = sizeof(internal::NetworkService_CreateURLLoader_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateURLLoader), size);

  internal::NetworkService_CreateURLLoader_Params_Data* params =
      internal::NetworkService_CreateURLLoader_Params_Data::New(builder.buffer());
  params->loader = in_loader.PassMessagePipe().release();
  if (!params->loader.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid loader in NetworkService.CreateURLLoader request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NetworkServiceProxy::GetCookieStore(
    mojo::InterfaceRequest<mojo::CookieStore> in_cookie_store) {
  size_t size = sizeof(internal::NetworkService_GetCookieStore_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::GetCookieStore), size);

  internal::NetworkService_GetCookieStore_Params_Data* params =
      internal::NetworkService_GetCookieStore_Params_Data::New(builder.buffer());
  params->cookie_store = in_cookie_store.PassMessagePipe().release();
  if (!params->cookie_store.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid cookie_store in NetworkService.GetCookieStore request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NetworkServiceProxy::CreateWebSocket(
    mojo::InterfaceRequest<mojo::WebSocket> in_socket) {
  size_t size = sizeof(internal::NetworkService_CreateWebSocket_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateWebSocket), size);

  internal::NetworkService_CreateWebSocket_Params_Data* params =
      internal::NetworkService_CreateWebSocket_Params_Data::New(builder.buffer());
  params->socket = in_socket.PassMessagePipe().release();
  if (!params->socket.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid socket in NetworkService.CreateWebSocket request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NetworkServiceProxy::CreateTCPBoundSocket(
    mojo::NetAddressPtr in_local_address, mojo::InterfaceRequest<mojo::TCPBoundSocket> in_bound_socket, const CreateTCPBoundSocketCallback& callback) {
  size_t size = sizeof(internal::NetworkService_CreateTCPBoundSocket_Params_Data);
  size += in_local_address.is_null()
              ? 0
              : GetSerializedSize_(*in_local_address);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateTCPBoundSocket), size);

  internal::NetworkService_CreateTCPBoundSocket_Params_Data* params =
      internal::NetworkService_CreateTCPBoundSocket_Params_Data::New(builder.buffer());
  {Serialize_(in_local_address.get(),
               builder.buffer(),
               &params->local_address.ptr);
  }
  params->bound_socket = in_bound_socket.PassMessagePipe().release();
  if (!params->bound_socket.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid bound_socket in NetworkService.CreateTCPBoundSocket request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new NetworkService_CreateTCPBoundSocket_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void NetworkServiceProxy::CreateTCPConnectedSocket(
    mojo::NetAddressPtr in_remote_address, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::ScopedDataPipeProducerHandle in_receive_stream, mojo::InterfaceRequest<mojo::TCPConnectedSocket> in_client_socket, const CreateTCPConnectedSocketCallback& callback) {
  size_t size = sizeof(internal::NetworkService_CreateTCPConnectedSocket_Params_Data);
  size += in_remote_address.is_null()
              ? 0
              : GetSerializedSize_(*in_remote_address);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateTCPConnectedSocket), size);

  internal::NetworkService_CreateTCPConnectedSocket_Params_Data* params =
      internal::NetworkService_CreateTCPConnectedSocket_Params_Data::New(builder.buffer());
  {Serialize_(in_remote_address.get(),
               builder.buffer(),
               &params->remote_address.ptr);
  }
  if (!params->remote_address.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null remote_address in NetworkService.CreateTCPConnectedSocket request");
  }
  params->send_stream = in_send_stream.release();
  if (!params->send_stream.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid send_stream in NetworkService.CreateTCPConnectedSocket request");
  }
  params->receive_stream = in_receive_stream.release();
  if (!params->receive_stream.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid receive_stream in NetworkService.CreateTCPConnectedSocket request");
  }
  params->client_socket = in_client_socket.PassMessagePipe().release();
  if (!params->client_socket.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client_socket in NetworkService.CreateTCPConnectedSocket request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new NetworkService_CreateTCPConnectedSocket_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void NetworkServiceProxy::CreateUDPSocket(
    mojo::InterfaceRequest<mojo::UDPSocket> in_socket) {
  size_t size = sizeof(internal::NetworkService_CreateUDPSocket_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateUDPSocket), size);

  internal::NetworkService_CreateUDPSocket_Params_Data* params =
      internal::NetworkService_CreateUDPSocket_Params_Data::New(builder.buffer());
  params->socket = in_socket.PassMessagePipe().release();
  if (!params->socket.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid socket in NetworkService.CreateUDPSocket request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NetworkServiceProxy::CreateHttpServer(
    mojo::NetAddressPtr in_local_address, mojo::InterfaceHandle<mojo::HttpServerDelegate> in_delegate, const CreateHttpServerCallback& callback) {
  size_t size = sizeof(internal::NetworkService_CreateHttpServer_Params_Data);
  size += in_local_address.is_null()
              ? 0
              : GetSerializedSize_(*in_local_address);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateHttpServer), size);

  internal::NetworkService_CreateHttpServer_Params_Data* params =
      internal::NetworkService_CreateHttpServer_Params_Data::New(builder.buffer());
  {Serialize_(in_local_address.get(),
               builder.buffer(),
               &params->local_address.ptr);
  }
  if (!params->local_address.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null local_address in NetworkService.CreateHttpServer request");
  }
  mojo::internal::InterfaceHandleToData(in_delegate.Pass(),
                                        &params->delegate);
  if (!params->delegate.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid delegate in NetworkService.CreateHttpServer request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new NetworkService_CreateHttpServer_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void NetworkServiceProxy::RegisterURLLoaderInterceptor(
    mojo::InterfaceHandle<mojo::URLLoaderInterceptorFactory> in_factory) {
  size_t size = sizeof(internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::RegisterURLLoaderInterceptor), size);

  internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data* params =
      internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_factory.Pass(),
                                        &params->factory);
  if (!params->factory.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid factory in NetworkService.RegisterURLLoaderInterceptor request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NetworkServiceProxy::CreateHostResolver(
    mojo::InterfaceRequest<mojo::HostResolver> in_host_resolver) {
  size_t size = sizeof(internal::NetworkService_CreateHostResolver_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateHostResolver), size);

  internal::NetworkService_CreateHostResolver_Params_Data* params =
      internal::NetworkService_CreateHostResolver_Params_Data::New(builder.buffer());
  params->host_resolver = in_host_resolver.PassMessagePipe().release();
  if (!params->host_resolver.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid host_resolver in NetworkService.CreateHostResolver request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class NetworkService_CreateTCPBoundSocket_ProxyToResponder
    : public NetworkService::CreateTCPBoundSocketCallback::Runnable {
 public:
  ~NetworkService_CreateTCPBoundSocket_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "NetworkService::CreateTCPBoundSocket(p_local_address.Pass(), p_bound_socket.Pass(), callback) "
        "was never run.";
  }

  NetworkService_CreateTCPBoundSocket_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_bound_to) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NetworkService_CreateTCPBoundSocket_ProxyToResponder);
};

void NetworkService_CreateTCPBoundSocket_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_bound_to) const {
  size_t size = sizeof(internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += in_bound_to.is_null()
              ? 0
              : GetSerializedSize_(*in_bound_to);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateTCPBoundSocket), size, request_id_);
  internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data* params =
      internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in NetworkService.CreateTCPBoundSocket response");
  }
  {Serialize_(in_bound_to.get(),
               builder.buffer(),
               &params->bound_to.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class NetworkService_CreateTCPConnectedSocket_ProxyToResponder
    : public NetworkService::CreateTCPConnectedSocketCallback::Runnable {
 public:
  ~NetworkService_CreateTCPConnectedSocket_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "NetworkService::CreateTCPConnectedSocket(p_remote_address.Pass(), p_send_stream.Pass(), p_receive_stream.Pass(), p_client_socket.Pass(), callback) "
        "was never run.";
  }

  NetworkService_CreateTCPConnectedSocket_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_local_address) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NetworkService_CreateTCPConnectedSocket_ProxyToResponder);
};

void NetworkService_CreateTCPConnectedSocket_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_local_address) const {
  size_t size = sizeof(internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += in_local_address.is_null()
              ? 0
              : GetSerializedSize_(*in_local_address);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateTCPConnectedSocket), size, request_id_);
  internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* params =
      internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in NetworkService.CreateTCPConnectedSocket response");
  }
  {Serialize_(in_local_address.get(),
               builder.buffer(),
               &params->local_address.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class NetworkService_CreateHttpServer_ProxyToResponder
    : public NetworkService::CreateHttpServerCallback::Runnable {
 public:
  ~NetworkService_CreateHttpServer_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "NetworkService::CreateHttpServer(p_local_address.Pass(), p_delegate.Pass(), callback) "
        "was never run.";
  }

  NetworkService_CreateHttpServer_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_bound_to) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NetworkService_CreateHttpServer_ProxyToResponder);
};

void NetworkService_CreateHttpServer_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_bound_to) const {
  size_t size = sizeof(internal::NetworkService_CreateHttpServer_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += in_bound_to.is_null()
              ? 0
              : GetSerializedSize_(*in_bound_to);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::NetworkService_Base::MessageOrdinals::CreateHttpServer), size, request_id_);
  internal::NetworkService_CreateHttpServer_ResponseParams_Data* params =
      internal::NetworkService_CreateHttpServer_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in NetworkService.CreateHttpServer response");
  }
  {Serialize_(in_bound_to.get(),
               builder.buffer(),
               &params->bound_to.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

NetworkServiceStub::NetworkServiceStub()
    : sink_(nullptr),
      control_message_handler_(NetworkService::Version_) {
}

NetworkServiceStub::~NetworkServiceStub() {}

bool NetworkServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::NetworkService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NetworkService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NetworkService_Base::MessageOrdinals::CreateURLLoader: {
      internal::NetworkService_CreateURLLoader_Params_Data* params =
          reinterpret_cast<internal::NetworkService_CreateURLLoader_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<mojo::URLLoader> p_loader {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_loader.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->loader)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateURLLoader(p_loader.Pass());
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::GetCookieStore: {
      internal::NetworkService_GetCookieStore_Params_Data* params =
          reinterpret_cast<internal::NetworkService_GetCookieStore_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<mojo::CookieStore> p_cookie_store {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_cookie_store.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->cookie_store)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetCookieStore(p_cookie_store.Pass());
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateWebSocket: {
      internal::NetworkService_CreateWebSocket_Params_Data* params =
          reinterpret_cast<internal::NetworkService_CreateWebSocket_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<mojo::WebSocket> p_socket {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->socket)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateWebSocket(p_socket.Pass());
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPBoundSocket: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPConnectedSocket: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateUDPSocket: {
      internal::NetworkService_CreateUDPSocket_Params_Data* params =
          reinterpret_cast<internal::NetworkService_CreateUDPSocket_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<mojo::UDPSocket> p_socket {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->socket)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateUDPSocket(p_socket.Pass());
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateHttpServer: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::RegisterURLLoaderInterceptor: {
      internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data* params =
          reinterpret_cast<internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<mojo::URLLoaderInterceptorFactory> p_factory {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->factory, &p_factory);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->RegisterURLLoaderInterceptor(p_factory.Pass());
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateHostResolver: {
      internal::NetworkService_CreateHostResolver_Params_Data* params =
          reinterpret_cast<internal::NetworkService_CreateHostResolver_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<mojo::HostResolver> p_host_resolver {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_host_resolver.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->host_resolver)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateHostResolver(p_host_resolver.Pass());
      return true;
    }
  }
  return false;
}

bool NetworkServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::NetworkService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NetworkService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NetworkService_Base::MessageOrdinals::CreateURLLoader: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::GetCookieStore: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateWebSocket: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPBoundSocket: {
      internal::NetworkService_CreateTCPBoundSocket_Params_Data* params =
          reinterpret_cast<internal::NetworkService_CreateTCPBoundSocket_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      NetworkService::CreateTCPBoundSocketCallback::Runnable* runnable =
          new NetworkService_CreateTCPBoundSocket_ProxyToResponder(
              message->request_id(), responder);
      NetworkService::CreateTCPBoundSocketCallback callback(runnable);
      
      mojo::NetAddressPtr p_local_address {};
      mojo::InterfaceRequest<mojo::TCPBoundSocket> p_bound_socket {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->local_address.ptr) {
          p_local_address = mojo::NetAddress::New();
          Deserialize_(params->local_address.ptr, p_local_address.get());
        }
        p_bound_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->bound_socket)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateTCPBoundSocket(p_local_address.Pass(), p_bound_socket.Pass(), callback);
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPConnectedSocket: {
      internal::NetworkService_CreateTCPConnectedSocket_Params_Data* params =
          reinterpret_cast<internal::NetworkService_CreateTCPConnectedSocket_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      NetworkService::CreateTCPConnectedSocketCallback::Runnable* runnable =
          new NetworkService_CreateTCPConnectedSocket_ProxyToResponder(
              message->request_id(), responder);
      NetworkService::CreateTCPConnectedSocketCallback callback(runnable);
      
      mojo::NetAddressPtr p_remote_address {};
      mojo::ScopedDataPipeConsumerHandle p_send_stream {};
      mojo::ScopedDataPipeProducerHandle p_receive_stream {};
      mojo::InterfaceRequest<mojo::TCPConnectedSocket> p_client_socket {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->remote_address.ptr) {
          p_remote_address = mojo::NetAddress::New();
          Deserialize_(params->remote_address.ptr, p_remote_address.get());
        }
        p_send_stream.reset(mojo::internal::FetchAndReset(&params->send_stream));
        p_receive_stream.reset(mojo::internal::FetchAndReset(&params->receive_stream));
        p_client_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->client_socket)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateTCPConnectedSocket(p_remote_address.Pass(), p_send_stream.Pass(), p_receive_stream.Pass(), p_client_socket.Pass(), callback);
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateUDPSocket: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateHttpServer: {
      internal::NetworkService_CreateHttpServer_Params_Data* params =
          reinterpret_cast<internal::NetworkService_CreateHttpServer_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      NetworkService::CreateHttpServerCallback::Runnable* runnable =
          new NetworkService_CreateHttpServer_ProxyToResponder(
              message->request_id(), responder);
      NetworkService::CreateHttpServerCallback callback(runnable);
      
      mojo::NetAddressPtr p_local_address {};
      mojo::InterfaceHandle<mojo::HttpServerDelegate> p_delegate {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->local_address.ptr) {
          p_local_address = mojo::NetAddress::New();
          Deserialize_(params->local_address.ptr, p_local_address.get());
        }
        mojo::internal::InterfaceDataToHandle(&params->delegate, &p_delegate);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateHttpServer(p_local_address.Pass(), p_delegate.Pass(), callback);
      return true;
    }
    case internal::NetworkService_Base::MessageOrdinals::RegisterURLLoaderInterceptor: {
      break;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateHostResolver: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
