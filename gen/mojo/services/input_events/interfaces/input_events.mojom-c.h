// This file was auto-generated by the C bindings generator.

#ifndef MOJO_SERVICES_INPUT_EVENTS_INTERFACES_INPUT_EVENTS_MOJOM_C_H_
#define MOJO_SERVICES_INPUT_EVENTS_INTERFACES_INPUT_EVENTS_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.
#include "mojo/services/geometry/interfaces/geometry.mojom-c.h"
#include "mojo/services/input_events/interfaces/input_event_constants.mojom-c.h"
#include "mojo/services/input_events/interfaces/input_key_codes.mojom-c.h"


// Forward declarations for structs.
struct mojo_KeyData;
union mojo_KeyDataPtr {
  struct mojo_KeyData* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_KeyDataPtr) == 8,
              "union mojo_KeyDataPtr must be 8 bytes");

struct mojo_PointerData;
union mojo_PointerDataPtr {
  struct mojo_PointerData* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_PointerDataPtr) == 8,
              "union mojo_PointerDataPtr must be 8 bytes");

struct mojo_Event;
union mojo_EventPtr {
  struct mojo_Event* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_EventPtr) == 8,
              "union mojo_EventPtr must be 8 bytes");

// Forward declarations for unions.
// Top level constants.


// Top level enums.


// Union definitions.


// Struct definitions.
// -- mojo_KeyData --
// Enums
// Constants
// Struct definition
struct mojo_KeyData {
  struct MojomStructHeader header_;
  int32_t key_code;  // offset,bit = 0,0
  bool is_char : 1;  // offset,bit = 4,0
  uint8_t pad1_[1];  // padding
  uint16_t character;  // offset,bit = 6,0
  mojo_KeyboardCode windows_key_code;  // offset,bit = 8,0
  int32_t native_key_code;  // offset,bit = 12,0
  uint16_t text;  // offset,bit = 16,0
  uint16_t unmodified_text;  // offset,bit = 18,0
  uint8_t pad6_[6];  // padding
  
};

struct mojo_KeyData* mojo_KeyData_New(struct MojomBuffer* in_buffer);

void mojo_KeyData_Init(
  struct mojo_KeyData* in_data);

void mojo_KeyData_CloseAllHandles(
  struct mojo_KeyData* in_data);

struct mojo_KeyData* mojo_KeyData_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_KeyData* in_data);

size_t mojo_KeyData_ComputeSerializedSize(
  const struct mojo_KeyData* in_data);

MojomValidationResult mojo_KeyData_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_KeyData_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_KeyData_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_PointerData --
// Enums
// Constants
// Struct definition
struct mojo_PointerData {
  struct MojomStructHeader header_;
  int32_t pointer_id;  // offset,bit = 0,0
  mojo_PointerKind kind;  // offset,bit = 4,0
  float x;  // offset,bit = 8,0
  float y;  // offset,bit = 12,0
  float screen_x;  // offset,bit = 16,0
  float screen_y;  // offset,bit = 20,0
  float pressure;  // offset,bit = 24,0
  float radius_major;  // offset,bit = 28,0
  float radius_minor;  // offset,bit = 32,0
  float orientation;  // offset,bit = 36,0
  float horizontal_wheel;  // offset,bit = 40,0
  float vertical_wheel;  // offset,bit = 44,0
  uint8_t pad11_[4];  // padding
  
};

struct mojo_PointerData* mojo_PointerData_New(struct MojomBuffer* in_buffer);

void mojo_PointerData_Init(
  struct mojo_PointerData* in_data);

void mojo_PointerData_CloseAllHandles(
  struct mojo_PointerData* in_data);

struct mojo_PointerData* mojo_PointerData_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_PointerData* in_data);

size_t mojo_PointerData_ComputeSerializedSize(
  const struct mojo_PointerData* in_data);

MojomValidationResult mojo_PointerData_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_PointerData_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_PointerData_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_Event --
// Enums
// Constants
// Struct definition
struct mojo_Event {
  struct MojomStructHeader header_;
  mojo_EventType action;  // offset,bit = 0,0
  mojo_EventFlags flags;  // offset,bit = 4,0
  int64_t time_stamp;  // offset,bit = 8,0
  union mojo_KeyDataPtr key_data;  // offset,bit = 16,0
  union mojo_PointerDataPtr pointer_data;  // offset,bit = 24,0
  
};

struct mojo_Event* mojo_Event_New(struct MojomBuffer* in_buffer);

void mojo_Event_Init(
  struct mojo_Event* in_data);

void mojo_Event_CloseAllHandles(
  struct mojo_Event* in_data);

struct mojo_Event* mojo_Event_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Event* in_data);

size_t mojo_Event_ComputeSerializedSize(
  const struct mojo_Event* in_data);

MojomValidationResult mojo_Event_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Event_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Event_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.


// Type tables declarations for structs and unions.



extern struct MojomPointerTableStructEntry mojo_KeyData__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_PointerData__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_Event__PointerTable[];


#endif  // MOJO_SERVICES_INPUT_EVENTS_INTERFACES_INPUT_EVENTS_MOJOM_C_H_