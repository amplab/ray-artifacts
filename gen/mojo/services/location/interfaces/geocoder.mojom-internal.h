// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_LOCATION_INTERFACES_GEOCODER_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_LOCATION_INTERFACES_GEOCODER_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/location/interfaces/location.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {

class LocationType;
class Bounds;
class ComponentRestrictions;
class Options;
class Geometry;
class Result;
class Status;


namespace internal {

class LocationType_Data;
class Bounds_Data;
class ComponentRestrictions_Data;
class Options_Data;
class Geometry_Data;
class Result_Data;
class Status_Data;



#pragma pack(push, 1)


class LocationType_Data {
 public:
  static LocationType_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  LocationType_Data();
  ~LocationType_Data() = delete;
};
static_assert(sizeof(LocationType_Data) == 8,
              "Bad sizeof(LocationType_Data)");

class Bounds_Data {
 public:
  static Bounds_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::Location_Data> northeast;
  mojo::internal::StructPointer<mojo::internal::Location_Data> southwest;

 private:
  Bounds_Data();
  ~Bounds_Data() = delete;
};
static_assert(sizeof(Bounds_Data) == 24,
              "Bad sizeof(Bounds_Data)");

class ComponentRestrictions_Data {
 public:
  static ComponentRestrictions_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer administrative_area;
  mojo::internal::StringPointer country;
  mojo::internal::StringPointer locality;
  mojo::internal::StringPointer postal_code;
  mojo::internal::StringPointer route;

 private:
  ComponentRestrictions_Data();
  ~ComponentRestrictions_Data() = delete;
};
static_assert(sizeof(ComponentRestrictions_Data) == 48,
              "Bad sizeof(ComponentRestrictions_Data)");

class Options_Data {
 public:
  static Options_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::ComponentRestrictions_Data> restrictions;
  mojo::internal::StructPointer<mojo::internal::Location_Data> location;
  mojo::internal::StringPointer region;

 private:
  Options_Data();
  ~Options_Data() = delete;
};
static_assert(sizeof(Options_Data) == 32,
              "Bad sizeof(Options_Data)");

class Geometry_Data {
 public:
  static Geometry_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::Location_Data> location;
  mojo::internal::StructPointer<internal::LocationType_Data> location_type;
  mojo::internal::StructPointer<internal::Bounds_Data> viewport;
  mojo::internal::StructPointer<internal::Bounds_Data> bounds;

 private:
  Geometry_Data();
  ~Geometry_Data() = delete;
};
static_assert(sizeof(Geometry_Data) == 40,
              "Bad sizeof(Geometry_Data)");

class Result_Data {
 public:
  static Result_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t partial_match : 1;
  uint8_t pad0_[7];
  mojo::internal::StructPointer<internal::Geometry_Data> geometry;
  mojo::internal::StringPointer formatted_address;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> types;

 private:
  Result_Data();
  ~Result_Data() = delete;
};
static_assert(sizeof(Result_Data) == 40,
              "Bad sizeof(Result_Data)");

class Status_Data {
 public:
  static Status_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  Status_Data();
  ~Status_Data() = delete;
};
static_assert(sizeof(Status_Data) == 8,
              "Bad sizeof(Status_Data)");


class Geocoder_AddressToLocation_Params_Data {
 public:
  static Geocoder_AddressToLocation_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer address;
  mojo::internal::StructPointer<internal::Options_Data> options;

 private:
  Geocoder_AddressToLocation_Params_Data();
  ~Geocoder_AddressToLocation_Params_Data() = delete;
};
static_assert(sizeof(Geocoder_AddressToLocation_Params_Data) == 24,
              "Bad sizeof(Geocoder_AddressToLocation_Params_Data)");

class Geocoder_AddressToLocation_ResponseParams_Data {
 public:
  static Geocoder_AddressToLocation_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer status;
  mojo::internal::ArrayPointer<internal::Result_Data*> results;

 private:
  Geocoder_AddressToLocation_ResponseParams_Data();
  ~Geocoder_AddressToLocation_ResponseParams_Data() = delete;
};
static_assert(sizeof(Geocoder_AddressToLocation_ResponseParams_Data) == 24,
              "Bad sizeof(Geocoder_AddressToLocation_ResponseParams_Data)");


class Geocoder_LocationToAddress_Params_Data {
 public:
  static Geocoder_LocationToAddress_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::Location_Data> location;
  mojo::internal::StructPointer<internal::Options_Data> options;

 private:
  Geocoder_LocationToAddress_Params_Data();
  ~Geocoder_LocationToAddress_Params_Data() = delete;
};
static_assert(sizeof(Geocoder_LocationToAddress_Params_Data) == 24,
              "Bad sizeof(Geocoder_LocationToAddress_Params_Data)");

class Geocoder_LocationToAddress_ResponseParams_Data {
 public:
  static Geocoder_LocationToAddress_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer status;
  mojo::internal::ArrayPointer<internal::Result_Data*> results;

 private:
  Geocoder_LocationToAddress_ResponseParams_Data();
  ~Geocoder_LocationToAddress_ResponseParams_Data() = delete;
};
static_assert(sizeof(Geocoder_LocationToAddress_ResponseParams_Data) == 24,
              "Bad sizeof(Geocoder_LocationToAddress_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_LOCATION_INTERFACES_GEOCODER_MOJOM_INTERNAL_H_
