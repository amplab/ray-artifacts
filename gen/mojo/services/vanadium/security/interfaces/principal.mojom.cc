// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/vanadium/security/interfaces/principal.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace vanadium {

// --- Interface definitions ---
class PrincipalService_Login_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrincipalService_Login_ForwardToCallback(
      const PrincipalService::LoginCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrincipalService::LoginCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_Login_ForwardToCallback);
};
bool PrincipalService_Login_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::PrincipalService_Login_ResponseParams_Data* params =
      reinterpret_cast<internal::PrincipalService_Login_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  UserPtr p_user {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->user.ptr) {
      p_user = User::New();
      Deserialize_(params->user.ptr, p_user.get());
    }
  } while (false);
  callback_.Run(p_user.Pass());
  return true;
}
class PrincipalService_GetUser_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrincipalService_GetUser_ForwardToCallback(
      const PrincipalService::GetUserCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrincipalService::GetUserCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_GetUser_ForwardToCallback);
};
bool PrincipalService_GetUser_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::PrincipalService_GetUser_ResponseParams_Data* params =
      reinterpret_cast<internal::PrincipalService_GetUser_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  UserPtr p_user {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->user.ptr) {
      p_user = User::New();
      Deserialize_(params->user.ptr, p_user.get());
    }
  } while (false);
  callback_.Run(p_user.Pass());
  return true;
}
class PrincipalService_SetUser_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrincipalService_SetUser_ForwardToCallback(
      const PrincipalService::SetUserCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrincipalService::SetUserCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_SetUser_ForwardToCallback);
};
bool PrincipalService_SetUser_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::PrincipalService_SetUser_ResponseParams_Data* params =
      reinterpret_cast<internal::PrincipalService_SetUser_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->error.ptr, &p_error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class PrincipalService_GetLoggedInUsers_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PrincipalService_GetLoggedInUsers_ForwardToCallback(
      const PrincipalService::GetLoggedInUsersCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PrincipalService::GetLoggedInUsersCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_GetLoggedInUsers_ForwardToCallback);
};
bool PrincipalService_GetLoggedInUsers_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data* params =
      reinterpret_cast<internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<UserPtr> p_ids {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->ids.ptr, &p_ids);
  } while (false);
  callback_.Run(p_ids.Pass());
  return true;
}

PrincipalServiceProxy::PrincipalServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void PrincipalServiceProxy::Login(
    const LoginCallback& callback) {
  size_t size = sizeof(internal::PrincipalService_Login_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::Login), size);

  internal::PrincipalService_Login_Params_Data* params =
      internal::PrincipalService_Login_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new PrincipalService_Login_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PrincipalServiceProxy::Logout(
    ) {
  size_t size = sizeof(internal::PrincipalService_Logout_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::Logout), size);

  internal::PrincipalService_Logout_Params_Data* params =
      internal::PrincipalService_Logout_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void PrincipalServiceProxy::GetUser(
    AppInstanceNamePtr in_app, const GetUserCallback& callback) {
  size_t size = sizeof(internal::PrincipalService_GetUser_Params_Data);
  size += in_app.is_null()
              ? 0
              : GetSerializedSize_(*in_app);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::GetUser), size);

  internal::PrincipalService_GetUser_Params_Data* params =
      internal::PrincipalService_GetUser_Params_Data::New(builder.buffer());
  {Serialize_(in_app.get(),
               builder.buffer(),
               &params->app.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new PrincipalService_GetUser_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PrincipalServiceProxy::SetUser(
    UserPtr in_user, const SetUserCallback& callback) {
  size_t size = sizeof(internal::PrincipalService_SetUser_Params_Data);
  size += in_user.is_null()
              ? 0
              : GetSerializedSize_(*in_user);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::SetUser), size);

  internal::PrincipalService_SetUser_Params_Data* params =
      internal::PrincipalService_SetUser_Params_Data::New(builder.buffer());
  {Serialize_(in_user.get(),
               builder.buffer(),
               &params->user.ptr);
  }
  if (!params->user.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null user in PrincipalService.SetUser request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new PrincipalService_SetUser_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PrincipalServiceProxy::GetLoggedInUsers(
    const GetLoggedInUsersCallback& callback) {
  size_t size = sizeof(internal::PrincipalService_GetLoggedInUsers_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::GetLoggedInUsers), size);

  internal::PrincipalService_GetLoggedInUsers_Params_Data* params =
      internal::PrincipalService_GetLoggedInUsers_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new PrincipalService_GetLoggedInUsers_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class PrincipalService_Login_ProxyToResponder
    : public PrincipalService::LoginCallback::Runnable {
 public:
  ~PrincipalService_Login_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "PrincipalService::Login(callback) "
        "was never run.";
  }

  PrincipalService_Login_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(UserPtr in_user) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_Login_ProxyToResponder);
};

void PrincipalService_Login_ProxyToResponder::Run(
    UserPtr in_user) const {
  size_t size = sizeof(internal::PrincipalService_Login_ResponseParams_Data);
  size += in_user.is_null()
              ? 0
              : GetSerializedSize_(*in_user);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::Login), size, request_id_);
  internal::PrincipalService_Login_ResponseParams_Data* params =
      internal::PrincipalService_Login_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_user.get(),
               builder.buffer(),
               &params->user.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class PrincipalService_GetUser_ProxyToResponder
    : public PrincipalService::GetUserCallback::Runnable {
 public:
  ~PrincipalService_GetUser_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "PrincipalService::GetUser(p_app.Pass(), callback) "
        "was never run.";
  }

  PrincipalService_GetUser_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(UserPtr in_user) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_GetUser_ProxyToResponder);
};

void PrincipalService_GetUser_ProxyToResponder::Run(
    UserPtr in_user) const {
  size_t size = sizeof(internal::PrincipalService_GetUser_ResponseParams_Data);
  size += in_user.is_null()
              ? 0
              : GetSerializedSize_(*in_user);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::GetUser), size, request_id_);
  internal::PrincipalService_GetUser_ResponseParams_Data* params =
      internal::PrincipalService_GetUser_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_user.get(),
               builder.buffer(),
               &params->user.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class PrincipalService_SetUser_ProxyToResponder
    : public PrincipalService::SetUserCallback::Runnable {
 public:
  ~PrincipalService_SetUser_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "PrincipalService::SetUser(p_user.Pass(), callback) "
        "was never run.";
  }

  PrincipalService_SetUser_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_SetUser_ProxyToResponder);
};

void PrincipalService_SetUser_ProxyToResponder::Run(
    const mojo::String& in_error) const {
  size_t size = sizeof(internal::PrincipalService_SetUser_ResponseParams_Data);
  size += GetSerializedSize_(in_error);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::SetUser), size, request_id_);
  internal::PrincipalService_SetUser_ResponseParams_Data* params =
      internal::PrincipalService_SetUser_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_error, builder.buffer(), &params->error.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class PrincipalService_GetLoggedInUsers_ProxyToResponder
    : public PrincipalService::GetLoggedInUsersCallback::Runnable {
 public:
  ~PrincipalService_GetLoggedInUsers_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "PrincipalService::GetLoggedInUsers(callback) "
        "was never run.";
  }

  PrincipalService_GetLoggedInUsers_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<UserPtr> in_ids) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PrincipalService_GetLoggedInUsers_ProxyToResponder);
};

void PrincipalService_GetLoggedInUsers_ProxyToResponder::Run(
    mojo::Array<UserPtr> in_ids) const {
  size_t size = sizeof(internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data);
  size += GetSerializedSize_(in_ids);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::PrincipalService_Base::MessageOrdinals::GetLoggedInUsers), size, request_id_);
  internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data* params =
      internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams ids_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_ids, builder.buffer(), &params->ids.ptr,
                          &ids_validate_params);
  }
  if (!params->ids.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null ids in PrincipalService.GetLoggedInUsers response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

PrincipalServiceStub::PrincipalServiceStub()
    : sink_(nullptr),
      control_message_handler_(PrincipalService::Version_) {
}

PrincipalServiceStub::~PrincipalServiceStub() {}

bool PrincipalServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::PrincipalService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PrincipalService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PrincipalService_Base::MessageOrdinals::Login: {
      break;
    }
    case internal::PrincipalService_Base::MessageOrdinals::Logout: {
      internal::PrincipalService_Logout_Params_Data* params =
          reinterpret_cast<internal::PrincipalService_Logout_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Logout();
      return true;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetUser: {
      break;
    }
    case internal::PrincipalService_Base::MessageOrdinals::SetUser: {
      break;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetLoggedInUsers: {
      break;
    }
  }
  return false;
}

bool PrincipalServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::PrincipalService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PrincipalService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PrincipalService_Base::MessageOrdinals::Login: {
      internal::PrincipalService_Login_Params_Data* params =
          reinterpret_cast<internal::PrincipalService_Login_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      PrincipalService::LoginCallback::Runnable* runnable =
          new PrincipalService_Login_ProxyToResponder(
              message->request_id(), responder);
      PrincipalService::LoginCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Login(callback);
      return true;
    }
    case internal::PrincipalService_Base::MessageOrdinals::Logout: {
      break;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetUser: {
      internal::PrincipalService_GetUser_Params_Data* params =
          reinterpret_cast<internal::PrincipalService_GetUser_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      PrincipalService::GetUserCallback::Runnable* runnable =
          new PrincipalService_GetUser_ProxyToResponder(
              message->request_id(), responder);
      PrincipalService::GetUserCallback callback(runnable);
      
      AppInstanceNamePtr p_app {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->app.ptr) {
          p_app = AppInstanceName::New();
          Deserialize_(params->app.ptr, p_app.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetUser(p_app.Pass(), callback);
      return true;
    }
    case internal::PrincipalService_Base::MessageOrdinals::SetUser: {
      internal::PrincipalService_SetUser_Params_Data* params =
          reinterpret_cast<internal::PrincipalService_SetUser_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      PrincipalService::SetUserCallback::Runnable* runnable =
          new PrincipalService_SetUser_ProxyToResponder(
              message->request_id(), responder);
      PrincipalService::SetUserCallback callback(runnable);
      
      UserPtr p_user {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->user.ptr) {
          p_user = User::New();
          Deserialize_(params->user.ptr, p_user.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetUser(p_user.Pass(), callback);
      return true;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetLoggedInUsers: {
      internal::PrincipalService_GetLoggedInUsers_Params_Data* params =
          reinterpret_cast<internal::PrincipalService_GetLoggedInUsers_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      PrincipalService::GetLoggedInUsersCallback::Runnable* runnable =
          new PrincipalService_GetLoggedInUsers_ProxyToResponder(
              message->request_id(), responder);
      PrincipalService::GetLoggedInUsersCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetLoggedInUsers(callback);
      return true;
    }
  }
  return false;
}

}  // namespace vanadium
