// NOTE: This file was generated by the Mojo bindings generator.
#include "services/test_service/test_service.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace test {

// --- Interface definitions ---
class TestService_Ping_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestService_Ping_ForwardToCallback(
      const TestService::PingCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestService::PingCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_Ping_ForwardToCallback);
};
bool TestService_Ping_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestService_Ping_ResponseParams_Data* params =
      reinterpret_cast<internal::TestService_Ping_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}
class TestService_ConnectToAppAndGetTime_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestService_ConnectToAppAndGetTime_ForwardToCallback(
      const TestService::ConnectToAppAndGetTimeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestService::ConnectToAppAndGetTimeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_ConnectToAppAndGetTime_ForwardToCallback);
};
bool TestService_ConnectToAppAndGetTime_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data* params =
      reinterpret_cast<internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  int64_t p_time_usec {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_time_usec = params->time_usec;
  } while (false);
  callback_.Run(p_time_usec);
  return true;
}
class TestService_StartTrackingRequests_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestService_StartTrackingRequests_ForwardToCallback(
      const TestService::StartTrackingRequestsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestService::StartTrackingRequestsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_StartTrackingRequests_ForwardToCallback);
};
bool TestService_StartTrackingRequests_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestService_StartTrackingRequests_ResponseParams_Data* params =
      reinterpret_cast<internal::TestService_StartTrackingRequests_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

TestServiceProxy::TestServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestServiceProxy::Ping(
    const PingCallback& callback) {
  size_t size = sizeof(internal::TestService_Ping_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::Ping), size);

  internal::TestService_Ping_Params_Data* params =
      internal::TestService_Ping_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestService_Ping_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TestServiceProxy::ConnectToAppAndGetTime(
    const mojo::String& in_app_url, const ConnectToAppAndGetTimeCallback& callback) {
  size_t size = sizeof(internal::TestService_ConnectToAppAndGetTime_Params_Data);
  size += GetSerializedSize_(in_app_url);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::ConnectToAppAndGetTime), size);

  internal::TestService_ConnectToAppAndGetTime_Params_Data* params =
      internal::TestService_ConnectToAppAndGetTime_Params_Data::New(builder.buffer());
  SerializeString_(in_app_url, builder.buffer(), &params->app_url.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestService_ConnectToAppAndGetTime_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TestServiceProxy::StartTrackingRequests(
    const StartTrackingRequestsCallback& callback) {
  size_t size = sizeof(internal::TestService_StartTrackingRequests_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::StartTrackingRequests), size);

  internal::TestService_StartTrackingRequests_Params_Data* params =
      internal::TestService_StartTrackingRequests_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestService_StartTrackingRequests_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestService_Ping_ProxyToResponder
    : public TestService::PingCallback::Runnable {
 public:
  ~TestService_Ping_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestService::Ping(callback) "
        "was never run.";
  }

  TestService_Ping_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_Ping_ProxyToResponder);
};

void TestService_Ping_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::TestService_Ping_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::Ping), size, request_id_);
  internal::TestService_Ping_ResponseParams_Data* params =
      internal::TestService_Ping_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestService_ConnectToAppAndGetTime_ProxyToResponder
    : public TestService::ConnectToAppAndGetTimeCallback::Runnable {
 public:
  ~TestService_ConnectToAppAndGetTime_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestService::ConnectToAppAndGetTime(p_app_url, callback) "
        "was never run.";
  }

  TestService_ConnectToAppAndGetTime_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(int64_t in_time_usec) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_ConnectToAppAndGetTime_ProxyToResponder);
};

void TestService_ConnectToAppAndGetTime_ProxyToResponder::Run(
    int64_t in_time_usec) const {
  size_t size = sizeof(internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::ConnectToAppAndGetTime), size, request_id_);
  internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data* params =
      internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data::New(builder.buffer());
  params->time_usec = in_time_usec;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestService_StartTrackingRequests_ProxyToResponder
    : public TestService::StartTrackingRequestsCallback::Runnable {
 public:
  ~TestService_StartTrackingRequests_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestService::StartTrackingRequests(callback) "
        "was never run.";
  }

  TestService_StartTrackingRequests_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_StartTrackingRequests_ProxyToResponder);
};

void TestService_StartTrackingRequests_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::TestService_StartTrackingRequests_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::StartTrackingRequests), size, request_id_);
  internal::TestService_StartTrackingRequests_ResponseParams_Data* params =
      internal::TestService_StartTrackingRequests_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TestServiceStub::TestServiceStub()
    : sink_(nullptr),
      control_message_handler_(TestService::Version_) {
}

TestServiceStub::~TestServiceStub() {}

bool TestServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestService_Base::MessageOrdinals::Ping: {
      break;
    }
    case internal::TestService_Base::MessageOrdinals::ConnectToAppAndGetTime: {
      break;
    }
    case internal::TestService_Base::MessageOrdinals::StartTrackingRequests: {
      break;
    }
  }
  return false;
}

bool TestServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestService_Base::MessageOrdinals::Ping: {
      internal::TestService_Ping_Params_Data* params =
          reinterpret_cast<internal::TestService_Ping_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestService::PingCallback::Runnable* runnable =
          new TestService_Ping_ProxyToResponder(
              message->request_id(), responder);
      TestService::PingCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Ping(callback);
      return true;
    }
    case internal::TestService_Base::MessageOrdinals::ConnectToAppAndGetTime: {
      internal::TestService_ConnectToAppAndGetTime_Params_Data* params =
          reinterpret_cast<internal::TestService_ConnectToAppAndGetTime_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestService::ConnectToAppAndGetTimeCallback::Runnable* runnable =
          new TestService_ConnectToAppAndGetTime_ProxyToResponder(
              message->request_id(), responder);
      TestService::ConnectToAppAndGetTimeCallback callback(runnable);
      
      mojo::String p_app_url {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->app_url.ptr, &p_app_url);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ConnectToAppAndGetTime(p_app_url, callback);
      return true;
    }
    case internal::TestService_Base::MessageOrdinals::StartTrackingRequests: {
      internal::TestService_StartTrackingRequests_Params_Data* params =
          reinterpret_cast<internal::TestService_StartTrackingRequests_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestService::StartTrackingRequestsCallback::Runnable* runnable =
          new TestService_StartTrackingRequests_ProxyToResponder(
              message->request_id(), responder);
      TestService::StartTrackingRequestsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StartTrackingRequests(callback);
      return true;
    }
  }
  return false;
}

class TestTimeService_GetPartyTime_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestTimeService_GetPartyTime_ForwardToCallback(
      const TestTimeService::GetPartyTimeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestTimeService::GetPartyTimeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestTimeService_GetPartyTime_ForwardToCallback);
};
bool TestTimeService_GetPartyTime_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestTimeService_GetPartyTime_ResponseParams_Data* params =
      reinterpret_cast<internal::TestTimeService_GetPartyTime_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  int64_t p_time_usec {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_time_usec = params->time_usec;
  } while (false);
  callback_.Run(p_time_usec);
  return true;
}
class TestTimeService_StartTrackingRequests_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestTimeService_StartTrackingRequests_ForwardToCallback(
      const TestTimeService::StartTrackingRequestsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestTimeService::StartTrackingRequestsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestTimeService_StartTrackingRequests_ForwardToCallback);
};
bool TestTimeService_StartTrackingRequests_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestTimeService_StartTrackingRequests_ResponseParams_Data* params =
      reinterpret_cast<internal::TestTimeService_StartTrackingRequests_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

TestTimeServiceProxy::TestTimeServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestTimeServiceProxy::GetPartyTime(
    const GetPartyTimeCallback& callback) {
  size_t size = sizeof(internal::TestTimeService_GetPartyTime_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestTimeService_Base::MessageOrdinals::GetPartyTime), size);

  internal::TestTimeService_GetPartyTime_Params_Data* params =
      internal::TestTimeService_GetPartyTime_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestTimeService_GetPartyTime_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TestTimeServiceProxy::StartTrackingRequests(
    const StartTrackingRequestsCallback& callback) {
  size_t size = sizeof(internal::TestTimeService_StartTrackingRequests_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestTimeService_Base::MessageOrdinals::StartTrackingRequests), size);

  internal::TestTimeService_StartTrackingRequests_Params_Data* params =
      internal::TestTimeService_StartTrackingRequests_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestTimeService_StartTrackingRequests_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestTimeService_GetPartyTime_ProxyToResponder
    : public TestTimeService::GetPartyTimeCallback::Runnable {
 public:
  ~TestTimeService_GetPartyTime_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestTimeService::GetPartyTime(callback) "
        "was never run.";
  }

  TestTimeService_GetPartyTime_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(int64_t in_time_usec) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestTimeService_GetPartyTime_ProxyToResponder);
};

void TestTimeService_GetPartyTime_ProxyToResponder::Run(
    int64_t in_time_usec) const {
  size_t size = sizeof(internal::TestTimeService_GetPartyTime_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestTimeService_Base::MessageOrdinals::GetPartyTime), size, request_id_);
  internal::TestTimeService_GetPartyTime_ResponseParams_Data* params =
      internal::TestTimeService_GetPartyTime_ResponseParams_Data::New(builder.buffer());
  params->time_usec = in_time_usec;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestTimeService_StartTrackingRequests_ProxyToResponder
    : public TestTimeService::StartTrackingRequestsCallback::Runnable {
 public:
  ~TestTimeService_StartTrackingRequests_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestTimeService::StartTrackingRequests(callback) "
        "was never run.";
  }

  TestTimeService_StartTrackingRequests_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestTimeService_StartTrackingRequests_ProxyToResponder);
};

void TestTimeService_StartTrackingRequests_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::TestTimeService_StartTrackingRequests_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestTimeService_Base::MessageOrdinals::StartTrackingRequests), size, request_id_);
  internal::TestTimeService_StartTrackingRequests_ResponseParams_Data* params =
      internal::TestTimeService_StartTrackingRequests_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TestTimeServiceStub::TestTimeServiceStub()
    : sink_(nullptr),
      control_message_handler_(TestTimeService::Version_) {
}

TestTimeServiceStub::~TestTimeServiceStub() {}

bool TestTimeServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestTimeService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestTimeService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestTimeService_Base::MessageOrdinals::GetPartyTime: {
      break;
    }
    case internal::TestTimeService_Base::MessageOrdinals::StartTrackingRequests: {
      break;
    }
  }
  return false;
}

bool TestTimeServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestTimeService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestTimeService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestTimeService_Base::MessageOrdinals::GetPartyTime: {
      internal::TestTimeService_GetPartyTime_Params_Data* params =
          reinterpret_cast<internal::TestTimeService_GetPartyTime_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestTimeService::GetPartyTimeCallback::Runnable* runnable =
          new TestTimeService_GetPartyTime_ProxyToResponder(
              message->request_id(), responder);
      TestTimeService::GetPartyTimeCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetPartyTime(callback);
      return true;
    }
    case internal::TestTimeService_Base::MessageOrdinals::StartTrackingRequests: {
      internal::TestTimeService_StartTrackingRequests_Params_Data* params =
          reinterpret_cast<internal::TestTimeService_StartTrackingRequests_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestTimeService::StartTrackingRequestsCallback::Runnable* runnable =
          new TestTimeService_StartTrackingRequests_ProxyToResponder(
              message->request_id(), responder);
      TestTimeService::StartTrackingRequestsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StartTrackingRequests(callback);
      return true;
    }
  }
  return false;
}

}  // namespace test
}  // namespace mojo
