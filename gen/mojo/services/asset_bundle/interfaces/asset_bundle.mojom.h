// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_ASSET_BUNDLE_INTERFACES_ASSET_BUNDLE_MOJOM_H_
#define MOJO_SERVICES_ASSET_BUNDLE_INTERFACES_ASSET_BUNDLE_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/asset_bundle/interfaces/asset_bundle.mojom-common.h"
namespace mojo {
namespace asset_bundle {

// --- Interface Forward Declarations ---

using AssetBundlePtr = mojo::InterfacePtr<AssetBundle>;

using AssetUnpackerPtr = mojo::InterfacePtr<AssetUnpacker>;


// --- Interface Proxies ---


class AssetBundleProxy
    : public AssetBundle,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit AssetBundleProxy(mojo::MessageReceiverWithResponder* receiver);
  void GetAsStream(
      const mojo::String& asset_name, const GetAsStreamCallback& callback
  ) override;
};


class AssetUnpackerProxy
    : public AssetUnpacker,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit AssetUnpackerProxy(mojo::MessageReceiverWithResponder* receiver);
  void UnpackZipStream(
      mojo::ScopedDataPipeConsumerHandle zipped_assets, mojo::InterfaceRequest<AssetBundle> asset_bundle
  ) override;
};


// --- Interface Stubs ---

class AssetBundleStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  AssetBundleStub();
  ~AssetBundleStub() override;
  void set_sink(AssetBundle* sink) { sink_ = sink; }
  AssetBundle* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  AssetBundle* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class AssetUnpackerStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  AssetUnpackerStub();
  ~AssetUnpackerStub() override;
  void set_sink(AssetUnpacker* sink) { sink_ = sink; }
  AssetUnpacker* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  AssetUnpacker* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace asset_bundle
}  // namespace mojo

#endif  // MOJO_SERVICES_ASSET_BUNDLE_INTERFACES_ASSET_BUNDLE_MOJOM_H_
