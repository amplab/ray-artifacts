// NOTE: This file was generated by the Mojo bindings generator.
#include "services/js/system/tests/js_to_cpp.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace js_to_cpp {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
EchoArgs_Data* EchoArgs_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(EchoArgs_Data))) EchoArgs_Data();
}

// static
mojo::internal::ValidationError EchoArgs_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const EchoArgs_Data* object = static_cast<const EchoArgs_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 104 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->name.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams name_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->name.offset),
          bounds_checker, &name_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->string_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams string_array_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));
  auto validate_retval =
      mojo::Array<mojo::String>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->string_array.offset),
          bounds_checker, &string_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle message_handle_handle = object->message_handle;
  if (!bounds_checker->ClaimHandle(message_handle_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle data_handle_handle = object->data_handle;
  if (!bounds_checker->ClaimHandle(data_handle_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void EchoArgs_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->name, handles);
  mojo::internal::Encode(&this->string_array, handles);
  mojo::internal::EncodeHandle(&this->message_handle, handles);
  mojo::internal::EncodeHandle(&this->data_handle, handles);
}

void EchoArgs_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->name, handles);
  mojo::internal::Decode(&this->string_array, handles);
  mojo::internal::DecodeHandle(&this->message_handle, handles);
  mojo::internal::DecodeHandle(&this->data_handle, handles);
}

EchoArgs_Data::EchoArgs_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
EchoArgsList_Data* EchoArgsList_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(EchoArgsList_Data))) EchoArgsList_Data();
}

// static
mojo::internal::ValidationError EchoArgsList_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const EchoArgsList_Data* object = static_cast<const EchoArgsList_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->next.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgsList::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->next.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->item.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgs::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->item.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void EchoArgsList_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->next, handles);
  mojo::internal::Encode(&this->item, handles);
}

void EchoArgsList_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->next, handles);
  mojo::internal::Decode(&this->item, handles);
}

EchoArgsList_Data::EchoArgsList_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
CppSide_StartTest_Params_Data* CppSide_StartTest_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CppSide_StartTest_Params_Data))) CppSide_StartTest_Params_Data();
}

// static
mojo::internal::ValidationError CppSide_StartTest_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CppSide_StartTest_Params_Data* object = static_cast<const CppSide_StartTest_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CppSide_StartTest_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CppSide_StartTest_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CppSide_StartTest_Params_Data::CppSide_StartTest_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CppSide_TestFinished_Params_Data* CppSide_TestFinished_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CppSide_TestFinished_Params_Data))) CppSide_TestFinished_Params_Data();
}

// static
mojo::internal::ValidationError CppSide_TestFinished_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CppSide_TestFinished_Params_Data* object = static_cast<const CppSide_TestFinished_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CppSide_TestFinished_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CppSide_TestFinished_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CppSide_TestFinished_Params_Data::CppSide_TestFinished_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CppSide_PingResponse_Params_Data* CppSide_PingResponse_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CppSide_PingResponse_Params_Data))) CppSide_PingResponse_Params_Data();
}

// static
mojo::internal::ValidationError CppSide_PingResponse_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CppSide_PingResponse_Params_Data* object = static_cast<const CppSide_PingResponse_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CppSide_PingResponse_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CppSide_PingResponse_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CppSide_PingResponse_Params_Data::CppSide_PingResponse_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CppSide_EchoResponse_Params_Data* CppSide_EchoResponse_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CppSide_EchoResponse_Params_Data))) CppSide_EchoResponse_Params_Data();
}

// static
mojo::internal::ValidationError CppSide_EchoResponse_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CppSide_EchoResponse_Params_Data* object = static_cast<const CppSide_EchoResponse_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->list.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null list field in CppSide_EchoResponse_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->list.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgsList::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->list.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CppSide_EchoResponse_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->list, handles);
}

void CppSide_EchoResponse_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->list, handles);
}

CppSide_EchoResponse_Params_Data::CppSide_EchoResponse_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CppSide_BitFlipResponse_Params_Data* CppSide_BitFlipResponse_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CppSide_BitFlipResponse_Params_Data))) CppSide_BitFlipResponse_Params_Data();
}

// static
mojo::internal::ValidationError CppSide_BitFlipResponse_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CppSide_BitFlipResponse_Params_Data* object = static_cast<const CppSide_BitFlipResponse_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->arg.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null arg field in CppSide_BitFlipResponse_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->arg.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgsList::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->arg.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CppSide_BitFlipResponse_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->arg, handles);
}

void CppSide_BitFlipResponse_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->arg, handles);
}

CppSide_BitFlipResponse_Params_Data::CppSide_BitFlipResponse_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CppSide_BackPointerResponse_Params_Data* CppSide_BackPointerResponse_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CppSide_BackPointerResponse_Params_Data))) CppSide_BackPointerResponse_Params_Data();
}

// static
mojo::internal::ValidationError CppSide_BackPointerResponse_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CppSide_BackPointerResponse_Params_Data* object = static_cast<const CppSide_BackPointerResponse_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->arg.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null arg field in CppSide_BackPointerResponse_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->arg.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgsList::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->arg.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CppSide_BackPointerResponse_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->arg, handles);
}

void CppSide_BackPointerResponse_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->arg, handles);
}

CppSide_BackPointerResponse_Params_Data::CppSide_BackPointerResponse_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
JsSide_SetCppSide_Params_Data* JsSide_SetCppSide_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(JsSide_SetCppSide_Params_Data))) JsSide_SetCppSide_Params_Data();
}

// static
mojo::internal::ValidationError JsSide_SetCppSide_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const JsSide_SetCppSide_Params_Data* object = static_cast<const JsSide_SetCppSide_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle cpp_handle = object->cpp.handle;
  if (cpp_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid cpp field in JsSide_SetCppSide_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(cpp_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void JsSide_SetCppSide_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->cpp, handles);
}

void JsSide_SetCppSide_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->cpp, handles);
}

JsSide_SetCppSide_Params_Data::JsSide_SetCppSide_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
JsSide_Ping_Params_Data* JsSide_Ping_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(JsSide_Ping_Params_Data))) JsSide_Ping_Params_Data();
}

// static
mojo::internal::ValidationError JsSide_Ping_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const JsSide_Ping_Params_Data* object = static_cast<const JsSide_Ping_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void JsSide_Ping_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void JsSide_Ping_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

JsSide_Ping_Params_Data::JsSide_Ping_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
JsSide_Echo_Params_Data* JsSide_Echo_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(JsSide_Echo_Params_Data))) JsSide_Echo_Params_Data();
}

// static
mojo::internal::ValidationError JsSide_Echo_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const JsSide_Echo_Params_Data* object = static_cast<const JsSide_Echo_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->arg.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null arg field in JsSide_Echo_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->arg.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgs::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->arg.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void JsSide_Echo_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->arg, handles);
}

void JsSide_Echo_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->arg, handles);
}

JsSide_Echo_Params_Data::JsSide_Echo_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
JsSide_BitFlip_Params_Data* JsSide_BitFlip_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(JsSide_BitFlip_Params_Data))) JsSide_BitFlip_Params_Data();
}

// static
mojo::internal::ValidationError JsSide_BitFlip_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const JsSide_BitFlip_Params_Data* object = static_cast<const JsSide_BitFlip_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->arg.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null arg field in JsSide_BitFlip_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->arg.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgs::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->arg.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void JsSide_BitFlip_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->arg, handles);
}

void JsSide_BitFlip_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->arg, handles);
}

JsSide_BitFlip_Params_Data::JsSide_BitFlip_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
JsSide_BackPointer_Params_Data* JsSide_BackPointer_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(JsSide_BackPointer_Params_Data))) JsSide_BackPointer_Params_Data();
}

// static
mojo::internal::ValidationError JsSide_BackPointer_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const JsSide_BackPointer_Params_Data* object = static_cast<const JsSide_BackPointer_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->arg.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null arg field in JsSide_BackPointer_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->arg.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = EchoArgs::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->arg.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void JsSide_BackPointer_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->arg, handles);
}

void JsSide_BackPointer_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->arg, handles);
}

JsSide_BackPointer_Params_Data::JsSide_BackPointer_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError CppSideRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'CppSide', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::CppSide_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CppSide_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CppSide_Base::MessageOrdinals::StartTest: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CppSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CppSide_StartTest_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CppSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CppSide_Base::MessageOrdinals::TestFinished: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CppSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CppSide_TestFinished_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CppSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CppSide_Base::MessageOrdinals::PingResponse: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CppSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CppSide_PingResponse_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CppSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CppSide_Base::MessageOrdinals::EchoResponse: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CppSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CppSide_EchoResponse_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CppSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CppSide_Base::MessageOrdinals::BitFlipResponse: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CppSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CppSide_BitFlipResponse_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CppSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CppSide_Base::MessageOrdinals::BackPointerResponse: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CppSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CppSide_BackPointerResponse_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CppSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'CppSide'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError JsSideRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'JsSide', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::JsSide_Base::MessageOrdinals method_ordinal =
      static_cast<internal::JsSide_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::JsSide_Base::MessageOrdinals::SetCppSide: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'JsSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::JsSide_SetCppSide_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'JsSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::JsSide_Base::MessageOrdinals::Ping: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'JsSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::JsSide_Ping_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'JsSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::JsSide_Base::MessageOrdinals::Echo: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'JsSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::JsSide_Echo_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'JsSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::JsSide_Base::MessageOrdinals::BitFlip: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'JsSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::JsSide_BitFlip_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'JsSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::JsSide_Base::MessageOrdinals::BackPointer: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'JsSide', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::JsSide_BackPointer_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'JsSide', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'JsSide'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::CppSide_Base::Version_;

// Constants

// Enums
const uint32_t internal::JsSide_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
EchoArgsPtr EchoArgs::New() {
  EchoArgsPtr rv;
  mojo::internal::StructHelper<EchoArgs>::Initialize(&rv);
  return rv;
}

EchoArgs::EchoArgs()
    : si64(),
      si32(),
      si16(),
      si8(),
      ui64(),
      ui32(),
      ui16(),
      ui8(),
      float_val(),
      float_inf(),
      float_nan(),
      double_val(),
      double_inf(),
      double_nan(),
      name(),
      string_array(),
      message_handle(),
      data_handle() {
}

EchoArgs::~EchoArgs() {
}



bool EchoArgs::Equals(const EchoArgs& other) const {
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->si64, other.si64))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->si32, other.si32))
    return false;
  if (!mojo::internal::ValueTraits<int16_t>::Equals(this->si16, other.si16))
    return false;
  if (!mojo::internal::ValueTraits<int8_t>::Equals(this->si8, other.si8))
    return false;
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->ui64, other.ui64))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->ui32, other.ui32))
    return false;
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->ui16, other.ui16))
    return false;
  if (!mojo::internal::ValueTraits<uint8_t>::Equals(this->ui8, other.ui8))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->float_val, other.float_val))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->float_inf, other.float_inf))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->float_nan, other.float_nan))
    return false;
  if (!mojo::internal::ValueTraits<double>::Equals(this->double_val, other.double_val))
    return false;
  if (!mojo::internal::ValueTraits<double>::Equals(this->double_inf, other.double_inf))
    return false;
  if (!mojo::internal::ValueTraits<double>::Equals(this->double_nan, other.double_nan))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->name, other.name))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::String>>::Equals(this->string_array, other.string_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedMessagePipeHandle>::Equals(this->message_handle, other.message_handle))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->data_handle, other.data_handle))
    return false;
  return true;
}


// static
EchoArgsListPtr EchoArgsList::New() {
  EchoArgsListPtr rv;
  mojo::internal::StructHelper<EchoArgsList>::Initialize(&rv);
  return rv;
}

EchoArgsList::EchoArgsList()
    : next(),
      item() {
}

EchoArgsList::~EchoArgsList() {
}



bool EchoArgsList::Equals(const EchoArgsList& other) const {
  if (!mojo::internal::ValueTraits<EchoArgsListPtr>::Equals(this->next, other.next))
    return false;
  if (!mojo::internal::ValueTraits<EchoArgsPtr>::Equals(this->item, other.item))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t EchoArgs::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool EchoArgs::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::EchoArgs_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool EchoArgs::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::EchoArgs_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void EchoArgs::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::EchoArgs_Data* input =
      static_cast<internal::EchoArgs_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const EchoArgs& input) {
  size_t size = sizeof(internal::EchoArgs_Data);
  size += GetSerializedSize_(input.name);
  size += GetSerializedSize_(input.string_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    EchoArgs* input,
    mojo::internal::Buffer* buf,
    internal::EchoArgs_Data** output) {
  if (input) {
    internal::EchoArgs_Data* result =
        internal::EchoArgs_Data::New(buf);
    result->si64 = input->si64;
    result->si32 = input->si32;
    result->si16 = input->si16;
    result->si8 = input->si8;
    result->ui64 = input->ui64;
    result->ui32 = input->ui32;
    result->ui16 = input->ui16;
    result->ui8 = input->ui8;
    result->float_val = input->float_val;
    result->float_inf = input->float_inf;
    result->float_nan = input->float_nan;
    result->double_val = input->double_val;
    result->double_inf = input->double_inf;
    result->double_nan = input->double_nan;
    SerializeString_(input->name, buf, &result->name.ptr);
    {
      const mojo::internal::ArrayValidateParams string_array_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));auto retval =mojo::SerializeArray_(&input->string_array, buf, &result->string_array.ptr,
                            &string_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    result->message_handle = input->message_handle.release();
    result->data_handle = input->data_handle.release();
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::EchoArgs_Data* input,
                  EchoArgs* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->si64 = input->si64;
      result->si32 = input->si32;
      result->si16 = input->si16;
      result->si8 = input->si8;
      result->ui64 = input->ui64;
      result->ui32 = input->ui32;
      result->ui16 = input->ui16;
      result->ui8 = input->ui8;
      result->float_val = input->float_val;
      result->float_inf = input->float_inf;
      result->float_nan = input->float_nan;
      result->double_val = input->double_val;
      result->double_inf = input->double_inf;
      result->double_nan = input->double_nan;
      Deserialize_(input->name.ptr, &result->name);
      Deserialize_(input->string_array.ptr, &result->string_array);
      result->message_handle.reset(mojo::internal::FetchAndReset(&input->message_handle));
      result->data_handle.reset(mojo::internal::FetchAndReset(&input->data_handle));
    } while (false);
  }
}


size_t EchoArgsList::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool EchoArgsList::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::EchoArgsList_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool EchoArgsList::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::EchoArgsList_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void EchoArgsList::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::EchoArgsList_Data* input =
      static_cast<internal::EchoArgsList_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const EchoArgsList& input) {
  size_t size = sizeof(internal::EchoArgsList_Data);
  size += input.next.is_null()
              ? 0
              : GetSerializedSize_(*input.next);
  size += input.item.is_null()
              ? 0
              : GetSerializedSize_(*input.item);
  return size;
}

mojo::internal::ValidationError Serialize_(
    EchoArgsList* input,
    mojo::internal::Buffer* buf,
    internal::EchoArgsList_Data** output) {
  if (input) {
    internal::EchoArgsList_Data* result =
        internal::EchoArgsList_Data::New(buf);
    {auto retval =Serialize_(input->next.get(),
                 buf,
                 &result->next.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {auto retval =Serialize_(input->item.get(),
                 buf,
                 &result->item.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::EchoArgsList_Data* input,
                  EchoArgsList* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->next.ptr) {
        result->next = EchoArgsList::New();
        Deserialize_(input->next.ptr, result->next.get());
      }
      if (input->item.ptr) {
        result->item = EchoArgs::New();
        Deserialize_(input->item.ptr, result->item.get());
      }
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
CppSide_StartTest_ParamsPtr CppSide_StartTest_Params::New() {
  CppSide_StartTest_ParamsPtr rv;
  mojo::internal::StructHelper<CppSide_StartTest_Params>::Initialize(&rv);
  return rv;
}

CppSide_StartTest_Params::CppSide_StartTest_Params() {
}

CppSide_StartTest_Params::~CppSide_StartTest_Params() {
}


CppSide_StartTest_ParamsPtr CppSide_StartTest_Params::Clone() const {
  CppSide_StartTest_ParamsPtr rv(New());
  return rv;
}


bool CppSide_StartTest_Params::Equals(const CppSide_StartTest_Params& other) const {
  return true;
}


size_t CppSide_StartTest_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CppSide_StartTest_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CppSide_StartTest_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CppSide_StartTest_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CppSide_StartTest_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CppSide_StartTest_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CppSide_StartTest_Params_Data* input =
      static_cast<internal::CppSide_StartTest_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CppSide_StartTest_Params& input) {
  size_t size = sizeof(internal::CppSide_StartTest_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CppSide_StartTest_Params* input,
    mojo::internal::Buffer* buf,
    internal::CppSide_StartTest_Params_Data** output) {
  if (input) {
    internal::CppSide_StartTest_Params_Data* result =
        internal::CppSide_StartTest_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CppSide_StartTest_Params_Data* input,
                  CppSide_StartTest_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
CppSide_TestFinished_ParamsPtr CppSide_TestFinished_Params::New() {
  CppSide_TestFinished_ParamsPtr rv;
  mojo::internal::StructHelper<CppSide_TestFinished_Params>::Initialize(&rv);
  return rv;
}

CppSide_TestFinished_Params::CppSide_TestFinished_Params() {
}

CppSide_TestFinished_Params::~CppSide_TestFinished_Params() {
}


CppSide_TestFinished_ParamsPtr CppSide_TestFinished_Params::Clone() const {
  CppSide_TestFinished_ParamsPtr rv(New());
  return rv;
}


bool CppSide_TestFinished_Params::Equals(const CppSide_TestFinished_Params& other) const {
  return true;
}


size_t CppSide_TestFinished_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CppSide_TestFinished_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CppSide_TestFinished_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CppSide_TestFinished_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CppSide_TestFinished_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CppSide_TestFinished_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CppSide_TestFinished_Params_Data* input =
      static_cast<internal::CppSide_TestFinished_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CppSide_TestFinished_Params& input) {
  size_t size = sizeof(internal::CppSide_TestFinished_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CppSide_TestFinished_Params* input,
    mojo::internal::Buffer* buf,
    internal::CppSide_TestFinished_Params_Data** output) {
  if (input) {
    internal::CppSide_TestFinished_Params_Data* result =
        internal::CppSide_TestFinished_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CppSide_TestFinished_Params_Data* input,
                  CppSide_TestFinished_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
CppSide_PingResponse_ParamsPtr CppSide_PingResponse_Params::New() {
  CppSide_PingResponse_ParamsPtr rv;
  mojo::internal::StructHelper<CppSide_PingResponse_Params>::Initialize(&rv);
  return rv;
}

CppSide_PingResponse_Params::CppSide_PingResponse_Params() {
}

CppSide_PingResponse_Params::~CppSide_PingResponse_Params() {
}


CppSide_PingResponse_ParamsPtr CppSide_PingResponse_Params::Clone() const {
  CppSide_PingResponse_ParamsPtr rv(New());
  return rv;
}


bool CppSide_PingResponse_Params::Equals(const CppSide_PingResponse_Params& other) const {
  return true;
}


size_t CppSide_PingResponse_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CppSide_PingResponse_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CppSide_PingResponse_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CppSide_PingResponse_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CppSide_PingResponse_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CppSide_PingResponse_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CppSide_PingResponse_Params_Data* input =
      static_cast<internal::CppSide_PingResponse_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CppSide_PingResponse_Params& input) {
  size_t size = sizeof(internal::CppSide_PingResponse_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CppSide_PingResponse_Params* input,
    mojo::internal::Buffer* buf,
    internal::CppSide_PingResponse_Params_Data** output) {
  if (input) {
    internal::CppSide_PingResponse_Params_Data* result =
        internal::CppSide_PingResponse_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CppSide_PingResponse_Params_Data* input,
                  CppSide_PingResponse_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
CppSide_EchoResponse_ParamsPtr CppSide_EchoResponse_Params::New() {
  CppSide_EchoResponse_ParamsPtr rv;
  mojo::internal::StructHelper<CppSide_EchoResponse_Params>::Initialize(&rv);
  return rv;
}

CppSide_EchoResponse_Params::CppSide_EchoResponse_Params()
    : list() {
}

CppSide_EchoResponse_Params::~CppSide_EchoResponse_Params() {
}



bool CppSide_EchoResponse_Params::Equals(const CppSide_EchoResponse_Params& other) const {
  if (!mojo::internal::ValueTraits<EchoArgsListPtr>::Equals(this->list, other.list))
    return false;
  return true;
}


size_t CppSide_EchoResponse_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CppSide_EchoResponse_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CppSide_EchoResponse_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CppSide_EchoResponse_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CppSide_EchoResponse_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CppSide_EchoResponse_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CppSide_EchoResponse_Params_Data* input =
      static_cast<internal::CppSide_EchoResponse_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CppSide_EchoResponse_Params& input) {
  size_t size = sizeof(internal::CppSide_EchoResponse_Params_Data);
  size += input.list.is_null()
              ? 0
              : GetSerializedSize_(*input.list);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CppSide_EchoResponse_Params* input,
    mojo::internal::Buffer* buf,
    internal::CppSide_EchoResponse_Params_Data** output) {
  if (input) {
    internal::CppSide_EchoResponse_Params_Data* result =
        internal::CppSide_EchoResponse_Params_Data::New(buf);
    {auto retval =Serialize_(input->list.get(),
                 buf,
                 &result->list.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->list.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null list in CppSide_EchoResponse_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CppSide_EchoResponse_Params_Data* input,
                  CppSide_EchoResponse_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->list.ptr) {
        result->list = EchoArgsList::New();
        Deserialize_(input->list.ptr, result->list.get());
      }
    } while (false);
  }
}



// static
CppSide_BitFlipResponse_ParamsPtr CppSide_BitFlipResponse_Params::New() {
  CppSide_BitFlipResponse_ParamsPtr rv;
  mojo::internal::StructHelper<CppSide_BitFlipResponse_Params>::Initialize(&rv);
  return rv;
}

CppSide_BitFlipResponse_Params::CppSide_BitFlipResponse_Params()
    : arg() {
}

CppSide_BitFlipResponse_Params::~CppSide_BitFlipResponse_Params() {
}



bool CppSide_BitFlipResponse_Params::Equals(const CppSide_BitFlipResponse_Params& other) const {
  if (!mojo::internal::ValueTraits<EchoArgsListPtr>::Equals(this->arg, other.arg))
    return false;
  return true;
}


size_t CppSide_BitFlipResponse_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CppSide_BitFlipResponse_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CppSide_BitFlipResponse_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CppSide_BitFlipResponse_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CppSide_BitFlipResponse_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CppSide_BitFlipResponse_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CppSide_BitFlipResponse_Params_Data* input =
      static_cast<internal::CppSide_BitFlipResponse_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CppSide_BitFlipResponse_Params& input) {
  size_t size = sizeof(internal::CppSide_BitFlipResponse_Params_Data);
  size += input.arg.is_null()
              ? 0
              : GetSerializedSize_(*input.arg);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CppSide_BitFlipResponse_Params* input,
    mojo::internal::Buffer* buf,
    internal::CppSide_BitFlipResponse_Params_Data** output) {
  if (input) {
    internal::CppSide_BitFlipResponse_Params_Data* result =
        internal::CppSide_BitFlipResponse_Params_Data::New(buf);
    {auto retval =Serialize_(input->arg.get(),
                 buf,
                 &result->arg.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->arg.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in CppSide_BitFlipResponse_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CppSide_BitFlipResponse_Params_Data* input,
                  CppSide_BitFlipResponse_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->arg.ptr) {
        result->arg = EchoArgsList::New();
        Deserialize_(input->arg.ptr, result->arg.get());
      }
    } while (false);
  }
}



// static
CppSide_BackPointerResponse_ParamsPtr CppSide_BackPointerResponse_Params::New() {
  CppSide_BackPointerResponse_ParamsPtr rv;
  mojo::internal::StructHelper<CppSide_BackPointerResponse_Params>::Initialize(&rv);
  return rv;
}

CppSide_BackPointerResponse_Params::CppSide_BackPointerResponse_Params()
    : arg() {
}

CppSide_BackPointerResponse_Params::~CppSide_BackPointerResponse_Params() {
}



bool CppSide_BackPointerResponse_Params::Equals(const CppSide_BackPointerResponse_Params& other) const {
  if (!mojo::internal::ValueTraits<EchoArgsListPtr>::Equals(this->arg, other.arg))
    return false;
  return true;
}


size_t CppSide_BackPointerResponse_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CppSide_BackPointerResponse_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CppSide_BackPointerResponse_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CppSide_BackPointerResponse_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CppSide_BackPointerResponse_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CppSide_BackPointerResponse_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CppSide_BackPointerResponse_Params_Data* input =
      static_cast<internal::CppSide_BackPointerResponse_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CppSide_BackPointerResponse_Params& input) {
  size_t size = sizeof(internal::CppSide_BackPointerResponse_Params_Data);
  size += input.arg.is_null()
              ? 0
              : GetSerializedSize_(*input.arg);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CppSide_BackPointerResponse_Params* input,
    mojo::internal::Buffer* buf,
    internal::CppSide_BackPointerResponse_Params_Data** output) {
  if (input) {
    internal::CppSide_BackPointerResponse_Params_Data* result =
        internal::CppSide_BackPointerResponse_Params_Data::New(buf);
    {auto retval =Serialize_(input->arg.get(),
                 buf,
                 &result->arg.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->arg.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in CppSide_BackPointerResponse_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CppSide_BackPointerResponse_Params_Data* input,
                  CppSide_BackPointerResponse_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->arg.ptr) {
        result->arg = EchoArgsList::New();
        Deserialize_(input->arg.ptr, result->arg.get());
      }
    } while (false);
  }
}



// static
JsSide_SetCppSide_ParamsPtr JsSide_SetCppSide_Params::New() {
  JsSide_SetCppSide_ParamsPtr rv;
  mojo::internal::StructHelper<JsSide_SetCppSide_Params>::Initialize(&rv);
  return rv;
}

JsSide_SetCppSide_Params::JsSide_SetCppSide_Params()
    : cpp() {
}

JsSide_SetCppSide_Params::~JsSide_SetCppSide_Params() {
}



bool JsSide_SetCppSide_Params::Equals(const JsSide_SetCppSide_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<CppSide>>::Equals(this->cpp, other.cpp))
    return false;
  return true;
}


size_t JsSide_SetCppSide_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool JsSide_SetCppSide_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::JsSide_SetCppSide_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool JsSide_SetCppSide_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::JsSide_SetCppSide_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void JsSide_SetCppSide_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::JsSide_SetCppSide_Params_Data* input =
      static_cast<internal::JsSide_SetCppSide_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const JsSide_SetCppSide_Params& input) {
  size_t size = sizeof(internal::JsSide_SetCppSide_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    JsSide_SetCppSide_Params* input,
    mojo::internal::Buffer* buf,
    internal::JsSide_SetCppSide_Params_Data** output) {
  if (input) {
    internal::JsSide_SetCppSide_Params_Data* result =
        internal::JsSide_SetCppSide_Params_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->cpp.Pass(),
                                          &result->cpp);
    if (!result->cpp.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid cpp in JsSide_SetCppSide_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::JsSide_SetCppSide_Params_Data* input,
                  JsSide_SetCppSide_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->cpp, &result->cpp);
    } while (false);
  }
}



// static
JsSide_Ping_ParamsPtr JsSide_Ping_Params::New() {
  JsSide_Ping_ParamsPtr rv;
  mojo::internal::StructHelper<JsSide_Ping_Params>::Initialize(&rv);
  return rv;
}

JsSide_Ping_Params::JsSide_Ping_Params() {
}

JsSide_Ping_Params::~JsSide_Ping_Params() {
}


JsSide_Ping_ParamsPtr JsSide_Ping_Params::Clone() const {
  JsSide_Ping_ParamsPtr rv(New());
  return rv;
}


bool JsSide_Ping_Params::Equals(const JsSide_Ping_Params& other) const {
  return true;
}


size_t JsSide_Ping_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool JsSide_Ping_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::JsSide_Ping_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool JsSide_Ping_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::JsSide_Ping_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void JsSide_Ping_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::JsSide_Ping_Params_Data* input =
      static_cast<internal::JsSide_Ping_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const JsSide_Ping_Params& input) {
  size_t size = sizeof(internal::JsSide_Ping_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    JsSide_Ping_Params* input,
    mojo::internal::Buffer* buf,
    internal::JsSide_Ping_Params_Data** output) {
  if (input) {
    internal::JsSide_Ping_Params_Data* result =
        internal::JsSide_Ping_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::JsSide_Ping_Params_Data* input,
                  JsSide_Ping_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
JsSide_Echo_ParamsPtr JsSide_Echo_Params::New() {
  JsSide_Echo_ParamsPtr rv;
  mojo::internal::StructHelper<JsSide_Echo_Params>::Initialize(&rv);
  return rv;
}

JsSide_Echo_Params::JsSide_Echo_Params()
    : numIterations(),
      arg() {
}

JsSide_Echo_Params::~JsSide_Echo_Params() {
}



bool JsSide_Echo_Params::Equals(const JsSide_Echo_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->numIterations, other.numIterations))
    return false;
  if (!mojo::internal::ValueTraits<EchoArgsPtr>::Equals(this->arg, other.arg))
    return false;
  return true;
}


size_t JsSide_Echo_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool JsSide_Echo_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::JsSide_Echo_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool JsSide_Echo_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::JsSide_Echo_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void JsSide_Echo_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::JsSide_Echo_Params_Data* input =
      static_cast<internal::JsSide_Echo_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const JsSide_Echo_Params& input) {
  size_t size = sizeof(internal::JsSide_Echo_Params_Data);
  size += input.arg.is_null()
              ? 0
              : GetSerializedSize_(*input.arg);
  return size;
}

mojo::internal::ValidationError Serialize_(
    JsSide_Echo_Params* input,
    mojo::internal::Buffer* buf,
    internal::JsSide_Echo_Params_Data** output) {
  if (input) {
    internal::JsSide_Echo_Params_Data* result =
        internal::JsSide_Echo_Params_Data::New(buf);
    result->numIterations = input->numIterations;
    {auto retval =Serialize_(input->arg.get(),
                 buf,
                 &result->arg.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->arg.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in JsSide_Echo_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::JsSide_Echo_Params_Data* input,
                  JsSide_Echo_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->numIterations = input->numIterations;
      if (input->arg.ptr) {
        result->arg = EchoArgs::New();
        Deserialize_(input->arg.ptr, result->arg.get());
      }
    } while (false);
  }
}



// static
JsSide_BitFlip_ParamsPtr JsSide_BitFlip_Params::New() {
  JsSide_BitFlip_ParamsPtr rv;
  mojo::internal::StructHelper<JsSide_BitFlip_Params>::Initialize(&rv);
  return rv;
}

JsSide_BitFlip_Params::JsSide_BitFlip_Params()
    : arg() {
}

JsSide_BitFlip_Params::~JsSide_BitFlip_Params() {
}



bool JsSide_BitFlip_Params::Equals(const JsSide_BitFlip_Params& other) const {
  if (!mojo::internal::ValueTraits<EchoArgsPtr>::Equals(this->arg, other.arg))
    return false;
  return true;
}


size_t JsSide_BitFlip_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool JsSide_BitFlip_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::JsSide_BitFlip_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool JsSide_BitFlip_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::JsSide_BitFlip_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void JsSide_BitFlip_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::JsSide_BitFlip_Params_Data* input =
      static_cast<internal::JsSide_BitFlip_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const JsSide_BitFlip_Params& input) {
  size_t size = sizeof(internal::JsSide_BitFlip_Params_Data);
  size += input.arg.is_null()
              ? 0
              : GetSerializedSize_(*input.arg);
  return size;
}

mojo::internal::ValidationError Serialize_(
    JsSide_BitFlip_Params* input,
    mojo::internal::Buffer* buf,
    internal::JsSide_BitFlip_Params_Data** output) {
  if (input) {
    internal::JsSide_BitFlip_Params_Data* result =
        internal::JsSide_BitFlip_Params_Data::New(buf);
    {auto retval =Serialize_(input->arg.get(),
                 buf,
                 &result->arg.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->arg.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in JsSide_BitFlip_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::JsSide_BitFlip_Params_Data* input,
                  JsSide_BitFlip_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->arg.ptr) {
        result->arg = EchoArgs::New();
        Deserialize_(input->arg.ptr, result->arg.get());
      }
    } while (false);
  }
}



// static
JsSide_BackPointer_ParamsPtr JsSide_BackPointer_Params::New() {
  JsSide_BackPointer_ParamsPtr rv;
  mojo::internal::StructHelper<JsSide_BackPointer_Params>::Initialize(&rv);
  return rv;
}

JsSide_BackPointer_Params::JsSide_BackPointer_Params()
    : arg() {
}

JsSide_BackPointer_Params::~JsSide_BackPointer_Params() {
}



bool JsSide_BackPointer_Params::Equals(const JsSide_BackPointer_Params& other) const {
  if (!mojo::internal::ValueTraits<EchoArgsPtr>::Equals(this->arg, other.arg))
    return false;
  return true;
}


size_t JsSide_BackPointer_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool JsSide_BackPointer_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::JsSide_BackPointer_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool JsSide_BackPointer_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::JsSide_BackPointer_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void JsSide_BackPointer_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::JsSide_BackPointer_Params_Data* input =
      static_cast<internal::JsSide_BackPointer_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const JsSide_BackPointer_Params& input) {
  size_t size = sizeof(internal::JsSide_BackPointer_Params_Data);
  size += input.arg.is_null()
              ? 0
              : GetSerializedSize_(*input.arg);
  return size;
}

mojo::internal::ValidationError Serialize_(
    JsSide_BackPointer_Params* input,
    mojo::internal::Buffer* buf,
    internal::JsSide_BackPointer_Params_Data** output) {
  if (input) {
    internal::JsSide_BackPointer_Params_Data* result =
        internal::JsSide_BackPointer_Params_Data::New(buf);
    {auto retval =Serialize_(input->arg.get(),
                 buf,
                 &result->arg.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->arg.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in JsSide_BackPointer_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::JsSide_BackPointer_Params_Data* input,
                  JsSide_BackPointer_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->arg.ptr) {
        result->arg = EchoArgs::New();
        Deserialize_(input->arg.ptr, result->arg.get());
      }
    } while (false);
  }
}

}  // namespace js_to_cpp
