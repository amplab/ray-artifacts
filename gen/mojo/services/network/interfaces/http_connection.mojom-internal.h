// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/network/network_error.mojom-internal.h"
#include "mojo/services/network/interfaces/http_message.mojom-internal.h"
#include "mojo/services/network/interfaces/web_socket.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {



namespace internal {




#pragma pack(push, 1)



class HttpConnection_SetSendBufferSize_Params_Data {
 public:
  static HttpConnection_SetSendBufferSize_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t size;
  uint8_t padfinal_[4];

 private:
  HttpConnection_SetSendBufferSize_Params_Data();
  ~HttpConnection_SetSendBufferSize_Params_Data() = delete;
};
static_assert(sizeof(HttpConnection_SetSendBufferSize_Params_Data) == 16,
              "Bad sizeof(HttpConnection_SetSendBufferSize_Params_Data)");

class HttpConnection_SetSendBufferSize_ResponseParams_Data {
 public:
  static HttpConnection_SetSendBufferSize_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;

 private:
  HttpConnection_SetSendBufferSize_ResponseParams_Data();
  ~HttpConnection_SetSendBufferSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpConnection_SetSendBufferSize_ResponseParams_Data) == 16,
              "Bad sizeof(HttpConnection_SetSendBufferSize_ResponseParams_Data)");


class HttpConnection_SetReceiveBufferSize_Params_Data {
 public:
  static HttpConnection_SetReceiveBufferSize_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t size;
  uint8_t padfinal_[4];

 private:
  HttpConnection_SetReceiveBufferSize_Params_Data();
  ~HttpConnection_SetReceiveBufferSize_Params_Data() = delete;
};
static_assert(sizeof(HttpConnection_SetReceiveBufferSize_Params_Data) == 16,
              "Bad sizeof(HttpConnection_SetReceiveBufferSize_Params_Data)");

class HttpConnection_SetReceiveBufferSize_ResponseParams_Data {
 public:
  static HttpConnection_SetReceiveBufferSize_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;

 private:
  HttpConnection_SetReceiveBufferSize_ResponseParams_Data();
  ~HttpConnection_SetReceiveBufferSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpConnection_SetReceiveBufferSize_ResponseParams_Data) == 16,
              "Bad sizeof(HttpConnection_SetReceiveBufferSize_ResponseParams_Data)");


class HttpConnectionDelegate_OnReceivedRequest_Params_Data {
 public:
  static HttpConnectionDelegate_OnReceivedRequest_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::HttpRequest_Data> request;

 private:
  HttpConnectionDelegate_OnReceivedRequest_Params_Data();
  ~HttpConnectionDelegate_OnReceivedRequest_Params_Data() = delete;
};
static_assert(sizeof(HttpConnectionDelegate_OnReceivedRequest_Params_Data) == 16,
              "Bad sizeof(HttpConnectionDelegate_OnReceivedRequest_Params_Data)");

class HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data {
 public:
  static HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::HttpResponse_Data> response;

 private:
  HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data();
  ~HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data) == 16,
              "Bad sizeof(HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data)");


class HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data {
 public:
  static HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::HttpRequest_Data> request;

 private:
  HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data();
  ~HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data() = delete;
};
static_assert(sizeof(HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data) == 16,
              "Bad sizeof(HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data)");

class HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data {
 public:
  static HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle web_socket;
  mojo::DataPipeConsumerHandle send_stream;
  mojo::internal::Interface_Data client;

 private:
  HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data();
  ~HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data) == 24,
              "Bad sizeof(HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_INTERNAL_H_
