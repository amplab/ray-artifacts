// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/surfaces/interfaces/display.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class Display_SubmitFrame_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Display_SubmitFrame_ForwardToCallback(
      const Display::SubmitFrameCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Display::SubmitFrameCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Display_SubmitFrame_ForwardToCallback);
};
bool Display_SubmitFrame_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Display_SubmitFrame_ResponseParams_Data* params =
      reinterpret_cast<internal::Display_SubmitFrame_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

DisplayProxy::DisplayProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void DisplayProxy::SubmitFrame(
    mojo::FramePtr in_frame, const SubmitFrameCallback& callback) {
  size_t size = sizeof(internal::Display_SubmitFrame_Params_Data);
  size += in_frame.is_null()
              ? 0
              : GetSerializedSize_(*in_frame);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Display_Base::MessageOrdinals::SubmitFrame), size);

  internal::Display_SubmitFrame_Params_Data* params =
      internal::Display_SubmitFrame_Params_Data::New(builder.buffer());
  {Serialize_(in_frame.get(),
               builder.buffer(),
               &params->frame.ptr);
  }
  if (!params->frame.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null frame in Display.SubmitFrame request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Display_SubmitFrame_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Display_SubmitFrame_ProxyToResponder
    : public Display::SubmitFrameCallback::Runnable {
 public:
  ~Display_SubmitFrame_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Display::SubmitFrame(p_frame.Pass(), callback) "
        "was never run.";
  }

  Display_SubmitFrame_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Display_SubmitFrame_ProxyToResponder);
};

void Display_SubmitFrame_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::Display_SubmitFrame_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Display_Base::MessageOrdinals::SubmitFrame), size, request_id_);
  internal::Display_SubmitFrame_ResponseParams_Data* params =
      internal::Display_SubmitFrame_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

DisplayStub::DisplayStub()
    : sink_(nullptr),
      control_message_handler_(Display::Version_) {
}

DisplayStub::~DisplayStub() {}

bool DisplayStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Display_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Display_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Display_Base::MessageOrdinals::SubmitFrame: {
      break;
    }
  }
  return false;
}

bool DisplayStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Display_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Display_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Display_Base::MessageOrdinals::SubmitFrame: {
      internal::Display_SubmitFrame_Params_Data* params =
          reinterpret_cast<internal::Display_SubmitFrame_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Display::SubmitFrameCallback::Runnable* runnable =
          new Display_SubmitFrame_ProxyToResponder(
              message->request_id(), responder);
      Display::SubmitFrameCallback callback(runnable);
      
      mojo::FramePtr p_frame {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->frame.ptr) {
          p_frame = mojo::Frame::New();
          Deserialize_(params->frame.ptr, p_frame.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SubmitFrame(p_frame.Pass(), callback);
      return true;
    }
  }
  return false;
}


DisplayFactoryProxy::DisplayFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void DisplayFactoryProxy::Create(
    mojo::InterfaceHandle<mojo::ContextProvider> in_context_provider, mojo::InterfaceHandle<mojo::ResourceReturner> in_returner, mojo::InterfaceRequest<Display> in_display_request) {
  size_t size = sizeof(internal::DisplayFactory_Create_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::DisplayFactory_Base::MessageOrdinals::Create), size);

  internal::DisplayFactory_Create_Params_Data* params =
      internal::DisplayFactory_Create_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_context_provider.Pass(),
                                        &params->context_provider);
  if (!params->context_provider.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid context_provider in DisplayFactory.Create request");
  }
  mojo::internal::InterfaceHandleToData(in_returner.Pass(),
                                        &params->returner);
  params->display_request = in_display_request.PassMessagePipe().release();
  if (!params->display_request.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid display_request in DisplayFactory.Create request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

DisplayFactoryStub::DisplayFactoryStub()
    : sink_(nullptr),
      control_message_handler_(DisplayFactory::Version_) {
}

DisplayFactoryStub::~DisplayFactoryStub() {}

bool DisplayFactoryStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::DisplayFactory_Base::MessageOrdinals method_ordinal =
      static_cast<internal::DisplayFactory_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::DisplayFactory_Base::MessageOrdinals::Create: {
      internal::DisplayFactory_Create_Params_Data* params =
          reinterpret_cast<internal::DisplayFactory_Create_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<mojo::ContextProvider> p_context_provider {};
      mojo::InterfaceHandle<mojo::ResourceReturner> p_returner {};
      mojo::InterfaceRequest<Display> p_display_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->context_provider, &p_context_provider);
        mojo::internal::InterfaceDataToHandle(&params->returner, &p_returner);
        p_display_request.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->display_request)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Create(p_context_provider.Pass(), p_returner.Pass(), p_display_request.Pass());
      return true;
    }
  }
  return false;
}

bool DisplayFactoryStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::DisplayFactory_Base::MessageOrdinals method_ordinal =
      static_cast<internal::DisplayFactory_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::DisplayFactory_Base::MessageOrdinals::Create: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
