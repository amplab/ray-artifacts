// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/sensors/interfaces/sensors.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace sensors {

// --- Interface definitions ---

SensorListenerProxy::SensorListenerProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void SensorListenerProxy::OnAccuracyChanged(
    int32_t in_accuracy) {
  size_t size = sizeof(internal::SensorListener_OnAccuracyChanged_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::SensorListener_Base::MessageOrdinals::OnAccuracyChanged), size);

  internal::SensorListener_OnAccuracyChanged_Params_Data* params =
      internal::SensorListener_OnAccuracyChanged_Params_Data::New(builder.buffer());
  params->accuracy = in_accuracy;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void SensorListenerProxy::OnSensorChanged(
    SensorDataPtr in_data) {
  size_t size = sizeof(internal::SensorListener_OnSensorChanged_Params_Data);
  size += in_data.is_null()
              ? 0
              : GetSerializedSize_(*in_data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::SensorListener_Base::MessageOrdinals::OnSensorChanged), size);

  internal::SensorListener_OnSensorChanged_Params_Data* params =
      internal::SensorListener_OnSensorChanged_Params_Data::New(builder.buffer());
  {Serialize_(in_data.get(),
               builder.buffer(),
               &params->data.ptr);
  }
  if (!params->data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null data in SensorListener.OnSensorChanged request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

SensorListenerStub::SensorListenerStub()
    : sink_(nullptr),
      control_message_handler_(SensorListener::Version_) {
}

SensorListenerStub::~SensorListenerStub() {}

bool SensorListenerStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::SensorListener_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SensorListener_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SensorListener_Base::MessageOrdinals::OnAccuracyChanged: {
      internal::SensorListener_OnAccuracyChanged_Params_Data* params =
          reinterpret_cast<internal::SensorListener_OnAccuracyChanged_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_accuracy {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_accuracy = params->accuracy;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnAccuracyChanged(p_accuracy);
      return true;
    }
    case internal::SensorListener_Base::MessageOrdinals::OnSensorChanged: {
      internal::SensorListener_OnSensorChanged_Params_Data* params =
          reinterpret_cast<internal::SensorListener_OnSensorChanged_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      SensorDataPtr p_data {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->data.ptr) {
          p_data = SensorData::New();
          Deserialize_(params->data.ptr, p_data.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnSensorChanged(p_data.Pass());
      return true;
    }
  }
  return false;
}

bool SensorListenerStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::SensorListener_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SensorListener_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SensorListener_Base::MessageOrdinals::OnAccuracyChanged: {
      break;
    }
    case internal::SensorListener_Base::MessageOrdinals::OnSensorChanged: {
      break;
    }
  }
  return false;
}


SensorServiceProxy::SensorServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void SensorServiceProxy::AddListener(
    SensorType in_type, mojo::InterfaceHandle<SensorListener> in_listener) {
  size_t size = sizeof(internal::SensorService_AddListener_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::SensorService_Base::MessageOrdinals::AddListener), size);

  internal::SensorService_AddListener_Params_Data* params =
      internal::SensorService_AddListener_Params_Data::New(builder.buffer());
  params->type =
    static_cast<int32_t>(in_type);
  mojo::internal::InterfaceHandleToData(in_listener.Pass(),
                                        &params->listener);
  if (!params->listener.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid listener in SensorService.AddListener request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

SensorServiceStub::SensorServiceStub()
    : sink_(nullptr),
      control_message_handler_(SensorService::Version_) {
}

SensorServiceStub::~SensorServiceStub() {}

bool SensorServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::SensorService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SensorService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SensorService_Base::MessageOrdinals::AddListener: {
      internal::SensorService_AddListener_Params_Data* params =
          reinterpret_cast<internal::SensorService_AddListener_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      SensorType p_type {};
      mojo::InterfaceHandle<SensorListener> p_listener {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_type = static_cast<SensorType>(params->type);
        mojo::internal::InterfaceDataToHandle(&params->listener, &p_listener);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AddListener(p_type, p_listener.Pass());
      return true;
    }
  }
  return false;
}

bool SensorServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::SensorService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SensorService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SensorService_Base::MessageOrdinals::AddListener: {
      break;
    }
  }
  return false;
}

}  // namespace sensors
