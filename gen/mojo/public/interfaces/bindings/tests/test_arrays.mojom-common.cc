// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/test_arrays.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {
namespace test {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
StructWithInterface_Data* StructWithInterface_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithInterface_Data))) StructWithInterface_Data();
}

// static
mojo::internal::ValidationError StructWithInterface_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithInterface_Data* object = static_cast<const StructWithInterface_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle iptr_handle = object->iptr.handle;
  if (iptr_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid iptr field in StructWithInterface struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(iptr_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithInterface_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->iptr, handles);
}

void StructWithInterface_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->iptr, handles);
}

StructWithInterface_Data::StructWithInterface_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
StructWithInterfaceArray_Data* StructWithInterfaceArray_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithInterfaceArray_Data))) StructWithInterfaceArray_Data();
}

// static
mojo::internal::ValidationError StructWithInterfaceArray_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithInterfaceArray_Data* object = static_cast<const StructWithInterfaceArray_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->structs_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null structs_array field in StructWithInterfaceArray struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->structs_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams structs_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<StructWithInterfacePtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->structs_array.offset),
          bounds_checker, &structs_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->structs_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams structs_nullable_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<StructWithInterfacePtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->structs_nullable_array.offset),
          bounds_checker, &structs_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->nullable_structs_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nullable_structs_array field in StructWithInterfaceArray struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_structs_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_structs_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<StructWithInterfacePtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_structs_array.offset),
          bounds_checker, &nullable_structs_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_structs_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_structs_nullable_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<StructWithInterfacePtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_structs_nullable_array.offset),
          bounds_checker, &nullable_structs_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithInterfaceArray_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->structs_array, handles);
  mojo::internal::Encode(&this->structs_nullable_array, handles);
  mojo::internal::Encode(&this->nullable_structs_array, handles);
  mojo::internal::Encode(&this->nullable_structs_nullable_array, handles);
}

void StructWithInterfaceArray_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->structs_array, handles);
  mojo::internal::Decode(&this->structs_nullable_array, handles);
  mojo::internal::Decode(&this->nullable_structs_array, handles);
  mojo::internal::Decode(&this->nullable_structs_nullable_array, handles);
}

StructWithInterfaceArray_Data::StructWithInterfaceArray_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
StructWithDataPipeConsumers_Data* StructWithDataPipeConsumers_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithDataPipeConsumers_Data))) StructWithDataPipeConsumers_Data();
}

// static
mojo::internal::ValidationError StructWithDataPipeConsumers_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithDataPipeConsumers_Data* object = static_cast<const StructWithDataPipeConsumers_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null handles_array field in StructWithDataPipeConsumers struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeConsumerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_array.offset),
          bounds_checker, &handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeConsumerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_nullable_array.offset),
          bounds_checker, &handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->nullable_handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nullable_handles_array field in StructWithDataPipeConsumers struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeConsumerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_array.offset),
          bounds_checker, &nullable_handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeConsumerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_nullable_array.offset),
          bounds_checker, &nullable_handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithDataPipeConsumers_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->handles_array, handles);
  mojo::internal::Encode(&this->handles_nullable_array, handles);
  mojo::internal::Encode(&this->nullable_handles_array, handles);
  mojo::internal::Encode(&this->nullable_handles_nullable_array, handles);
}

void StructWithDataPipeConsumers_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->handles_array, handles);
  mojo::internal::Decode(&this->handles_nullable_array, handles);
  mojo::internal::Decode(&this->nullable_handles_array, handles);
  mojo::internal::Decode(&this->nullable_handles_nullable_array, handles);
}

StructWithDataPipeConsumers_Data::StructWithDataPipeConsumers_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
StructWithDataPipeProducers_Data* StructWithDataPipeProducers_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithDataPipeProducers_Data))) StructWithDataPipeProducers_Data();
}

// static
mojo::internal::ValidationError StructWithDataPipeProducers_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithDataPipeProducers_Data* object = static_cast<const StructWithDataPipeProducers_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null handles_array field in StructWithDataPipeProducers struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeProducerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_array.offset),
          bounds_checker, &handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeProducerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_nullable_array.offset),
          bounds_checker, &handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->nullable_handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nullable_handles_array field in StructWithDataPipeProducers struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeProducerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_array.offset),
          bounds_checker, &nullable_handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedDataPipeProducerHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_nullable_array.offset),
          bounds_checker, &nullable_handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithDataPipeProducers_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->handles_array, handles);
  mojo::internal::Encode(&this->handles_nullable_array, handles);
  mojo::internal::Encode(&this->nullable_handles_array, handles);
  mojo::internal::Encode(&this->nullable_handles_nullable_array, handles);
}

void StructWithDataPipeProducers_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->handles_array, handles);
  mojo::internal::Decode(&this->handles_nullable_array, handles);
  mojo::internal::Decode(&this->nullable_handles_array, handles);
  mojo::internal::Decode(&this->nullable_handles_nullable_array, handles);
}

StructWithDataPipeProducers_Data::StructWithDataPipeProducers_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
StructWithSharedBuffers_Data* StructWithSharedBuffers_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithSharedBuffers_Data))) StructWithSharedBuffers_Data();
}

// static
mojo::internal::ValidationError StructWithSharedBuffers_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithSharedBuffers_Data* object = static_cast<const StructWithSharedBuffers_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null handles_array field in StructWithSharedBuffers struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedSharedBufferHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_array.offset),
          bounds_checker, &handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedSharedBufferHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_nullable_array.offset),
          bounds_checker, &handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->nullable_handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nullable_handles_array field in StructWithSharedBuffers struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedSharedBufferHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_array.offset),
          bounds_checker, &nullable_handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedSharedBufferHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_nullable_array.offset),
          bounds_checker, &nullable_handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithSharedBuffers_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->handles_array, handles);
  mojo::internal::Encode(&this->handles_nullable_array, handles);
  mojo::internal::Encode(&this->nullable_handles_array, handles);
  mojo::internal::Encode(&this->nullable_handles_nullable_array, handles);
}

void StructWithSharedBuffers_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->handles_array, handles);
  mojo::internal::Decode(&this->handles_nullable_array, handles);
  mojo::internal::Decode(&this->nullable_handles_array, handles);
  mojo::internal::Decode(&this->nullable_handles_nullable_array, handles);
}

StructWithSharedBuffers_Data::StructWithSharedBuffers_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
StructWithMessagePipes_Data* StructWithMessagePipes_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithMessagePipes_Data))) StructWithMessagePipes_Data();
}

// static
mojo::internal::ValidationError StructWithMessagePipes_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithMessagePipes_Data* object = static_cast<const StructWithMessagePipes_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null handles_array field in StructWithMessagePipes struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedMessagePipeHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_array.offset),
          bounds_checker, &handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedMessagePipeHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_nullable_array.offset),
          bounds_checker, &handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->nullable_handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nullable_handles_array field in StructWithMessagePipes struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedMessagePipeHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_array.offset),
          bounds_checker, &nullable_handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedMessagePipeHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_nullable_array.offset),
          bounds_checker, &nullable_handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithMessagePipes_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->handles_array, handles);
  mojo::internal::Encode(&this->handles_nullable_array, handles);
  mojo::internal::Encode(&this->nullable_handles_array, handles);
  mojo::internal::Encode(&this->nullable_handles_nullable_array, handles);
}

void StructWithMessagePipes_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->handles_array, handles);
  mojo::internal::Decode(&this->handles_nullable_array, handles);
  mojo::internal::Decode(&this->nullable_handles_array, handles);
  mojo::internal::Decode(&this->nullable_handles_nullable_array, handles);
}

StructWithMessagePipes_Data::StructWithMessagePipes_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
StructWithHandles_Data* StructWithHandles_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithHandles_Data))) StructWithHandles_Data();
}

// static
mojo::internal::ValidationError StructWithHandles_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithHandles_Data* object = static_cast<const StructWithHandles_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null handles_array field in StructWithHandles struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_array.offset),
          bounds_checker, &handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->handles_nullable_array.offset),
          bounds_checker, &handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->nullable_handles_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nullable_handles_array field in StructWithHandles struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_array.offset),
          bounds_checker, &nullable_handles_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_handles_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::ScopedHandle>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_handles_nullable_array.offset),
          bounds_checker, &nullable_handles_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithHandles_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->handles_array, handles);
  mojo::internal::Encode(&this->handles_nullable_array, handles);
  mojo::internal::Encode(&this->nullable_handles_array, handles);
  mojo::internal::Encode(&this->nullable_handles_nullable_array, handles);
}

void StructWithHandles_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->handles_array, handles);
  mojo::internal::Decode(&this->handles_nullable_array, handles);
  mojo::internal::Decode(&this->nullable_handles_array, handles);
  mojo::internal::Decode(&this->nullable_handles_nullable_array, handles);
}

StructWithHandles_Data::StructWithHandles_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
StructWithInterfaceRequests_Data* StructWithInterfaceRequests_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(StructWithInterfaceRequests_Data))) StructWithInterfaceRequests_Data();
}

// static
mojo::internal::ValidationError StructWithInterfaceRequests_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const StructWithInterfaceRequests_Data* object = static_cast<const StructWithInterfaceRequests_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->req_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null req_array field in StructWithInterfaceRequests struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->req_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams req_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::InterfaceRequest<TestInterface>>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->req_array.offset),
          bounds_checker, &req_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->req_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams req_nullable_array_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::InterfaceRequest<TestInterface>>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->req_nullable_array.offset),
          bounds_checker, &req_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->nullable_req_array.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null nullable_req_array field in StructWithInterfaceRequests struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_req_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_req_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::InterfaceRequest<TestInterface>>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_req_array.offset),
          bounds_checker, &nullable_req_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->nullable_req_nullable_array.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams nullable_req_nullable_array_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<mojo::InterfaceRequest<TestInterface>>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->nullable_req_nullable_array.offset),
          bounds_checker, &nullable_req_nullable_array_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void StructWithInterfaceRequests_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->req_array, handles);
  mojo::internal::Encode(&this->req_nullable_array, handles);
  mojo::internal::Encode(&this->nullable_req_array, handles);
  mojo::internal::Encode(&this->nullable_req_nullable_array, handles);
}

void StructWithInterfaceRequests_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->req_array, handles);
  mojo::internal::Decode(&this->req_nullable_array, handles);
  mojo::internal::Decode(&this->nullable_req_array, handles);
  mojo::internal::Decode(&this->nullable_req_nullable_array, handles);
}

StructWithInterfaceRequests_Data::StructWithInterfaceRequests_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
TestInterface_Foo_Params_Data* TestInterface_Foo_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TestInterface_Foo_Params_Data))) TestInterface_Foo_Params_Data();
}

// static
mojo::internal::ValidationError TestInterface_Foo_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestInterface_Foo_Params_Data* object = static_cast<const TestInterface_Foo_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void TestInterface_Foo_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void TestInterface_Foo_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

TestInterface_Foo_Params_Data::TestInterface_Foo_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError TestInterfaceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'TestInterface', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::TestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestInterface_Base::MessageOrdinals::Foo: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TestInterface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TestInterface_Foo_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TestInterface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'TestInterface'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::TestInterface_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
StructWithInterfacePtr StructWithInterface::New() {
  StructWithInterfacePtr rv;
  mojo::internal::StructHelper<StructWithInterface>::Initialize(&rv);
  return rv;
}

StructWithInterface::StructWithInterface()
    : iptr() {
}

StructWithInterface::~StructWithInterface() {
}



bool StructWithInterface::Equals(const StructWithInterface& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<TestInterface>>::Equals(this->iptr, other.iptr))
    return false;
  return true;
}


// static
StructWithInterfaceArrayPtr StructWithInterfaceArray::New() {
  StructWithInterfaceArrayPtr rv;
  mojo::internal::StructHelper<StructWithInterfaceArray>::Initialize(&rv);
  return rv;
}

StructWithInterfaceArray::StructWithInterfaceArray()
    : structs_array(),
      structs_nullable_array(),
      nullable_structs_array(),
      nullable_structs_nullable_array() {
}

StructWithInterfaceArray::~StructWithInterfaceArray() {
}



bool StructWithInterfaceArray::Equals(const StructWithInterfaceArray& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<StructWithInterfacePtr>>::Equals(this->structs_array, other.structs_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<StructWithInterfacePtr>>::Equals(this->structs_nullable_array, other.structs_nullable_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<StructWithInterfacePtr>>::Equals(this->nullable_structs_array, other.nullable_structs_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<StructWithInterfacePtr>>::Equals(this->nullable_structs_nullable_array, other.nullable_structs_nullable_array))
    return false;
  return true;
}


// static
StructWithDataPipeConsumersPtr StructWithDataPipeConsumers::New() {
  StructWithDataPipeConsumersPtr rv;
  mojo::internal::StructHelper<StructWithDataPipeConsumers>::Initialize(&rv);
  return rv;
}

StructWithDataPipeConsumers::StructWithDataPipeConsumers()
    : handles_array(),
      handles_nullable_array(),
      nullable_handles_array(),
      nullable_handles_nullable_array() {
}

StructWithDataPipeConsumers::~StructWithDataPipeConsumers() {
}



bool StructWithDataPipeConsumers::Equals(const StructWithDataPipeConsumers& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeConsumerHandle>>::Equals(this->handles_array, other.handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeConsumerHandle>>::Equals(this->handles_nullable_array, other.handles_nullable_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeConsumerHandle>>::Equals(this->nullable_handles_array, other.nullable_handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeConsumerHandle>>::Equals(this->nullable_handles_nullable_array, other.nullable_handles_nullable_array))
    return false;
  return true;
}


// static
StructWithDataPipeProducersPtr StructWithDataPipeProducers::New() {
  StructWithDataPipeProducersPtr rv;
  mojo::internal::StructHelper<StructWithDataPipeProducers>::Initialize(&rv);
  return rv;
}

StructWithDataPipeProducers::StructWithDataPipeProducers()
    : handles_array(),
      handles_nullable_array(),
      nullable_handles_array(),
      nullable_handles_nullable_array() {
}

StructWithDataPipeProducers::~StructWithDataPipeProducers() {
}



bool StructWithDataPipeProducers::Equals(const StructWithDataPipeProducers& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeProducerHandle>>::Equals(this->handles_array, other.handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeProducerHandle>>::Equals(this->handles_nullable_array, other.handles_nullable_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeProducerHandle>>::Equals(this->nullable_handles_array, other.nullable_handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedDataPipeProducerHandle>>::Equals(this->nullable_handles_nullable_array, other.nullable_handles_nullable_array))
    return false;
  return true;
}


// static
StructWithSharedBuffersPtr StructWithSharedBuffers::New() {
  StructWithSharedBuffersPtr rv;
  mojo::internal::StructHelper<StructWithSharedBuffers>::Initialize(&rv);
  return rv;
}

StructWithSharedBuffers::StructWithSharedBuffers()
    : handles_array(),
      handles_nullable_array(),
      nullable_handles_array(),
      nullable_handles_nullable_array() {
}

StructWithSharedBuffers::~StructWithSharedBuffers() {
}



bool StructWithSharedBuffers::Equals(const StructWithSharedBuffers& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedSharedBufferHandle>>::Equals(this->handles_array, other.handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedSharedBufferHandle>>::Equals(this->handles_nullable_array, other.handles_nullable_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedSharedBufferHandle>>::Equals(this->nullable_handles_array, other.nullable_handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedSharedBufferHandle>>::Equals(this->nullable_handles_nullable_array, other.nullable_handles_nullable_array))
    return false;
  return true;
}


// static
StructWithMessagePipesPtr StructWithMessagePipes::New() {
  StructWithMessagePipesPtr rv;
  mojo::internal::StructHelper<StructWithMessagePipes>::Initialize(&rv);
  return rv;
}

StructWithMessagePipes::StructWithMessagePipes()
    : handles_array(),
      handles_nullable_array(),
      nullable_handles_array(),
      nullable_handles_nullable_array() {
}

StructWithMessagePipes::~StructWithMessagePipes() {
}



bool StructWithMessagePipes::Equals(const StructWithMessagePipes& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedMessagePipeHandle>>::Equals(this->handles_array, other.handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedMessagePipeHandle>>::Equals(this->handles_nullable_array, other.handles_nullable_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedMessagePipeHandle>>::Equals(this->nullable_handles_array, other.nullable_handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedMessagePipeHandle>>::Equals(this->nullable_handles_nullable_array, other.nullable_handles_nullable_array))
    return false;
  return true;
}


// static
StructWithHandlesPtr StructWithHandles::New() {
  StructWithHandlesPtr rv;
  mojo::internal::StructHelper<StructWithHandles>::Initialize(&rv);
  return rv;
}

StructWithHandles::StructWithHandles()
    : handles_array(),
      handles_nullable_array(),
      nullable_handles_array(),
      nullable_handles_nullable_array() {
}

StructWithHandles::~StructWithHandles() {
}



bool StructWithHandles::Equals(const StructWithHandles& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedHandle>>::Equals(this->handles_array, other.handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedHandle>>::Equals(this->handles_nullable_array, other.handles_nullable_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedHandle>>::Equals(this->nullable_handles_array, other.nullable_handles_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::ScopedHandle>>::Equals(this->nullable_handles_nullable_array, other.nullable_handles_nullable_array))
    return false;
  return true;
}


// static
StructWithInterfaceRequestsPtr StructWithInterfaceRequests::New() {
  StructWithInterfaceRequestsPtr rv;
  mojo::internal::StructHelper<StructWithInterfaceRequests>::Initialize(&rv);
  return rv;
}

StructWithInterfaceRequests::StructWithInterfaceRequests()
    : req_array(),
      req_nullable_array(),
      nullable_req_array(),
      nullable_req_nullable_array() {
}

StructWithInterfaceRequests::~StructWithInterfaceRequests() {
}



bool StructWithInterfaceRequests::Equals(const StructWithInterfaceRequests& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::InterfaceRequest<TestInterface>>>::Equals(this->req_array, other.req_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::InterfaceRequest<TestInterface>>>::Equals(this->req_nullable_array, other.req_nullable_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::InterfaceRequest<TestInterface>>>::Equals(this->nullable_req_array, other.nullable_req_array))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::InterfaceRequest<TestInterface>>>::Equals(this->nullable_req_nullable_array, other.nullable_req_nullable_array))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t StructWithInterface::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithInterface::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithInterface_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithInterface::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithInterface_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithInterface::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithInterface_Data* input =
      static_cast<internal::StructWithInterface_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithInterface& input) {
  size_t size = sizeof(internal::StructWithInterface_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithInterface* input,
    mojo::internal::Buffer* buf,
    internal::StructWithInterface_Data** output) {
  if (input) {
    internal::StructWithInterface_Data* result =
        internal::StructWithInterface_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->iptr.Pass(),
                                          &result->iptr);
    if (!result->iptr.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid iptr in StructWithInterface struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithInterface_Data* input,
                  StructWithInterface* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->iptr, &result->iptr);
    } while (false);
  }
}


size_t StructWithInterfaceArray::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithInterfaceArray::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithInterfaceArray_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithInterfaceArray::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithInterfaceArray_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithInterfaceArray::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithInterfaceArray_Data* input =
      static_cast<internal::StructWithInterfaceArray_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithInterfaceArray& input) {
  size_t size = sizeof(internal::StructWithInterfaceArray_Data);
  size += GetSerializedSize_(input.structs_array);
  size += GetSerializedSize_(input.structs_nullable_array);
  size += GetSerializedSize_(input.nullable_structs_array);
  size += GetSerializedSize_(input.nullable_structs_nullable_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithInterfaceArray* input,
    mojo::internal::Buffer* buf,
    internal::StructWithInterfaceArray_Data** output) {
  if (input) {
    internal::StructWithInterfaceArray_Data* result =
        internal::StructWithInterfaceArray_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams structs_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->structs_array, buf, &result->structs_array.ptr,
                            &structs_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->structs_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null structs_array in StructWithInterfaceArray struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams structs_nullable_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->structs_nullable_array, buf, &result->structs_nullable_array.ptr,
                            &structs_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_structs_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_structs_array, buf, &result->nullable_structs_array.ptr,
                            &nullable_structs_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nullable_structs_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nullable_structs_array in StructWithInterfaceArray struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_structs_nullable_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_structs_nullable_array, buf, &result->nullable_structs_nullable_array.ptr,
                            &nullable_structs_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithInterfaceArray_Data* input,
                  StructWithInterfaceArray* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->structs_array.ptr, &result->structs_array);
      Deserialize_(input->structs_nullable_array.ptr, &result->structs_nullable_array);
      Deserialize_(input->nullable_structs_array.ptr, &result->nullable_structs_array);
      Deserialize_(input->nullable_structs_nullable_array.ptr, &result->nullable_structs_nullable_array);
    } while (false);
  }
}


size_t StructWithDataPipeConsumers::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithDataPipeConsumers::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithDataPipeConsumers_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithDataPipeConsumers::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithDataPipeConsumers_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithDataPipeConsumers::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithDataPipeConsumers_Data* input =
      static_cast<internal::StructWithDataPipeConsumers_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithDataPipeConsumers& input) {
  size_t size = sizeof(internal::StructWithDataPipeConsumers_Data);
  size += GetSerializedSize_(input.handles_array);
  size += GetSerializedSize_(input.handles_nullable_array);
  size += GetSerializedSize_(input.nullable_handles_array);
  size += GetSerializedSize_(input.nullable_handles_nullable_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithDataPipeConsumers* input,
    mojo::internal::Buffer* buf,
    internal::StructWithDataPipeConsumers_Data** output) {
  if (input) {
    internal::StructWithDataPipeConsumers_Data* result =
        internal::StructWithDataPipeConsumers_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams handles_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_array, buf, &result->handles_array.ptr,
                            &handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null handles_array in StructWithDataPipeConsumers struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_nullable_array, buf, &result->handles_nullable_array.ptr,
                            &handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_array, buf, &result->nullable_handles_array.ptr,
                            &nullable_handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nullable_handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nullable_handles_array in StructWithDataPipeConsumers struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_nullable_array, buf, &result->nullable_handles_nullable_array.ptr,
                            &nullable_handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithDataPipeConsumers_Data* input,
                  StructWithDataPipeConsumers* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->handles_array.ptr, &result->handles_array);
      Deserialize_(input->handles_nullable_array.ptr, &result->handles_nullable_array);
      Deserialize_(input->nullable_handles_array.ptr, &result->nullable_handles_array);
      Deserialize_(input->nullable_handles_nullable_array.ptr, &result->nullable_handles_nullable_array);
    } while (false);
  }
}


size_t StructWithDataPipeProducers::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithDataPipeProducers::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithDataPipeProducers_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithDataPipeProducers::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithDataPipeProducers_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithDataPipeProducers::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithDataPipeProducers_Data* input =
      static_cast<internal::StructWithDataPipeProducers_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithDataPipeProducers& input) {
  size_t size = sizeof(internal::StructWithDataPipeProducers_Data);
  size += GetSerializedSize_(input.handles_array);
  size += GetSerializedSize_(input.handles_nullable_array);
  size += GetSerializedSize_(input.nullable_handles_array);
  size += GetSerializedSize_(input.nullable_handles_nullable_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithDataPipeProducers* input,
    mojo::internal::Buffer* buf,
    internal::StructWithDataPipeProducers_Data** output) {
  if (input) {
    internal::StructWithDataPipeProducers_Data* result =
        internal::StructWithDataPipeProducers_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams handles_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_array, buf, &result->handles_array.ptr,
                            &handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null handles_array in StructWithDataPipeProducers struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_nullable_array, buf, &result->handles_nullable_array.ptr,
                            &handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_array, buf, &result->nullable_handles_array.ptr,
                            &nullable_handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nullable_handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nullable_handles_array in StructWithDataPipeProducers struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_nullable_array, buf, &result->nullable_handles_nullable_array.ptr,
                            &nullable_handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithDataPipeProducers_Data* input,
                  StructWithDataPipeProducers* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->handles_array.ptr, &result->handles_array);
      Deserialize_(input->handles_nullable_array.ptr, &result->handles_nullable_array);
      Deserialize_(input->nullable_handles_array.ptr, &result->nullable_handles_array);
      Deserialize_(input->nullable_handles_nullable_array.ptr, &result->nullable_handles_nullable_array);
    } while (false);
  }
}


size_t StructWithSharedBuffers::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithSharedBuffers::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithSharedBuffers_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithSharedBuffers::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithSharedBuffers_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithSharedBuffers::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithSharedBuffers_Data* input =
      static_cast<internal::StructWithSharedBuffers_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithSharedBuffers& input) {
  size_t size = sizeof(internal::StructWithSharedBuffers_Data);
  size += GetSerializedSize_(input.handles_array);
  size += GetSerializedSize_(input.handles_nullable_array);
  size += GetSerializedSize_(input.nullable_handles_array);
  size += GetSerializedSize_(input.nullable_handles_nullable_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithSharedBuffers* input,
    mojo::internal::Buffer* buf,
    internal::StructWithSharedBuffers_Data** output) {
  if (input) {
    internal::StructWithSharedBuffers_Data* result =
        internal::StructWithSharedBuffers_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams handles_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_array, buf, &result->handles_array.ptr,
                            &handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null handles_array in StructWithSharedBuffers struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_nullable_array, buf, &result->handles_nullable_array.ptr,
                            &handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_array, buf, &result->nullable_handles_array.ptr,
                            &nullable_handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nullable_handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nullable_handles_array in StructWithSharedBuffers struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_nullable_array, buf, &result->nullable_handles_nullable_array.ptr,
                            &nullable_handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithSharedBuffers_Data* input,
                  StructWithSharedBuffers* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->handles_array.ptr, &result->handles_array);
      Deserialize_(input->handles_nullable_array.ptr, &result->handles_nullable_array);
      Deserialize_(input->nullable_handles_array.ptr, &result->nullable_handles_array);
      Deserialize_(input->nullable_handles_nullable_array.ptr, &result->nullable_handles_nullable_array);
    } while (false);
  }
}


size_t StructWithMessagePipes::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithMessagePipes::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithMessagePipes_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithMessagePipes::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithMessagePipes_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithMessagePipes::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithMessagePipes_Data* input =
      static_cast<internal::StructWithMessagePipes_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithMessagePipes& input) {
  size_t size = sizeof(internal::StructWithMessagePipes_Data);
  size += GetSerializedSize_(input.handles_array);
  size += GetSerializedSize_(input.handles_nullable_array);
  size += GetSerializedSize_(input.nullable_handles_array);
  size += GetSerializedSize_(input.nullable_handles_nullable_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithMessagePipes* input,
    mojo::internal::Buffer* buf,
    internal::StructWithMessagePipes_Data** output) {
  if (input) {
    internal::StructWithMessagePipes_Data* result =
        internal::StructWithMessagePipes_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams handles_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_array, buf, &result->handles_array.ptr,
                            &handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null handles_array in StructWithMessagePipes struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_nullable_array, buf, &result->handles_nullable_array.ptr,
                            &handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_array, buf, &result->nullable_handles_array.ptr,
                            &nullable_handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nullable_handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nullable_handles_array in StructWithMessagePipes struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_nullable_array, buf, &result->nullable_handles_nullable_array.ptr,
                            &nullable_handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithMessagePipes_Data* input,
                  StructWithMessagePipes* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->handles_array.ptr, &result->handles_array);
      Deserialize_(input->handles_nullable_array.ptr, &result->handles_nullable_array);
      Deserialize_(input->nullable_handles_array.ptr, &result->nullable_handles_array);
      Deserialize_(input->nullable_handles_nullable_array.ptr, &result->nullable_handles_nullable_array);
    } while (false);
  }
}


size_t StructWithHandles::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithHandles::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithHandles_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithHandles::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithHandles_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithHandles::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithHandles_Data* input =
      static_cast<internal::StructWithHandles_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithHandles& input) {
  size_t size = sizeof(internal::StructWithHandles_Data);
  size += GetSerializedSize_(input.handles_array);
  size += GetSerializedSize_(input.handles_nullable_array);
  size += GetSerializedSize_(input.nullable_handles_array);
  size += GetSerializedSize_(input.nullable_handles_nullable_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithHandles* input,
    mojo::internal::Buffer* buf,
    internal::StructWithHandles_Data** output) {
  if (input) {
    internal::StructWithHandles_Data* result =
        internal::StructWithHandles_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams handles_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_array, buf, &result->handles_array.ptr,
                            &handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null handles_array in StructWithHandles struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams handles_nullable_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->handles_nullable_array, buf, &result->handles_nullable_array.ptr,
                            &handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_array, buf, &result->nullable_handles_array.ptr,
                            &nullable_handles_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nullable_handles_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nullable_handles_array in StructWithHandles struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_handles_nullable_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_handles_nullable_array, buf, &result->nullable_handles_nullable_array.ptr,
                            &nullable_handles_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithHandles_Data* input,
                  StructWithHandles* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->handles_array.ptr, &result->handles_array);
      Deserialize_(input->handles_nullable_array.ptr, &result->handles_nullable_array);
      Deserialize_(input->nullable_handles_array.ptr, &result->nullable_handles_array);
      Deserialize_(input->nullable_handles_nullable_array.ptr, &result->nullable_handles_nullable_array);
    } while (false);
  }
}


size_t StructWithInterfaceRequests::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool StructWithInterfaceRequests::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::StructWithInterfaceRequests_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool StructWithInterfaceRequests::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::StructWithInterfaceRequests_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void StructWithInterfaceRequests::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::StructWithInterfaceRequests_Data* input =
      static_cast<internal::StructWithInterfaceRequests_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const StructWithInterfaceRequests& input) {
  size_t size = sizeof(internal::StructWithInterfaceRequests_Data);
  size += GetSerializedSize_(input.req_array);
  size += GetSerializedSize_(input.req_nullable_array);
  size += GetSerializedSize_(input.nullable_req_array);
  size += GetSerializedSize_(input.nullable_req_nullable_array);
  return size;
}

mojo::internal::ValidationError Serialize_(
    StructWithInterfaceRequests* input,
    mojo::internal::Buffer* buf,
    internal::StructWithInterfaceRequests_Data** output) {
  if (input) {
    internal::StructWithInterfaceRequests_Data* result =
        internal::StructWithInterfaceRequests_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams req_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->req_array, buf, &result->req_array.ptr,
                            &req_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->req_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null req_array in StructWithInterfaceRequests struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams req_nullable_array_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->req_nullable_array, buf, &result->req_nullable_array.ptr,
                            &req_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_req_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_req_array, buf, &result->nullable_req_array.ptr,
                            &nullable_req_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->nullable_req_array.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null nullable_req_array in StructWithInterfaceRequests struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams nullable_req_nullable_array_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->nullable_req_nullable_array, buf, &result->nullable_req_nullable_array.ptr,
                            &nullable_req_nullable_array_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::StructWithInterfaceRequests_Data* input,
                  StructWithInterfaceRequests* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->req_array.ptr, &result->req_array);
      Deserialize_(input->req_nullable_array.ptr, &result->req_nullable_array);
      Deserialize_(input->nullable_req_array.ptr, &result->nullable_req_array);
      Deserialize_(input->nullable_req_nullable_array.ptr, &result->nullable_req_nullable_array);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
TestInterface_Foo_ParamsPtr TestInterface_Foo_Params::New() {
  TestInterface_Foo_ParamsPtr rv;
  mojo::internal::StructHelper<TestInterface_Foo_Params>::Initialize(&rv);
  return rv;
}

TestInterface_Foo_Params::TestInterface_Foo_Params() {
}

TestInterface_Foo_Params::~TestInterface_Foo_Params() {
}


TestInterface_Foo_ParamsPtr TestInterface_Foo_Params::Clone() const {
  TestInterface_Foo_ParamsPtr rv(New());
  return rv;
}


bool TestInterface_Foo_Params::Equals(const TestInterface_Foo_Params& other) const {
  return true;
}


size_t TestInterface_Foo_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TestInterface_Foo_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TestInterface_Foo_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TestInterface_Foo_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TestInterface_Foo_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TestInterface_Foo_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TestInterface_Foo_Params_Data* input =
      static_cast<internal::TestInterface_Foo_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TestInterface_Foo_Params& input) {
  size_t size = sizeof(internal::TestInterface_Foo_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TestInterface_Foo_Params* input,
    mojo::internal::Buffer* buf,
    internal::TestInterface_Foo_Params_Data** output) {
  if (input) {
    internal::TestInterface_Foo_Params_Data* result =
        internal::TestInterface_Foo_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TestInterface_Foo_Params_Data* input,
                  TestInterface_Foo_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}

}  // namespace test
}  // namespace mojo
