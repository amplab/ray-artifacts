// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/gpu/interfaces/command_buffer.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
CommandBufferState_Data* CommandBufferState_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBufferState_Data))) CommandBufferState_Data();
}

// static
mojo::internal::ValidationError CommandBufferState_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBufferState_Data* object = static_cast<const CommandBufferState_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBufferState_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBufferState_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBufferState_Data::CommandBufferState_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
CommandBufferSyncClient_DidInitialize_Params_Data* CommandBufferSyncClient_DidInitialize_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBufferSyncClient_DidInitialize_Params_Data))) CommandBufferSyncClient_DidInitialize_Params_Data();
}

// static
mojo::internal::ValidationError CommandBufferSyncClient_DidInitialize_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBufferSyncClient_DidInitialize_Params_Data* object = static_cast<const CommandBufferSyncClient_DidInitialize_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->capabilities.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null capabilities field in CommandBufferSyncClient_DidInitialize_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->capabilities.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::GpuCapabilities::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->capabilities.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBufferSyncClient_DidInitialize_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->capabilities, handles);
}

void CommandBufferSyncClient_DidInitialize_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->capabilities, handles);
}

CommandBufferSyncClient_DidInitialize_Params_Data::CommandBufferSyncClient_DidInitialize_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBufferSyncClient_DidMakeProgress_Params_Data* CommandBufferSyncClient_DidMakeProgress_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBufferSyncClient_DidMakeProgress_Params_Data))) CommandBufferSyncClient_DidMakeProgress_Params_Data();
}

// static
mojo::internal::ValidationError CommandBufferSyncClient_DidMakeProgress_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBufferSyncClient_DidMakeProgress_Params_Data* object = static_cast<const CommandBufferSyncClient_DidMakeProgress_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->state.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null state field in CommandBufferSyncClient_DidMakeProgress_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->state.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = CommandBufferState::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->state.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBufferSyncClient_DidMakeProgress_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->state, handles);
}

void CommandBufferSyncClient_DidMakeProgress_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->state, handles);
}

CommandBufferSyncClient_DidMakeProgress_Params_Data::CommandBufferSyncClient_DidMakeProgress_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data* CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data))) CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data();
}

// static
mojo::internal::ValidationError CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data* object = static_cast<const CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBufferLostContextObserver_DidLoseContext_Params_Data* CommandBufferLostContextObserver_DidLoseContext_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBufferLostContextObserver_DidLoseContext_Params_Data))) CommandBufferLostContextObserver_DidLoseContext_Params_Data();
}

// static
mojo::internal::ValidationError CommandBufferLostContextObserver_DidLoseContext_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBufferLostContextObserver_DidLoseContext_Params_Data* object = static_cast<const CommandBufferLostContextObserver_DidLoseContext_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBufferLostContextObserver_DidLoseContext_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBufferLostContextObserver_DidLoseContext_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBufferLostContextObserver_DidLoseContext_Params_Data::CommandBufferLostContextObserver_DidLoseContext_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_Initialize_Params_Data* CommandBuffer_Initialize_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_Initialize_Params_Data))) CommandBuffer_Initialize_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_Initialize_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_Initialize_Params_Data* object = static_cast<const CommandBuffer_Initialize_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle sync_client_handle = object->sync_client.handle;
  if (sync_client_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid sync_client field in CommandBuffer_Initialize_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(sync_client_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle sync_point_client_handle = object->sync_point_client.handle;
  if (sync_point_client_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid sync_point_client field in CommandBuffer_Initialize_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(sync_point_client_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle lost_observer_handle = object->lost_observer.handle;
  if (lost_observer_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid lost_observer field in CommandBuffer_Initialize_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(lost_observer_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle shared_state_handle = object->shared_state;
  if (shared_state_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid shared_state field in CommandBuffer_Initialize_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(shared_state_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_Initialize_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->sync_client, handles);
  mojo::internal::EncodeHandle(&this->sync_point_client, handles);
  mojo::internal::EncodeHandle(&this->lost_observer, handles);
  mojo::internal::EncodeHandle(&this->shared_state, handles);
}

void CommandBuffer_Initialize_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->sync_client, handles);
  mojo::internal::DecodeHandle(&this->sync_point_client, handles);
  mojo::internal::DecodeHandle(&this->lost_observer, handles);
  mojo::internal::DecodeHandle(&this->shared_state, handles);
}

CommandBuffer_Initialize_Params_Data::CommandBuffer_Initialize_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_SetGetBuffer_Params_Data* CommandBuffer_SetGetBuffer_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_SetGetBuffer_Params_Data))) CommandBuffer_SetGetBuffer_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_SetGetBuffer_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_SetGetBuffer_Params_Data* object = static_cast<const CommandBuffer_SetGetBuffer_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_SetGetBuffer_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_SetGetBuffer_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_SetGetBuffer_Params_Data::CommandBuffer_SetGetBuffer_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_Flush_Params_Data* CommandBuffer_Flush_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_Flush_Params_Data))) CommandBuffer_Flush_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_Flush_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_Flush_Params_Data* object = static_cast<const CommandBuffer_Flush_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_Flush_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_Flush_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_Flush_Params_Data::CommandBuffer_Flush_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_MakeProgress_Params_Data* CommandBuffer_MakeProgress_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_MakeProgress_Params_Data))) CommandBuffer_MakeProgress_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_MakeProgress_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_MakeProgress_Params_Data* object = static_cast<const CommandBuffer_MakeProgress_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_MakeProgress_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_MakeProgress_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_MakeProgress_Params_Data::CommandBuffer_MakeProgress_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_RegisterTransferBuffer_Params_Data* CommandBuffer_RegisterTransferBuffer_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_RegisterTransferBuffer_Params_Data))) CommandBuffer_RegisterTransferBuffer_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_RegisterTransferBuffer_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_RegisterTransferBuffer_Params_Data* object = static_cast<const CommandBuffer_RegisterTransferBuffer_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle transfer_buffer_handle = object->transfer_buffer;
  if (transfer_buffer_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid transfer_buffer field in CommandBuffer_RegisterTransferBuffer_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(transfer_buffer_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_RegisterTransferBuffer_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->transfer_buffer, handles);
}

void CommandBuffer_RegisterTransferBuffer_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->transfer_buffer, handles);
}

CommandBuffer_RegisterTransferBuffer_Params_Data::CommandBuffer_RegisterTransferBuffer_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_DestroyTransferBuffer_Params_Data* CommandBuffer_DestroyTransferBuffer_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_DestroyTransferBuffer_Params_Data))) CommandBuffer_DestroyTransferBuffer_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_DestroyTransferBuffer_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_DestroyTransferBuffer_Params_Data* object = static_cast<const CommandBuffer_DestroyTransferBuffer_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_DestroyTransferBuffer_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_DestroyTransferBuffer_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_DestroyTransferBuffer_Params_Data::CommandBuffer_DestroyTransferBuffer_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_InsertSyncPoint_Params_Data* CommandBuffer_InsertSyncPoint_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_InsertSyncPoint_Params_Data))) CommandBuffer_InsertSyncPoint_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_InsertSyncPoint_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_InsertSyncPoint_Params_Data* object = static_cast<const CommandBuffer_InsertSyncPoint_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_InsertSyncPoint_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_InsertSyncPoint_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_InsertSyncPoint_Params_Data::CommandBuffer_InsertSyncPoint_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_RetireSyncPoint_Params_Data* CommandBuffer_RetireSyncPoint_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_RetireSyncPoint_Params_Data))) CommandBuffer_RetireSyncPoint_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_RetireSyncPoint_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_RetireSyncPoint_Params_Data* object = static_cast<const CommandBuffer_RetireSyncPoint_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_RetireSyncPoint_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_RetireSyncPoint_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_RetireSyncPoint_Params_Data::CommandBuffer_RetireSyncPoint_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CommandBuffer_Echo_Params_Data* CommandBuffer_Echo_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_Echo_Params_Data))) CommandBuffer_Echo_Params_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_Echo_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_Echo_Params_Data* object = static_cast<const CommandBuffer_Echo_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_Echo_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_Echo_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_Echo_Params_Data::CommandBuffer_Echo_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
CommandBuffer_Echo_ResponseParams_Data* CommandBuffer_Echo_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CommandBuffer_Echo_ResponseParams_Data))) CommandBuffer_Echo_ResponseParams_Data();
}

// static
mojo::internal::ValidationError CommandBuffer_Echo_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CommandBuffer_Echo_ResponseParams_Data* object = static_cast<const CommandBuffer_Echo_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CommandBuffer_Echo_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CommandBuffer_Echo_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CommandBuffer_Echo_ResponseParams_Data::CommandBuffer_Echo_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError CommandBufferSyncClientRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'CommandBufferSyncClient', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::CommandBufferSyncClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CommandBufferSyncClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CommandBufferSyncClient_Base::MessageOrdinals::DidInitialize: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBufferSyncClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBufferSyncClient_DidInitialize_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBufferSyncClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBufferSyncClient_Base::MessageOrdinals::DidMakeProgress: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBufferSyncClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBufferSyncClient_DidMakeProgress_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBufferSyncClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'CommandBufferSyncClient'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError CommandBufferSyncPointClientRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'CommandBufferSyncPointClient', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::CommandBufferSyncPointClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CommandBufferSyncPointClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CommandBufferSyncPointClient_Base::MessageOrdinals::DidInsertSyncPoint: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBufferSyncPointClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBufferSyncPointClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'CommandBufferSyncPointClient'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError CommandBufferLostContextObserverRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'CommandBufferLostContextObserver', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::CommandBufferLostContextObserver_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CommandBufferLostContextObserver_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CommandBufferLostContextObserver_Base::MessageOrdinals::DidLoseContext: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBufferLostContextObserver', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBufferLostContextObserver', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'CommandBufferLostContextObserver'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError CommandBufferRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'CommandBuffer', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::CommandBuffer_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CommandBuffer_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CommandBuffer_Base::MessageOrdinals::Initialize: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_Initialize_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::SetGetBuffer: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_SetGetBuffer_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::Flush: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_Flush_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::MakeProgress: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_MakeProgress_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::RegisterTransferBuffer: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_RegisterTransferBuffer_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::DestroyTransferBuffer: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_DestroyTransferBuffer_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::InsertSyncPoint: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_InsertSyncPoint_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::RetireSyncPoint: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_RetireSyncPoint_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CommandBuffer_Base::MessageOrdinals::Echo: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CommandBuffer', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CommandBuffer_Echo_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'CommandBuffer'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError CommandBufferResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'CommandBuffer', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'CommandBuffer', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::CommandBuffer_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CommandBuffer_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CommandBuffer_Base::MessageOrdinals::Echo: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::CommandBuffer_Echo_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'CommandBuffer',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'CommandBuffer'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::CommandBufferSyncClient_Base::Version_;

// Constants

// Enums
const uint32_t internal::CommandBufferSyncPointClient_Base::Version_;

// Constants

// Enums
const uint32_t internal::CommandBufferLostContextObserver_Base::Version_;

// Constants

// Enums
const uint32_t internal::CommandBuffer_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
CommandBufferStatePtr CommandBufferState::New() {
  CommandBufferStatePtr rv;
  mojo::internal::StructHelper<CommandBufferState>::Initialize(&rv);
  return rv;
}

CommandBufferState::CommandBufferState()
    : num_entries(),
      get_offset(),
      put_offset(),
      token(),
      error(),
      context_lost_reason(),
      generation() {
}

CommandBufferState::~CommandBufferState() {
}


CommandBufferStatePtr CommandBufferState::Clone() const {
  CommandBufferStatePtr rv(New());
  rv->num_entries = num_entries;
  rv->get_offset = get_offset;
  rv->put_offset = put_offset;
  rv->token = token;
  rv->error = error;
  rv->context_lost_reason = context_lost_reason;
  rv->generation = generation;
  return rv;
}


bool CommandBufferState::Equals(const CommandBufferState& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->num_entries, other.num_entries))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->get_offset, other.get_offset))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->put_offset, other.put_offset))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->token, other.token))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->context_lost_reason, other.context_lost_reason))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->generation, other.generation))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t CommandBufferState::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBufferState::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBufferState_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBufferState::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBufferState_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBufferState::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBufferState_Data* input =
      static_cast<internal::CommandBufferState_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBufferState& input) {
  size_t size = sizeof(internal::CommandBufferState_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBufferState* input,
    mojo::internal::Buffer* buf,
    internal::CommandBufferState_Data** output) {
  if (input) {
    internal::CommandBufferState_Data* result =
        internal::CommandBufferState_Data::New(buf);
    result->num_entries = input->num_entries;
    result->get_offset = input->get_offset;
    result->put_offset = input->put_offset;
    result->token = input->token;
    result->error = input->error;
    result->context_lost_reason = input->context_lost_reason;
    result->generation = input->generation;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBufferState_Data* input,
                  CommandBufferState* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->num_entries = input->num_entries;
      result->get_offset = input->get_offset;
      result->put_offset = input->put_offset;
      result->token = input->token;
      result->error = input->error;
      result->context_lost_reason = input->context_lost_reason;
      result->generation = input->generation;
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
CommandBufferSyncClient_DidInitialize_ParamsPtr CommandBufferSyncClient_DidInitialize_Params::New() {
  CommandBufferSyncClient_DidInitialize_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBufferSyncClient_DidInitialize_Params>::Initialize(&rv);
  return rv;
}

CommandBufferSyncClient_DidInitialize_Params::CommandBufferSyncClient_DidInitialize_Params()
    : success(),
      capabilities() {
}

CommandBufferSyncClient_DidInitialize_Params::~CommandBufferSyncClient_DidInitialize_Params() {
}


CommandBufferSyncClient_DidInitialize_ParamsPtr CommandBufferSyncClient_DidInitialize_Params::Clone() const {
  CommandBufferSyncClient_DidInitialize_ParamsPtr rv(New());
  rv->success = success;
  rv->capabilities = capabilities.Clone();
  return rv;
}


bool CommandBufferSyncClient_DidInitialize_Params::Equals(const CommandBufferSyncClient_DidInitialize_Params& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->success, other.success))
    return false;
  if (!mojo::internal::ValueTraits<mojo::GpuCapabilitiesPtr>::Equals(this->capabilities, other.capabilities))
    return false;
  return true;
}


size_t CommandBufferSyncClient_DidInitialize_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBufferSyncClient_DidInitialize_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBufferSyncClient_DidInitialize_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBufferSyncClient_DidInitialize_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBufferSyncClient_DidInitialize_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBufferSyncClient_DidInitialize_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBufferSyncClient_DidInitialize_Params_Data* input =
      static_cast<internal::CommandBufferSyncClient_DidInitialize_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBufferSyncClient_DidInitialize_Params& input) {
  size_t size = sizeof(internal::CommandBufferSyncClient_DidInitialize_Params_Data);
  size += input.capabilities.is_null()
              ? 0
              : GetSerializedSize_(*input.capabilities);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBufferSyncClient_DidInitialize_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBufferSyncClient_DidInitialize_Params_Data** output) {
  if (input) {
    internal::CommandBufferSyncClient_DidInitialize_Params_Data* result =
        internal::CommandBufferSyncClient_DidInitialize_Params_Data::New(buf);
    result->success = input->success;
    {auto retval =Serialize_(input->capabilities.get(),
                 buf,
                 &result->capabilities.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->capabilities.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null capabilities in CommandBufferSyncClient_DidInitialize_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBufferSyncClient_DidInitialize_Params_Data* input,
                  CommandBufferSyncClient_DidInitialize_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->success = input->success;
      if (input->capabilities.ptr) {
        result->capabilities = mojo::GpuCapabilities::New();
        Deserialize_(input->capabilities.ptr, result->capabilities.get());
      }
    } while (false);
  }
}



// static
CommandBufferSyncClient_DidMakeProgress_ParamsPtr CommandBufferSyncClient_DidMakeProgress_Params::New() {
  CommandBufferSyncClient_DidMakeProgress_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBufferSyncClient_DidMakeProgress_Params>::Initialize(&rv);
  return rv;
}

CommandBufferSyncClient_DidMakeProgress_Params::CommandBufferSyncClient_DidMakeProgress_Params()
    : state() {
}

CommandBufferSyncClient_DidMakeProgress_Params::~CommandBufferSyncClient_DidMakeProgress_Params() {
}


CommandBufferSyncClient_DidMakeProgress_ParamsPtr CommandBufferSyncClient_DidMakeProgress_Params::Clone() const {
  CommandBufferSyncClient_DidMakeProgress_ParamsPtr rv(New());
  rv->state = state.Clone();
  return rv;
}


bool CommandBufferSyncClient_DidMakeProgress_Params::Equals(const CommandBufferSyncClient_DidMakeProgress_Params& other) const {
  if (!mojo::internal::ValueTraits<CommandBufferStatePtr>::Equals(this->state, other.state))
    return false;
  return true;
}


size_t CommandBufferSyncClient_DidMakeProgress_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBufferSyncClient_DidMakeProgress_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBufferSyncClient_DidMakeProgress_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBufferSyncClient_DidMakeProgress_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBufferSyncClient_DidMakeProgress_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBufferSyncClient_DidMakeProgress_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBufferSyncClient_DidMakeProgress_Params_Data* input =
      static_cast<internal::CommandBufferSyncClient_DidMakeProgress_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBufferSyncClient_DidMakeProgress_Params& input) {
  size_t size = sizeof(internal::CommandBufferSyncClient_DidMakeProgress_Params_Data);
  size += input.state.is_null()
              ? 0
              : GetSerializedSize_(*input.state);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBufferSyncClient_DidMakeProgress_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBufferSyncClient_DidMakeProgress_Params_Data** output) {
  if (input) {
    internal::CommandBufferSyncClient_DidMakeProgress_Params_Data* result =
        internal::CommandBufferSyncClient_DidMakeProgress_Params_Data::New(buf);
    {auto retval =Serialize_(input->state.get(),
                 buf,
                 &result->state.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->state.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null state in CommandBufferSyncClient_DidMakeProgress_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBufferSyncClient_DidMakeProgress_Params_Data* input,
                  CommandBufferSyncClient_DidMakeProgress_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->state.ptr) {
        result->state = CommandBufferState::New();
        Deserialize_(input->state.ptr, result->state.get());
      }
    } while (false);
  }
}



// static
CommandBufferSyncPointClient_DidInsertSyncPoint_ParamsPtr CommandBufferSyncPointClient_DidInsertSyncPoint_Params::New() {
  CommandBufferSyncPointClient_DidInsertSyncPoint_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBufferSyncPointClient_DidInsertSyncPoint_Params>::Initialize(&rv);
  return rv;
}

CommandBufferSyncPointClient_DidInsertSyncPoint_Params::CommandBufferSyncPointClient_DidInsertSyncPoint_Params()
    : sync_point() {
}

CommandBufferSyncPointClient_DidInsertSyncPoint_Params::~CommandBufferSyncPointClient_DidInsertSyncPoint_Params() {
}


CommandBufferSyncPointClient_DidInsertSyncPoint_ParamsPtr CommandBufferSyncPointClient_DidInsertSyncPoint_Params::Clone() const {
  CommandBufferSyncPointClient_DidInsertSyncPoint_ParamsPtr rv(New());
  rv->sync_point = sync_point;
  return rv;
}


bool CommandBufferSyncPointClient_DidInsertSyncPoint_Params::Equals(const CommandBufferSyncPointClient_DidInsertSyncPoint_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->sync_point, other.sync_point))
    return false;
  return true;
}


size_t CommandBufferSyncPointClient_DidInsertSyncPoint_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBufferSyncPointClient_DidInsertSyncPoint_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBufferSyncPointClient_DidInsertSyncPoint_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBufferSyncPointClient_DidInsertSyncPoint_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data* input =
      static_cast<internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBufferSyncPointClient_DidInsertSyncPoint_Params& input) {
  size_t size = sizeof(internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBufferSyncPointClient_DidInsertSyncPoint_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data** output) {
  if (input) {
    internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data* result =
        internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::New(buf);
    result->sync_point = input->sync_point;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data* input,
                  CommandBufferSyncPointClient_DidInsertSyncPoint_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->sync_point = input->sync_point;
    } while (false);
  }
}



// static
CommandBufferLostContextObserver_DidLoseContext_ParamsPtr CommandBufferLostContextObserver_DidLoseContext_Params::New() {
  CommandBufferLostContextObserver_DidLoseContext_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBufferLostContextObserver_DidLoseContext_Params>::Initialize(&rv);
  return rv;
}

CommandBufferLostContextObserver_DidLoseContext_Params::CommandBufferLostContextObserver_DidLoseContext_Params()
    : context_lost_reason() {
}

CommandBufferLostContextObserver_DidLoseContext_Params::~CommandBufferLostContextObserver_DidLoseContext_Params() {
}


CommandBufferLostContextObserver_DidLoseContext_ParamsPtr CommandBufferLostContextObserver_DidLoseContext_Params::Clone() const {
  CommandBufferLostContextObserver_DidLoseContext_ParamsPtr rv(New());
  rv->context_lost_reason = context_lost_reason;
  return rv;
}


bool CommandBufferLostContextObserver_DidLoseContext_Params::Equals(const CommandBufferLostContextObserver_DidLoseContext_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->context_lost_reason, other.context_lost_reason))
    return false;
  return true;
}


size_t CommandBufferLostContextObserver_DidLoseContext_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBufferLostContextObserver_DidLoseContext_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBufferLostContextObserver_DidLoseContext_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBufferLostContextObserver_DidLoseContext_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data* input =
      static_cast<internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBufferLostContextObserver_DidLoseContext_Params& input) {
  size_t size = sizeof(internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBufferLostContextObserver_DidLoseContext_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data** output) {
  if (input) {
    internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data* result =
        internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data::New(buf);
    result->context_lost_reason = input->context_lost_reason;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data* input,
                  CommandBufferLostContextObserver_DidLoseContext_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->context_lost_reason = input->context_lost_reason;
    } while (false);
  }
}



// static
CommandBuffer_Initialize_ParamsPtr CommandBuffer_Initialize_Params::New() {
  CommandBuffer_Initialize_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_Initialize_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_Initialize_Params::CommandBuffer_Initialize_Params()
    : sync_client(),
      sync_point_client(),
      lost_observer(),
      shared_state() {
}

CommandBuffer_Initialize_Params::~CommandBuffer_Initialize_Params() {
}



bool CommandBuffer_Initialize_Params::Equals(const CommandBuffer_Initialize_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<CommandBufferSyncClient>>::Equals(this->sync_client, other.sync_client))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<CommandBufferSyncPointClient>>::Equals(this->sync_point_client, other.sync_point_client))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<CommandBufferLostContextObserver>>::Equals(this->lost_observer, other.lost_observer))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedSharedBufferHandle>::Equals(this->shared_state, other.shared_state))
    return false;
  return true;
}


size_t CommandBuffer_Initialize_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_Initialize_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_Initialize_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_Initialize_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_Initialize_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_Initialize_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_Initialize_Params_Data* input =
      static_cast<internal::CommandBuffer_Initialize_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_Initialize_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_Initialize_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_Initialize_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_Initialize_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_Initialize_Params_Data* result =
        internal::CommandBuffer_Initialize_Params_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->sync_client.Pass(),
                                          &result->sync_client);
    if (!result->sync_client.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid sync_client in CommandBuffer_Initialize_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    mojo::internal::InterfaceHandleToData(input->sync_point_client.Pass(),
                                          &result->sync_point_client);
    if (!result->sync_point_client.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid sync_point_client in CommandBuffer_Initialize_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    mojo::internal::InterfaceHandleToData(input->lost_observer.Pass(),
                                          &result->lost_observer);
    if (!result->lost_observer.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid lost_observer in CommandBuffer_Initialize_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->shared_state = input->shared_state.release();
    if (!result->shared_state.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid shared_state in CommandBuffer_Initialize_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_Initialize_Params_Data* input,
                  CommandBuffer_Initialize_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->sync_client, &result->sync_client);
      mojo::internal::InterfaceDataToHandle(&input->sync_point_client, &result->sync_point_client);
      mojo::internal::InterfaceDataToHandle(&input->lost_observer, &result->lost_observer);
      result->shared_state.reset(mojo::internal::FetchAndReset(&input->shared_state));
    } while (false);
  }
}



// static
CommandBuffer_SetGetBuffer_ParamsPtr CommandBuffer_SetGetBuffer_Params::New() {
  CommandBuffer_SetGetBuffer_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_SetGetBuffer_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_SetGetBuffer_Params::CommandBuffer_SetGetBuffer_Params()
    : buffer() {
}

CommandBuffer_SetGetBuffer_Params::~CommandBuffer_SetGetBuffer_Params() {
}


CommandBuffer_SetGetBuffer_ParamsPtr CommandBuffer_SetGetBuffer_Params::Clone() const {
  CommandBuffer_SetGetBuffer_ParamsPtr rv(New());
  rv->buffer = buffer;
  return rv;
}


bool CommandBuffer_SetGetBuffer_Params::Equals(const CommandBuffer_SetGetBuffer_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->buffer, other.buffer))
    return false;
  return true;
}


size_t CommandBuffer_SetGetBuffer_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_SetGetBuffer_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_SetGetBuffer_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_SetGetBuffer_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_SetGetBuffer_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_SetGetBuffer_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_SetGetBuffer_Params_Data* input =
      static_cast<internal::CommandBuffer_SetGetBuffer_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_SetGetBuffer_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_SetGetBuffer_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_SetGetBuffer_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_SetGetBuffer_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_SetGetBuffer_Params_Data* result =
        internal::CommandBuffer_SetGetBuffer_Params_Data::New(buf);
    result->buffer = input->buffer;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_SetGetBuffer_Params_Data* input,
                  CommandBuffer_SetGetBuffer_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->buffer = input->buffer;
    } while (false);
  }
}



// static
CommandBuffer_Flush_ParamsPtr CommandBuffer_Flush_Params::New() {
  CommandBuffer_Flush_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_Flush_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_Flush_Params::CommandBuffer_Flush_Params()
    : put_offset() {
}

CommandBuffer_Flush_Params::~CommandBuffer_Flush_Params() {
}


CommandBuffer_Flush_ParamsPtr CommandBuffer_Flush_Params::Clone() const {
  CommandBuffer_Flush_ParamsPtr rv(New());
  rv->put_offset = put_offset;
  return rv;
}


bool CommandBuffer_Flush_Params::Equals(const CommandBuffer_Flush_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->put_offset, other.put_offset))
    return false;
  return true;
}


size_t CommandBuffer_Flush_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_Flush_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_Flush_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_Flush_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_Flush_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_Flush_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_Flush_Params_Data* input =
      static_cast<internal::CommandBuffer_Flush_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_Flush_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_Flush_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_Flush_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_Flush_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_Flush_Params_Data* result =
        internal::CommandBuffer_Flush_Params_Data::New(buf);
    result->put_offset = input->put_offset;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_Flush_Params_Data* input,
                  CommandBuffer_Flush_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->put_offset = input->put_offset;
    } while (false);
  }
}



// static
CommandBuffer_MakeProgress_ParamsPtr CommandBuffer_MakeProgress_Params::New() {
  CommandBuffer_MakeProgress_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_MakeProgress_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_MakeProgress_Params::CommandBuffer_MakeProgress_Params()
    : last_get_offset() {
}

CommandBuffer_MakeProgress_Params::~CommandBuffer_MakeProgress_Params() {
}


CommandBuffer_MakeProgress_ParamsPtr CommandBuffer_MakeProgress_Params::Clone() const {
  CommandBuffer_MakeProgress_ParamsPtr rv(New());
  rv->last_get_offset = last_get_offset;
  return rv;
}


bool CommandBuffer_MakeProgress_Params::Equals(const CommandBuffer_MakeProgress_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->last_get_offset, other.last_get_offset))
    return false;
  return true;
}


size_t CommandBuffer_MakeProgress_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_MakeProgress_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_MakeProgress_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_MakeProgress_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_MakeProgress_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_MakeProgress_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_MakeProgress_Params_Data* input =
      static_cast<internal::CommandBuffer_MakeProgress_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_MakeProgress_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_MakeProgress_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_MakeProgress_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_MakeProgress_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_MakeProgress_Params_Data* result =
        internal::CommandBuffer_MakeProgress_Params_Data::New(buf);
    result->last_get_offset = input->last_get_offset;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_MakeProgress_Params_Data* input,
                  CommandBuffer_MakeProgress_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->last_get_offset = input->last_get_offset;
    } while (false);
  }
}



// static
CommandBuffer_RegisterTransferBuffer_ParamsPtr CommandBuffer_RegisterTransferBuffer_Params::New() {
  CommandBuffer_RegisterTransferBuffer_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_RegisterTransferBuffer_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_RegisterTransferBuffer_Params::CommandBuffer_RegisterTransferBuffer_Params()
    : id(),
      transfer_buffer(),
      size() {
}

CommandBuffer_RegisterTransferBuffer_Params::~CommandBuffer_RegisterTransferBuffer_Params() {
}



bool CommandBuffer_RegisterTransferBuffer_Params::Equals(const CommandBuffer_RegisterTransferBuffer_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->id, other.id))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedSharedBufferHandle>::Equals(this->transfer_buffer, other.transfer_buffer))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->size, other.size))
    return false;
  return true;
}


size_t CommandBuffer_RegisterTransferBuffer_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_RegisterTransferBuffer_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_RegisterTransferBuffer_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_RegisterTransferBuffer_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_RegisterTransferBuffer_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_RegisterTransferBuffer_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_RegisterTransferBuffer_Params_Data* input =
      static_cast<internal::CommandBuffer_RegisterTransferBuffer_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_RegisterTransferBuffer_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_RegisterTransferBuffer_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_RegisterTransferBuffer_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_RegisterTransferBuffer_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_RegisterTransferBuffer_Params_Data* result =
        internal::CommandBuffer_RegisterTransferBuffer_Params_Data::New(buf);
    result->id = input->id;
    result->transfer_buffer = input->transfer_buffer.release();
    if (!result->transfer_buffer.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid transfer_buffer in CommandBuffer_RegisterTransferBuffer_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->size = input->size;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_RegisterTransferBuffer_Params_Data* input,
                  CommandBuffer_RegisterTransferBuffer_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id = input->id;
      result->transfer_buffer.reset(mojo::internal::FetchAndReset(&input->transfer_buffer));
      result->size = input->size;
    } while (false);
  }
}



// static
CommandBuffer_DestroyTransferBuffer_ParamsPtr CommandBuffer_DestroyTransferBuffer_Params::New() {
  CommandBuffer_DestroyTransferBuffer_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_DestroyTransferBuffer_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_DestroyTransferBuffer_Params::CommandBuffer_DestroyTransferBuffer_Params()
    : id() {
}

CommandBuffer_DestroyTransferBuffer_Params::~CommandBuffer_DestroyTransferBuffer_Params() {
}


CommandBuffer_DestroyTransferBuffer_ParamsPtr CommandBuffer_DestroyTransferBuffer_Params::Clone() const {
  CommandBuffer_DestroyTransferBuffer_ParamsPtr rv(New());
  rv->id = id;
  return rv;
}


bool CommandBuffer_DestroyTransferBuffer_Params::Equals(const CommandBuffer_DestroyTransferBuffer_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->id, other.id))
    return false;
  return true;
}


size_t CommandBuffer_DestroyTransferBuffer_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_DestroyTransferBuffer_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_DestroyTransferBuffer_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_DestroyTransferBuffer_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_DestroyTransferBuffer_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_DestroyTransferBuffer_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_DestroyTransferBuffer_Params_Data* input =
      static_cast<internal::CommandBuffer_DestroyTransferBuffer_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_DestroyTransferBuffer_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_DestroyTransferBuffer_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_DestroyTransferBuffer_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_DestroyTransferBuffer_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_DestroyTransferBuffer_Params_Data* result =
        internal::CommandBuffer_DestroyTransferBuffer_Params_Data::New(buf);
    result->id = input->id;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_DestroyTransferBuffer_Params_Data* input,
                  CommandBuffer_DestroyTransferBuffer_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id = input->id;
    } while (false);
  }
}



// static
CommandBuffer_InsertSyncPoint_ParamsPtr CommandBuffer_InsertSyncPoint_Params::New() {
  CommandBuffer_InsertSyncPoint_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_InsertSyncPoint_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_InsertSyncPoint_Params::CommandBuffer_InsertSyncPoint_Params()
    : retire() {
}

CommandBuffer_InsertSyncPoint_Params::~CommandBuffer_InsertSyncPoint_Params() {
}


CommandBuffer_InsertSyncPoint_ParamsPtr CommandBuffer_InsertSyncPoint_Params::Clone() const {
  CommandBuffer_InsertSyncPoint_ParamsPtr rv(New());
  rv->retire = retire;
  return rv;
}


bool CommandBuffer_InsertSyncPoint_Params::Equals(const CommandBuffer_InsertSyncPoint_Params& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->retire, other.retire))
    return false;
  return true;
}


size_t CommandBuffer_InsertSyncPoint_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_InsertSyncPoint_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_InsertSyncPoint_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_InsertSyncPoint_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_InsertSyncPoint_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_InsertSyncPoint_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_InsertSyncPoint_Params_Data* input =
      static_cast<internal::CommandBuffer_InsertSyncPoint_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_InsertSyncPoint_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_InsertSyncPoint_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_InsertSyncPoint_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_InsertSyncPoint_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_InsertSyncPoint_Params_Data* result =
        internal::CommandBuffer_InsertSyncPoint_Params_Data::New(buf);
    result->retire = input->retire;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_InsertSyncPoint_Params_Data* input,
                  CommandBuffer_InsertSyncPoint_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->retire = input->retire;
    } while (false);
  }
}



// static
CommandBuffer_RetireSyncPoint_ParamsPtr CommandBuffer_RetireSyncPoint_Params::New() {
  CommandBuffer_RetireSyncPoint_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_RetireSyncPoint_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_RetireSyncPoint_Params::CommandBuffer_RetireSyncPoint_Params()
    : sync_point() {
}

CommandBuffer_RetireSyncPoint_Params::~CommandBuffer_RetireSyncPoint_Params() {
}


CommandBuffer_RetireSyncPoint_ParamsPtr CommandBuffer_RetireSyncPoint_Params::Clone() const {
  CommandBuffer_RetireSyncPoint_ParamsPtr rv(New());
  rv->sync_point = sync_point;
  return rv;
}


bool CommandBuffer_RetireSyncPoint_Params::Equals(const CommandBuffer_RetireSyncPoint_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->sync_point, other.sync_point))
    return false;
  return true;
}


size_t CommandBuffer_RetireSyncPoint_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_RetireSyncPoint_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_RetireSyncPoint_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_RetireSyncPoint_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_RetireSyncPoint_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_RetireSyncPoint_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_RetireSyncPoint_Params_Data* input =
      static_cast<internal::CommandBuffer_RetireSyncPoint_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_RetireSyncPoint_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_RetireSyncPoint_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_RetireSyncPoint_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_RetireSyncPoint_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_RetireSyncPoint_Params_Data* result =
        internal::CommandBuffer_RetireSyncPoint_Params_Data::New(buf);
    result->sync_point = input->sync_point;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_RetireSyncPoint_Params_Data* input,
                  CommandBuffer_RetireSyncPoint_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->sync_point = input->sync_point;
    } while (false);
  }
}



// static
CommandBuffer_Echo_ParamsPtr CommandBuffer_Echo_Params::New() {
  CommandBuffer_Echo_ParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_Echo_Params>::Initialize(&rv);
  return rv;
}

CommandBuffer_Echo_Params::CommandBuffer_Echo_Params() {
}

CommandBuffer_Echo_Params::~CommandBuffer_Echo_Params() {
}


CommandBuffer_Echo_ParamsPtr CommandBuffer_Echo_Params::Clone() const {
  CommandBuffer_Echo_ParamsPtr rv(New());
  return rv;
}


bool CommandBuffer_Echo_Params::Equals(const CommandBuffer_Echo_Params& other) const {
  return true;
}


size_t CommandBuffer_Echo_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_Echo_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_Echo_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_Echo_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_Echo_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_Echo_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_Echo_Params_Data* input =
      static_cast<internal::CommandBuffer_Echo_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_Echo_Params& input) {
  size_t size = sizeof(internal::CommandBuffer_Echo_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_Echo_Params* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_Echo_Params_Data** output) {
  if (input) {
    internal::CommandBuffer_Echo_Params_Data* result =
        internal::CommandBuffer_Echo_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_Echo_Params_Data* input,
                  CommandBuffer_Echo_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
CommandBuffer_Echo_ResponseParamsPtr CommandBuffer_Echo_ResponseParams::New() {
  CommandBuffer_Echo_ResponseParamsPtr rv;
  mojo::internal::StructHelper<CommandBuffer_Echo_ResponseParams>::Initialize(&rv);
  return rv;
}

CommandBuffer_Echo_ResponseParams::CommandBuffer_Echo_ResponseParams() {
}

CommandBuffer_Echo_ResponseParams::~CommandBuffer_Echo_ResponseParams() {
}


CommandBuffer_Echo_ResponseParamsPtr CommandBuffer_Echo_ResponseParams::Clone() const {
  CommandBuffer_Echo_ResponseParamsPtr rv(New());
  return rv;
}


bool CommandBuffer_Echo_ResponseParams::Equals(const CommandBuffer_Echo_ResponseParams& other) const {
  return true;
}


size_t CommandBuffer_Echo_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CommandBuffer_Echo_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CommandBuffer_Echo_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CommandBuffer_Echo_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CommandBuffer_Echo_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CommandBuffer_Echo_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CommandBuffer_Echo_ResponseParams_Data* input =
      static_cast<internal::CommandBuffer_Echo_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CommandBuffer_Echo_ResponseParams& input) {
  size_t size = sizeof(internal::CommandBuffer_Echo_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CommandBuffer_Echo_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::CommandBuffer_Echo_ResponseParams_Data** output) {
  if (input) {
    internal::CommandBuffer_Echo_ResponseParams_Data* result =
        internal::CommandBuffer_Echo_ResponseParams_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CommandBuffer_Echo_ResponseParams_Data* input,
                  CommandBuffer_Echo_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}

}  // namespace mojo
