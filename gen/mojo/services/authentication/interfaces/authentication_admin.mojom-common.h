// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_ADMIN_MOJOM_COMMON_H_
#define MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_ADMIN_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/authentication/interfaces/authentication_admin.mojom-internal.h"
namespace authentication {

// --- Interface Forward Declarations ---
class AuthenticationAdminService;
class AuthenticationAdminServiceRequestValidator;
class AuthenticationAdminServiceResponseValidator;
class AuthenticationAdminService_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class AuthenticationAdminService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = AuthenticationAdminServiceRequestValidator;
  using ResponseValidator_ = AuthenticationAdminServiceResponseValidator;
  using Synchronous_ = AuthenticationAdminService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetOAuth2DeviceCode = 0,
    AddAccount = 1,
    GetAllUsers = 2,
  };


  virtual ~AuthenticationAdminService_Base() {}
};

}  // namespace internal

// Async interface declaration

class AuthenticationAdminServiceProxy;
class AuthenticationAdminServiceStub;
class AuthenticationAdminService_Synchronous;

class AuthenticationAdminServiceRequestValidator;
class AuthenticationAdminServiceResponseValidator;

class AuthenticationAdminService : public internal::AuthenticationAdminService_Base {
 public:
  virtual ~AuthenticationAdminService() override {}

  using Proxy_ = AuthenticationAdminServiceProxy;
  using Stub_ = AuthenticationAdminServiceStub;
  using GetOAuth2DeviceCodeCallback = mojo::Callback<void(mojo::String, mojo::String, mojo::String, mojo::String)>;
  virtual void GetOAuth2DeviceCode(mojo::Array<mojo::String> scopes, const GetOAuth2DeviceCodeCallback& callback) = 0;
  using AddAccountCallback = mojo::Callback<void(mojo::String, mojo::String)>;
  virtual void AddAccount(const mojo::String& device_code, const AddAccountCallback& callback) = 0;
  using GetAllUsersCallback = mojo::Callback<void(mojo::Array<mojo::String>, mojo::String)>;
  virtual void GetAllUsers(const GetAllUsersCallback& callback) = 0;
};

}  // namespace authentication

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace authentication {

// --- Interface Request Validators ---
class AuthenticationAdminServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class AuthenticationAdminServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class AuthenticationAdminService_GetOAuth2DeviceCode_Params;

using AuthenticationAdminService_GetOAuth2DeviceCode_ParamsPtr = mojo::StructPtr<AuthenticationAdminService_GetOAuth2DeviceCode_Params>;


size_t GetSerializedSize_(const AuthenticationAdminService_GetOAuth2DeviceCode_Params& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationAdminService_GetOAuth2DeviceCode_Params* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data** output);
void Deserialize_(internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data* input,
                  AuthenticationAdminService_GetOAuth2DeviceCode_Params* output);

class AuthenticationAdminService_GetOAuth2DeviceCode_Params {
 public:
  using Data_ = internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data;

  static AuthenticationAdminService_GetOAuth2DeviceCode_ParamsPtr New();

  template <typename U>
  static AuthenticationAdminService_GetOAuth2DeviceCode_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationAdminService_GetOAuth2DeviceCode_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationAdminService_GetOAuth2DeviceCode_Params>::Convert(*this);
  }

  AuthenticationAdminService_GetOAuth2DeviceCode_Params();
  ~AuthenticationAdminService_GetOAuth2DeviceCode_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationAdminService_GetOAuth2DeviceCode_ParamsPtr Clone() const;
  bool Equals(const AuthenticationAdminService_GetOAuth2DeviceCode_Params& other) const;

  mojo::Array<mojo::String> scopes;
};



class AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams;

using AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParamsPtr = mojo::InlinedStructPtr<AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams>;


size_t GetSerializedSize_(const AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data** output);
void Deserialize_(internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data* input,
                  AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams* output);

class AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams {
 public:
  using Data_ = internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data;

  static AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParamsPtr New();

  template <typename U>
  static AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams>::Convert(*this);
  }

  AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams();
  ~AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParamsPtr Clone() const;
  bool Equals(const AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams& other) const;

  mojo::String verification_url;
  mojo::String device_code;
  mojo::String user_code;
  mojo::String error;
};



class AuthenticationAdminService_AddAccount_Params;

using AuthenticationAdminService_AddAccount_ParamsPtr = mojo::InlinedStructPtr<AuthenticationAdminService_AddAccount_Params>;


size_t GetSerializedSize_(const AuthenticationAdminService_AddAccount_Params& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationAdminService_AddAccount_Params* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationAdminService_AddAccount_Params_Data** output);
void Deserialize_(internal::AuthenticationAdminService_AddAccount_Params_Data* input,
                  AuthenticationAdminService_AddAccount_Params* output);

class AuthenticationAdminService_AddAccount_Params {
 public:
  using Data_ = internal::AuthenticationAdminService_AddAccount_Params_Data;

  static AuthenticationAdminService_AddAccount_ParamsPtr New();

  template <typename U>
  static AuthenticationAdminService_AddAccount_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationAdminService_AddAccount_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationAdminService_AddAccount_Params>::Convert(*this);
  }

  AuthenticationAdminService_AddAccount_Params();
  ~AuthenticationAdminService_AddAccount_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationAdminService_AddAccount_ParamsPtr Clone() const;
  bool Equals(const AuthenticationAdminService_AddAccount_Params& other) const;

  mojo::String device_code;
};



class AuthenticationAdminService_AddAccount_ResponseParams;

using AuthenticationAdminService_AddAccount_ResponseParamsPtr = mojo::InlinedStructPtr<AuthenticationAdminService_AddAccount_ResponseParams>;


size_t GetSerializedSize_(const AuthenticationAdminService_AddAccount_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationAdminService_AddAccount_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationAdminService_AddAccount_ResponseParams_Data** output);
void Deserialize_(internal::AuthenticationAdminService_AddAccount_ResponseParams_Data* input,
                  AuthenticationAdminService_AddAccount_ResponseParams* output);

class AuthenticationAdminService_AddAccount_ResponseParams {
 public:
  using Data_ = internal::AuthenticationAdminService_AddAccount_ResponseParams_Data;

  static AuthenticationAdminService_AddAccount_ResponseParamsPtr New();

  template <typename U>
  static AuthenticationAdminService_AddAccount_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationAdminService_AddAccount_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationAdminService_AddAccount_ResponseParams>::Convert(*this);
  }

  AuthenticationAdminService_AddAccount_ResponseParams();
  ~AuthenticationAdminService_AddAccount_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationAdminService_AddAccount_ResponseParamsPtr Clone() const;
  bool Equals(const AuthenticationAdminService_AddAccount_ResponseParams& other) const;

  mojo::String username;
  mojo::String error;
};



class AuthenticationAdminService_GetAllUsers_Params;

using AuthenticationAdminService_GetAllUsers_ParamsPtr = mojo::InlinedStructPtr<AuthenticationAdminService_GetAllUsers_Params>;


size_t GetSerializedSize_(const AuthenticationAdminService_GetAllUsers_Params& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationAdminService_GetAllUsers_Params* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationAdminService_GetAllUsers_Params_Data** output);
void Deserialize_(internal::AuthenticationAdminService_GetAllUsers_Params_Data* input,
                  AuthenticationAdminService_GetAllUsers_Params* output);

class AuthenticationAdminService_GetAllUsers_Params {
 public:
  using Data_ = internal::AuthenticationAdminService_GetAllUsers_Params_Data;

  static AuthenticationAdminService_GetAllUsers_ParamsPtr New();

  template <typename U>
  static AuthenticationAdminService_GetAllUsers_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationAdminService_GetAllUsers_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationAdminService_GetAllUsers_Params>::Convert(*this);
  }

  AuthenticationAdminService_GetAllUsers_Params();
  ~AuthenticationAdminService_GetAllUsers_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationAdminService_GetAllUsers_ParamsPtr Clone() const;
  bool Equals(const AuthenticationAdminService_GetAllUsers_Params& other) const;

};



class AuthenticationAdminService_GetAllUsers_ResponseParams;

using AuthenticationAdminService_GetAllUsers_ResponseParamsPtr = mojo::StructPtr<AuthenticationAdminService_GetAllUsers_ResponseParams>;


size_t GetSerializedSize_(const AuthenticationAdminService_GetAllUsers_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationAdminService_GetAllUsers_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data** output);
void Deserialize_(internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data* input,
                  AuthenticationAdminService_GetAllUsers_ResponseParams* output);

class AuthenticationAdminService_GetAllUsers_ResponseParams {
 public:
  using Data_ = internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data;

  static AuthenticationAdminService_GetAllUsers_ResponseParamsPtr New();

  template <typename U>
  static AuthenticationAdminService_GetAllUsers_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationAdminService_GetAllUsers_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationAdminService_GetAllUsers_ResponseParams>::Convert(*this);
  }

  AuthenticationAdminService_GetAllUsers_ResponseParams();
  ~AuthenticationAdminService_GetAllUsers_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationAdminService_GetAllUsers_ResponseParamsPtr Clone() const;
  bool Equals(const AuthenticationAdminService_GetAllUsers_ResponseParams& other) const;

  mojo::Array<mojo::String> usernames;
  mojo::String error;
};


}  // namespace authentication

#endif  // MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_ADMIN_MOJOM_COMMON_H_
