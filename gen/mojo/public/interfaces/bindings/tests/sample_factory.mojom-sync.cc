// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/interfaces/bindings/tests/sample_factory.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/public/interfaces/bindings/tests/sample_factory.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/sample_factory.mojom-common.h"
namespace sample {

// --- Interface definitions ---
NamedObject_SynchronousProxy::NamedObject_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool NamedObject_SynchronousProxy::SetName(const mojo::String& in_name) const  {
  size_t size = sizeof(internal::NamedObject_SetName_Params_Data);
  size += GetSerializedSize_(in_name);

  auto msg_name = static_cast<uint32_t>(internal::NamedObject_Base::MessageOrdinals::SetName);
  mojo::MessageBuilder builder(msg_name, size);

  internal::NamedObject_SetName_Params_Data* out_params =
      internal::NamedObject_SetName_Params_Data::New(builder.buffer());
  SerializeString_(in_name, builder.buffer(), &out_params->name.ptr);
  if (!out_params->name.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null name in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool NamedObject_SynchronousProxy::GetName(mojo::String* out_name) {
  size_t size = sizeof(internal::NamedObject_GetName_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::NamedObject_Base::MessageOrdinals::GetName);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::NamedObject_GetName_Params_Data* out_params =
      internal::NamedObject_GetName_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::NamedObject_GetName_ResponseParams_Data*
      response_params = reinterpret_cast<internal::NamedObject_GetName_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->name.ptr, &(*out_name));
  } while (false);
  return true;
}Factory_SynchronousProxy::Factory_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool Factory_SynchronousProxy::DoStuff(RequestPtr in_request, mojo::ScopedMessagePipeHandle in_pipe, ResponsePtr* out_response, mojo::String* out_text) {
  size_t size = sizeof(internal::Factory_DoStuff_Params_Data);
  size += in_request.is_null()
              ? 0
              : GetSerializedSize_(*in_request);

  auto msg_name = static_cast<uint32_t>(internal::Factory_Base::MessageOrdinals::DoStuff);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Factory_DoStuff_Params_Data* out_params =
      internal::Factory_DoStuff_Params_Data::New(builder.buffer());
  {Serialize_(in_request.get(),
               builder.buffer(),
               &out_params->request.ptr);
  }
  if (!out_params->request.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null request in {{interface.name}}::{{method.name}}");
  }
  out_params->pipe = in_pipe.release();
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Factory_DoStuff_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Factory_DoStuff_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->response.ptr) {
      (*out_response) = Response::New();
      Deserialize_(response_params->response.ptr, (*out_response).get());
    }
    Deserialize_(response_params->text.ptr, &(*out_text));
  } while (false);
  return true;
}
bool Factory_SynchronousProxy::DoStuff2(mojo::ScopedDataPipeConsumerHandle in_pipe, mojo::String* out_text) {
  size_t size = sizeof(internal::Factory_DoStuff2_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Factory_Base::MessageOrdinals::DoStuff2);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Factory_DoStuff2_Params_Data* out_params =
      internal::Factory_DoStuff2_Params_Data::New(builder.buffer());
  out_params->pipe = in_pipe.release();
  if (!out_params->pipe.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid pipe in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Factory_DoStuff2_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Factory_DoStuff2_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->text.ptr, &(*out_text));
  } while (false);
  return true;
}
bool Factory_SynchronousProxy::CreateNamedObject(mojo::InterfaceRequest<NamedObject> in_obj) const  {
  size_t size = sizeof(internal::Factory_CreateNamedObject_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Factory_Base::MessageOrdinals::CreateNamedObject);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Factory_CreateNamedObject_Params_Data* out_params =
      internal::Factory_CreateNamedObject_Params_Data::New(builder.buffer());
  out_params->obj = in_obj.PassMessagePipe().release();
  if (!out_params->obj.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid obj in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool Factory_SynchronousProxy::RequestImportedInterface(mojo::InterfaceRequest<imported::ImportedInterface> in_obj, mojo::InterfaceRequest<imported::ImportedInterface>* out_obj) {
  size_t size = sizeof(internal::Factory_RequestImportedInterface_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Factory_Base::MessageOrdinals::RequestImportedInterface);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Factory_RequestImportedInterface_Params_Data* out_params =
      internal::Factory_RequestImportedInterface_Params_Data::New(builder.buffer());
  out_params->obj = in_obj.PassMessagePipe().release();
  if (!out_params->obj.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid obj in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Factory_RequestImportedInterface_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Factory_RequestImportedInterface_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_obj).Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&response_params->obj)));
  } while (false);
  return true;
}
bool Factory_SynchronousProxy::TakeImportedInterface(mojo::InterfaceHandle<imported::ImportedInterface> in_obj, mojo::InterfaceHandle<imported::ImportedInterface>* out_obj) {
  size_t size = sizeof(internal::Factory_TakeImportedInterface_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Factory_Base::MessageOrdinals::TakeImportedInterface);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Factory_TakeImportedInterface_Params_Data* out_params =
      internal::Factory_TakeImportedInterface_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_obj.Pass(),
                                        &out_params->obj);
  if (!out_params->obj.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid obj in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Factory_TakeImportedInterface_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Factory_TakeImportedInterface_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    mojo::internal::InterfaceDataToHandle(&response_params->obj, &(*out_obj));
  } while (false);
  return true;
}
}  // namespace sample

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
