// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_COMMON_H_
#define MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/directory.mojom-internal.h"
#include "mojo/services/files/interfaces/file.mojom-common.h"
#include "mojo/services/files/interfaces/types.mojom-common.h"
namespace mojo {
namespace files {

// --- Interface Forward Declarations ---
class Directory;
class DirectoryRequestValidator;
class DirectoryResponseValidator;
class Directory_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Directory_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = DirectoryRequestValidator;
  using ResponseValidator_ = DirectoryResponseValidator;
  using Synchronous_ = Directory_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Read = 0,
    Stat = 1,
    Touch = 2,
    OpenFile = 3,
    OpenDirectory = 4,
    Rename = 5,
    Delete = 6,
  };


  virtual ~Directory_Base() {}
};

}  // namespace internal

// Async interface declaration

class DirectoryProxy;
class DirectoryStub;
class Directory_Synchronous;

class DirectoryRequestValidator;
class DirectoryResponseValidator;

class Directory : public internal::Directory_Base {
 public:
  virtual ~Directory() override {}

  using Proxy_ = DirectoryProxy;
  using Stub_ = DirectoryStub;
  using ReadCallback = mojo::Callback<void(mojo::files::Error, mojo::Array<mojo::files::DirectoryEntryPtr>)>;
  virtual void Read(const ReadCallback& callback) = 0;
  using StatCallback = mojo::Callback<void(mojo::files::Error, mojo::files::FileInformationPtr)>;
  virtual void Stat(const StatCallback& callback) = 0;
  using TouchCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void Touch(mojo::files::TimespecOrNowPtr atime, mojo::files::TimespecOrNowPtr mtime, const TouchCallback& callback) = 0;
  using OpenFileCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void OpenFile(const mojo::String& path, mojo::InterfaceRequest<mojo::files::File> file, uint32_t open_flags, const OpenFileCallback& callback) = 0;
  using OpenDirectoryCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void OpenDirectory(const mojo::String& path, mojo::InterfaceRequest<Directory> directory, uint32_t open_flags, const OpenDirectoryCallback& callback) = 0;
  using RenameCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void Rename(const mojo::String& path, const mojo::String& new_path, const RenameCallback& callback) = 0;
  using DeleteCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void Delete(const mojo::String& path, uint32_t delete_flags, const DeleteCallback& callback) = 0;
};

}  // namespace files
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {
namespace files {

// --- Interface Request Validators ---
class DirectoryRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class DirectoryResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Directory_Read_Params;

using Directory_Read_ParamsPtr = mojo::InlinedStructPtr<Directory_Read_Params>;


size_t GetSerializedSize_(const Directory_Read_Params& input);
mojo::internal::ValidationError Serialize_(
    Directory_Read_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Read_Params_Data** output);
void Deserialize_(internal::Directory_Read_Params_Data* input,
                  Directory_Read_Params* output);

class Directory_Read_Params {
 public:
  using Data_ = internal::Directory_Read_Params_Data;

  static Directory_Read_ParamsPtr New();

  template <typename U>
  static Directory_Read_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Read_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Read_Params>::Convert(*this);
  }

  Directory_Read_Params();
  ~Directory_Read_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Read_ParamsPtr Clone() const;
  bool Equals(const Directory_Read_Params& other) const;

};



class Directory_Read_ResponseParams;

using Directory_Read_ResponseParamsPtr = mojo::StructPtr<Directory_Read_ResponseParams>;


size_t GetSerializedSize_(const Directory_Read_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Directory_Read_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Read_ResponseParams_Data** output);
void Deserialize_(internal::Directory_Read_ResponseParams_Data* input,
                  Directory_Read_ResponseParams* output);

class Directory_Read_ResponseParams {
 public:
  using Data_ = internal::Directory_Read_ResponseParams_Data;

  static Directory_Read_ResponseParamsPtr New();

  template <typename U>
  static Directory_Read_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Read_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Read_ResponseParams>::Convert(*this);
  }

  Directory_Read_ResponseParams();
  ~Directory_Read_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Read_ResponseParamsPtr Clone() const;
  bool Equals(const Directory_Read_ResponseParams& other) const;

  mojo::files::Error error;
  mojo::Array<mojo::files::DirectoryEntryPtr> directory_contents;
};



class Directory_Stat_Params;

using Directory_Stat_ParamsPtr = mojo::InlinedStructPtr<Directory_Stat_Params>;


size_t GetSerializedSize_(const Directory_Stat_Params& input);
mojo::internal::ValidationError Serialize_(
    Directory_Stat_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Stat_Params_Data** output);
void Deserialize_(internal::Directory_Stat_Params_Data* input,
                  Directory_Stat_Params* output);

class Directory_Stat_Params {
 public:
  using Data_ = internal::Directory_Stat_Params_Data;

  static Directory_Stat_ParamsPtr New();

  template <typename U>
  static Directory_Stat_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Stat_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Stat_Params>::Convert(*this);
  }

  Directory_Stat_Params();
  ~Directory_Stat_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Stat_ParamsPtr Clone() const;
  bool Equals(const Directory_Stat_Params& other) const;

};



class Directory_Stat_ResponseParams;

using Directory_Stat_ResponseParamsPtr = mojo::StructPtr<Directory_Stat_ResponseParams>;


size_t GetSerializedSize_(const Directory_Stat_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Directory_Stat_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Stat_ResponseParams_Data** output);
void Deserialize_(internal::Directory_Stat_ResponseParams_Data* input,
                  Directory_Stat_ResponseParams* output);

class Directory_Stat_ResponseParams {
 public:
  using Data_ = internal::Directory_Stat_ResponseParams_Data;

  static Directory_Stat_ResponseParamsPtr New();

  template <typename U>
  static Directory_Stat_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Stat_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Stat_ResponseParams>::Convert(*this);
  }

  Directory_Stat_ResponseParams();
  ~Directory_Stat_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Stat_ResponseParamsPtr Clone() const;
  bool Equals(const Directory_Stat_ResponseParams& other) const;

  mojo::files::Error error;
  mojo::files::FileInformationPtr file_information;
};



class Directory_Touch_Params;

using Directory_Touch_ParamsPtr = mojo::StructPtr<Directory_Touch_Params>;


size_t GetSerializedSize_(const Directory_Touch_Params& input);
mojo::internal::ValidationError Serialize_(
    Directory_Touch_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Touch_Params_Data** output);
void Deserialize_(internal::Directory_Touch_Params_Data* input,
                  Directory_Touch_Params* output);

class Directory_Touch_Params {
 public:
  using Data_ = internal::Directory_Touch_Params_Data;

  static Directory_Touch_ParamsPtr New();

  template <typename U>
  static Directory_Touch_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Touch_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Touch_Params>::Convert(*this);
  }

  Directory_Touch_Params();
  ~Directory_Touch_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Touch_ParamsPtr Clone() const;
  bool Equals(const Directory_Touch_Params& other) const;

  mojo::files::TimespecOrNowPtr atime;
  mojo::files::TimespecOrNowPtr mtime;
};



class Directory_Touch_ResponseParams;

using Directory_Touch_ResponseParamsPtr = mojo::InlinedStructPtr<Directory_Touch_ResponseParams>;


size_t GetSerializedSize_(const Directory_Touch_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Directory_Touch_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Touch_ResponseParams_Data** output);
void Deserialize_(internal::Directory_Touch_ResponseParams_Data* input,
                  Directory_Touch_ResponseParams* output);

class Directory_Touch_ResponseParams {
 public:
  using Data_ = internal::Directory_Touch_ResponseParams_Data;

  static Directory_Touch_ResponseParamsPtr New();

  template <typename U>
  static Directory_Touch_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Touch_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Touch_ResponseParams>::Convert(*this);
  }

  Directory_Touch_ResponseParams();
  ~Directory_Touch_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Touch_ResponseParamsPtr Clone() const;
  bool Equals(const Directory_Touch_ResponseParams& other) const;

  mojo::files::Error error;
};



class Directory_OpenFile_Params;

using Directory_OpenFile_ParamsPtr = mojo::StructPtr<Directory_OpenFile_Params>;


size_t GetSerializedSize_(const Directory_OpenFile_Params& input);
mojo::internal::ValidationError Serialize_(
    Directory_OpenFile_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_OpenFile_Params_Data** output);
void Deserialize_(internal::Directory_OpenFile_Params_Data* input,
                  Directory_OpenFile_Params* output);

class Directory_OpenFile_Params {
 public:
  using Data_ = internal::Directory_OpenFile_Params_Data;

  static Directory_OpenFile_ParamsPtr New();

  template <typename U>
  static Directory_OpenFile_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_OpenFile_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_OpenFile_Params>::Convert(*this);
  }

  Directory_OpenFile_Params();
  ~Directory_OpenFile_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Directory_OpenFile_Params& other) const;

  mojo::String path;
  mojo::InterfaceRequest<mojo::files::File> file;
  uint32_t open_flags;
};



class Directory_OpenFile_ResponseParams;

using Directory_OpenFile_ResponseParamsPtr = mojo::InlinedStructPtr<Directory_OpenFile_ResponseParams>;


size_t GetSerializedSize_(const Directory_OpenFile_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Directory_OpenFile_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_OpenFile_ResponseParams_Data** output);
void Deserialize_(internal::Directory_OpenFile_ResponseParams_Data* input,
                  Directory_OpenFile_ResponseParams* output);

class Directory_OpenFile_ResponseParams {
 public:
  using Data_ = internal::Directory_OpenFile_ResponseParams_Data;

  static Directory_OpenFile_ResponseParamsPtr New();

  template <typename U>
  static Directory_OpenFile_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_OpenFile_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_OpenFile_ResponseParams>::Convert(*this);
  }

  Directory_OpenFile_ResponseParams();
  ~Directory_OpenFile_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_OpenFile_ResponseParamsPtr Clone() const;
  bool Equals(const Directory_OpenFile_ResponseParams& other) const;

  mojo::files::Error error;
};



class Directory_OpenDirectory_Params;

using Directory_OpenDirectory_ParamsPtr = mojo::StructPtr<Directory_OpenDirectory_Params>;


size_t GetSerializedSize_(const Directory_OpenDirectory_Params& input);
mojo::internal::ValidationError Serialize_(
    Directory_OpenDirectory_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_OpenDirectory_Params_Data** output);
void Deserialize_(internal::Directory_OpenDirectory_Params_Data* input,
                  Directory_OpenDirectory_Params* output);

class Directory_OpenDirectory_Params {
 public:
  using Data_ = internal::Directory_OpenDirectory_Params_Data;

  static Directory_OpenDirectory_ParamsPtr New();

  template <typename U>
  static Directory_OpenDirectory_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_OpenDirectory_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_OpenDirectory_Params>::Convert(*this);
  }

  Directory_OpenDirectory_Params();
  ~Directory_OpenDirectory_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Directory_OpenDirectory_Params& other) const;

  mojo::String path;
  mojo::InterfaceRequest<Directory> directory;
  uint32_t open_flags;
};



class Directory_OpenDirectory_ResponseParams;

using Directory_OpenDirectory_ResponseParamsPtr = mojo::InlinedStructPtr<Directory_OpenDirectory_ResponseParams>;


size_t GetSerializedSize_(const Directory_OpenDirectory_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Directory_OpenDirectory_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_OpenDirectory_ResponseParams_Data** output);
void Deserialize_(internal::Directory_OpenDirectory_ResponseParams_Data* input,
                  Directory_OpenDirectory_ResponseParams* output);

class Directory_OpenDirectory_ResponseParams {
 public:
  using Data_ = internal::Directory_OpenDirectory_ResponseParams_Data;

  static Directory_OpenDirectory_ResponseParamsPtr New();

  template <typename U>
  static Directory_OpenDirectory_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_OpenDirectory_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_OpenDirectory_ResponseParams>::Convert(*this);
  }

  Directory_OpenDirectory_ResponseParams();
  ~Directory_OpenDirectory_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_OpenDirectory_ResponseParamsPtr Clone() const;
  bool Equals(const Directory_OpenDirectory_ResponseParams& other) const;

  mojo::files::Error error;
};



class Directory_Rename_Params;

using Directory_Rename_ParamsPtr = mojo::InlinedStructPtr<Directory_Rename_Params>;


size_t GetSerializedSize_(const Directory_Rename_Params& input);
mojo::internal::ValidationError Serialize_(
    Directory_Rename_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Rename_Params_Data** output);
void Deserialize_(internal::Directory_Rename_Params_Data* input,
                  Directory_Rename_Params* output);

class Directory_Rename_Params {
 public:
  using Data_ = internal::Directory_Rename_Params_Data;

  static Directory_Rename_ParamsPtr New();

  template <typename U>
  static Directory_Rename_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Rename_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Rename_Params>::Convert(*this);
  }

  Directory_Rename_Params();
  ~Directory_Rename_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Rename_ParamsPtr Clone() const;
  bool Equals(const Directory_Rename_Params& other) const;

  mojo::String path;
  mojo::String new_path;
};



class Directory_Rename_ResponseParams;

using Directory_Rename_ResponseParamsPtr = mojo::InlinedStructPtr<Directory_Rename_ResponseParams>;


size_t GetSerializedSize_(const Directory_Rename_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Directory_Rename_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Rename_ResponseParams_Data** output);
void Deserialize_(internal::Directory_Rename_ResponseParams_Data* input,
                  Directory_Rename_ResponseParams* output);

class Directory_Rename_ResponseParams {
 public:
  using Data_ = internal::Directory_Rename_ResponseParams_Data;

  static Directory_Rename_ResponseParamsPtr New();

  template <typename U>
  static Directory_Rename_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Rename_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Rename_ResponseParams>::Convert(*this);
  }

  Directory_Rename_ResponseParams();
  ~Directory_Rename_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Rename_ResponseParamsPtr Clone() const;
  bool Equals(const Directory_Rename_ResponseParams& other) const;

  mojo::files::Error error;
};



class Directory_Delete_Params;

using Directory_Delete_ParamsPtr = mojo::InlinedStructPtr<Directory_Delete_Params>;


size_t GetSerializedSize_(const Directory_Delete_Params& input);
mojo::internal::ValidationError Serialize_(
    Directory_Delete_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Delete_Params_Data** output);
void Deserialize_(internal::Directory_Delete_Params_Data* input,
                  Directory_Delete_Params* output);

class Directory_Delete_Params {
 public:
  using Data_ = internal::Directory_Delete_Params_Data;

  static Directory_Delete_ParamsPtr New();

  template <typename U>
  static Directory_Delete_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Delete_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Delete_Params>::Convert(*this);
  }

  Directory_Delete_Params();
  ~Directory_Delete_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Delete_ParamsPtr Clone() const;
  bool Equals(const Directory_Delete_Params& other) const;

  mojo::String path;
  uint32_t delete_flags;
};



class Directory_Delete_ResponseParams;

using Directory_Delete_ResponseParamsPtr = mojo::InlinedStructPtr<Directory_Delete_ResponseParams>;


size_t GetSerializedSize_(const Directory_Delete_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Directory_Delete_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Directory_Delete_ResponseParams_Data** output);
void Deserialize_(internal::Directory_Delete_ResponseParams_Data* input,
                  Directory_Delete_ResponseParams* output);

class Directory_Delete_ResponseParams {
 public:
  using Data_ = internal::Directory_Delete_ResponseParams_Data;

  static Directory_Delete_ResponseParamsPtr New();

  template <typename U>
  static Directory_Delete_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Directory_Delete_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Directory_Delete_ResponseParams>::Convert(*this);
  }

  Directory_Delete_ResponseParams();
  ~Directory_Delete_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Directory_Delete_ResponseParamsPtr Clone() const;
  bool Equals(const Directory_Delete_ResponseParams& other) const;

  mojo::files::Error error;
};


}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_COMMON_H_
