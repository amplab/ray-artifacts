// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/network/interfaces/udp_socket.mojom
//

package udp_socket

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	network_error "mojo/public/interfaces/network/network_error"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	net_address "mojo/services/network/interfaces/net_address"
)


type UdpSocket interface {
	AllowAddressReuse() (outResult network_error.NetworkError, err error)
	Bind(inAddr net_address.NetAddress) (outResult network_error.NetworkError, outBoundAddr *net_address.NetAddress, outReceiver *UdpSocketReceiver_Request, err error)
	Connect(inRemoteAddr net_address.NetAddress) (outResult network_error.NetworkError, outLocalAddr *net_address.NetAddress, outReceiver *UdpSocketReceiver_Request, err error)
	SetSendBufferSize(inSize uint32) (outResult network_error.NetworkError, err error)
	SetReceiveBufferSize(inSize uint32) (outResult network_error.NetworkError, err error)
	NegotiateMaxPendingSendRequests(inRequestedSize uint32) (outActualSize uint32, err error)
	ReceiveMore(inDatagramNumber uint32) (err error)
	SendTo(inDestAddr *net_address.NetAddress, inData []uint8) (outResult network_error.NetworkError, err error)
}




type UdpSocket_Request bindings.InterfaceRequest



type UdpSocket_Pointer bindings.InterfacePointer


type UdpSocket_ServiceFactory struct{
	Delegate UdpSocket_Factory
}

type UdpSocket_Factory interface {
	Create(request UdpSocket_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *UdpSocket_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &UdpSocket_ServiceDescription{}
}

func (f *UdpSocket_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := UdpSocket_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForUdpSocket creates a message pipe for use with the
// UdpSocket interface with a UdpSocket_Request on one end and a UdpSocket_Pointer on the other.
func CreateMessagePipeForUdpSocket() (UdpSocket_Request, UdpSocket_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return UdpSocket_Request(r), UdpSocket_Pointer(p)
}

const uDPSocket_AllowAddressReuse_Name uint32 = 0
const uDPSocket_Bind_Name uint32 = 1
const uDPSocket_Connect_Name uint32 = 2
const uDPSocket_SetSendBufferSize_Name uint32 = 3
const uDPSocket_SetReceiveBufferSize_Name uint32 = 4
const uDPSocket_NegotiateMaxPendingSendRequests_Name uint32 = 5
const uDPSocket_ReceiveMore_Name uint32 = 6
const uDPSocket_SendTo_Name uint32 = 7

type UdpSocket_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewUdpSocketProxy(p UdpSocket_Pointer, waiter bindings.AsyncWaiter) *UdpSocket_Proxy {
	return &UdpSocket_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *UdpSocket_Proxy) Close_Proxy() {
	p.router.Close()
}

type uDPSocket_AllowAddressReuse_Params struct {
}


func (s *uDPSocket_AllowAddressReuse_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_AllowAddressReuse_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *uDPSocket_AllowAddressReuse_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_AllowAddressReuse_Params_Versions), func(i int) bool {
		return uDPSocket_AllowAddressReuse_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_AllowAddressReuse_Params_Versions) {
		if uDPSocket_AllowAddressReuse_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_AllowAddressReuse_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uDPSocket_AllowAddressReuse_ResponseParams struct {
	outResult network_error.NetworkError
}


func (s *uDPSocket_AllowAddressReuse_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_AllowAddressReuse_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_AllowAddressReuse_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_AllowAddressReuse_ResponseParams_Versions), func(i int) bool {
		return uDPSocket_AllowAddressReuse_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_AllowAddressReuse_ResponseParams_Versions) {
		if uDPSocket_AllowAddressReuse_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_AllowAddressReuse_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) AllowAddressReuse() (outResult network_error.NetworkError, err error) {
	payload := &uDPSocket_AllowAddressReuse_Params{
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_AllowAddressReuse_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uDPSocket_AllowAddressReuse_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uDPSocket_AllowAddressReuse_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	return
}

type uDPSocket_Bind_Params struct {
	inAddr net_address.NetAddress
}


func (s *uDPSocket_Bind_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inAddr.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_Bind_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_Bind_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_Bind_Params_Versions), func(i int) bool {
		return uDPSocket_Bind_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_Bind_Params_Versions) {
		if uDPSocket_Bind_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_Bind_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inAddr.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uDPSocket_Bind_ResponseParams struct {
	outResult network_error.NetworkError
	outBoundAddr *net_address.NetAddress
	outReceiver *UdpSocketReceiver_Request
}


func (s *uDPSocket_Bind_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if s.outBoundAddr == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.outBoundAddr).Encode(encoder); err != nil {
			return err
		}
	}
	if s.outReceiver == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.outReceiver).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_Bind_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *uDPSocket_Bind_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_Bind_ResponseParams_Versions), func(i int) bool {
		return uDPSocket_Bind_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_Bind_ResponseParams_Versions) {
		if uDPSocket_Bind_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_Bind_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outBoundAddr = nil
		} else {
			s.outBoundAddr = new(net_address.NetAddress)
			if err := (*s.outBoundAddr).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.outReceiver = &UdpSocketReceiver_Request{handleOwner}
		} else {
			s.outReceiver = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) Bind(inAddr net_address.NetAddress) (outResult network_error.NetworkError, outBoundAddr *net_address.NetAddress, outReceiver *UdpSocketReceiver_Request, err error) {
	payload := &uDPSocket_Bind_Params{
		inAddr,
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_Bind_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uDPSocket_Bind_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uDPSocket_Bind_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	outBoundAddr = response.outBoundAddr
	outReceiver = response.outReceiver
	return
}

type uDPSocket_Connect_Params struct {
	inRemoteAddr net_address.NetAddress
}


func (s *uDPSocket_Connect_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inRemoteAddr.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_Connect_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_Connect_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_Connect_Params_Versions), func(i int) bool {
		return uDPSocket_Connect_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_Connect_Params_Versions) {
		if uDPSocket_Connect_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_Connect_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inRemoteAddr.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uDPSocket_Connect_ResponseParams struct {
	outResult network_error.NetworkError
	outLocalAddr *net_address.NetAddress
	outReceiver *UdpSocketReceiver_Request
}


func (s *uDPSocket_Connect_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if s.outLocalAddr == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.outLocalAddr).Encode(encoder); err != nil {
			return err
		}
	}
	if s.outReceiver == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.outReceiver).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_Connect_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *uDPSocket_Connect_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_Connect_ResponseParams_Versions), func(i int) bool {
		return uDPSocket_Connect_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_Connect_ResponseParams_Versions) {
		if uDPSocket_Connect_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_Connect_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outLocalAddr = nil
		} else {
			s.outLocalAddr = new(net_address.NetAddress)
			if err := (*s.outLocalAddr).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.outReceiver = &UdpSocketReceiver_Request{handleOwner}
		} else {
			s.outReceiver = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) Connect(inRemoteAddr net_address.NetAddress) (outResult network_error.NetworkError, outLocalAddr *net_address.NetAddress, outReceiver *UdpSocketReceiver_Request, err error) {
	payload := &uDPSocket_Connect_Params{
		inRemoteAddr,
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_Connect_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uDPSocket_Connect_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uDPSocket_Connect_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	outLocalAddr = response.outLocalAddr
	outReceiver = response.outReceiver
	return
}

type uDPSocket_SetSendBufferSize_Params struct {
	inSize uint32
}


func (s *uDPSocket_SetSendBufferSize_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.inSize); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_SetSendBufferSize_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_SetSendBufferSize_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_SetSendBufferSize_Params_Versions), func(i int) bool {
		return uDPSocket_SetSendBufferSize_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_SetSendBufferSize_Params_Versions) {
		if uDPSocket_SetSendBufferSize_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_SetSendBufferSize_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inSize = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uDPSocket_SetSendBufferSize_ResponseParams struct {
	outResult network_error.NetworkError
}


func (s *uDPSocket_SetSendBufferSize_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_SetSendBufferSize_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_SetSendBufferSize_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_SetSendBufferSize_ResponseParams_Versions), func(i int) bool {
		return uDPSocket_SetSendBufferSize_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_SetSendBufferSize_ResponseParams_Versions) {
		if uDPSocket_SetSendBufferSize_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_SetSendBufferSize_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) SetSendBufferSize(inSize uint32) (outResult network_error.NetworkError, err error) {
	payload := &uDPSocket_SetSendBufferSize_Params{
		inSize,
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_SetSendBufferSize_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uDPSocket_SetSendBufferSize_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uDPSocket_SetSendBufferSize_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	return
}

type uDPSocket_SetReceiveBufferSize_Params struct {
	inSize uint32
}


func (s *uDPSocket_SetReceiveBufferSize_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.inSize); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_SetReceiveBufferSize_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_SetReceiveBufferSize_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_SetReceiveBufferSize_Params_Versions), func(i int) bool {
		return uDPSocket_SetReceiveBufferSize_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_SetReceiveBufferSize_Params_Versions) {
		if uDPSocket_SetReceiveBufferSize_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_SetReceiveBufferSize_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inSize = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uDPSocket_SetReceiveBufferSize_ResponseParams struct {
	outResult network_error.NetworkError
}


func (s *uDPSocket_SetReceiveBufferSize_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_SetReceiveBufferSize_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_SetReceiveBufferSize_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_SetReceiveBufferSize_ResponseParams_Versions), func(i int) bool {
		return uDPSocket_SetReceiveBufferSize_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_SetReceiveBufferSize_ResponseParams_Versions) {
		if uDPSocket_SetReceiveBufferSize_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_SetReceiveBufferSize_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) SetReceiveBufferSize(inSize uint32) (outResult network_error.NetworkError, err error) {
	payload := &uDPSocket_SetReceiveBufferSize_Params{
		inSize,
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_SetReceiveBufferSize_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uDPSocket_SetReceiveBufferSize_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uDPSocket_SetReceiveBufferSize_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	return
}

type uDPSocket_NegotiateMaxPendingSendRequests_Params struct {
	inRequestedSize uint32
}


func (s *uDPSocket_NegotiateMaxPendingSendRequests_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.inRequestedSize); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_NegotiateMaxPendingSendRequests_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_NegotiateMaxPendingSendRequests_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_NegotiateMaxPendingSendRequests_Params_Versions), func(i int) bool {
		return uDPSocket_NegotiateMaxPendingSendRequests_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_NegotiateMaxPendingSendRequests_Params_Versions) {
		if uDPSocket_NegotiateMaxPendingSendRequests_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_NegotiateMaxPendingSendRequests_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inRequestedSize = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams struct {
	outActualSize uint32
}


func (s *uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.outActualSize); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Versions), func(i int) bool {
		return uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Versions) {
		if uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.outActualSize = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) NegotiateMaxPendingSendRequests(inRequestedSize uint32) (outActualSize uint32, err error) {
	payload := &uDPSocket_NegotiateMaxPendingSendRequests_Params{
		inRequestedSize,
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_NegotiateMaxPendingSendRequests_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uDPSocket_NegotiateMaxPendingSendRequests_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outActualSize = response.outActualSize
	return
}

type uDPSocket_ReceiveMore_Params struct {
	inDatagramNumber uint32
}


func (s *uDPSocket_ReceiveMore_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.inDatagramNumber); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_ReceiveMore_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_ReceiveMore_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_ReceiveMore_Params_Versions), func(i int) bool {
		return uDPSocket_ReceiveMore_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_ReceiveMore_Params_Versions) {
		if uDPSocket_ReceiveMore_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_ReceiveMore_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inDatagramNumber = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) ReceiveMore(inDatagramNumber uint32) (err error) {
	payload := &uDPSocket_ReceiveMore_Params{
		inDatagramNumber,
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_ReceiveMore_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type uDPSocket_SendTo_Params struct {
	inDestAddr *net_address.NetAddress
	inData []uint8
}


func (s *uDPSocket_SendTo_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.inDestAddr == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.inDestAddr).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.inData)), 8)
	for _, elem0 := range s.inData {
		if err := encoder.WriteUint8(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_SendTo_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *uDPSocket_SendTo_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_SendTo_Params_Versions), func(i int) bool {
		return uDPSocket_SendTo_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_SendTo_Params_Versions) {
		if uDPSocket_SendTo_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_SendTo_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inDestAddr = nil
		} else {
			s.inDestAddr = new(net_address.NetAddress)
			if err := (*s.inDestAddr).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			s.inData = make([]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadUint8()
				if err != nil {
					return err
				}
				s.inData[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uDPSocket_SendTo_ResponseParams struct {
	outResult network_error.NetworkError
}


func (s *uDPSocket_SendTo_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocket_SendTo_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uDPSocket_SendTo_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocket_SendTo_ResponseParams_Versions), func(i int) bool {
		return uDPSocket_SendTo_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocket_SendTo_ResponseParams_Versions) {
		if uDPSocket_SendTo_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocket_SendTo_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocket_Proxy) SendTo(inDestAddr *net_address.NetAddress, inData []uint8) (outResult network_error.NetworkError, err error) {
	payload := &uDPSocket_SendTo_Params{
		inDestAddr,
		inData,
	}
	header := bindings.MessageHeader{
		Type: uDPSocket_SendTo_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uDPSocket_SendTo_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uDPSocket_SendTo_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	return
}

type uDPSocket_Stub struct {
	connector *bindings.Connector
	impl UdpSocket
}

func NewUdpSocketStub(r UdpSocket_Request, impl UdpSocket, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &uDPSocket_Stub{connector, impl})
}


func (f *UdpSocket_Request) ServiceDescription() service_describer.ServiceDescription {
	return &UdpSocket_ServiceDescription{}
}


type UdpSocket_ServiceDescription struct{}

func (sd *UdpSocket_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *UdpSocket_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *UdpSocket_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*UdpSocket_ServiceDescription)(nil)


func (s *uDPSocket_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case uDPSocket_AllowAddressReuse_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_AllowAddressReuse_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uDPSocket_AllowAddressReuse_ResponseParams
		response.outResult, err = s.impl.AllowAddressReuse()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uDPSocket_AllowAddressReuse_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uDPSocket_Bind_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_Bind_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uDPSocket_Bind_ResponseParams
		response.outResult, 		response.outBoundAddr, 		response.outReceiver, err = s.impl.Bind(request.inAddr)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uDPSocket_Bind_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uDPSocket_Connect_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_Connect_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uDPSocket_Connect_ResponseParams
		response.outResult, 		response.outLocalAddr, 		response.outReceiver, err = s.impl.Connect(request.inRemoteAddr)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uDPSocket_Connect_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uDPSocket_SetSendBufferSize_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_SetSendBufferSize_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uDPSocket_SetSendBufferSize_ResponseParams
		response.outResult, err = s.impl.SetSendBufferSize(request.inSize)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uDPSocket_SetSendBufferSize_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uDPSocket_SetReceiveBufferSize_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_SetReceiveBufferSize_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uDPSocket_SetReceiveBufferSize_ResponseParams
		response.outResult, err = s.impl.SetReceiveBufferSize(request.inSize)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uDPSocket_SetReceiveBufferSize_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uDPSocket_NegotiateMaxPendingSendRequests_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_NegotiateMaxPendingSendRequests_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uDPSocket_NegotiateMaxPendingSendRequests_ResponseParams
		response.outActualSize, err = s.impl.NegotiateMaxPendingSendRequests(request.inRequestedSize)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uDPSocket_NegotiateMaxPendingSendRequests_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uDPSocket_ReceiveMore_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_ReceiveMore_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.ReceiveMore(request.inDatagramNumber)
		if err != nil {
			return
		}
	case uDPSocket_SendTo_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocket_SendTo_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uDPSocket_SendTo_ResponseParams
		response.outResult, err = s.impl.SendTo(request.inDestAddr, request.inData)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uDPSocket_SendTo_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type UdpSocketReceiver interface {
	OnReceived(inResult network_error.NetworkError, inSrcAddr *net_address.NetAddress, inData *[]uint8) (err error)
}




type UdpSocketReceiver_Request bindings.InterfaceRequest



type UdpSocketReceiver_Pointer bindings.InterfacePointer


type UdpSocketReceiver_ServiceFactory struct{
	Delegate UdpSocketReceiver_Factory
}

type UdpSocketReceiver_Factory interface {
	Create(request UdpSocketReceiver_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *UdpSocketReceiver_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &UdpSocketReceiver_ServiceDescription{}
}

func (f *UdpSocketReceiver_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := UdpSocketReceiver_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForUdpSocketReceiver creates a message pipe for use with the
// UdpSocketReceiver interface with a UdpSocketReceiver_Request on one end and a UdpSocketReceiver_Pointer on the other.
func CreateMessagePipeForUdpSocketReceiver() (UdpSocketReceiver_Request, UdpSocketReceiver_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return UdpSocketReceiver_Request(r), UdpSocketReceiver_Pointer(p)
}

const uDPSocketReceiver_OnReceived_Name uint32 = 0

type UdpSocketReceiver_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewUdpSocketReceiverProxy(p UdpSocketReceiver_Pointer, waiter bindings.AsyncWaiter) *UdpSocketReceiver_Proxy {
	return &UdpSocketReceiver_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *UdpSocketReceiver_Proxy) Close_Proxy() {
	p.router.Close()
}

type uDPSocketReceiver_OnReceived_Params struct {
	inResult network_error.NetworkError
	inSrcAddr *net_address.NetAddress
	inData *[]uint8
}


func (s *uDPSocketReceiver_OnReceived_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inResult.Encode(encoder); err != nil {
		return err
	}
	if s.inSrcAddr == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.inSrcAddr).Encode(encoder); err != nil {
			return err
		}
	}
	if s.inData == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.inData))), 8)
		for _, elem0 := range (*s.inData) {
			if err := encoder.WriteUint8(elem0); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uDPSocketReceiver_OnReceived_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *uDPSocketReceiver_OnReceived_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uDPSocketReceiver_OnReceived_Params_Versions), func(i int) bool {
		return uDPSocketReceiver_OnReceived_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uDPSocketReceiver_OnReceived_Params_Versions) {
		if uDPSocketReceiver_OnReceived_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uDPSocketReceiver_OnReceived_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inSrcAddr = nil
		} else {
			s.inSrcAddr = new(net_address.NetAddress)
			if err := (*s.inSrcAddr).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inData = nil
		} else {
			s.inData = new([]uint8)
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			(*s.inData) = make([]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadUint8()
				if err != nil {
					return err
				}
				(*s.inData)[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UdpSocketReceiver_Proxy) OnReceived(inResult network_error.NetworkError, inSrcAddr *net_address.NetAddress, inData *[]uint8) (err error) {
	payload := &uDPSocketReceiver_OnReceived_Params{
		inResult,
		inSrcAddr,
		inData,
	}
	header := bindings.MessageHeader{
		Type: uDPSocketReceiver_OnReceived_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type uDPSocketReceiver_Stub struct {
	connector *bindings.Connector
	impl UdpSocketReceiver
}

func NewUdpSocketReceiverStub(r UdpSocketReceiver_Request, impl UdpSocketReceiver, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &uDPSocketReceiver_Stub{connector, impl})
}


func (f *UdpSocketReceiver_Request) ServiceDescription() service_describer.ServiceDescription {
	return &UdpSocketReceiver_ServiceDescription{}
}


type UdpSocketReceiver_ServiceDescription struct{}

func (sd *UdpSocketReceiver_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *UdpSocketReceiver_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *UdpSocketReceiver_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*UdpSocketReceiver_ServiceDescription)(nil)


func (s *uDPSocketReceiver_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case uDPSocketReceiver_OnReceived_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uDPSocketReceiver_OnReceived_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.OnReceived(request.inResult, request.inSrcAddr, request.inData)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

