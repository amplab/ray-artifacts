// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/camera/interfaces/camera.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
Photo_Data* Photo_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Photo_Data))) Photo_Data();
}

// static
mojo::internal::ValidationError Photo_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Photo_Data* object = static_cast<const Photo_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->unique_id.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null unique_id field in Photo struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->unique_id.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams unique_id_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->unique_id.offset),
          bounds_checker, &unique_id_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle content_handle = object->content;
  if (content_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid content field in Photo struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(content_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Photo_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->unique_id, handles);
  mojo::internal::EncodeHandle(&this->content, handles);
}

void Photo_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->unique_id, handles);
  mojo::internal::DecodeHandle(&this->content, handles);
}

Photo_Data::Photo_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
CameraRollService_Update_Params_Data* CameraRollService_Update_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CameraRollService_Update_Params_Data))) CameraRollService_Update_Params_Data();
}

// static
mojo::internal::ValidationError CameraRollService_Update_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CameraRollService_Update_Params_Data* object = static_cast<const CameraRollService_Update_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CameraRollService_Update_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CameraRollService_Update_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CameraRollService_Update_Params_Data::CameraRollService_Update_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CameraRollService_GetCount_Params_Data* CameraRollService_GetCount_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CameraRollService_GetCount_Params_Data))) CameraRollService_GetCount_Params_Data();
}

// static
mojo::internal::ValidationError CameraRollService_GetCount_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CameraRollService_GetCount_Params_Data* object = static_cast<const CameraRollService_GetCount_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CameraRollService_GetCount_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CameraRollService_GetCount_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CameraRollService_GetCount_Params_Data::CameraRollService_GetCount_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
CameraRollService_GetCount_ResponseParams_Data* CameraRollService_GetCount_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CameraRollService_GetCount_ResponseParams_Data))) CameraRollService_GetCount_ResponseParams_Data();
}

// static
mojo::internal::ValidationError CameraRollService_GetCount_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CameraRollService_GetCount_ResponseParams_Data* object = static_cast<const CameraRollService_GetCount_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CameraRollService_GetCount_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CameraRollService_GetCount_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CameraRollService_GetCount_ResponseParams_Data::CameraRollService_GetCount_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CameraRollService_GetPhoto_Params_Data* CameraRollService_GetPhoto_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CameraRollService_GetPhoto_Params_Data))) CameraRollService_GetPhoto_Params_Data();
}

// static
mojo::internal::ValidationError CameraRollService_GetPhoto_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CameraRollService_GetPhoto_Params_Data* object = static_cast<const CameraRollService_GetPhoto_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CameraRollService_GetPhoto_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CameraRollService_GetPhoto_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CameraRollService_GetPhoto_Params_Data::CameraRollService_GetPhoto_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
CameraRollService_GetPhoto_ResponseParams_Data* CameraRollService_GetPhoto_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CameraRollService_GetPhoto_ResponseParams_Data))) CameraRollService_GetPhoto_ResponseParams_Data();
}

// static
mojo::internal::ValidationError CameraRollService_GetPhoto_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CameraRollService_GetPhoto_ResponseParams_Data* object = static_cast<const CameraRollService_GetPhoto_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->photo.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Photo::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->photo.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CameraRollService_GetPhoto_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->photo, handles);
}

void CameraRollService_GetPhoto_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->photo, handles);
}

CameraRollService_GetPhoto_ResponseParams_Data::CameraRollService_GetPhoto_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
CameraService_GetLatestFrame_Params_Data* CameraService_GetLatestFrame_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CameraService_GetLatestFrame_Params_Data))) CameraService_GetLatestFrame_Params_Data();
}

// static
mojo::internal::ValidationError CameraService_GetLatestFrame_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CameraService_GetLatestFrame_Params_Data* object = static_cast<const CameraService_GetLatestFrame_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void CameraService_GetLatestFrame_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void CameraService_GetLatestFrame_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

CameraService_GetLatestFrame_Params_Data::CameraService_GetLatestFrame_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
CameraService_GetLatestFrame_ResponseParams_Data* CameraService_GetLatestFrame_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CameraService_GetLatestFrame_ResponseParams_Data))) CameraService_GetLatestFrame_ResponseParams_Data();
}

// static
mojo::internal::ValidationError CameraService_GetLatestFrame_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CameraService_GetLatestFrame_ResponseParams_Data* object = static_cast<const CameraService_GetLatestFrame_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle content_handle = object->content;
  if (!bounds_checker->ClaimHandle(content_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CameraService_GetLatestFrame_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->content, handles);
}

void CameraService_GetLatestFrame_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->content, handles);
}

CameraService_GetLatestFrame_ResponseParams_Data::CameraService_GetLatestFrame_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError CameraRollServiceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'CameraRollService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::CameraRollService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraRollService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraRollService_Base::MessageOrdinals::Update: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CameraRollService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CameraRollService_Update_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CameraRollService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CameraRollService_Base::MessageOrdinals::GetCount: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CameraRollService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CameraRollService_GetCount_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CameraRollService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CameraRollService_Base::MessageOrdinals::GetPhoto: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CameraRollService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CameraRollService_GetPhoto_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CameraRollService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'CameraRollService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError CameraRollServiceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'CameraRollService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'CameraRollService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::CameraRollService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraRollService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraRollService_Base::MessageOrdinals::GetCount: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::CameraRollService_GetCount_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'CameraRollService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::CameraRollService_Base::MessageOrdinals::GetPhoto: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::CameraRollService_GetPhoto_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'CameraRollService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'CameraRollService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError CameraServiceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'CameraService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::CameraService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraService_Base::MessageOrdinals::GetLatestFrame: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'CameraService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::CameraService_GetLatestFrame_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'CameraService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'CameraService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError CameraServiceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'CameraService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'CameraService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::CameraService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraService_Base::MessageOrdinals::GetLatestFrame: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::CameraService_GetLatestFrame_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'CameraService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'CameraService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::CameraRollService_Base::Name_[] = "mojo::CameraRollService";
const uint32_t internal::CameraRollService_Base::Version_;

// Constants

// Enums
const char internal::CameraService_Base::Name_[] = "mojo::CameraService";
const uint32_t internal::CameraService_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
PhotoPtr Photo::New() {
  PhotoPtr rv;
  mojo::internal::StructHelper<Photo>::Initialize(&rv);
  return rv;
}

Photo::Photo()
    : unique_id(),
      content() {
}

Photo::~Photo() {
}



bool Photo::Equals(const Photo& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->unique_id, other.unique_id))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->content, other.content))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t Photo::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Photo::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Photo_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Photo::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Photo_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Photo::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Photo_Data* input =
      static_cast<internal::Photo_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Photo& input) {
  size_t size = sizeof(internal::Photo_Data);
  size += GetSerializedSize_(input.unique_id);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Photo* input,
    mojo::internal::Buffer* buf,
    internal::Photo_Data** output) {
  if (input) {
    internal::Photo_Data* result =
        internal::Photo_Data::New(buf);
    SerializeString_(input->unique_id, buf, &result->unique_id.ptr);
    if (!result->unique_id.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null unique_id in Photo struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->content = input->content.release();
    if (!result->content.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid content in Photo struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Photo_Data* input,
                  Photo* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->unique_id.ptr, &result->unique_id);
      result->content.reset(mojo::internal::FetchAndReset(&input->content));
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
CameraRollService_Update_ParamsPtr CameraRollService_Update_Params::New() {
  CameraRollService_Update_ParamsPtr rv;
  mojo::internal::StructHelper<CameraRollService_Update_Params>::Initialize(&rv);
  return rv;
}

CameraRollService_Update_Params::CameraRollService_Update_Params() {
}

CameraRollService_Update_Params::~CameraRollService_Update_Params() {
}


CameraRollService_Update_ParamsPtr CameraRollService_Update_Params::Clone() const {
  CameraRollService_Update_ParamsPtr rv(New());
  return rv;
}


bool CameraRollService_Update_Params::Equals(const CameraRollService_Update_Params& other) const {
  return true;
}


size_t CameraRollService_Update_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CameraRollService_Update_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CameraRollService_Update_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CameraRollService_Update_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CameraRollService_Update_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CameraRollService_Update_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CameraRollService_Update_Params_Data* input =
      static_cast<internal::CameraRollService_Update_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CameraRollService_Update_Params& input) {
  size_t size = sizeof(internal::CameraRollService_Update_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CameraRollService_Update_Params* input,
    mojo::internal::Buffer* buf,
    internal::CameraRollService_Update_Params_Data** output) {
  if (input) {
    internal::CameraRollService_Update_Params_Data* result =
        internal::CameraRollService_Update_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CameraRollService_Update_Params_Data* input,
                  CameraRollService_Update_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
CameraRollService_GetCount_ParamsPtr CameraRollService_GetCount_Params::New() {
  CameraRollService_GetCount_ParamsPtr rv;
  mojo::internal::StructHelper<CameraRollService_GetCount_Params>::Initialize(&rv);
  return rv;
}

CameraRollService_GetCount_Params::CameraRollService_GetCount_Params() {
}

CameraRollService_GetCount_Params::~CameraRollService_GetCount_Params() {
}


CameraRollService_GetCount_ParamsPtr CameraRollService_GetCount_Params::Clone() const {
  CameraRollService_GetCount_ParamsPtr rv(New());
  return rv;
}


bool CameraRollService_GetCount_Params::Equals(const CameraRollService_GetCount_Params& other) const {
  return true;
}


size_t CameraRollService_GetCount_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CameraRollService_GetCount_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CameraRollService_GetCount_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CameraRollService_GetCount_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CameraRollService_GetCount_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CameraRollService_GetCount_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CameraRollService_GetCount_Params_Data* input =
      static_cast<internal::CameraRollService_GetCount_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CameraRollService_GetCount_Params& input) {
  size_t size = sizeof(internal::CameraRollService_GetCount_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CameraRollService_GetCount_Params* input,
    mojo::internal::Buffer* buf,
    internal::CameraRollService_GetCount_Params_Data** output) {
  if (input) {
    internal::CameraRollService_GetCount_Params_Data* result =
        internal::CameraRollService_GetCount_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CameraRollService_GetCount_Params_Data* input,
                  CameraRollService_GetCount_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
CameraRollService_GetCount_ResponseParamsPtr CameraRollService_GetCount_ResponseParams::New() {
  CameraRollService_GetCount_ResponseParamsPtr rv;
  mojo::internal::StructHelper<CameraRollService_GetCount_ResponseParams>::Initialize(&rv);
  return rv;
}

CameraRollService_GetCount_ResponseParams::CameraRollService_GetCount_ResponseParams()
    : num_photos() {
}

CameraRollService_GetCount_ResponseParams::~CameraRollService_GetCount_ResponseParams() {
}


CameraRollService_GetCount_ResponseParamsPtr CameraRollService_GetCount_ResponseParams::Clone() const {
  CameraRollService_GetCount_ResponseParamsPtr rv(New());
  rv->num_photos = num_photos;
  return rv;
}


bool CameraRollService_GetCount_ResponseParams::Equals(const CameraRollService_GetCount_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->num_photos, other.num_photos))
    return false;
  return true;
}


size_t CameraRollService_GetCount_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CameraRollService_GetCount_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CameraRollService_GetCount_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CameraRollService_GetCount_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CameraRollService_GetCount_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CameraRollService_GetCount_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CameraRollService_GetCount_ResponseParams_Data* input =
      static_cast<internal::CameraRollService_GetCount_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CameraRollService_GetCount_ResponseParams& input) {
  size_t size = sizeof(internal::CameraRollService_GetCount_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CameraRollService_GetCount_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::CameraRollService_GetCount_ResponseParams_Data** output) {
  if (input) {
    internal::CameraRollService_GetCount_ResponseParams_Data* result =
        internal::CameraRollService_GetCount_ResponseParams_Data::New(buf);
    result->num_photos = input->num_photos;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CameraRollService_GetCount_ResponseParams_Data* input,
                  CameraRollService_GetCount_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->num_photos = input->num_photos;
    } while (false);
  }
}



// static
CameraRollService_GetPhoto_ParamsPtr CameraRollService_GetPhoto_Params::New() {
  CameraRollService_GetPhoto_ParamsPtr rv;
  mojo::internal::StructHelper<CameraRollService_GetPhoto_Params>::Initialize(&rv);
  return rv;
}

CameraRollService_GetPhoto_Params::CameraRollService_GetPhoto_Params()
    : index() {
}

CameraRollService_GetPhoto_Params::~CameraRollService_GetPhoto_Params() {
}


CameraRollService_GetPhoto_ParamsPtr CameraRollService_GetPhoto_Params::Clone() const {
  CameraRollService_GetPhoto_ParamsPtr rv(New());
  rv->index = index;
  return rv;
}


bool CameraRollService_GetPhoto_Params::Equals(const CameraRollService_GetPhoto_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->index, other.index))
    return false;
  return true;
}


size_t CameraRollService_GetPhoto_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CameraRollService_GetPhoto_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CameraRollService_GetPhoto_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CameraRollService_GetPhoto_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CameraRollService_GetPhoto_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CameraRollService_GetPhoto_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CameraRollService_GetPhoto_Params_Data* input =
      static_cast<internal::CameraRollService_GetPhoto_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CameraRollService_GetPhoto_Params& input) {
  size_t size = sizeof(internal::CameraRollService_GetPhoto_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CameraRollService_GetPhoto_Params* input,
    mojo::internal::Buffer* buf,
    internal::CameraRollService_GetPhoto_Params_Data** output) {
  if (input) {
    internal::CameraRollService_GetPhoto_Params_Data* result =
        internal::CameraRollService_GetPhoto_Params_Data::New(buf);
    result->index = input->index;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CameraRollService_GetPhoto_Params_Data* input,
                  CameraRollService_GetPhoto_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->index = input->index;
    } while (false);
  }
}


// static
CameraRollService_GetPhoto_ResponseParamsPtr CameraRollService_GetPhoto_ResponseParams::New() {
  CameraRollService_GetPhoto_ResponseParamsPtr rv;
  mojo::internal::StructHelper<CameraRollService_GetPhoto_ResponseParams>::Initialize(&rv);
  return rv;
}

CameraRollService_GetPhoto_ResponseParams::CameraRollService_GetPhoto_ResponseParams()
    : photo() {
}

CameraRollService_GetPhoto_ResponseParams::~CameraRollService_GetPhoto_ResponseParams() {
}



bool CameraRollService_GetPhoto_ResponseParams::Equals(const CameraRollService_GetPhoto_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<PhotoPtr>::Equals(this->photo, other.photo))
    return false;
  return true;
}


size_t CameraRollService_GetPhoto_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CameraRollService_GetPhoto_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CameraRollService_GetPhoto_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CameraRollService_GetPhoto_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CameraRollService_GetPhoto_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CameraRollService_GetPhoto_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CameraRollService_GetPhoto_ResponseParams_Data* input =
      static_cast<internal::CameraRollService_GetPhoto_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CameraRollService_GetPhoto_ResponseParams& input) {
  size_t size = sizeof(internal::CameraRollService_GetPhoto_ResponseParams_Data);
  size += input.photo.is_null()
              ? 0
              : GetSerializedSize_(*input.photo);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CameraRollService_GetPhoto_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::CameraRollService_GetPhoto_ResponseParams_Data** output) {
  if (input) {
    internal::CameraRollService_GetPhoto_ResponseParams_Data* result =
        internal::CameraRollService_GetPhoto_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->photo.get(),
                 buf,
                 &result->photo.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CameraRollService_GetPhoto_ResponseParams_Data* input,
                  CameraRollService_GetPhoto_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->photo.ptr) {
        result->photo = Photo::New();
        Deserialize_(input->photo.ptr, result->photo.get());
      }
    } while (false);
  }
}



// static
CameraService_GetLatestFrame_ParamsPtr CameraService_GetLatestFrame_Params::New() {
  CameraService_GetLatestFrame_ParamsPtr rv;
  mojo::internal::StructHelper<CameraService_GetLatestFrame_Params>::Initialize(&rv);
  return rv;
}

CameraService_GetLatestFrame_Params::CameraService_GetLatestFrame_Params() {
}

CameraService_GetLatestFrame_Params::~CameraService_GetLatestFrame_Params() {
}


CameraService_GetLatestFrame_ParamsPtr CameraService_GetLatestFrame_Params::Clone() const {
  CameraService_GetLatestFrame_ParamsPtr rv(New());
  return rv;
}


bool CameraService_GetLatestFrame_Params::Equals(const CameraService_GetLatestFrame_Params& other) const {
  return true;
}


size_t CameraService_GetLatestFrame_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CameraService_GetLatestFrame_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CameraService_GetLatestFrame_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CameraService_GetLatestFrame_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CameraService_GetLatestFrame_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CameraService_GetLatestFrame_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CameraService_GetLatestFrame_Params_Data* input =
      static_cast<internal::CameraService_GetLatestFrame_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CameraService_GetLatestFrame_Params& input) {
  size_t size = sizeof(internal::CameraService_GetLatestFrame_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CameraService_GetLatestFrame_Params* input,
    mojo::internal::Buffer* buf,
    internal::CameraService_GetLatestFrame_Params_Data** output) {
  if (input) {
    internal::CameraService_GetLatestFrame_Params_Data* result =
        internal::CameraService_GetLatestFrame_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CameraService_GetLatestFrame_Params_Data* input,
                  CameraService_GetLatestFrame_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
CameraService_GetLatestFrame_ResponseParamsPtr CameraService_GetLatestFrame_ResponseParams::New() {
  CameraService_GetLatestFrame_ResponseParamsPtr rv;
  mojo::internal::StructHelper<CameraService_GetLatestFrame_ResponseParams>::Initialize(&rv);
  return rv;
}

CameraService_GetLatestFrame_ResponseParams::CameraService_GetLatestFrame_ResponseParams()
    : content() {
}

CameraService_GetLatestFrame_ResponseParams::~CameraService_GetLatestFrame_ResponseParams() {
}



bool CameraService_GetLatestFrame_ResponseParams::Equals(const CameraService_GetLatestFrame_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->content, other.content))
    return false;
  return true;
}


size_t CameraService_GetLatestFrame_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CameraService_GetLatestFrame_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CameraService_GetLatestFrame_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CameraService_GetLatestFrame_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CameraService_GetLatestFrame_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CameraService_GetLatestFrame_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CameraService_GetLatestFrame_ResponseParams_Data* input =
      static_cast<internal::CameraService_GetLatestFrame_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CameraService_GetLatestFrame_ResponseParams& input) {
  size_t size = sizeof(internal::CameraService_GetLatestFrame_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CameraService_GetLatestFrame_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::CameraService_GetLatestFrame_ResponseParams_Data** output) {
  if (input) {
    internal::CameraService_GetLatestFrame_ResponseParams_Data* result =
        internal::CameraService_GetLatestFrame_ResponseParams_Data::New(buf);
    result->content = input->content.release();
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CameraService_GetLatestFrame_ResponseParams_Data* input,
                  CameraService_GetLatestFrame_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->content.reset(mojo::internal::FetchAndReset(&input->content));
    } while (false);
  }
}

}  // namespace mojo
