// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/contacts/interfaces/contacts.mojom
//

package contacts

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type ContactsService interface {
	GetCount(inFilter *string) (outCount uint64, err error)
	Get(inFilter *string, inOffset uint32, inLimit uint32) (outContacts []Contact, err error)
	GetEmails(inId int64) (outEmails []string, err error)
	GetPhoto(inId int64, inHighResolution bool) (outPhotoUrl *string, err error)
}



var contactsService_Name = "contacts::ContactsService"

type ContactsService_Request bindings.InterfaceRequest

func (r *ContactsService_Request) Name() string {
	return contactsService_Name
}


type ContactsService_Pointer bindings.InterfacePointer

func (p *ContactsService_Pointer) Name() string {
	return contactsService_Name
}

type ContactsService_ServiceFactory struct{
	Delegate ContactsService_Factory
}

type ContactsService_Factory interface {
	Create(request ContactsService_Request)
}

func (f *ContactsService_ServiceFactory) Name() string {
	return contactsService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *ContactsService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &ContactsService_ServiceDescription{}
}

func (f *ContactsService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := ContactsService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForContactsService creates a message pipe for use with the
// ContactsService interface with a ContactsService_Request on one end and a ContactsService_Pointer on the other.
func CreateMessagePipeForContactsService() (ContactsService_Request, ContactsService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return ContactsService_Request(r), ContactsService_Pointer(p)
}

const contactsService_GetCount_Name uint32 = 0
const contactsService_Get_Name uint32 = 1
const contactsService_GetEmails_Name uint32 = 2
const contactsService_GetPhoto_Name uint32 = 3

type ContactsService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewContactsServiceProxy(p ContactsService_Pointer, waiter bindings.AsyncWaiter) *ContactsService_Proxy {
	return &ContactsService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *ContactsService_Proxy) Close_Proxy() {
	p.router.Close()
}

type contactsService_GetCount_Params struct {
	inFilter *string
}


func (s *contactsService_GetCount_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.inFilter == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.inFilter)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_GetCount_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *contactsService_GetCount_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_GetCount_Params_Versions), func(i int) bool {
		return contactsService_GetCount_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_GetCount_Params_Versions) {
		if contactsService_GetCount_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_GetCount_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inFilter = nil
		} else {
			s.inFilter = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.inFilter) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type contactsService_GetCount_ResponseParams struct {
	outCount uint64
}


func (s *contactsService_GetCount_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint64(s.outCount); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_GetCount_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *contactsService_GetCount_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_GetCount_ResponseParams_Versions), func(i int) bool {
		return contactsService_GetCount_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_GetCount_ResponseParams_Versions) {
		if contactsService_GetCount_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_GetCount_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint64()
		if err != nil {
			return err
		}
		s.outCount = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ContactsService_Proxy) GetCount(inFilter *string) (outCount uint64, err error) {
	payload := &contactsService_GetCount_Params{
		inFilter,
	}
	header := bindings.MessageHeader{
		Type: contactsService_GetCount_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, contactsService_GetCount_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response contactsService_GetCount_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outCount = response.outCount
	return
}

type contactsService_Get_Params struct {
	inFilter *string
	inOffset uint32
	inLimit uint32
}


func (s *contactsService_Get_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.inFilter == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.inFilter)); err != nil {
			return err
		}
	}
	if err := encoder.WriteUint32(s.inOffset); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inLimit); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_Get_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *contactsService_Get_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_Get_Params_Versions), func(i int) bool {
		return contactsService_Get_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_Get_Params_Versions) {
		if contactsService_Get_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_Get_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inFilter = nil
		} else {
			s.inFilter = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.inFilter) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inOffset = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inLimit = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type contactsService_Get_ResponseParams struct {
	outContacts []Contact
}


func (s *contactsService_Get_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.outContacts)), 64)
	for _, elem0 := range s.outContacts {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_Get_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *contactsService_Get_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_Get_ResponseParams_Versions), func(i int) bool {
		return contactsService_Get_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_Get_ResponseParams_Versions) {
		if contactsService_Get_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_Get_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.outContacts = make([]Contact, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.outContacts[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ContactsService_Proxy) Get(inFilter *string, inOffset uint32, inLimit uint32) (outContacts []Contact, err error) {
	payload := &contactsService_Get_Params{
		inFilter,
		inOffset,
		inLimit,
	}
	header := bindings.MessageHeader{
		Type: contactsService_Get_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, contactsService_Get_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response contactsService_Get_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outContacts = response.outContacts
	return
}

type contactsService_GetEmails_Params struct {
	inId int64
}


func (s *contactsService_GetEmails_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt64(s.inId); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_GetEmails_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *contactsService_GetEmails_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_GetEmails_Params_Versions), func(i int) bool {
		return contactsService_GetEmails_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_GetEmails_Params_Versions) {
		if contactsService_GetEmails_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_GetEmails_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inId = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type contactsService_GetEmails_ResponseParams struct {
	outEmails []string
}


func (s *contactsService_GetEmails_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.outEmails)), 64)
	for _, elem0 := range s.outEmails {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_GetEmails_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *contactsService_GetEmails_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_GetEmails_ResponseParams_Versions), func(i int) bool {
		return contactsService_GetEmails_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_GetEmails_ResponseParams_Versions) {
		if contactsService_GetEmails_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_GetEmails_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.outEmails = make([]string, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					value1, err := decoder.ReadString()
					if err != nil {
						return err
					}
					s.outEmails[i0] = value1
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ContactsService_Proxy) GetEmails(inId int64) (outEmails []string, err error) {
	payload := &contactsService_GetEmails_Params{
		inId,
	}
	header := bindings.MessageHeader{
		Type: contactsService_GetEmails_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, contactsService_GetEmails_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response contactsService_GetEmails_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outEmails = response.outEmails
	return
}

type contactsService_GetPhoto_Params struct {
	inId int64
	inHighResolution bool
}


func (s *contactsService_GetPhoto_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt64(s.inId); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.inHighResolution); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_GetPhoto_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *contactsService_GetPhoto_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_GetPhoto_Params_Versions), func(i int) bool {
		return contactsService_GetPhoto_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_GetPhoto_Params_Versions) {
		if contactsService_GetPhoto_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_GetPhoto_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.inHighResolution = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type contactsService_GetPhoto_ResponseParams struct {
	outPhotoUrl *string
}


func (s *contactsService_GetPhoto_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.outPhotoUrl == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outPhotoUrl)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contactsService_GetPhoto_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *contactsService_GetPhoto_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contactsService_GetPhoto_ResponseParams_Versions), func(i int) bool {
		return contactsService_GetPhoto_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contactsService_GetPhoto_ResponseParams_Versions) {
		if contactsService_GetPhoto_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contactsService_GetPhoto_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outPhotoUrl = nil
		} else {
			s.outPhotoUrl = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outPhotoUrl) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ContactsService_Proxy) GetPhoto(inId int64, inHighResolution bool) (outPhotoUrl *string, err error) {
	payload := &contactsService_GetPhoto_Params{
		inId,
		inHighResolution,
	}
	header := bindings.MessageHeader{
		Type: contactsService_GetPhoto_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, contactsService_GetPhoto_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response contactsService_GetPhoto_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outPhotoUrl = response.outPhotoUrl
	return
}

type contactsService_Stub struct {
	connector *bindings.Connector
	impl ContactsService
}

func NewContactsServiceStub(r ContactsService_Request, impl ContactsService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &contactsService_Stub{connector, impl})
}


func (f *ContactsService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &ContactsService_ServiceDescription{}
}


type ContactsService_ServiceDescription struct{}

func (sd *ContactsService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *ContactsService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *ContactsService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*ContactsService_ServiceDescription)(nil)


func (s *contactsService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case contactsService_GetCount_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request contactsService_GetCount_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response contactsService_GetCount_ResponseParams
		response.outCount, err = s.impl.GetCount(request.inFilter)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: contactsService_GetCount_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case contactsService_Get_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request contactsService_Get_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response contactsService_Get_ResponseParams
		response.outContacts, err = s.impl.Get(request.inFilter, request.inOffset, request.inLimit)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: contactsService_Get_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case contactsService_GetEmails_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request contactsService_GetEmails_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response contactsService_GetEmails_ResponseParams
		response.outEmails, err = s.impl.GetEmails(request.inId)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: contactsService_GetEmails_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case contactsService_GetPhoto_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request contactsService_GetPhoto_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response contactsService_GetPhoto_ResponseParams
		response.outPhotoUrl, err = s.impl.GetPhoto(request.inId, request.inHighResolution)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: contactsService_GetPhoto_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type Contact struct {
	Id int64
	Name string
}


func (s *Contact) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt64(s.Id); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.Name); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var contact_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *Contact) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(contact_Versions), func(i int) bool {
		return contact_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(contact_Versions) {
		if contact_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := contact_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.Id = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.Name = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

