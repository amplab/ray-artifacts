// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/vanadium/security/interfaces/principal.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace vanadium {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
AppInstanceName_Data* AppInstanceName_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(AppInstanceName_Data))) AppInstanceName_Data();
}

// static
mojo::internal::ValidationError AppInstanceName_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const AppInstanceName_Data* object = static_cast<const AppInstanceName_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->url.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null url field in AppInstanceName struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->url.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams url_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->url.offset),
          bounds_checker, &url_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->qualifier.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams qualifier_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->qualifier.offset),
          bounds_checker, &qualifier_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void AppInstanceName_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->url, handles);
  mojo::internal::Encode(&this->qualifier, handles);
}

void AppInstanceName_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->url, handles);
  mojo::internal::Decode(&this->qualifier, handles);
}

AppInstanceName_Data::AppInstanceName_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
User_Data* User_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(User_Data))) User_Data();
}

// static
mojo::internal::ValidationError User_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const User_Data* object = static_cast<const User_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->email.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null email field in User struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->email.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams email_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->email.offset),
          bounds_checker, &email_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->blessing.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null blessing field in User struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->blessing.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams blessing_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->blessing.offset),
          bounds_checker, &blessing_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void User_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->email, handles);
  mojo::internal::Encode(&this->blessing, handles);
}

void User_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->email, handles);
  mojo::internal::Decode(&this->blessing, handles);
}

User_Data::User_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
PrincipalService_Login_Params_Data* PrincipalService_Login_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_Login_Params_Data))) PrincipalService_Login_Params_Data();
}

// static
mojo::internal::ValidationError PrincipalService_Login_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_Login_Params_Data* object = static_cast<const PrincipalService_Login_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_Login_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PrincipalService_Login_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PrincipalService_Login_Params_Data::PrincipalService_Login_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PrincipalService_Login_ResponseParams_Data* PrincipalService_Login_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_Login_ResponseParams_Data))) PrincipalService_Login_ResponseParams_Data();
}

// static
mojo::internal::ValidationError PrincipalService_Login_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_Login_ResponseParams_Data* object = static_cast<const PrincipalService_Login_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->user.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = User::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->user.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_Login_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->user, handles);
}

void PrincipalService_Login_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->user, handles);
}

PrincipalService_Login_ResponseParams_Data::PrincipalService_Login_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PrincipalService_Logout_Params_Data* PrincipalService_Logout_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_Logout_Params_Data))) PrincipalService_Logout_Params_Data();
}

// static
mojo::internal::ValidationError PrincipalService_Logout_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_Logout_Params_Data* object = static_cast<const PrincipalService_Logout_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_Logout_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PrincipalService_Logout_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PrincipalService_Logout_Params_Data::PrincipalService_Logout_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PrincipalService_GetUser_Params_Data* PrincipalService_GetUser_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_GetUser_Params_Data))) PrincipalService_GetUser_Params_Data();
}

// static
mojo::internal::ValidationError PrincipalService_GetUser_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_GetUser_Params_Data* object = static_cast<const PrincipalService_GetUser_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->app.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = AppInstanceName::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->app.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_GetUser_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->app, handles);
}

void PrincipalService_GetUser_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->app, handles);
}

PrincipalService_GetUser_Params_Data::PrincipalService_GetUser_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PrincipalService_GetUser_ResponseParams_Data* PrincipalService_GetUser_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_GetUser_ResponseParams_Data))) PrincipalService_GetUser_ResponseParams_Data();
}

// static
mojo::internal::ValidationError PrincipalService_GetUser_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_GetUser_ResponseParams_Data* object = static_cast<const PrincipalService_GetUser_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->user.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = User::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->user.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_GetUser_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->user, handles);
}

void PrincipalService_GetUser_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->user, handles);
}

PrincipalService_GetUser_ResponseParams_Data::PrincipalService_GetUser_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PrincipalService_SetUser_Params_Data* PrincipalService_SetUser_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_SetUser_Params_Data))) PrincipalService_SetUser_Params_Data();
}

// static
mojo::internal::ValidationError PrincipalService_SetUser_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_SetUser_Params_Data* object = static_cast<const PrincipalService_SetUser_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->user.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null user field in PrincipalService_SetUser_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->user.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = User::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->user.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_SetUser_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->user, handles);
}

void PrincipalService_SetUser_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->user, handles);
}

PrincipalService_SetUser_Params_Data::PrincipalService_SetUser_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PrincipalService_SetUser_ResponseParams_Data* PrincipalService_SetUser_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_SetUser_ResponseParams_Data))) PrincipalService_SetUser_ResponseParams_Data();
}

// static
mojo::internal::ValidationError PrincipalService_SetUser_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_SetUser_ResponseParams_Data* object = static_cast<const PrincipalService_SetUser_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->error.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams error_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->error.offset),
          bounds_checker, &error_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_SetUser_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->error, handles);
}

void PrincipalService_SetUser_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->error, handles);
}

PrincipalService_SetUser_ResponseParams_Data::PrincipalService_SetUser_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PrincipalService_GetLoggedInUsers_Params_Data* PrincipalService_GetLoggedInUsers_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_GetLoggedInUsers_Params_Data))) PrincipalService_GetLoggedInUsers_Params_Data();
}

// static
mojo::internal::ValidationError PrincipalService_GetLoggedInUsers_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_GetLoggedInUsers_Params_Data* object = static_cast<const PrincipalService_GetLoggedInUsers_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_GetLoggedInUsers_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PrincipalService_GetLoggedInUsers_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PrincipalService_GetLoggedInUsers_Params_Data::PrincipalService_GetLoggedInUsers_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PrincipalService_GetLoggedInUsers_ResponseParams_Data* PrincipalService_GetLoggedInUsers_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PrincipalService_GetLoggedInUsers_ResponseParams_Data))) PrincipalService_GetLoggedInUsers_ResponseParams_Data();
}

// static
mojo::internal::ValidationError PrincipalService_GetLoggedInUsers_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PrincipalService_GetLoggedInUsers_ResponseParams_Data* object = static_cast<const PrincipalService_GetLoggedInUsers_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->ids.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null ids field in PrincipalService_GetLoggedInUsers_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->ids.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams ids_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<UserPtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->ids.offset),
          bounds_checker, &ids_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PrincipalService_GetLoggedInUsers_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->ids, handles);
}

void PrincipalService_GetLoggedInUsers_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->ids, handles);
}

PrincipalService_GetLoggedInUsers_ResponseParams_Data::PrincipalService_GetLoggedInUsers_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError PrincipalServiceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'PrincipalService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::PrincipalService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PrincipalService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PrincipalService_Base::MessageOrdinals::Login: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PrincipalService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PrincipalService_Login_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PrincipalService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PrincipalService_Base::MessageOrdinals::Logout: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PrincipalService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PrincipalService_Logout_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PrincipalService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetUser: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PrincipalService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PrincipalService_GetUser_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PrincipalService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PrincipalService_Base::MessageOrdinals::SetUser: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PrincipalService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PrincipalService_SetUser_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PrincipalService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetLoggedInUsers: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PrincipalService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PrincipalService_GetLoggedInUsers_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PrincipalService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'PrincipalService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError PrincipalServiceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'PrincipalService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PrincipalService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::PrincipalService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PrincipalService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PrincipalService_Base::MessageOrdinals::Login: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::PrincipalService_Login_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PrincipalService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetUser: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::PrincipalService_GetUser_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PrincipalService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PrincipalService_Base::MessageOrdinals::SetUser: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::PrincipalService_SetUser_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PrincipalService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PrincipalService_Base::MessageOrdinals::GetLoggedInUsers: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PrincipalService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'PrincipalService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::PrincipalService_Base::Name_[] = "vanadium::PrincipalService";
const uint32_t internal::PrincipalService_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
AppInstanceNamePtr AppInstanceName::New() {
  AppInstanceNamePtr rv;
  mojo::internal::StructHelper<AppInstanceName>::Initialize(&rv);
  return rv;
}

AppInstanceName::AppInstanceName()
    : url(),
      qualifier() {
}

AppInstanceName::~AppInstanceName() {
}


AppInstanceNamePtr AppInstanceName::Clone() const {
  AppInstanceNamePtr rv(New());
  rv->url = url;
  rv->qualifier = qualifier;
  return rv;
}


bool AppInstanceName::Equals(const AppInstanceName& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->url, other.url))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->qualifier, other.qualifier))
    return false;
  return true;
}


// static
UserPtr User::New() {
  UserPtr rv;
  mojo::internal::StructHelper<User>::Initialize(&rv);
  return rv;
}

User::User()
    : email(),
      blessing() {
}

User::~User() {
}


UserPtr User::Clone() const {
  UserPtr rv(New());
  rv->email = email;
  rv->blessing = blessing.Clone();
  return rv;
}


bool User::Equals(const User& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->email, other.email))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->blessing, other.blessing))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t AppInstanceName::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool AppInstanceName::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::AppInstanceName_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool AppInstanceName::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::AppInstanceName_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void AppInstanceName::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::AppInstanceName_Data* input =
      static_cast<internal::AppInstanceName_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const AppInstanceName& input) {
  size_t size = sizeof(internal::AppInstanceName_Data);
  size += GetSerializedSize_(input.url);
  size += GetSerializedSize_(input.qualifier);
  return size;
}

mojo::internal::ValidationError Serialize_(
    AppInstanceName* input,
    mojo::internal::Buffer* buf,
    internal::AppInstanceName_Data** output) {
  if (input) {
    internal::AppInstanceName_Data* result =
        internal::AppInstanceName_Data::New(buf);
    SerializeString_(input->url, buf, &result->url.ptr);
    if (!result->url.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in AppInstanceName struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    SerializeString_(input->qualifier, buf, &result->qualifier.ptr);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::AppInstanceName_Data* input,
                  AppInstanceName* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->url.ptr, &result->url);
      Deserialize_(input->qualifier.ptr, &result->qualifier);
    } while (false);
  }
}


size_t User::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool User::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::User_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool User::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::User_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void User::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::User_Data* input =
      static_cast<internal::User_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const User& input) {
  size_t size = sizeof(internal::User_Data);
  size += GetSerializedSize_(input.email);
  size += GetSerializedSize_(input.blessing);
  return size;
}

mojo::internal::ValidationError Serialize_(
    User* input,
    mojo::internal::Buffer* buf,
    internal::User_Data** output) {
  if (input) {
    internal::User_Data* result =
        internal::User_Data::New(buf);
    SerializeString_(input->email, buf, &result->email.ptr);
    if (!result->email.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null email in User struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams blessing_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->blessing, buf, &result->blessing.ptr,
                            &blessing_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->blessing.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null blessing in User struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::User_Data* input,
                  User* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->email.ptr, &result->email);
      Deserialize_(input->blessing.ptr, &result->blessing);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
PrincipalService_Login_ParamsPtr PrincipalService_Login_Params::New() {
  PrincipalService_Login_ParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_Login_Params>::Initialize(&rv);
  return rv;
}

PrincipalService_Login_Params::PrincipalService_Login_Params() {
}

PrincipalService_Login_Params::~PrincipalService_Login_Params() {
}


PrincipalService_Login_ParamsPtr PrincipalService_Login_Params::Clone() const {
  PrincipalService_Login_ParamsPtr rv(New());
  return rv;
}


bool PrincipalService_Login_Params::Equals(const PrincipalService_Login_Params& other) const {
  return true;
}


size_t PrincipalService_Login_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_Login_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_Login_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_Login_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_Login_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_Login_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_Login_Params_Data* input =
      static_cast<internal::PrincipalService_Login_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_Login_Params& input) {
  size_t size = sizeof(internal::PrincipalService_Login_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_Login_Params* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_Login_Params_Data** output) {
  if (input) {
    internal::PrincipalService_Login_Params_Data* result =
        internal::PrincipalService_Login_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_Login_Params_Data* input,
                  PrincipalService_Login_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
PrincipalService_Login_ResponseParamsPtr PrincipalService_Login_ResponseParams::New() {
  PrincipalService_Login_ResponseParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_Login_ResponseParams>::Initialize(&rv);
  return rv;
}

PrincipalService_Login_ResponseParams::PrincipalService_Login_ResponseParams()
    : user() {
}

PrincipalService_Login_ResponseParams::~PrincipalService_Login_ResponseParams() {
}


PrincipalService_Login_ResponseParamsPtr PrincipalService_Login_ResponseParams::Clone() const {
  PrincipalService_Login_ResponseParamsPtr rv(New());
  rv->user = user.Clone();
  return rv;
}


bool PrincipalService_Login_ResponseParams::Equals(const PrincipalService_Login_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<UserPtr>::Equals(this->user, other.user))
    return false;
  return true;
}


size_t PrincipalService_Login_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_Login_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_Login_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_Login_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_Login_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_Login_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_Login_ResponseParams_Data* input =
      static_cast<internal::PrincipalService_Login_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_Login_ResponseParams& input) {
  size_t size = sizeof(internal::PrincipalService_Login_ResponseParams_Data);
  size += input.user.is_null()
              ? 0
              : GetSerializedSize_(*input.user);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_Login_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_Login_ResponseParams_Data** output) {
  if (input) {
    internal::PrincipalService_Login_ResponseParams_Data* result =
        internal::PrincipalService_Login_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->user.get(),
                 buf,
                 &result->user.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_Login_ResponseParams_Data* input,
                  PrincipalService_Login_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->user.ptr) {
        result->user = User::New();
        Deserialize_(input->user.ptr, result->user.get());
      }
    } while (false);
  }
}



// static
PrincipalService_Logout_ParamsPtr PrincipalService_Logout_Params::New() {
  PrincipalService_Logout_ParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_Logout_Params>::Initialize(&rv);
  return rv;
}

PrincipalService_Logout_Params::PrincipalService_Logout_Params() {
}

PrincipalService_Logout_Params::~PrincipalService_Logout_Params() {
}


PrincipalService_Logout_ParamsPtr PrincipalService_Logout_Params::Clone() const {
  PrincipalService_Logout_ParamsPtr rv(New());
  return rv;
}


bool PrincipalService_Logout_Params::Equals(const PrincipalService_Logout_Params& other) const {
  return true;
}


size_t PrincipalService_Logout_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_Logout_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_Logout_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_Logout_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_Logout_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_Logout_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_Logout_Params_Data* input =
      static_cast<internal::PrincipalService_Logout_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_Logout_Params& input) {
  size_t size = sizeof(internal::PrincipalService_Logout_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_Logout_Params* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_Logout_Params_Data** output) {
  if (input) {
    internal::PrincipalService_Logout_Params_Data* result =
        internal::PrincipalService_Logout_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_Logout_Params_Data* input,
                  PrincipalService_Logout_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
PrincipalService_GetUser_ParamsPtr PrincipalService_GetUser_Params::New() {
  PrincipalService_GetUser_ParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_GetUser_Params>::Initialize(&rv);
  return rv;
}

PrincipalService_GetUser_Params::PrincipalService_GetUser_Params()
    : app() {
}

PrincipalService_GetUser_Params::~PrincipalService_GetUser_Params() {
}


PrincipalService_GetUser_ParamsPtr PrincipalService_GetUser_Params::Clone() const {
  PrincipalService_GetUser_ParamsPtr rv(New());
  rv->app = app.Clone();
  return rv;
}


bool PrincipalService_GetUser_Params::Equals(const PrincipalService_GetUser_Params& other) const {
  if (!mojo::internal::ValueTraits<AppInstanceNamePtr>::Equals(this->app, other.app))
    return false;
  return true;
}


size_t PrincipalService_GetUser_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_GetUser_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_GetUser_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_GetUser_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_GetUser_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_GetUser_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_GetUser_Params_Data* input =
      static_cast<internal::PrincipalService_GetUser_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_GetUser_Params& input) {
  size_t size = sizeof(internal::PrincipalService_GetUser_Params_Data);
  size += input.app.is_null()
              ? 0
              : GetSerializedSize_(*input.app);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_GetUser_Params* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_GetUser_Params_Data** output) {
  if (input) {
    internal::PrincipalService_GetUser_Params_Data* result =
        internal::PrincipalService_GetUser_Params_Data::New(buf);
    {auto retval =Serialize_(input->app.get(),
                 buf,
                 &result->app.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_GetUser_Params_Data* input,
                  PrincipalService_GetUser_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->app.ptr) {
        result->app = AppInstanceName::New();
        Deserialize_(input->app.ptr, result->app.get());
      }
    } while (false);
  }
}


// static
PrincipalService_GetUser_ResponseParamsPtr PrincipalService_GetUser_ResponseParams::New() {
  PrincipalService_GetUser_ResponseParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_GetUser_ResponseParams>::Initialize(&rv);
  return rv;
}

PrincipalService_GetUser_ResponseParams::PrincipalService_GetUser_ResponseParams()
    : user() {
}

PrincipalService_GetUser_ResponseParams::~PrincipalService_GetUser_ResponseParams() {
}


PrincipalService_GetUser_ResponseParamsPtr PrincipalService_GetUser_ResponseParams::Clone() const {
  PrincipalService_GetUser_ResponseParamsPtr rv(New());
  rv->user = user.Clone();
  return rv;
}


bool PrincipalService_GetUser_ResponseParams::Equals(const PrincipalService_GetUser_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<UserPtr>::Equals(this->user, other.user))
    return false;
  return true;
}


size_t PrincipalService_GetUser_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_GetUser_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_GetUser_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_GetUser_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_GetUser_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_GetUser_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_GetUser_ResponseParams_Data* input =
      static_cast<internal::PrincipalService_GetUser_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_GetUser_ResponseParams& input) {
  size_t size = sizeof(internal::PrincipalService_GetUser_ResponseParams_Data);
  size += input.user.is_null()
              ? 0
              : GetSerializedSize_(*input.user);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_GetUser_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_GetUser_ResponseParams_Data** output) {
  if (input) {
    internal::PrincipalService_GetUser_ResponseParams_Data* result =
        internal::PrincipalService_GetUser_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->user.get(),
                 buf,
                 &result->user.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_GetUser_ResponseParams_Data* input,
                  PrincipalService_GetUser_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->user.ptr) {
        result->user = User::New();
        Deserialize_(input->user.ptr, result->user.get());
      }
    } while (false);
  }
}



// static
PrincipalService_SetUser_ParamsPtr PrincipalService_SetUser_Params::New() {
  PrincipalService_SetUser_ParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_SetUser_Params>::Initialize(&rv);
  return rv;
}

PrincipalService_SetUser_Params::PrincipalService_SetUser_Params()
    : user() {
}

PrincipalService_SetUser_Params::~PrincipalService_SetUser_Params() {
}


PrincipalService_SetUser_ParamsPtr PrincipalService_SetUser_Params::Clone() const {
  PrincipalService_SetUser_ParamsPtr rv(New());
  rv->user = user.Clone();
  return rv;
}


bool PrincipalService_SetUser_Params::Equals(const PrincipalService_SetUser_Params& other) const {
  if (!mojo::internal::ValueTraits<UserPtr>::Equals(this->user, other.user))
    return false;
  return true;
}


size_t PrincipalService_SetUser_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_SetUser_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_SetUser_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_SetUser_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_SetUser_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_SetUser_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_SetUser_Params_Data* input =
      static_cast<internal::PrincipalService_SetUser_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_SetUser_Params& input) {
  size_t size = sizeof(internal::PrincipalService_SetUser_Params_Data);
  size += input.user.is_null()
              ? 0
              : GetSerializedSize_(*input.user);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_SetUser_Params* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_SetUser_Params_Data** output) {
  if (input) {
    internal::PrincipalService_SetUser_Params_Data* result =
        internal::PrincipalService_SetUser_Params_Data::New(buf);
    {auto retval =Serialize_(input->user.get(),
                 buf,
                 &result->user.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->user.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null user in PrincipalService_SetUser_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_SetUser_Params_Data* input,
                  PrincipalService_SetUser_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->user.ptr) {
        result->user = User::New();
        Deserialize_(input->user.ptr, result->user.get());
      }
    } while (false);
  }
}


// static
PrincipalService_SetUser_ResponseParamsPtr PrincipalService_SetUser_ResponseParams::New() {
  PrincipalService_SetUser_ResponseParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_SetUser_ResponseParams>::Initialize(&rv);
  return rv;
}

PrincipalService_SetUser_ResponseParams::PrincipalService_SetUser_ResponseParams()
    : error() {
}

PrincipalService_SetUser_ResponseParams::~PrincipalService_SetUser_ResponseParams() {
}


PrincipalService_SetUser_ResponseParamsPtr PrincipalService_SetUser_ResponseParams::Clone() const {
  PrincipalService_SetUser_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool PrincipalService_SetUser_ResponseParams::Equals(const PrincipalService_SetUser_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t PrincipalService_SetUser_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_SetUser_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_SetUser_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_SetUser_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_SetUser_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_SetUser_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_SetUser_ResponseParams_Data* input =
      static_cast<internal::PrincipalService_SetUser_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_SetUser_ResponseParams& input) {
  size_t size = sizeof(internal::PrincipalService_SetUser_ResponseParams_Data);
  size += GetSerializedSize_(input.error);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_SetUser_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_SetUser_ResponseParams_Data** output) {
  if (input) {
    internal::PrincipalService_SetUser_ResponseParams_Data* result =
        internal::PrincipalService_SetUser_ResponseParams_Data::New(buf);
    SerializeString_(input->error, buf, &result->error.ptr);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_SetUser_ResponseParams_Data* input,
                  PrincipalService_SetUser_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->error.ptr, &result->error);
    } while (false);
  }
}



// static
PrincipalService_GetLoggedInUsers_ParamsPtr PrincipalService_GetLoggedInUsers_Params::New() {
  PrincipalService_GetLoggedInUsers_ParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_GetLoggedInUsers_Params>::Initialize(&rv);
  return rv;
}

PrincipalService_GetLoggedInUsers_Params::PrincipalService_GetLoggedInUsers_Params() {
}

PrincipalService_GetLoggedInUsers_Params::~PrincipalService_GetLoggedInUsers_Params() {
}


PrincipalService_GetLoggedInUsers_ParamsPtr PrincipalService_GetLoggedInUsers_Params::Clone() const {
  PrincipalService_GetLoggedInUsers_ParamsPtr rv(New());
  return rv;
}


bool PrincipalService_GetLoggedInUsers_Params::Equals(const PrincipalService_GetLoggedInUsers_Params& other) const {
  return true;
}


size_t PrincipalService_GetLoggedInUsers_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_GetLoggedInUsers_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_GetLoggedInUsers_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_GetLoggedInUsers_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_GetLoggedInUsers_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_GetLoggedInUsers_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_GetLoggedInUsers_Params_Data* input =
      static_cast<internal::PrincipalService_GetLoggedInUsers_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_GetLoggedInUsers_Params& input) {
  size_t size = sizeof(internal::PrincipalService_GetLoggedInUsers_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_GetLoggedInUsers_Params* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_GetLoggedInUsers_Params_Data** output) {
  if (input) {
    internal::PrincipalService_GetLoggedInUsers_Params_Data* result =
        internal::PrincipalService_GetLoggedInUsers_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_GetLoggedInUsers_Params_Data* input,
                  PrincipalService_GetLoggedInUsers_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
PrincipalService_GetLoggedInUsers_ResponseParamsPtr PrincipalService_GetLoggedInUsers_ResponseParams::New() {
  PrincipalService_GetLoggedInUsers_ResponseParamsPtr rv;
  mojo::internal::StructHelper<PrincipalService_GetLoggedInUsers_ResponseParams>::Initialize(&rv);
  return rv;
}

PrincipalService_GetLoggedInUsers_ResponseParams::PrincipalService_GetLoggedInUsers_ResponseParams()
    : ids() {
}

PrincipalService_GetLoggedInUsers_ResponseParams::~PrincipalService_GetLoggedInUsers_ResponseParams() {
}


PrincipalService_GetLoggedInUsers_ResponseParamsPtr PrincipalService_GetLoggedInUsers_ResponseParams::Clone() const {
  PrincipalService_GetLoggedInUsers_ResponseParamsPtr rv(New());
  rv->ids = ids.Clone();
  return rv;
}


bool PrincipalService_GetLoggedInUsers_ResponseParams::Equals(const PrincipalService_GetLoggedInUsers_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<UserPtr>>::Equals(this->ids, other.ids))
    return false;
  return true;
}


size_t PrincipalService_GetLoggedInUsers_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PrincipalService_GetLoggedInUsers_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PrincipalService_GetLoggedInUsers_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PrincipalService_GetLoggedInUsers_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data* input =
      static_cast<internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PrincipalService_GetLoggedInUsers_ResponseParams& input) {
  size_t size = sizeof(internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data);
  size += GetSerializedSize_(input.ids);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PrincipalService_GetLoggedInUsers_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data** output) {
  if (input) {
    internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data* result =
        internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams ids_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->ids, buf, &result->ids.ptr,
                            &ids_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->ids.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null ids in PrincipalService_GetLoggedInUsers_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data* input,
                  PrincipalService_GetLoggedInUsers_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->ids.ptr, &result->ids);
    } while (false);
  }
}

}  // namespace vanadium
