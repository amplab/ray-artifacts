// NOTE: This file was generated by the Mojo bindings generator.
#include "shell/application_manager/test.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace shell {

// --- Interface definitions ---
class TestService_Test_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestService_Test_ForwardToCallback(
      const TestService::TestCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestService::TestCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_Test_ForwardToCallback);
};
bool TestService_Test_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestService_Test_ResponseParams_Data* params =
      reinterpret_cast<internal::TestService_Test_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

TestServiceProxy::TestServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestServiceProxy::Test(
    const mojo::String& in_test_string, const TestCallback& callback) {
  size_t size = sizeof(internal::TestService_Test_Params_Data);
  size += GetSerializedSize_(in_test_string);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::Test), size);

  internal::TestService_Test_Params_Data* params =
      internal::TestService_Test_Params_Data::New(builder.buffer());
  SerializeString_(in_test_string, builder.buffer(), &params->test_string.ptr);
  if (!params->test_string.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null test_string in TestService.Test request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestService_Test_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestService_Test_ProxyToResponder
    : public TestService::TestCallback::Runnable {
 public:
  ~TestService_Test_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestService::Test(p_test_string, callback) "
        "was never run.";
  }

  TestService_Test_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestService_Test_ProxyToResponder);
};

void TestService_Test_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::TestService_Test_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestService_Base::MessageOrdinals::Test), size, request_id_);
  internal::TestService_Test_ResponseParams_Data* params =
      internal::TestService_Test_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TestServiceStub::TestServiceStub()
    : sink_(nullptr),
      control_message_handler_(TestService::Version_) {
}

TestServiceStub::~TestServiceStub() {}

bool TestServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestService_Base::MessageOrdinals::Test: {
      break;
    }
  }
  return false;
}

bool TestServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestService_Base::MessageOrdinals::Test: {
      internal::TestService_Test_Params_Data* params =
          reinterpret_cast<internal::TestService_Test_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestService::TestCallback::Runnable* runnable =
          new TestService_Test_ProxyToResponder(
              message->request_id(), responder);
      TestService::TestCallback callback(runnable);
      
      mojo::String p_test_string {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->test_string.ptr, &p_test_string);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Test(p_test_string, callback);
      return true;
    }
  }
  return false;
}


TestAProxy::TestAProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestAProxy::CallB(
    ) {
  size_t size = sizeof(internal::TestA_CallB_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TestA_Base::MessageOrdinals::CallB), size);

  internal::TestA_CallB_Params_Data* params =
      internal::TestA_CallB_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

TestAStub::TestAStub()
    : sink_(nullptr),
      control_message_handler_(TestA::Version_) {
}

TestAStub::~TestAStub() {}

bool TestAStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestA_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestA_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestA_Base::MessageOrdinals::CallB: {
      internal::TestA_CallB_Params_Data* params =
          reinterpret_cast<internal::TestA_CallB_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CallB();
      return true;
    }
  }
  return false;
}

bool TestAStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestA_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestA_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestA_Base::MessageOrdinals::CallB: {
      break;
    }
  }
  return false;
}

class TestB_B_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestB_B_ForwardToCallback(
      const TestB::BCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestB::BCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestB_B_ForwardToCallback);
};
bool TestB_B_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestB_B_ResponseParams_Data* params =
      reinterpret_cast<internal::TestB_B_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

TestBProxy::TestBProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestBProxy::B(
    const BCallback& callback) {
  size_t size = sizeof(internal::TestB_B_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestB_Base::MessageOrdinals::B), size);

  internal::TestB_B_Params_Data* params =
      internal::TestB_B_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestB_B_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestB_B_ProxyToResponder
    : public TestB::BCallback::Runnable {
 public:
  ~TestB_B_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestB::B(callback) "
        "was never run.";
  }

  TestB_B_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestB_B_ProxyToResponder);
};

void TestB_B_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::TestB_B_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestB_Base::MessageOrdinals::B), size, request_id_);
  internal::TestB_B_ResponseParams_Data* params =
      internal::TestB_B_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TestBStub::TestBStub()
    : sink_(nullptr),
      control_message_handler_(TestB::Version_) {
}

TestBStub::~TestBStub() {}

bool TestBStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestB_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestB_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestB_Base::MessageOrdinals::B: {
      break;
    }
  }
  return false;
}

bool TestBStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestB_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestB_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestB_Base::MessageOrdinals::B: {
      internal::TestB_B_Params_Data* params =
          reinterpret_cast<internal::TestB_B_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestB::BCallback::Runnable* runnable =
          new TestB_B_ProxyToResponder(
              message->request_id(), responder);
      TestB::BCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->B(callback);
      return true;
    }
  }
  return false;
}

class TestC_C_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestC_C_ForwardToCallback(
      const TestC::CCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestC::CCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestC_C_ForwardToCallback);
};
bool TestC_C_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestC_C_ResponseParams_Data* params =
      reinterpret_cast<internal::TestC_C_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

TestCProxy::TestCProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestCProxy::C(
    const CCallback& callback) {
  size_t size = sizeof(internal::TestC_C_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestC_Base::MessageOrdinals::C), size);

  internal::TestC_C_Params_Data* params =
      internal::TestC_C_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestC_C_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestC_C_ProxyToResponder
    : public TestC::CCallback::Runnable {
 public:
  ~TestC_C_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestC::C(callback) "
        "was never run.";
  }

  TestC_C_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestC_C_ProxyToResponder);
};

void TestC_C_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::TestC_C_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestC_Base::MessageOrdinals::C), size, request_id_);
  internal::TestC_C_ResponseParams_Data* params =
      internal::TestC_C_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TestCStub::TestCStub()
    : sink_(nullptr),
      control_message_handler_(TestC::Version_) {
}

TestCStub::~TestCStub() {}

bool TestCStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestC_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestC_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestC_Base::MessageOrdinals::C: {
      break;
    }
  }
  return false;
}

bool TestCStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestC_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestC_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestC_Base::MessageOrdinals::C: {
      internal::TestC_C_Params_Data* params =
          reinterpret_cast<internal::TestC_C_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestC::CCallback::Runnable* runnable =
          new TestC_C_ProxyToResponder(
              message->request_id(), responder);
      TestC::CCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->C(callback);
      return true;
    }
  }
  return false;
}

}  // namespace shell
