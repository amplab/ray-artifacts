// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/contacts/interfaces/contacts.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/contacts/interfaces/contacts.mojom-internal.h"
#include "mojo/services/contacts/interfaces/contacts.mojom-common.h"
namespace contacts {

// --- Interface definitions ---
ContactsService_SynchronousProxy::ContactsService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool ContactsService_SynchronousProxy::GetCount(const mojo::String& in_filter, uint64_t* out_count) {
  size_t size = sizeof(internal::ContactsService_GetCount_Params_Data);
  size += GetSerializedSize_(in_filter);

  auto msg_name = static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetCount);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::ContactsService_GetCount_Params_Data* out_params =
      internal::ContactsService_GetCount_Params_Data::New(builder.buffer());
  SerializeString_(in_filter, builder.buffer(), &out_params->filter.ptr);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::ContactsService_GetCount_ResponseParams_Data*
      response_params = reinterpret_cast<internal::ContactsService_GetCount_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_count) = response_params->count;
  } while (false);
  return true;
}
bool ContactsService_SynchronousProxy::Get(const mojo::String& in_filter, uint32_t in_offset, uint32_t in_limit, mojo::Array<ContactPtr>* out_contacts) {
  size_t size = sizeof(internal::ContactsService_Get_Params_Data);
  size += GetSerializedSize_(in_filter);

  auto msg_name = static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::Get);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::ContactsService_Get_Params_Data* out_params =
      internal::ContactsService_Get_Params_Data::New(builder.buffer());
  SerializeString_(in_filter, builder.buffer(), &out_params->filter.ptr);
  out_params->offset = in_offset;
  out_params->limit = in_limit;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::ContactsService_Get_ResponseParams_Data*
      response_params = reinterpret_cast<internal::ContactsService_Get_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->contacts.ptr, &(*out_contacts));
  } while (false);
  return true;
}
bool ContactsService_SynchronousProxy::GetEmails(int64_t in_id, mojo::Array<mojo::String>* out_emails) {
  size_t size = sizeof(internal::ContactsService_GetEmails_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetEmails);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::ContactsService_GetEmails_Params_Data* out_params =
      internal::ContactsService_GetEmails_Params_Data::New(builder.buffer());
  out_params->id = in_id;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::ContactsService_GetEmails_ResponseParams_Data*
      response_params = reinterpret_cast<internal::ContactsService_GetEmails_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->emails.ptr, &(*out_emails));
  } while (false);
  return true;
}
bool ContactsService_SynchronousProxy::GetPhoto(int64_t in_id, bool in_high_resolution, mojo::String* out_photo_url) {
  size_t size = sizeof(internal::ContactsService_GetPhoto_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetPhoto);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::ContactsService_GetPhoto_Params_Data* out_params =
      internal::ContactsService_GetPhoto_Params_Data::New(builder.buffer());
  out_params->id = in_id;
  out_params->high_resolution = in_high_resolution;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::ContactsService_GetPhoto_ResponseParams_Data*
      response_params = reinterpret_cast<internal::ContactsService_GetPhoto_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->photo_url.ptr, &(*out_photo_url));
  } while (false);
  return true;
}
}  // namespace contacts

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
