// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/input_events/interfaces/input_events.mojom
//

package input_events

import (
	sort "sort"
	input_key_codes "mojo/services/input_events/interfaces/input_key_codes"
	fmt "fmt"
	bindings "mojo/public/go/bindings"
	input_event_constants "mojo/services/input_events/interfaces/input_event_constants"
)


type KeyData struct {
	KeyCode int32
	IsChar bool
	Character uint16
	WindowsKeyCode input_key_codes.KeyboardCode
	NativeKeyCode int32
	Text uint16
	UnmodifiedText uint16
}


func (s *KeyData) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WriteInt32(s.KeyCode); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.IsChar); err != nil {
		return err
	}
	if err := encoder.WriteUint16(s.Character); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.WindowsKeyCode)); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.NativeKeyCode); err != nil {
		return err
	}
	if err := encoder.WriteUint16(s.Text); err != nil {
		return err
	}
	if err := encoder.WriteUint16(s.UnmodifiedText); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var keyData_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *KeyData) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(keyData_Versions), func(i int) bool {
		return keyData_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(keyData_Versions) {
		if keyData_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := keyData_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.KeyCode = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.IsChar = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.Character = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.WindowsKeyCode = input_key_codes.KeyboardCode(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.NativeKeyCode = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.Text = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.UnmodifiedText = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type PointerData struct {
	PointerId int32
	Kind input_event_constants.PointerKind
	X float32
	Y float32
	ScreenX float32
	ScreenY float32
	Pressure float32
	RadiusMajor float32
	RadiusMinor float32
	Orientation float32
	HorizontalWheel float32
	VerticalWheel float32
}


func (s *PointerData) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(48, 0)
	if err := encoder.WriteInt32(s.PointerId); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.Kind)); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.X); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.Y); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.ScreenX); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.ScreenY); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.Pressure); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.RadiusMajor); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.RadiusMinor); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.Orientation); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.HorizontalWheel); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.VerticalWheel); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pointerData_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{56, 0},
}

func (s *PointerData) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pointerData_Versions), func(i int) bool {
		return pointerData_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pointerData_Versions) {
		if pointerData_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pointerData_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.PointerId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Kind = input_event_constants.PointerKind(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.X = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.Y = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.ScreenX = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.ScreenY = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.Pressure = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.RadiusMajor = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.RadiusMinor = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.Orientation = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.HorizontalWheel = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.VerticalWheel = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type Event struct {
	Action input_event_constants.EventType
	Flags input_event_constants.EventFlags
	TimeStamp int64
	KeyData *KeyData
	PointerData *PointerData
}


func (s *Event) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(32, 0)
	if err := encoder.WriteInt32(int32(s.Action)); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.Flags)); err != nil {
		return err
	}
	if err := encoder.WriteInt64(s.TimeStamp); err != nil {
		return err
	}
	if s.KeyData == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.KeyData).Encode(encoder); err != nil {
			return err
		}
	}
	if s.PointerData == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.PointerData).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var event_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{40, 0},
}

func (s *Event) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(event_Versions), func(i int) bool {
		return event_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(event_Versions) {
		if event_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := event_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Action = input_event_constants.EventType(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Flags = input_event_constants.EventFlags(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.TimeStamp = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.KeyData = nil
		} else {
			s.KeyData = new(KeyData)
			if err := (*s.KeyData).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.PointerData = nil
		} else {
			s.PointerData = new(PointerData)
			if err := (*s.PointerData).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

