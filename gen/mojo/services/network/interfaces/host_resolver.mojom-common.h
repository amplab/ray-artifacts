// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_HOST_RESOLVER_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_HOST_RESOLVER_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/host_resolver.mojom-internal.h"
#include "mojo/public/interfaces/network/network_error.mojom-common.h"
#include "mojo/services/network/interfaces/net_address.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class HostResolver;
class HostResolverRequestValidator;
class HostResolverResponseValidator;
class HostResolver_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class HostResolver_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = HostResolverRequestValidator;
  using ResponseValidator_ = HostResolverResponseValidator;
  using Synchronous_ = HostResolver_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetHostAddresses = 0,
  };


  virtual ~HostResolver_Base() {}
};

}  // namespace internal

// Async interface declaration

class HostResolverProxy;
class HostResolverStub;
class HostResolver_Synchronous;

class HostResolverRequestValidator;
class HostResolverResponseValidator;

class HostResolver : public internal::HostResolver_Base {
 public:
  virtual ~HostResolver() override {}

  using Proxy_ = HostResolverProxy;
  using Stub_ = HostResolverStub;
  using GetHostAddressesCallback = mojo::Callback<void(mojo::NetworkErrorPtr, mojo::Array<mojo::NetAddressPtr>)>;
  virtual void GetHostAddresses(const mojo::String& host, mojo::NetAddressFamily family, const GetHostAddressesCallback& callback) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class HostResolverRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class HostResolverResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class HostResolver_GetHostAddresses_Params;

using HostResolver_GetHostAddresses_ParamsPtr = mojo::InlinedStructPtr<HostResolver_GetHostAddresses_Params>;


size_t GetSerializedSize_(const HostResolver_GetHostAddresses_Params& input);
mojo::internal::ValidationError Serialize_(
    HostResolver_GetHostAddresses_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HostResolver_GetHostAddresses_Params_Data** output);
void Deserialize_(internal::HostResolver_GetHostAddresses_Params_Data* input,
                  HostResolver_GetHostAddresses_Params* output);

class HostResolver_GetHostAddresses_Params {
 public:
  using Data_ = internal::HostResolver_GetHostAddresses_Params_Data;

  static HostResolver_GetHostAddresses_ParamsPtr New();

  template <typename U>
  static HostResolver_GetHostAddresses_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HostResolver_GetHostAddresses_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HostResolver_GetHostAddresses_Params>::Convert(*this);
  }

  HostResolver_GetHostAddresses_Params();
  ~HostResolver_GetHostAddresses_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HostResolver_GetHostAddresses_ParamsPtr Clone() const;
  bool Equals(const HostResolver_GetHostAddresses_Params& other) const;

  mojo::String host;
  mojo::NetAddressFamily family;
};



class HostResolver_GetHostAddresses_ResponseParams;

using HostResolver_GetHostAddresses_ResponseParamsPtr = mojo::StructPtr<HostResolver_GetHostAddresses_ResponseParams>;


size_t GetSerializedSize_(const HostResolver_GetHostAddresses_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HostResolver_GetHostAddresses_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HostResolver_GetHostAddresses_ResponseParams_Data** output);
void Deserialize_(internal::HostResolver_GetHostAddresses_ResponseParams_Data* input,
                  HostResolver_GetHostAddresses_ResponseParams* output);

class HostResolver_GetHostAddresses_ResponseParams {
 public:
  using Data_ = internal::HostResolver_GetHostAddresses_ResponseParams_Data;

  static HostResolver_GetHostAddresses_ResponseParamsPtr New();

  template <typename U>
  static HostResolver_GetHostAddresses_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HostResolver_GetHostAddresses_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HostResolver_GetHostAddresses_ResponseParams>::Convert(*this);
  }

  HostResolver_GetHostAddresses_ResponseParams();
  ~HostResolver_GetHostAddresses_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HostResolver_GetHostAddresses_ResponseParamsPtr Clone() const;
  bool Equals(const HostResolver_GetHostAddresses_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
  mojo::Array<mojo::NetAddressPtr> addresses;
};


}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_HOST_RESOLVER_MOJOM_COMMON_H_
