// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_JS_TEST_PINGPONG_SERVICE_MOJOM_COMMON_H_
#define SERVICES_JS_TEST_PINGPONG_SERVICE_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "services/js/test/pingpong_service.mojom-internal.h"
namespace js {

// --- Interface Forward Declarations ---
class PingPongService;
class PingPongServiceRequestValidator;
class PingPongServiceResponseValidator;
class PingPongService_Synchronous;
class PingPongClient;
class PingPongClientRequestValidator;
class PingPongClient_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class PingPongService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = PingPongServiceRequestValidator;
  using ResponseValidator_ = PingPongServiceResponseValidator;
  using Synchronous_ = PingPongService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    SetClient = 0,
    Ping = 1,
    PingTargetURL = 2,
    PingTargetService = 3,
    GetPingPongService = 4,
    Quit = 5,
  };


  virtual ~PingPongService_Base() {}
};

}  // namespace internal

// Async interface declaration

class PingPongServiceProxy;
class PingPongServiceStub;
class PingPongService_Synchronous;

class PingPongServiceRequestValidator;
class PingPongServiceResponseValidator;

class PingPongService : public internal::PingPongService_Base {
 public:
  virtual ~PingPongService() override {}

  using Proxy_ = PingPongServiceProxy;
  using Stub_ = PingPongServiceStub;
  virtual void SetClient(mojo::InterfaceHandle<PingPongClient> client) = 0;
  virtual void Ping(uint16_t ping_value) = 0;
  using PingTargetURLCallback = mojo::Callback<void(bool)>;
  virtual void PingTargetURL(const mojo::String& url, uint16_t count, const PingTargetURLCallback& callback) = 0;
  using PingTargetServiceCallback = mojo::Callback<void(bool)>;
  virtual void PingTargetService(mojo::InterfaceHandle<PingPongService> service, uint16_t count, const PingTargetServiceCallback& callback) = 0;
  virtual void GetPingPongService(mojo::InterfaceRequest<PingPongService> service) = 0;
  virtual void Quit() = 0;
};

namespace internal {
class PingPongClient_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = PingPongClientRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = PingPongClient_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Pong = 0,
  };


  virtual ~PingPongClient_Base() {}
};

}  // namespace internal

// Async interface declaration

class PingPongClientProxy;
class PingPongClientStub;
class PingPongClient_Synchronous;

class PingPongClientRequestValidator;

class PingPongClient : public internal::PingPongClient_Base {
 public:
  virtual ~PingPongClient() override {}

  using Proxy_ = PingPongClientProxy;
  using Stub_ = PingPongClientStub;
  virtual void Pong(uint16_t pong_value) = 0;
};

}  // namespace js

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace js {

// --- Interface Request Validators ---
class PingPongServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class PingPongClientRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class PingPongServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class PingPongService_SetClient_Params;

using PingPongService_SetClient_ParamsPtr = mojo::StructPtr<PingPongService_SetClient_Params>;


size_t GetSerializedSize_(const PingPongService_SetClient_Params& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_SetClient_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_SetClient_Params_Data** output);
void Deserialize_(internal::PingPongService_SetClient_Params_Data* input,
                  PingPongService_SetClient_Params* output);

class PingPongService_SetClient_Params {
 public:
  using Data_ = internal::PingPongService_SetClient_Params_Data;

  static PingPongService_SetClient_ParamsPtr New();

  template <typename U>
  static PingPongService_SetClient_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_SetClient_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_SetClient_Params>::Convert(*this);
  }

  PingPongService_SetClient_Params();
  ~PingPongService_SetClient_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const PingPongService_SetClient_Params& other) const;

  mojo::InterfaceHandle<PingPongClient> client;
};




class PingPongService_Ping_Params;

using PingPongService_Ping_ParamsPtr = mojo::InlinedStructPtr<PingPongService_Ping_Params>;


size_t GetSerializedSize_(const PingPongService_Ping_Params& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_Ping_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_Ping_Params_Data** output);
void Deserialize_(internal::PingPongService_Ping_Params_Data* input,
                  PingPongService_Ping_Params* output);

class PingPongService_Ping_Params {
 public:
  using Data_ = internal::PingPongService_Ping_Params_Data;

  static PingPongService_Ping_ParamsPtr New();

  template <typename U>
  static PingPongService_Ping_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_Ping_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_Ping_Params>::Convert(*this);
  }

  PingPongService_Ping_Params();
  ~PingPongService_Ping_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PingPongService_Ping_ParamsPtr Clone() const;
  bool Equals(const PingPongService_Ping_Params& other) const;

  uint16_t ping_value;
};




class PingPongService_PingTargetURL_Params;

using PingPongService_PingTargetURL_ParamsPtr = mojo::InlinedStructPtr<PingPongService_PingTargetURL_Params>;


size_t GetSerializedSize_(const PingPongService_PingTargetURL_Params& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetURL_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_PingTargetURL_Params_Data** output);
void Deserialize_(internal::PingPongService_PingTargetURL_Params_Data* input,
                  PingPongService_PingTargetURL_Params* output);

class PingPongService_PingTargetURL_Params {
 public:
  using Data_ = internal::PingPongService_PingTargetURL_Params_Data;

  static PingPongService_PingTargetURL_ParamsPtr New();

  template <typename U>
  static PingPongService_PingTargetURL_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_PingTargetURL_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_PingTargetURL_Params>::Convert(*this);
  }

  PingPongService_PingTargetURL_Params();
  ~PingPongService_PingTargetURL_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PingPongService_PingTargetURL_ParamsPtr Clone() const;
  bool Equals(const PingPongService_PingTargetURL_Params& other) const;

  mojo::String url;
  uint16_t count;
};



class PingPongService_PingTargetURL_ResponseParams;

using PingPongService_PingTargetURL_ResponseParamsPtr = mojo::InlinedStructPtr<PingPongService_PingTargetURL_ResponseParams>;


size_t GetSerializedSize_(const PingPongService_PingTargetURL_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetURL_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_PingTargetURL_ResponseParams_Data** output);
void Deserialize_(internal::PingPongService_PingTargetURL_ResponseParams_Data* input,
                  PingPongService_PingTargetURL_ResponseParams* output);

class PingPongService_PingTargetURL_ResponseParams {
 public:
  using Data_ = internal::PingPongService_PingTargetURL_ResponseParams_Data;

  static PingPongService_PingTargetURL_ResponseParamsPtr New();

  template <typename U>
  static PingPongService_PingTargetURL_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_PingTargetURL_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_PingTargetURL_ResponseParams>::Convert(*this);
  }

  PingPongService_PingTargetURL_ResponseParams();
  ~PingPongService_PingTargetURL_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PingPongService_PingTargetURL_ResponseParamsPtr Clone() const;
  bool Equals(const PingPongService_PingTargetURL_ResponseParams& other) const;

  bool ok;
};



class PingPongService_PingTargetService_Params;

using PingPongService_PingTargetService_ParamsPtr = mojo::StructPtr<PingPongService_PingTargetService_Params>;


size_t GetSerializedSize_(const PingPongService_PingTargetService_Params& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetService_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_PingTargetService_Params_Data** output);
void Deserialize_(internal::PingPongService_PingTargetService_Params_Data* input,
                  PingPongService_PingTargetService_Params* output);

class PingPongService_PingTargetService_Params {
 public:
  using Data_ = internal::PingPongService_PingTargetService_Params_Data;

  static PingPongService_PingTargetService_ParamsPtr New();

  template <typename U>
  static PingPongService_PingTargetService_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_PingTargetService_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_PingTargetService_Params>::Convert(*this);
  }

  PingPongService_PingTargetService_Params();
  ~PingPongService_PingTargetService_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const PingPongService_PingTargetService_Params& other) const;

  mojo::InterfaceHandle<PingPongService> service;
  uint16_t count;
};



class PingPongService_PingTargetService_ResponseParams;

using PingPongService_PingTargetService_ResponseParamsPtr = mojo::InlinedStructPtr<PingPongService_PingTargetService_ResponseParams>;


size_t GetSerializedSize_(const PingPongService_PingTargetService_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetService_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_PingTargetService_ResponseParams_Data** output);
void Deserialize_(internal::PingPongService_PingTargetService_ResponseParams_Data* input,
                  PingPongService_PingTargetService_ResponseParams* output);

class PingPongService_PingTargetService_ResponseParams {
 public:
  using Data_ = internal::PingPongService_PingTargetService_ResponseParams_Data;

  static PingPongService_PingTargetService_ResponseParamsPtr New();

  template <typename U>
  static PingPongService_PingTargetService_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_PingTargetService_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_PingTargetService_ResponseParams>::Convert(*this);
  }

  PingPongService_PingTargetService_ResponseParams();
  ~PingPongService_PingTargetService_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PingPongService_PingTargetService_ResponseParamsPtr Clone() const;
  bool Equals(const PingPongService_PingTargetService_ResponseParams& other) const;

  bool ok;
};



class PingPongService_GetPingPongService_Params;

using PingPongService_GetPingPongService_ParamsPtr = mojo::StructPtr<PingPongService_GetPingPongService_Params>;


size_t GetSerializedSize_(const PingPongService_GetPingPongService_Params& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_GetPingPongService_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_GetPingPongService_Params_Data** output);
void Deserialize_(internal::PingPongService_GetPingPongService_Params_Data* input,
                  PingPongService_GetPingPongService_Params* output);

class PingPongService_GetPingPongService_Params {
 public:
  using Data_ = internal::PingPongService_GetPingPongService_Params_Data;

  static PingPongService_GetPingPongService_ParamsPtr New();

  template <typename U>
  static PingPongService_GetPingPongService_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_GetPingPongService_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_GetPingPongService_Params>::Convert(*this);
  }

  PingPongService_GetPingPongService_Params();
  ~PingPongService_GetPingPongService_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const PingPongService_GetPingPongService_Params& other) const;

  mojo::InterfaceRequest<PingPongService> service;
};




class PingPongService_Quit_Params;

using PingPongService_Quit_ParamsPtr = mojo::InlinedStructPtr<PingPongService_Quit_Params>;


size_t GetSerializedSize_(const PingPongService_Quit_Params& input);
mojo::internal::ValidationError Serialize_(
    PingPongService_Quit_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongService_Quit_Params_Data** output);
void Deserialize_(internal::PingPongService_Quit_Params_Data* input,
                  PingPongService_Quit_Params* output);

class PingPongService_Quit_Params {
 public:
  using Data_ = internal::PingPongService_Quit_Params_Data;

  static PingPongService_Quit_ParamsPtr New();

  template <typename U>
  static PingPongService_Quit_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongService_Quit_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongService_Quit_Params>::Convert(*this);
  }

  PingPongService_Quit_Params();
  ~PingPongService_Quit_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PingPongService_Quit_ParamsPtr Clone() const;
  bool Equals(const PingPongService_Quit_Params& other) const;

};



      

class PingPongClient_Pong_Params;

using PingPongClient_Pong_ParamsPtr = mojo::InlinedStructPtr<PingPongClient_Pong_Params>;


size_t GetSerializedSize_(const PingPongClient_Pong_Params& input);
mojo::internal::ValidationError Serialize_(
    PingPongClient_Pong_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PingPongClient_Pong_Params_Data** output);
void Deserialize_(internal::PingPongClient_Pong_Params_Data* input,
                  PingPongClient_Pong_Params* output);

class PingPongClient_Pong_Params {
 public:
  using Data_ = internal::PingPongClient_Pong_Params_Data;

  static PingPongClient_Pong_ParamsPtr New();

  template <typename U>
  static PingPongClient_Pong_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PingPongClient_Pong_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PingPongClient_Pong_Params>::Convert(*this);
  }

  PingPongClient_Pong_Params();
  ~PingPongClient_Pong_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PingPongClient_Pong_ParamsPtr Clone() const;
  bool Equals(const PingPongClient_Pong_Params& other) const;

  uint16_t pong_value;
};



}  // namespace js

#endif  // SERVICES_JS_TEST_PINGPONG_SERVICE_MOJOM_COMMON_H_
