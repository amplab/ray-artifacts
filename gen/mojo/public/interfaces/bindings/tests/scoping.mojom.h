// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SCOPING_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SCOPING_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/scoping.mojom-common.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---

using APtr = mojo::InterfacePtr<A>;

using BPtr = mojo::InterfacePtr<B>;

using CPtr = mojo::InterfacePtr<C>;


// --- Interface Proxies ---


class AProxy
    : public A,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit AProxy(mojo::MessageReceiverWithResponder* receiver);
  void GetB(
      mojo::InterfaceRequest<B> b
  ) override;
};


class BProxy
    : public B,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit BProxy(mojo::MessageReceiverWithResponder* receiver);
  void GetC(
      mojo::InterfaceRequest<C> c
  ) override;
};


class CProxy
    : public C,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CProxy(mojo::MessageReceiverWithResponder* receiver);
  void D(
      
  ) override;
};


// --- Interface Stubs ---

class AStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  AStub();
  ~AStub() override;
  void set_sink(A* sink) { sink_ = sink; }
  A* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  A* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class BStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  BStub();
  ~BStub() override;
  void set_sink(B* sink) { sink_ = sink; }
  B* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  B* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class CStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CStub();
  ~CStub() override;
  void set_sink(C* sink) { sink_ = sink; }
  C* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  C* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SCOPING_MOJOM_H_
