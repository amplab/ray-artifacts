// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace nfc {

class NfcData;


namespace internal {

class NfcData_Data;



#pragma pack(push, 1)


class NfcData_Data {
 public:
  static NfcData_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<uint8_t> data;

 private:
  NfcData_Data();
  ~NfcData_Data() = delete;
};
static_assert(sizeof(NfcData_Data) == 16,
              "Bad sizeof(NfcData_Data)");


class NfcTransmission_Cancel_Params_Data {
 public:
  static NfcTransmission_Cancel_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  NfcTransmission_Cancel_Params_Data();
  ~NfcTransmission_Cancel_Params_Data() = delete;
};
static_assert(sizeof(NfcTransmission_Cancel_Params_Data) == 8,
              "Bad sizeof(NfcTransmission_Cancel_Params_Data)");


class NfcReceiver_OnReceivedNfcData_Params_Data {
 public:
  static NfcReceiver_OnReceivedNfcData_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::NfcData_Data> nfc_data;

 private:
  NfcReceiver_OnReceivedNfcData_Params_Data();
  ~NfcReceiver_OnReceivedNfcData_Params_Data() = delete;
};
static_assert(sizeof(NfcReceiver_OnReceivedNfcData_Params_Data) == 16,
              "Bad sizeof(NfcReceiver_OnReceivedNfcData_Params_Data)");


class Nfc_TransmitOnNextConnection_Params_Data {
 public:
  static Nfc_TransmitOnNextConnection_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::NfcData_Data> nfc_data;
  mojo::MessagePipeHandle transmission;
  uint8_t padfinal_[4];

 private:
  Nfc_TransmitOnNextConnection_Params_Data();
  ~Nfc_TransmitOnNextConnection_Params_Data() = delete;
};
static_assert(sizeof(Nfc_TransmitOnNextConnection_Params_Data) == 24,
              "Bad sizeof(Nfc_TransmitOnNextConnection_Params_Data)");

class Nfc_TransmitOnNextConnection_ResponseParams_Data {
 public:
  static Nfc_TransmitOnNextConnection_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  Nfc_TransmitOnNextConnection_ResponseParams_Data();
  ~Nfc_TransmitOnNextConnection_ResponseParams_Data() = delete;
};
static_assert(sizeof(Nfc_TransmitOnNextConnection_ResponseParams_Data) == 16,
              "Bad sizeof(Nfc_TransmitOnNextConnection_ResponseParams_Data)");


class Nfc_Register_Params_Data {
 public:
  static Nfc_Register_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  Nfc_Register_Params_Data();
  ~Nfc_Register_Params_Data() = delete;
};
static_assert(sizeof(Nfc_Register_Params_Data) == 8,
              "Bad sizeof(Nfc_Register_Params_Data)");


class Nfc_Unregister_Params_Data {
 public:
  static Nfc_Unregister_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  Nfc_Unregister_Params_Data();
  ~Nfc_Unregister_Params_Data() = delete;
};
static_assert(sizeof(Nfc_Unregister_Params_Data) == 8,
              "Bad sizeof(Nfc_Unregister_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace nfc

#endif  // MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_INTERNAL_H_
