// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/application/application_connector.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---

ApplicationConnectorProxy::ApplicationConnectorProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ApplicationConnectorProxy::ConnectToApplication(
    const mojo::String& in_application_url, mojo::InterfaceRequest<mojo::ServiceProvider> in_services) {
  size_t size = sizeof(internal::ApplicationConnector_ConnectToApplication_Params_Data);
  size += GetSerializedSize_(in_application_url);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ApplicationConnector_Base::MessageOrdinals::ConnectToApplication), size);

  internal::ApplicationConnector_ConnectToApplication_Params_Data* params =
      internal::ApplicationConnector_ConnectToApplication_Params_Data::New(builder.buffer());
  SerializeString_(in_application_url, builder.buffer(), &params->application_url.ptr);
  if (!params->application_url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null application_url in ApplicationConnector.ConnectToApplication request");
  }
  params->services = in_services.PassMessagePipe().release();
  if (!params->services.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid services in ApplicationConnector.ConnectToApplication request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ApplicationConnectorProxy::Duplicate(
    mojo::InterfaceRequest<ApplicationConnector> in_application_connector_request) {
  size_t size = sizeof(internal::ApplicationConnector_Duplicate_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ApplicationConnector_Base::MessageOrdinals::Duplicate), size);

  internal::ApplicationConnector_Duplicate_Params_Data* params =
      internal::ApplicationConnector_Duplicate_Params_Data::New(builder.buffer());
  params->application_connector_request = in_application_connector_request.PassMessagePipe().release();
  if (!params->application_connector_request.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid application_connector_request in ApplicationConnector.Duplicate request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ApplicationConnectorStub::ApplicationConnectorStub()
    : sink_(nullptr),
      control_message_handler_(ApplicationConnector::Version_) {
}

ApplicationConnectorStub::~ApplicationConnectorStub() {}

bool ApplicationConnectorStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ApplicationConnector_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ApplicationConnector_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ApplicationConnector_Base::MessageOrdinals::ConnectToApplication: {
      internal::ApplicationConnector_ConnectToApplication_Params_Data* params =
          reinterpret_cast<internal::ApplicationConnector_ConnectToApplication_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_application_url {};
      mojo::InterfaceRequest<mojo::ServiceProvider> p_services {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->application_url.ptr, &p_application_url);
        p_services.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->services)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ConnectToApplication(p_application_url, p_services.Pass());
      return true;
    }
    case internal::ApplicationConnector_Base::MessageOrdinals::Duplicate: {
      internal::ApplicationConnector_Duplicate_Params_Data* params =
          reinterpret_cast<internal::ApplicationConnector_Duplicate_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<ApplicationConnector> p_application_connector_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_application_connector_request.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->application_connector_request)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Duplicate(p_application_connector_request.Pass());
      return true;
    }
  }
  return false;
}

bool ApplicationConnectorStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ApplicationConnector_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ApplicationConnector_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ApplicationConnector_Base::MessageOrdinals::ConnectToApplication: {
      break;
    }
    case internal::ApplicationConnector_Base::MessageOrdinals::Duplicate: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
