// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library credentials_impl_db_mojom;
import 'package:mojo/bindings.dart' as bindings;


class CredentialType extends bindings.MojoEnum {
  static const CredentialType downscopedOauthRefreshToken = const CredentialType._(1);

  const CredentialType._(int v) : super(v);

  static const Map<String, CredentialType> valuesMap = const {
    "downscopedOauthRefreshToken": downscopedOauthRefreshToken,
  };
  static const List<CredentialType> values = const [
    downscopedOauthRefreshToken,
  ];

  static CredentialType valueOf(String name) => valuesMap[name];

  factory CredentialType(int v) {
    switch (v) {
      case 1:
        return CredentialType.downscopedOauthRefreshToken;
      default:
        return null;
    }
  }

  static CredentialType decode(bindings.Decoder decoder0, int offset) {
    int v = decoder0.decodeUint32(offset);
    CredentialType result = new CredentialType(v);
    if (result == null) {
      throw new bindings.MojoCodecError(
          'Bad value $v for enum CredentialType.');
    }
    return result;
  }

  String toString() {
    switch(this) {
      case downscopedOauthRefreshToken:
        return 'CredentialType.downscopedOauthRefreshToken';
      default:
        return null;
    }
  }

  int toJson() => mojoEnumValue;
}

class AuthProvider extends bindings.MojoEnum {
  static const AuthProvider google = const AuthProvider._(1);

  const AuthProvider._(int v) : super(v);

  static const Map<String, AuthProvider> valuesMap = const {
    "google": google,
  };
  static const List<AuthProvider> values = const [
    google,
  ];

  static AuthProvider valueOf(String name) => valuesMap[name];

  factory AuthProvider(int v) {
    switch (v) {
      case 1:
        return AuthProvider.google;
      default:
        return null;
    }
  }

  static AuthProvider decode(bindings.Decoder decoder0, int offset) {
    int v = decoder0.decodeUint32(offset);
    AuthProvider result = new AuthProvider(v);
    if (result == null) {
      throw new bindings.MojoCodecError(
          'Bad value $v for enum AuthProvider.');
    }
    return result;
  }

  String toString() {
    switch(this) {
      case google:
        return 'AuthProvider.google';
      default:
        return null;
    }
  }

  int toJson() => mojoEnumValue;
}



class Credentials extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  AuthProvider authProvider = null;
  CredentialType credentialType = null;
  String token = null;
  String scopes = null;

  Credentials() : super(kVersions.last.size);

  Credentials.init(
    AuthProvider this.authProvider, 
    CredentialType this.credentialType, 
    String this.token, 
    String this.scopes
  ) : super(kVersions.last.size);

  static Credentials deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static Credentials decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    Credentials result = new Credentials();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
        result.authProvider = AuthProvider.decode(decoder0, 8);
        if (result.authProvider == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable AuthProvider.');
        }
    }
    if (mainDataHeader.version >= 0) {
      
        result.credentialType = CredentialType.decode(decoder0, 12);
        if (result.credentialType == null) {
          throw new bindings.MojoCodecError(
            'Trying to decode null union for non-nullable CredentialType.');
        }
    }
    if (mainDataHeader.version >= 0) {
      
      result.token = decoder0.decodeString(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.scopes = decoder0.decodeString(24, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "Credentials";
    String fieldName;
    try {
      fieldName = "authProvider";
      encoder0.encodeEnum(authProvider, 8);
      fieldName = "credentialType";
      encoder0.encodeEnum(credentialType, 12);
      fieldName = "token";
      encoder0.encodeString(token, 16, false);
      fieldName = "scopes";
      encoder0.encodeString(scopes, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "Credentials("
           "authProvider: $authProvider" ", "
           "credentialType: $credentialType" ", "
           "token: $token" ", "
           "scopes: $scopes" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["authProvider"] = authProvider;
    map["credentialType"] = credentialType;
    map["token"] = token;
    map["scopes"] = scopes;
    return map;
  }
}


class CredentialStore extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  int version = 0;
  Map<String, Credentials> credentials = null;

  CredentialStore() : super(kVersions.last.size);

  CredentialStore.init(
    int this.version, 
    Map<String, Credentials> this.credentials
  ) : super(kVersions.last.size);

  static CredentialStore deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static CredentialStore decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    CredentialStore result = new CredentialStore();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.version = decoder0.decodeUint32(8);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, false);
      {
        decoder1.decodeDataHeaderForMap();
        List<String> keys0;
        List<Credentials> values0;
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
            keys0 = new List<String>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              keys0[i2] = decoder2.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
            }
          }
        }
        {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, false);
          {
            var si2 = decoder2.decodeDataHeaderForPointerArray(keys0.length);
            values0 = new List<Credentials>(si2.numElements);
            for (int i2 = 0; i2 < si2.numElements; ++i2) {
              
              var decoder3 = decoder2.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i2, false);
              values0[i2] = Credentials.decode(decoder3);
            }
          }
        }
        result.credentials = new Map<String, Credentials>.fromIterables(
            keys0, values0);
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "CredentialStore";
    String fieldName;
    try {
      fieldName = "version";
      encoder0.encodeUint32(version, 8);
      fieldName = "credentials";
      if (credentials == null) {
        encoder0.encodeNullPointer(16, false);
      } else {
        var encoder1 = encoder0.encoderForMap(16);
        var keys0 = credentials.keys.toList();
        var values0 = credentials.values.toList();
        
        {
          var encoder2 = encoder1.encodePointerArray(keys0.length, bindings.ArrayDataHeader.kHeaderSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < keys0.length; ++i1) {
            encoder2.encodeString(keys0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
        
        {
          var encoder2 = encoder1.encodePointerArray(values0.length, bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize, bindings.kUnspecifiedArrayLength);
          for (int i1 = 0; i1 < values0.length; ++i1) {
            encoder2.encodeStruct(values0[i1], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          }
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "CredentialStore("
           "version: $version" ", "
           "credentials: $credentials" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["version"] = version;
    map["credentials"] = credentials;
    return map;
  }
}



