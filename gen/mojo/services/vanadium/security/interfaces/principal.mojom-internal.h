// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_VANADIUM_SECURITY_INTERFACES_PRINCIPAL_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_VANADIUM_SECURITY_INTERFACES_PRINCIPAL_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace vanadium {

class AppInstanceName;
class User;


namespace internal {

class AppInstanceName_Data;
class User_Data;



#pragma pack(push, 1)


class AppInstanceName_Data {
 public:
  static AppInstanceName_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer url;
  mojo::internal::StringPointer qualifier;

 private:
  AppInstanceName_Data();
  ~AppInstanceName_Data() = delete;
};
static_assert(sizeof(AppInstanceName_Data) == 24,
              "Bad sizeof(AppInstanceName_Data)");

class User_Data {
 public:
  static User_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer email;
  mojo::internal::ArrayPointer<uint8_t> blessing;

 private:
  User_Data();
  ~User_Data() = delete;
};
static_assert(sizeof(User_Data) == 24,
              "Bad sizeof(User_Data)");


class PrincipalService_Login_Params_Data {
 public:
  static PrincipalService_Login_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  PrincipalService_Login_Params_Data();
  ~PrincipalService_Login_Params_Data() = delete;
};
static_assert(sizeof(PrincipalService_Login_Params_Data) == 8,
              "Bad sizeof(PrincipalService_Login_Params_Data)");

class PrincipalService_Login_ResponseParams_Data {
 public:
  static PrincipalService_Login_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::User_Data> user;

 private:
  PrincipalService_Login_ResponseParams_Data();
  ~PrincipalService_Login_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrincipalService_Login_ResponseParams_Data) == 16,
              "Bad sizeof(PrincipalService_Login_ResponseParams_Data)");


class PrincipalService_Logout_Params_Data {
 public:
  static PrincipalService_Logout_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  PrincipalService_Logout_Params_Data();
  ~PrincipalService_Logout_Params_Data() = delete;
};
static_assert(sizeof(PrincipalService_Logout_Params_Data) == 8,
              "Bad sizeof(PrincipalService_Logout_Params_Data)");


class PrincipalService_GetUser_Params_Data {
 public:
  static PrincipalService_GetUser_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::AppInstanceName_Data> app;

 private:
  PrincipalService_GetUser_Params_Data();
  ~PrincipalService_GetUser_Params_Data() = delete;
};
static_assert(sizeof(PrincipalService_GetUser_Params_Data) == 16,
              "Bad sizeof(PrincipalService_GetUser_Params_Data)");

class PrincipalService_GetUser_ResponseParams_Data {
 public:
  static PrincipalService_GetUser_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::User_Data> user;

 private:
  PrincipalService_GetUser_ResponseParams_Data();
  ~PrincipalService_GetUser_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrincipalService_GetUser_ResponseParams_Data) == 16,
              "Bad sizeof(PrincipalService_GetUser_ResponseParams_Data)");


class PrincipalService_SetUser_Params_Data {
 public:
  static PrincipalService_SetUser_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::User_Data> user;

 private:
  PrincipalService_SetUser_Params_Data();
  ~PrincipalService_SetUser_Params_Data() = delete;
};
static_assert(sizeof(PrincipalService_SetUser_Params_Data) == 16,
              "Bad sizeof(PrincipalService_SetUser_Params_Data)");

class PrincipalService_SetUser_ResponseParams_Data {
 public:
  static PrincipalService_SetUser_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer error;

 private:
  PrincipalService_SetUser_ResponseParams_Data();
  ~PrincipalService_SetUser_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrincipalService_SetUser_ResponseParams_Data) == 16,
              "Bad sizeof(PrincipalService_SetUser_ResponseParams_Data)");


class PrincipalService_GetLoggedInUsers_Params_Data {
 public:
  static PrincipalService_GetLoggedInUsers_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  PrincipalService_GetLoggedInUsers_Params_Data();
  ~PrincipalService_GetLoggedInUsers_Params_Data() = delete;
};
static_assert(sizeof(PrincipalService_GetLoggedInUsers_Params_Data) == 8,
              "Bad sizeof(PrincipalService_GetLoggedInUsers_Params_Data)");

class PrincipalService_GetLoggedInUsers_ResponseParams_Data {
 public:
  static PrincipalService_GetLoggedInUsers_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<internal::User_Data*> ids;

 private:
  PrincipalService_GetLoggedInUsers_ResponseParams_Data();
  ~PrincipalService_GetLoggedInUsers_ResponseParams_Data() = delete;
};
static_assert(sizeof(PrincipalService_GetLoggedInUsers_ResponseParams_Data) == 16,
              "Bad sizeof(PrincipalService_GetLoggedInUsers_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace vanadium

#endif  // MOJO_SERVICES_VANADIUM_SECURITY_INTERFACES_PRINCIPAL_MOJOM_INTERNAL_H_
