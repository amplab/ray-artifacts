// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/notifications/interfaces/notifications.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace notifications {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
NotificationData_Data* NotificationData_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NotificationData_Data))) NotificationData_Data();
}

// static
mojo::internal::ValidationError NotificationData_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NotificationData_Data* object = static_cast<const NotificationData_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->title.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams title_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->title.offset),
          bounds_checker, &title_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->text.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams text_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->text.offset),
          bounds_checker, &text_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NotificationData_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->title, handles);
  mojo::internal::Encode(&this->text, handles);
}

void NotificationData_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->title, handles);
  mojo::internal::Decode(&this->text, handles);
}

NotificationData_Data::NotificationData_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
NotificationClient_OnSelected_Params_Data* NotificationClient_OnSelected_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NotificationClient_OnSelected_Params_Data))) NotificationClient_OnSelected_Params_Data();
}

// static
mojo::internal::ValidationError NotificationClient_OnSelected_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NotificationClient_OnSelected_Params_Data* object = static_cast<const NotificationClient_OnSelected_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void NotificationClient_OnSelected_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void NotificationClient_OnSelected_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

NotificationClient_OnSelected_Params_Data::NotificationClient_OnSelected_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NotificationClient_OnDismissed_Params_Data* NotificationClient_OnDismissed_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NotificationClient_OnDismissed_Params_Data))) NotificationClient_OnDismissed_Params_Data();
}

// static
mojo::internal::ValidationError NotificationClient_OnDismissed_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NotificationClient_OnDismissed_Params_Data* object = static_cast<const NotificationClient_OnDismissed_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void NotificationClient_OnDismissed_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void NotificationClient_OnDismissed_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

NotificationClient_OnDismissed_Params_Data::NotificationClient_OnDismissed_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Notification_Update_Params_Data* Notification_Update_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Notification_Update_Params_Data))) Notification_Update_Params_Data();
}

// static
mojo::internal::ValidationError Notification_Update_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Notification_Update_Params_Data* object = static_cast<const Notification_Update_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->notification_data.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null notification_data field in Notification_Update_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->notification_data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = NotificationData::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->notification_data.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Notification_Update_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->notification_data, handles);
}

void Notification_Update_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->notification_data, handles);
}

Notification_Update_Params_Data::Notification_Update_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Notification_Cancel_Params_Data* Notification_Cancel_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Notification_Cancel_Params_Data))) Notification_Cancel_Params_Data();
}

// static
mojo::internal::ValidationError Notification_Cancel_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Notification_Cancel_Params_Data* object = static_cast<const Notification_Cancel_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Notification_Cancel_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Notification_Cancel_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Notification_Cancel_Params_Data::Notification_Cancel_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NotificationService_Post_Params_Data* NotificationService_Post_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NotificationService_Post_Params_Data))) NotificationService_Post_Params_Data();
}

// static
mojo::internal::ValidationError NotificationService_Post_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NotificationService_Post_Params_Data* object = static_cast<const NotificationService_Post_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->notification_data.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null notification_data field in NotificationService_Post_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->notification_data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = NotificationData::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->notification_data.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle client_handle = object->client.handle;
  if (!bounds_checker->ClaimHandle(client_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle notification_handle = object->notification;
  if (!bounds_checker->ClaimHandle(notification_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NotificationService_Post_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->notification_data, handles);
  mojo::internal::EncodeHandle(&this->client, handles);
  mojo::internal::EncodeHandle(&this->notification, handles);
}

void NotificationService_Post_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->notification_data, handles);
  mojo::internal::DecodeHandle(&this->client, handles);
  mojo::internal::DecodeHandle(&this->notification, handles);
}

NotificationService_Post_Params_Data::NotificationService_Post_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError NotificationClientRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'NotificationClient', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::NotificationClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NotificationClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NotificationClient_Base::MessageOrdinals::OnSelected: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NotificationClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NotificationClient_OnSelected_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NotificationClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NotificationClient_Base::MessageOrdinals::OnDismissed: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NotificationClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NotificationClient_OnDismissed_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NotificationClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'NotificationClient'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError NotificationRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'Notification', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::Notification_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Notification_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Notification_Base::MessageOrdinals::Update: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Notification', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Notification_Update_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Notification', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Notification_Base::MessageOrdinals::Cancel: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Notification', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Notification_Cancel_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Notification', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'Notification'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError NotificationServiceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'NotificationService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::NotificationService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NotificationService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NotificationService_Base::MessageOrdinals::Post: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NotificationService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NotificationService_Post_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NotificationService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'NotificationService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::NotificationClient_Base::Version_;

// Constants

// Enums
const uint32_t internal::Notification_Base::Version_;

// Constants

// Enums
const char internal::NotificationService_Base::Name_[] = "notifications::NotificationService";
const uint32_t internal::NotificationService_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
NotificationDataPtr NotificationData::New() {
  NotificationDataPtr rv;
  mojo::internal::StructHelper<NotificationData>::Initialize(&rv);
  return rv;
}

NotificationData::NotificationData()
    : title(),
      text(),
      play_sound(),
      vibrate(),
      set_lights() {
}

NotificationData::~NotificationData() {
}


NotificationDataPtr NotificationData::Clone() const {
  NotificationDataPtr rv(New());
  rv->title = title;
  rv->text = text;
  rv->play_sound = play_sound;
  rv->vibrate = vibrate;
  rv->set_lights = set_lights;
  return rv;
}


bool NotificationData::Equals(const NotificationData& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->title, other.title))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->text, other.text))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->play_sound, other.play_sound))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->vibrate, other.vibrate))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->set_lights, other.set_lights))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t NotificationData::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NotificationData::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NotificationData_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NotificationData::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NotificationData_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NotificationData::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NotificationData_Data* input =
      static_cast<internal::NotificationData_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NotificationData& input) {
  size_t size = sizeof(internal::NotificationData_Data);
  size += GetSerializedSize_(input.title);
  size += GetSerializedSize_(input.text);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NotificationData* input,
    mojo::internal::Buffer* buf,
    internal::NotificationData_Data** output) {
  if (input) {
    internal::NotificationData_Data* result =
        internal::NotificationData_Data::New(buf);
    SerializeString_(input->title, buf, &result->title.ptr);
    SerializeString_(input->text, buf, &result->text.ptr);
    result->play_sound = input->play_sound;
    result->vibrate = input->vibrate;
    result->set_lights = input->set_lights;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NotificationData_Data* input,
                  NotificationData* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->title.ptr, &result->title);
      Deserialize_(input->text.ptr, &result->text);
      result->play_sound = input->play_sound;
      result->vibrate = input->vibrate;
      result->set_lights = input->set_lights;
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
NotificationClient_OnSelected_ParamsPtr NotificationClient_OnSelected_Params::New() {
  NotificationClient_OnSelected_ParamsPtr rv;
  mojo::internal::StructHelper<NotificationClient_OnSelected_Params>::Initialize(&rv);
  return rv;
}

NotificationClient_OnSelected_Params::NotificationClient_OnSelected_Params() {
}

NotificationClient_OnSelected_Params::~NotificationClient_OnSelected_Params() {
}


NotificationClient_OnSelected_ParamsPtr NotificationClient_OnSelected_Params::Clone() const {
  NotificationClient_OnSelected_ParamsPtr rv(New());
  return rv;
}


bool NotificationClient_OnSelected_Params::Equals(const NotificationClient_OnSelected_Params& other) const {
  return true;
}


size_t NotificationClient_OnSelected_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NotificationClient_OnSelected_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NotificationClient_OnSelected_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NotificationClient_OnSelected_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NotificationClient_OnSelected_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NotificationClient_OnSelected_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NotificationClient_OnSelected_Params_Data* input =
      static_cast<internal::NotificationClient_OnSelected_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NotificationClient_OnSelected_Params& input) {
  size_t size = sizeof(internal::NotificationClient_OnSelected_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NotificationClient_OnSelected_Params* input,
    mojo::internal::Buffer* buf,
    internal::NotificationClient_OnSelected_Params_Data** output) {
  if (input) {
    internal::NotificationClient_OnSelected_Params_Data* result =
        internal::NotificationClient_OnSelected_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NotificationClient_OnSelected_Params_Data* input,
                  NotificationClient_OnSelected_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
NotificationClient_OnDismissed_ParamsPtr NotificationClient_OnDismissed_Params::New() {
  NotificationClient_OnDismissed_ParamsPtr rv;
  mojo::internal::StructHelper<NotificationClient_OnDismissed_Params>::Initialize(&rv);
  return rv;
}

NotificationClient_OnDismissed_Params::NotificationClient_OnDismissed_Params() {
}

NotificationClient_OnDismissed_Params::~NotificationClient_OnDismissed_Params() {
}


NotificationClient_OnDismissed_ParamsPtr NotificationClient_OnDismissed_Params::Clone() const {
  NotificationClient_OnDismissed_ParamsPtr rv(New());
  return rv;
}


bool NotificationClient_OnDismissed_Params::Equals(const NotificationClient_OnDismissed_Params& other) const {
  return true;
}


size_t NotificationClient_OnDismissed_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NotificationClient_OnDismissed_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NotificationClient_OnDismissed_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NotificationClient_OnDismissed_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NotificationClient_OnDismissed_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NotificationClient_OnDismissed_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NotificationClient_OnDismissed_Params_Data* input =
      static_cast<internal::NotificationClient_OnDismissed_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NotificationClient_OnDismissed_Params& input) {
  size_t size = sizeof(internal::NotificationClient_OnDismissed_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NotificationClient_OnDismissed_Params* input,
    mojo::internal::Buffer* buf,
    internal::NotificationClient_OnDismissed_Params_Data** output) {
  if (input) {
    internal::NotificationClient_OnDismissed_Params_Data* result =
        internal::NotificationClient_OnDismissed_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NotificationClient_OnDismissed_Params_Data* input,
                  NotificationClient_OnDismissed_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
Notification_Update_ParamsPtr Notification_Update_Params::New() {
  Notification_Update_ParamsPtr rv;
  mojo::internal::StructHelper<Notification_Update_Params>::Initialize(&rv);
  return rv;
}

Notification_Update_Params::Notification_Update_Params()
    : notification_data() {
}

Notification_Update_Params::~Notification_Update_Params() {
}


Notification_Update_ParamsPtr Notification_Update_Params::Clone() const {
  Notification_Update_ParamsPtr rv(New());
  rv->notification_data = notification_data.Clone();
  return rv;
}


bool Notification_Update_Params::Equals(const Notification_Update_Params& other) const {
  if (!mojo::internal::ValueTraits<NotificationDataPtr>::Equals(this->notification_data, other.notification_data))
    return false;
  return true;
}


size_t Notification_Update_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Notification_Update_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Notification_Update_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Notification_Update_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Notification_Update_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Notification_Update_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Notification_Update_Params_Data* input =
      static_cast<internal::Notification_Update_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Notification_Update_Params& input) {
  size_t size = sizeof(internal::Notification_Update_Params_Data);
  size += input.notification_data.is_null()
              ? 0
              : GetSerializedSize_(*input.notification_data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Notification_Update_Params* input,
    mojo::internal::Buffer* buf,
    internal::Notification_Update_Params_Data** output) {
  if (input) {
    internal::Notification_Update_Params_Data* result =
        internal::Notification_Update_Params_Data::New(buf);
    {auto retval =Serialize_(input->notification_data.get(),
                 buf,
                 &result->notification_data.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->notification_data.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null notification_data in Notification_Update_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Notification_Update_Params_Data* input,
                  Notification_Update_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->notification_data.ptr) {
        result->notification_data = NotificationData::New();
        Deserialize_(input->notification_data.ptr, result->notification_data.get());
      }
    } while (false);
  }
}



// static
Notification_Cancel_ParamsPtr Notification_Cancel_Params::New() {
  Notification_Cancel_ParamsPtr rv;
  mojo::internal::StructHelper<Notification_Cancel_Params>::Initialize(&rv);
  return rv;
}

Notification_Cancel_Params::Notification_Cancel_Params() {
}

Notification_Cancel_Params::~Notification_Cancel_Params() {
}


Notification_Cancel_ParamsPtr Notification_Cancel_Params::Clone() const {
  Notification_Cancel_ParamsPtr rv(New());
  return rv;
}


bool Notification_Cancel_Params::Equals(const Notification_Cancel_Params& other) const {
  return true;
}


size_t Notification_Cancel_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Notification_Cancel_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Notification_Cancel_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Notification_Cancel_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Notification_Cancel_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Notification_Cancel_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Notification_Cancel_Params_Data* input =
      static_cast<internal::Notification_Cancel_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Notification_Cancel_Params& input) {
  size_t size = sizeof(internal::Notification_Cancel_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Notification_Cancel_Params* input,
    mojo::internal::Buffer* buf,
    internal::Notification_Cancel_Params_Data** output) {
  if (input) {
    internal::Notification_Cancel_Params_Data* result =
        internal::Notification_Cancel_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Notification_Cancel_Params_Data* input,
                  Notification_Cancel_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
NotificationService_Post_ParamsPtr NotificationService_Post_Params::New() {
  NotificationService_Post_ParamsPtr rv;
  mojo::internal::StructHelper<NotificationService_Post_Params>::Initialize(&rv);
  return rv;
}

NotificationService_Post_Params::NotificationService_Post_Params()
    : notification_data(),
      client(),
      notification() {
}

NotificationService_Post_Params::~NotificationService_Post_Params() {
}



bool NotificationService_Post_Params::Equals(const NotificationService_Post_Params& other) const {
  if (!mojo::internal::ValueTraits<NotificationDataPtr>::Equals(this->notification_data, other.notification_data))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<NotificationClient>>::Equals(this->client, other.client))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<Notification>>::Equals(this->notification, other.notification))
    return false;
  return true;
}


size_t NotificationService_Post_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NotificationService_Post_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NotificationService_Post_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NotificationService_Post_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NotificationService_Post_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NotificationService_Post_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NotificationService_Post_Params_Data* input =
      static_cast<internal::NotificationService_Post_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NotificationService_Post_Params& input) {
  size_t size = sizeof(internal::NotificationService_Post_Params_Data);
  size += input.notification_data.is_null()
              ? 0
              : GetSerializedSize_(*input.notification_data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NotificationService_Post_Params* input,
    mojo::internal::Buffer* buf,
    internal::NotificationService_Post_Params_Data** output) {
  if (input) {
    internal::NotificationService_Post_Params_Data* result =
        internal::NotificationService_Post_Params_Data::New(buf);
    {auto retval =Serialize_(input->notification_data.get(),
                 buf,
                 &result->notification_data.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->notification_data.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null notification_data in NotificationService_Post_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    mojo::internal::InterfaceHandleToData(input->client.Pass(),
                                          &result->client);
    result->notification = input->notification.PassMessagePipe().release();
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NotificationService_Post_Params_Data* input,
                  NotificationService_Post_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->notification_data.ptr) {
        result->notification_data = NotificationData::New();
        Deserialize_(input->notification_data.ptr, result->notification_data.get());
      }
      mojo::internal::InterfaceDataToHandle(&input->client, &result->client);
      result->notification.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->notification)));
    } while (false);
  }
}

}  // namespace notifications
