// NOTE: This file was generated by the Mojo bindings generator.
#ifndef EXAMPLES_INDIRECT_SERVICE_INDIRECT_SERVICE_DEMO_MOJOM_H_
#define EXAMPLES_INDIRECT_SERVICE_INDIRECT_SERVICE_DEMO_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "examples/indirect_service/indirect_service_demo.mojom-common.h"
namespace mojo {
namespace examples {

// --- Interface Forward Declarations ---

using IntegerServicePtr = mojo::InterfacePtr<IntegerService>;

using IndirectIntegerServicePtr = mojo::InterfacePtr<IndirectIntegerService>;


// --- Interface Proxies ---


class IntegerServiceProxy
    : public IntegerService,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit IntegerServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  void Increment(
      const IncrementCallback& callback
  ) override;
};


class IndirectIntegerServiceProxy
    : public IndirectIntegerService,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit IndirectIntegerServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  void Set(
      mojo::InterfaceHandle<IntegerService> service
  ) override;
  void Get(
      mojo::InterfaceRequest<IntegerService> service
  ) override;
};


// --- Interface Stubs ---

class IntegerServiceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  IntegerServiceStub();
  ~IntegerServiceStub() override;
  void set_sink(IntegerService* sink) { sink_ = sink; }
  IntegerService* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  IntegerService* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class IndirectIntegerServiceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  IndirectIntegerServiceStub();
  ~IndirectIntegerServiceStub() override;
  void set_sink(IndirectIntegerService* sink) { sink_ = sink; }
  IndirectIntegerService* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  IndirectIntegerService* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace examples
}  // namespace mojo

#endif  // EXAMPLES_INDIRECT_SERVICE_INDIRECT_SERVICE_DEMO_MOJOM_H_
