// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/application/service_provider.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---

ServiceProviderProxy::ServiceProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ServiceProviderProxy::ConnectToService(
    const mojo::String& in_interface_name, mojo::ScopedMessagePipeHandle in_pipe) {
  size_t size = sizeof(internal::ServiceProvider_ConnectToService_Params_Data);
  size += GetSerializedSize_(in_interface_name);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ServiceProvider_Base::MessageOrdinals::ConnectToService), size);

  internal::ServiceProvider_ConnectToService_Params_Data* params =
      internal::ServiceProvider_ConnectToService_Params_Data::New(builder.buffer());
  SerializeString_(in_interface_name, builder.buffer(), &params->interface_name.ptr);
  if (!params->interface_name.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null interface_name in ServiceProvider.ConnectToService request");
  }
  params->pipe = in_pipe.release();
  if (!params->pipe.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid pipe in ServiceProvider.ConnectToService request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ServiceProviderStub::ServiceProviderStub()
    : sink_(nullptr),
      control_message_handler_(ServiceProvider::Version_) {
}

ServiceProviderStub::~ServiceProviderStub() {}

bool ServiceProviderStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ServiceProvider_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceProvider_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceProvider_Base::MessageOrdinals::ConnectToService: {
      internal::ServiceProvider_ConnectToService_Params_Data* params =
          reinterpret_cast<internal::ServiceProvider_ConnectToService_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_interface_name {};
      mojo::ScopedMessagePipeHandle p_pipe {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->interface_name.ptr, &p_interface_name);
        p_pipe.reset(mojo::internal::FetchAndReset(&params->pipe));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ConnectToService(p_interface_name, p_pipe.Pass());
      return true;
    }
  }
  return false;
}

bool ServiceProviderStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ServiceProvider_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceProvider_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceProvider_Base::MessageOrdinals::ConnectToService: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
