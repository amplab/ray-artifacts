// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SHELL_APPLICATION_MANAGER_TEST_MOJOM_H_
#define SHELL_APPLICATION_MANAGER_TEST_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "shell/application_manager/test.mojom-common.h"
namespace shell {

// --- Interface Forward Declarations ---

using TestServicePtr = mojo::InterfacePtr<TestService>;

using TestAPtr = mojo::InterfacePtr<TestA>;

using TestBPtr = mojo::InterfacePtr<TestB>;

using TestCPtr = mojo::InterfacePtr<TestC>;


// --- Interface Proxies ---


class TestServiceProxy
    : public TestService,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TestServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  void Test(
      const mojo::String& test_string, const TestCallback& callback
  ) override;
};


class TestAProxy
    : public TestA,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TestAProxy(mojo::MessageReceiverWithResponder* receiver);
  void CallB(
      
  ) override;
};


class TestBProxy
    : public TestB,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TestBProxy(mojo::MessageReceiverWithResponder* receiver);
  void B(
      const BCallback& callback
  ) override;
};


class TestCProxy
    : public TestC,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TestCProxy(mojo::MessageReceiverWithResponder* receiver);
  void C(
      const CCallback& callback
  ) override;
};


// --- Interface Stubs ---

class TestServiceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TestServiceStub();
  ~TestServiceStub() override;
  void set_sink(TestService* sink) { sink_ = sink; }
  TestService* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TestService* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class TestAStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TestAStub();
  ~TestAStub() override;
  void set_sink(TestA* sink) { sink_ = sink; }
  TestA* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TestA* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class TestBStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TestBStub();
  ~TestBStub() override;
  void set_sink(TestB* sink) { sink_ = sink; }
  TestB* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TestB* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class TestCStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TestCStub();
  ~TestCStub() override;
  void set_sink(TestC* sink) { sink_ = sink; }
  TestC* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TestC* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace shell

#endif  // SHELL_APPLICATION_MANAGER_TEST_MOJOM_H_
