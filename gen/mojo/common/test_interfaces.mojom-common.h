// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_COMMON_TEST_INTERFACES_MOJOM_COMMON_H_
#define MOJO_COMMON_TEST_INTERFACES_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/common/test_interfaces.mojom-internal.h"
namespace mojo {
namespace common {
namespace tests {

// --- Interface Forward Declarations ---
class Dummy;
class DummyRequestValidator;
class Dummy_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Dummy_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = DummyRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = Dummy_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Foo = 0,
  };


  virtual ~Dummy_Base() {}
};

}  // namespace internal

// Async interface declaration

class DummyProxy;
class DummyStub;
class Dummy_Synchronous;

class DummyRequestValidator;

class Dummy : public internal::Dummy_Base {
 public:
  virtual ~Dummy() override {}

  using Proxy_ = DummyProxy;
  using Stub_ = DummyStub;
  virtual void Foo() = 0;
};

}  // namespace tests
}  // namespace common
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {
namespace common {
namespace tests {

// --- Interface Request Validators ---
class DummyRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Dummy_Foo_Params;

using Dummy_Foo_ParamsPtr = mojo::InlinedStructPtr<Dummy_Foo_Params>;


size_t GetSerializedSize_(const Dummy_Foo_Params& input);
mojo::internal::ValidationError Serialize_(
    Dummy_Foo_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Dummy_Foo_Params_Data** output);
void Deserialize_(internal::Dummy_Foo_Params_Data* input,
                  Dummy_Foo_Params* output);

class Dummy_Foo_Params {
 public:
  using Data_ = internal::Dummy_Foo_Params_Data;

  static Dummy_Foo_ParamsPtr New();

  template <typename U>
  static Dummy_Foo_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Dummy_Foo_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Dummy_Foo_Params>::Convert(*this);
  }

  Dummy_Foo_Params();
  ~Dummy_Foo_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Dummy_Foo_ParamsPtr Clone() const;
  bool Equals(const Dummy_Foo_Params& other) const;

};



}  // namespace tests
}  // namespace common
}  // namespace mojo

#endif  // MOJO_COMMON_TEST_INTERFACES_MOJOM_COMMON_H_
