// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-common.h"
namespace regression_tests {

// --- Interface Forward Declarations ---

using CheckMethodWithEmptyResponsePtr = mojo::InterfacePtr<CheckMethodWithEmptyResponse>;

using CheckNameCollisionPtr = mojo::InterfacePtr<CheckNameCollision>;

using CheckEnumCapsPtr = mojo::InterfacePtr<CheckEnumCaps>;

using TestInterfacePtr = mojo::InterfacePtr<TestInterface>;

using Regression551Ptr = mojo::InterfacePtr<Regression551>;

using ServiceNamePtr = mojo::InterfacePtr<ServiceName>;


// --- Interface Proxies ---


class CheckMethodWithEmptyResponseProxy
    : public CheckMethodWithEmptyResponse,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CheckMethodWithEmptyResponseProxy(mojo::MessageReceiverWithResponder* receiver);
  void WithoutParameterAndEmptyResponse(
      const WithoutParameterAndEmptyResponseCallback& callback
  ) override;
  void WithParameterAndEmptyResponse(
      bool b, const WithParameterAndEmptyResponseCallback& callback
  ) override;
};


class CheckNameCollisionProxy
    : public CheckNameCollision,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CheckNameCollisionProxy(mojo::MessageReceiverWithResponder* receiver);
  void WithNameCollision(
      bool message, bool response, const WithNameCollisionCallback& callback
  ) override;
};


class CheckEnumCapsProxy
    : public CheckEnumCaps,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CheckEnumCapsProxy(mojo::MessageReceiverWithResponder* receiver);
  void SetEnumWithINTERNALAllCaps(
      EnumWithINTERNALAllCaps e
  ) override;
};


class TestInterfaceProxy
    : public TestInterface,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  void SomeMessage(
      
  ) override;
};


class Regression551Proxy
    : public Regression551,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit Regression551Proxy(mojo::MessageReceiverWithResponder* receiver);
  void Get(
      mojo::Array<mojo::String> key_prefixes, const GetCallback& callback
  ) override;
};


class ServiceNameProxy
    : public ServiceName,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit ServiceNameProxy(mojo::MessageReceiverWithResponder* receiver);
  void serviceName(
      const serviceNameCallback& callback
  ) override;
};


// --- Interface Stubs ---

class CheckMethodWithEmptyResponseStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CheckMethodWithEmptyResponseStub();
  ~CheckMethodWithEmptyResponseStub() override;
  void set_sink(CheckMethodWithEmptyResponse* sink) { sink_ = sink; }
  CheckMethodWithEmptyResponse* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CheckMethodWithEmptyResponse* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class CheckNameCollisionStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CheckNameCollisionStub();
  ~CheckNameCollisionStub() override;
  void set_sink(CheckNameCollision* sink) { sink_ = sink; }
  CheckNameCollision* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CheckNameCollision* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class CheckEnumCapsStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CheckEnumCapsStub();
  ~CheckEnumCapsStub() override;
  void set_sink(CheckEnumCaps* sink) { sink_ = sink; }
  CheckEnumCaps* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CheckEnumCaps* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class TestInterfaceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TestInterfaceStub();
  ~TestInterfaceStub() override;
  void set_sink(TestInterface* sink) { sink_ = sink; }
  TestInterface* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TestInterface* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class Regression551Stub : public mojo::MessageReceiverWithResponderStatus {
 public:
  Regression551Stub();
  ~Regression551Stub() override;
  void set_sink(Regression551* sink) { sink_ = sink; }
  Regression551* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  Regression551* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class ServiceNameStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  ServiceNameStub();
  ~ServiceNameStub() override;
  void set_sink(ServiceName* sink) { sink_ = sink; }
  ServiceName* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  ServiceName* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace regression_tests

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_H_
