// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/bindings/tests/test_constants.mojom
//

package test_constants

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	ioutil "io/ioutil"
	base64 "encoding/base64"
	fmt "fmt"
	bytes "bytes"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	gzip "compress/gzip"
)

// This global variable contains a mojom_types.RuntimeTypeInfo struct
// describing the types defined in this file and all of its imports as
// well as the top-level interfaces defined in this file.
var runtimeTypeInfo__ = mojom_types.RuntimeTypeInfo{}

func getRuntimeTypeInfo() mojom_types.RuntimeTypeInfo {
  if runtimeTypeInfo__.TypeMap == nil {
    initRuntimeTypeInfo()
  }
  return runtimeTypeInfo__
}

func initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this file.
  // The string contains the base64 encoding of the gzip-compressed bytes.
  serializedRuntimeTypeInfo := "H4sIAAAJbogC/5JggAABKG0ApdHFYTQHGo2urgNJnAlJ3AFKGwKxJhCHRAa4xnu7Rlrl5mfl65WkFpfoeeaVpBalJSanhmeWZDjn5xWXJOaVFEP16QGxGnZ9wSVFpcklaJo0kOxnRnMnI8j9TBC+BlRcgQEVHGBE5TugycPCyQNK/4eCBCj/App6OSAWA2JcntSAuoFQcKCHNyg8uYA4DojDgFg/Iz83Vb8gOTe/KLOkSr8osVI3Ob8oVb+4KFkfZLZ+QWlSTmayfibM9GL9pMy8lMy89GJ9kLUQMj4ZZp8eSFMuIvwYsMQ/cjzDwsMOiM1IiWe97FCgm4yNwhJzSlPJ0u+SD/RaKlQ/selXAS0dw+IdRlMa79JALAzEWBMpEKgCsSxKvGNXie4fHSBmH4TxbglNk8TlU71sYGRaQKMMDKyA2IgE/W45+YklSAZwoOdztPhF9wcgAAD//y786BIABQAA"

  // Deserialize RuntimeTypeInfo
  compressedBytes, err := base64.StdEncoding.DecodeString(serializedRuntimeTypeInfo)
  if err != nil {
    panic(fmt.Sprintf("Error while base64Decoding runtimeTypeInfo: %s", err.Error()))
  }
  reader, err := gzip.NewReader(bytes.NewBuffer(compressedBytes))
  if err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  uncompressedBytes, err := ioutil.ReadAll(reader)
  if err != nil {
     panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  if err = reader.Close(); err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  decoder := bindings.NewDecoder(uncompressedBytes, nil)
  runtimeTypeInfo__.Decode(decoder)

}
func GetAllMojomTypeDefinitions() map[string]mojom_types.UserDefinedType {
  return getRuntimeTypeInfo().TypeMap
}

type InterfaceWithConstants interface {
}


// InterfaceWithConstantsMojomType returns the UserDefinedType that describes the Mojom
// type of InterfaceWithConstants. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func InterfaceWithConstantsMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:mojo.test.InterfaceWithConstants"]
}




type InterfaceWithConstants_Request bindings.InterfaceRequest


// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*InterfaceWithConstants_Request) MojomType() mojom_types.UserDefinedType {
	return InterfaceWithConstantsMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*InterfaceWithConstants_Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


type InterfaceWithConstants_Pointer bindings.InterfacePointer


type InterfaceWithConstants_ServiceFactory struct{
	Delegate InterfaceWithConstants_Factory
}

type InterfaceWithConstants_Factory interface {
	Create(request InterfaceWithConstants_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *InterfaceWithConstants_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &InterfaceWithConstants_ServiceDescription{}
}

func (f *InterfaceWithConstants_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := InterfaceWithConstants_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForInterfaceWithConstants creates a message pipe for use with the
// InterfaceWithConstants interface with a InterfaceWithConstants_Request on one end and a InterfaceWithConstants_Pointer on the other.
func CreateMessagePipeForInterfaceWithConstants() (InterfaceWithConstants_Request, InterfaceWithConstants_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return InterfaceWithConstants_Request(r), InterfaceWithConstants_Pointer(p)
}


type InterfaceWithConstants_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewInterfaceWithConstantsProxy(p InterfaceWithConstants_Pointer, waiter bindings.AsyncWaiter) *InterfaceWithConstants_Proxy {
	return &InterfaceWithConstants_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *InterfaceWithConstants_Proxy) Close_Proxy() {
	p.router.Close()
}

type interfaceWithConstants_Stub struct {
	connector *bindings.Connector
	impl InterfaceWithConstants
}

func NewInterfaceWithConstantsStub(r InterfaceWithConstants_Request, impl InterfaceWithConstants, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &interfaceWithConstants_Stub{connector, impl})
}


func (f *InterfaceWithConstants_Request) ServiceDescription() service_describer.ServiceDescription {
	return &InterfaceWithConstants_ServiceDescription{}
}


type InterfaceWithConstants_ServiceDescription struct{}

func (sd *InterfaceWithConstants_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *InterfaceWithConstants_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *InterfaceWithConstants_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*InterfaceWithConstants_ServiceDescription)(nil)


func (s *interfaceWithConstants_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type StructWithConstants struct {
}
// StructWithConstantsMojomType returns the UserDefinedType that describes the Mojom
// type of StructWithConstants. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func StructWithConstantsMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:mojo.test.StructWithConstants"]
}



// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*StructWithConstants) MojomType() mojom_types.UserDefinedType {
	return StructWithConstantsMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*StructWithConstants) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


func (s *StructWithConstants) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var structWithConstants_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *StructWithConstants) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(structWithConstants_Versions), func(i int) bool {
		return structWithConstants_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(structWithConstants_Versions) {
		if structWithConstants_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := structWithConstants_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

