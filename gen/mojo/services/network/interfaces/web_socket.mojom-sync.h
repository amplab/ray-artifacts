// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_SYNC_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/network/interfaces/web_socket.mojom-internal.h"
#include "mojo/services/network/interfaces/web_socket.mojom-common.h"
#include "mojo/public/interfaces/network/network_error.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class WebSocket_SynchronousProxy;
class WebSocket_Synchronous
  : public internal::WebSocket_Base {
 public:
  virtual ~WebSocket_Synchronous() override {}
  
  using Proxy_ = WebSocket_SynchronousProxy;
  virtual bool Connect(
      const mojo::String& in_url, mojo::Array<mojo::String> in_protocols, const mojo::String& in_origin, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::InterfaceHandle<WebSocketClient> in_client)const= 0;
  virtual bool Send(
      bool in_fin, WebSocket::MessageType in_type, uint32_t in_num_bytes)const= 0;
  virtual bool FlowControl(
      int64_t in_quota)const= 0;
  virtual bool Close(
      uint16_t in_code, const mojo::String& in_reason)const= 0;
};

class WebSocket_SynchronousProxy
    : public WebSocket_Synchronous {
 public:
  explicit WebSocket_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Connect(const mojo::String& in_url, mojo::Array<mojo::String> in_protocols, const mojo::String& in_origin, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::InterfaceHandle<WebSocketClient> in_client) const  override;
  bool Send(bool in_fin, WebSocket::MessageType in_type, uint32_t in_num_bytes) const  override;
  bool FlowControl(int64_t in_quota) const  override;
  bool Close(uint16_t in_code, const mojo::String& in_reason) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class WebSocketClient_SynchronousProxy;
class WebSocketClient_Synchronous
  : public internal::WebSocketClient_Base {
 public:
  virtual ~WebSocketClient_Synchronous() override {}
  
  using Proxy_ = WebSocketClient_SynchronousProxy;
  virtual bool DidConnect(
      const mojo::String& in_selected_subprotocol, const mojo::String& in_extensions, mojo::ScopedDataPipeConsumerHandle in_receive_stream)const= 0;
  virtual bool DidReceiveData(
      bool in_fin, WebSocket::MessageType in_type, uint32_t in_num_bytes)const= 0;
  virtual bool DidReceiveFlowControl(
      int64_t in_quota)const= 0;
  virtual bool DidFail(
      const mojo::String& in_message)const= 0;
  virtual bool DidClose(
      bool in_was_clean, uint16_t in_code, const mojo::String& in_reason)const= 0;
};

class WebSocketClient_SynchronousProxy
    : public WebSocketClient_Synchronous {
 public:
  explicit WebSocketClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool DidConnect(const mojo::String& in_selected_subprotocol, const mojo::String& in_extensions, mojo::ScopedDataPipeConsumerHandle in_receive_stream) const  override;
  bool DidReceiveData(bool in_fin, WebSocket::MessageType in_type, uint32_t in_num_bytes) const  override;
  bool DidReceiveFlowControl(int64_t in_quota) const  override;
  bool DidFail(const mojo::String& in_message) const  override;
  bool DidClose(bool in_was_clean, uint16_t in_code, const mojo::String& in_reason) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_SYNC_H_
