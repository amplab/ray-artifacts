// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library ping_service_mojom;
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/mojom_types.mojom.dart' as mojom_types;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _PingServicePingParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _PingServicePingParams() : super(kVersions.last.size);

  _PingServicePingParams.init(
  ) : super(kVersions.last.size);

  static _PingServicePingParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingServicePingParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingServicePingParams result = new _PingServicePingParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingServicePingParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingServicePingParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class PingServicePingResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  PingServicePingResponseParams() : super(kVersions.last.size);

  PingServicePingResponseParams.init(
  ) : super(kVersions.last.size);

  static PingServicePingResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PingServicePingResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PingServicePingResponseParams result = new PingServicePingResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PingServicePingResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PingServicePingResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _pingServiceMethodPingName = 0;

class _PingServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class PingService {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _PingServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static PingServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    PingServiceProxy p = new PingServiceProxy.unbound();
    String name = serviceName ?? PingService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void ping(void callback());
}

abstract class PingServiceInterface
    implements bindings.MojoInterface<PingService>,
               PingService {
  factory PingServiceInterface([PingService impl]) =>
      new PingServiceStub.unbound(impl);

  factory PingServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [PingService impl]) =>
      new PingServiceStub.fromEndpoint(endpoint, impl);

  factory PingServiceInterface.fromMock(
      PingService mock) =>
      new PingServiceProxy.fromMock(mock);
}

abstract class PingServiceInterfaceRequest
    implements bindings.MojoInterface<PingService>,
               PingService {
  factory PingServiceInterfaceRequest() =>
      new PingServiceProxy.unbound();
}

class _PingServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<PingService> {
  PingService impl;

  _PingServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _PingServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _PingServiceProxyControl.unbound() : super.unbound();

  String get serviceName => PingService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _pingServiceMethodPingName:
        var r = PingServicePingResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingServiceProxyControl($superString)";
  }
}

class PingServiceProxy
    extends bindings.Proxy<PingService>
    implements PingService,
               PingServiceInterface,
               PingServiceInterfaceRequest {
  PingServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _PingServiceProxyControl.fromEndpoint(endpoint));

  PingServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _PingServiceProxyControl.fromHandle(handle));

  PingServiceProxy.unbound()
      : super(new _PingServiceProxyControl.unbound());

  factory PingServiceProxy.fromMock(PingService mock) {
    PingServiceProxy newMockedProxy =
        new PingServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static PingServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingServiceProxy"));
    return new PingServiceProxy.fromEndpoint(endpoint);
  }


  void ping(void callback()) {
    if (impl != null) {
      impl.ping(callback);
      return;
    }
    var params = new _PingServicePingParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _pingServiceMethodPingName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _PingServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<PingService> {
  PingService _impl;

  _PingServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PingService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingServiceStubControl.fromHandle(
      core.MojoHandle handle, [PingService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => PingService.serviceName;


  Function _pingServicePingResponseParamsResponder(
      int requestId) {
  return () {
      var result = new PingServicePingResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _pingServiceMethodPingName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _pingServiceMethodPingName:
        _impl.ping(_pingServicePingResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  PingService get impl => _impl;
  set impl(PingService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingServiceStubControl($superString)";
  }

  int get version => 0;
}

class PingServiceStub
    extends bindings.Stub<PingService>
    implements PingService,
               PingServiceInterface,
               PingServiceInterfaceRequest {
  PingServiceStub.unbound([PingService impl])
      : super(new _PingServiceStubControl.unbound(impl));

  PingServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PingService impl])
      : super(new _PingServiceStubControl.fromEndpoint(endpoint, impl));

  PingServiceStub.fromHandle(
      core.MojoHandle handle, [PingService impl])
      : super(new _PingServiceStubControl.fromHandle(handle, impl));

  static PingServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingServiceStub"));
    return new PingServiceStub.fromEndpoint(endpoint);
  }


  void ping(void callback()) {
    return impl.ping(callback);
  }
}


mojom_types.RuntimeTypeInfo getRuntimeTypeInfo() => _runtimeTypeInfo ??
    _initRuntimeTypeInfo();

Map<String, mojom_types.UserDefinedType> getAllMojomTypeDefinitions() {
  return getRuntimeTypeInfo().typeMap;
}

var _runtimeTypeInfo;
mojom_types.RuntimeTypeInfo  _initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this
  // file. The string contains the base64 encoding of the gzip-compressed bytes.
  var serializedRuntimeTypeInfo = "H4sIAAAJbogC/9RTTUvDQBRMVTD4AYIKvSg9iZfm5eypl568BPRSEEq7PnXFZONuKuiv7c/wpu+RDW6fCfRSwYFhutv9mJlt+1GNI6+pVznfaCxUrhsF416w7oJ4TrydZOPp9XhylZtnk1ToqiTTxeMN2jetsD6v5/dvB/svvQ4igd7qcCS+TsX8l0cWteOYuE9cMUU4I54SO2z/6mGXuEe848xEeDI5QqlyY3X1AXb2PlTGIjirgM+EcjF/0Qp0UaF9mCl0MNfFPd3hgK9zUNLnqasvTHhL3tZ/Mz4Q1cj3kH0uvX6u2WcU9BmeJ8E+dnyfbX7Zz9Yf9DQQ/SyFrpOTkXbkPPFZOefQ4uuCvLTlbbDpvHHHu/eFj1j8DjbVD/93Dn/6caUpHP6jfr4DAAD//zQMB0IoBQAA";

  // Deserialize RuntimeTypeInfo
  var bytes = BASE64.decode(serializedRuntimeTypeInfo);
  var unzippedBytes = new ZLibDecoder().convert(bytes);
  var bdata = new ByteData.view(unzippedBytes.buffer);
  var message = new bindings.Message(bdata, null, unzippedBytes.length, 0);
  _runtimeTypeInfo = mojom_types.RuntimeTypeInfo.deserialize(message);
  return _runtimeTypeInfo;
}
