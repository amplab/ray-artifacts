// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/camera/interfaces/camera.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class CameraRollService_GetCount_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CameraRollService_GetCount_ForwardToCallback(
      const CameraRollService::GetCountCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CameraRollService::GetCountCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CameraRollService_GetCount_ForwardToCallback);
};
bool CameraRollService_GetCount_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CameraRollService_GetCount_ResponseParams_Data* params =
      reinterpret_cast<internal::CameraRollService_GetCount_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint32_t p_num_photos {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_num_photos = params->num_photos;
  } while (false);
  callback_.Run(p_num_photos);
  return true;
}
class CameraRollService_GetPhoto_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CameraRollService_GetPhoto_ForwardToCallback(
      const CameraRollService::GetPhotoCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CameraRollService::GetPhotoCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CameraRollService_GetPhoto_ForwardToCallback);
};
bool CameraRollService_GetPhoto_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CameraRollService_GetPhoto_ResponseParams_Data* params =
      reinterpret_cast<internal::CameraRollService_GetPhoto_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  PhotoPtr p_photo {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->photo.ptr) {
      p_photo = Photo::New();
      Deserialize_(params->photo.ptr, p_photo.get());
    }
  } while (false);
  callback_.Run(p_photo.Pass());
  return true;
}

CameraRollServiceProxy::CameraRollServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CameraRollServiceProxy::Update(
    ) {
  size_t size = sizeof(internal::CameraRollService_Update_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CameraRollService_Base::MessageOrdinals::Update), size);

  internal::CameraRollService_Update_Params_Data* params =
      internal::CameraRollService_Update_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void CameraRollServiceProxy::GetCount(
    const GetCountCallback& callback) {
  size_t size = sizeof(internal::CameraRollService_GetCount_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CameraRollService_Base::MessageOrdinals::GetCount), size);

  internal::CameraRollService_GetCount_Params_Data* params =
      internal::CameraRollService_GetCount_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CameraRollService_GetCount_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void CameraRollServiceProxy::GetPhoto(
    uint32_t in_index, const GetPhotoCallback& callback) {
  size_t size = sizeof(internal::CameraRollService_GetPhoto_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CameraRollService_Base::MessageOrdinals::GetPhoto), size);

  internal::CameraRollService_GetPhoto_Params_Data* params =
      internal::CameraRollService_GetPhoto_Params_Data::New(builder.buffer());
  params->index = in_index;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CameraRollService_GetPhoto_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CameraRollService_GetCount_ProxyToResponder
    : public CameraRollService::GetCountCallback::Runnable {
 public:
  ~CameraRollService_GetCount_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CameraRollService::GetCount(callback) "
        "was never run.";
  }

  CameraRollService_GetCount_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint32_t in_num_photos) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CameraRollService_GetCount_ProxyToResponder);
};

void CameraRollService_GetCount_ProxyToResponder::Run(
    uint32_t in_num_photos) const {
  size_t size = sizeof(internal::CameraRollService_GetCount_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CameraRollService_Base::MessageOrdinals::GetCount), size, request_id_);
  internal::CameraRollService_GetCount_ResponseParams_Data* params =
      internal::CameraRollService_GetCount_ResponseParams_Data::New(builder.buffer());
  params->num_photos = in_num_photos;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CameraRollService_GetPhoto_ProxyToResponder
    : public CameraRollService::GetPhotoCallback::Runnable {
 public:
  ~CameraRollService_GetPhoto_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CameraRollService::GetPhoto(p_index, callback) "
        "was never run.";
  }

  CameraRollService_GetPhoto_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(PhotoPtr in_photo) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CameraRollService_GetPhoto_ProxyToResponder);
};

void CameraRollService_GetPhoto_ProxyToResponder::Run(
    PhotoPtr in_photo) const {
  size_t size = sizeof(internal::CameraRollService_GetPhoto_ResponseParams_Data);
  size += in_photo.is_null()
              ? 0
              : GetSerializedSize_(*in_photo);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CameraRollService_Base::MessageOrdinals::GetPhoto), size, request_id_);
  internal::CameraRollService_GetPhoto_ResponseParams_Data* params =
      internal::CameraRollService_GetPhoto_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_photo.get(),
               builder.buffer(),
               &params->photo.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

CameraRollServiceStub::CameraRollServiceStub()
    : sink_(nullptr),
      control_message_handler_(CameraRollService::Version_) {
}

CameraRollServiceStub::~CameraRollServiceStub() {}

bool CameraRollServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::CameraRollService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraRollService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraRollService_Base::MessageOrdinals::Update: {
      internal::CameraRollService_Update_Params_Data* params =
          reinterpret_cast<internal::CameraRollService_Update_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Update();
      return true;
    }
    case internal::CameraRollService_Base::MessageOrdinals::GetCount: {
      break;
    }
    case internal::CameraRollService_Base::MessageOrdinals::GetPhoto: {
      break;
    }
  }
  return false;
}

bool CameraRollServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::CameraRollService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraRollService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraRollService_Base::MessageOrdinals::Update: {
      break;
    }
    case internal::CameraRollService_Base::MessageOrdinals::GetCount: {
      internal::CameraRollService_GetCount_Params_Data* params =
          reinterpret_cast<internal::CameraRollService_GetCount_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CameraRollService::GetCountCallback::Runnable* runnable =
          new CameraRollService_GetCount_ProxyToResponder(
              message->request_id(), responder);
      CameraRollService::GetCountCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetCount(callback);
      return true;
    }
    case internal::CameraRollService_Base::MessageOrdinals::GetPhoto: {
      internal::CameraRollService_GetPhoto_Params_Data* params =
          reinterpret_cast<internal::CameraRollService_GetPhoto_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CameraRollService::GetPhotoCallback::Runnable* runnable =
          new CameraRollService_GetPhoto_ProxyToResponder(
              message->request_id(), responder);
      CameraRollService::GetPhotoCallback callback(runnable);
      
      uint32_t p_index {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_index = params->index;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetPhoto(p_index, callback);
      return true;
    }
  }
  return false;
}

class CameraService_GetLatestFrame_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CameraService_GetLatestFrame_ForwardToCallback(
      const CameraService::GetLatestFrameCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CameraService::GetLatestFrameCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CameraService_GetLatestFrame_ForwardToCallback);
};
bool CameraService_GetLatestFrame_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CameraService_GetLatestFrame_ResponseParams_Data* params =
      reinterpret_cast<internal::CameraService_GetLatestFrame_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::ScopedDataPipeConsumerHandle p_content {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_content.reset(mojo::internal::FetchAndReset(&params->content));
  } while (false);
  callback_.Run(p_content.Pass());
  return true;
}

CameraServiceProxy::CameraServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CameraServiceProxy::GetLatestFrame(
    const GetLatestFrameCallback& callback) {
  size_t size = sizeof(internal::CameraService_GetLatestFrame_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CameraService_Base::MessageOrdinals::GetLatestFrame), size);

  internal::CameraService_GetLatestFrame_Params_Data* params =
      internal::CameraService_GetLatestFrame_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CameraService_GetLatestFrame_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CameraService_GetLatestFrame_ProxyToResponder
    : public CameraService::GetLatestFrameCallback::Runnable {
 public:
  ~CameraService_GetLatestFrame_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CameraService::GetLatestFrame(callback) "
        "was never run.";
  }

  CameraService_GetLatestFrame_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::ScopedDataPipeConsumerHandle in_content) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CameraService_GetLatestFrame_ProxyToResponder);
};

void CameraService_GetLatestFrame_ProxyToResponder::Run(
    mojo::ScopedDataPipeConsumerHandle in_content) const {
  size_t size = sizeof(internal::CameraService_GetLatestFrame_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CameraService_Base::MessageOrdinals::GetLatestFrame), size, request_id_);
  internal::CameraService_GetLatestFrame_ResponseParams_Data* params =
      internal::CameraService_GetLatestFrame_ResponseParams_Data::New(builder.buffer());
  params->content = in_content.release();
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

CameraServiceStub::CameraServiceStub()
    : sink_(nullptr),
      control_message_handler_(CameraService::Version_) {
}

CameraServiceStub::~CameraServiceStub() {}

bool CameraServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::CameraService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraService_Base::MessageOrdinals::GetLatestFrame: {
      break;
    }
  }
  return false;
}

bool CameraServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::CameraService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CameraService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CameraService_Base::MessageOrdinals::GetLatestFrame: {
      internal::CameraService_GetLatestFrame_Params_Data* params =
          reinterpret_cast<internal::CameraService_GetLatestFrame_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CameraService::GetLatestFrameCallback::Runnable* runnable =
          new CameraService_GetLatestFrame_ProxyToResponder(
              message->request_id(), responder);
      CameraService::GetLatestFrameCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetLatestFrame(callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
