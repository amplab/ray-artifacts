// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/web_socket.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
WebSocket_Connect_Params_Data* WebSocket_Connect_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocket_Connect_Params_Data))) WebSocket_Connect_Params_Data();
}

// static
mojo::internal::ValidationError WebSocket_Connect_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocket_Connect_Params_Data* object = static_cast<const WebSocket_Connect_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 48 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->url.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null url field in WebSocket_Connect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->url.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams url_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->url.offset),
          bounds_checker, &url_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->protocols.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null protocols field in WebSocket_Connect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->protocols.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams protocols_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));
  auto validate_retval =
      mojo::Array<mojo::String>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->protocols.offset),
          bounds_checker, &protocols_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->origin.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null origin field in WebSocket_Connect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->origin.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams origin_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->origin.offset),
          bounds_checker, &origin_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle send_stream_handle = object->send_stream;
  if (send_stream_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid send_stream field in WebSocket_Connect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(send_stream_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle client_handle = object->client.handle;
  if (client_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid client field in WebSocket_Connect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(client_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocket_Connect_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->url, handles);
  mojo::internal::Encode(&this->protocols, handles);
  mojo::internal::Encode(&this->origin, handles);
  mojo::internal::EncodeHandle(&this->send_stream, handles);
  mojo::internal::EncodeHandle(&this->client, handles);
}

void WebSocket_Connect_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->url, handles);
  mojo::internal::Decode(&this->protocols, handles);
  mojo::internal::Decode(&this->origin, handles);
  mojo::internal::DecodeHandle(&this->send_stream, handles);
  mojo::internal::DecodeHandle(&this->client, handles);
}

WebSocket_Connect_Params_Data::WebSocket_Connect_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocket_Send_Params_Data* WebSocket_Send_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocket_Send_Params_Data))) WebSocket_Send_Params_Data();
}

// static
mojo::internal::ValidationError WebSocket_Send_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocket_Send_Params_Data* object = static_cast<const WebSocket_Send_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocket_Send_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void WebSocket_Send_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

WebSocket_Send_Params_Data::WebSocket_Send_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocket_FlowControl_Params_Data* WebSocket_FlowControl_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocket_FlowControl_Params_Data))) WebSocket_FlowControl_Params_Data();
}

// static
mojo::internal::ValidationError WebSocket_FlowControl_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocket_FlowControl_Params_Data* object = static_cast<const WebSocket_FlowControl_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocket_FlowControl_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void WebSocket_FlowControl_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

WebSocket_FlowControl_Params_Data::WebSocket_FlowControl_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocket_Close_Params_Data* WebSocket_Close_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocket_Close_Params_Data))) WebSocket_Close_Params_Data();
}

// static
mojo::internal::ValidationError WebSocket_Close_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocket_Close_Params_Data* object = static_cast<const WebSocket_Close_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->reason.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null reason field in WebSocket_Close_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->reason.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams reason_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->reason.offset),
          bounds_checker, &reason_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocket_Close_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->reason, handles);
}

void WebSocket_Close_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->reason, handles);
}

WebSocket_Close_Params_Data::WebSocket_Close_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocketClient_DidConnect_Params_Data* WebSocketClient_DidConnect_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocketClient_DidConnect_Params_Data))) WebSocketClient_DidConnect_Params_Data();
}

// static
mojo::internal::ValidationError WebSocketClient_DidConnect_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocketClient_DidConnect_Params_Data* object = static_cast<const WebSocketClient_DidConnect_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->selected_subprotocol.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null selected_subprotocol field in WebSocketClient_DidConnect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->selected_subprotocol.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams selected_subprotocol_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->selected_subprotocol.offset),
          bounds_checker, &selected_subprotocol_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->extensions.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null extensions field in WebSocketClient_DidConnect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->extensions.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams extensions_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->extensions.offset),
          bounds_checker, &extensions_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle receive_stream_handle = object->receive_stream;
  if (receive_stream_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid receive_stream field in WebSocketClient_DidConnect_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(receive_stream_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocketClient_DidConnect_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->selected_subprotocol, handles);
  mojo::internal::Encode(&this->extensions, handles);
  mojo::internal::EncodeHandle(&this->receive_stream, handles);
}

void WebSocketClient_DidConnect_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->selected_subprotocol, handles);
  mojo::internal::Decode(&this->extensions, handles);
  mojo::internal::DecodeHandle(&this->receive_stream, handles);
}

WebSocketClient_DidConnect_Params_Data::WebSocketClient_DidConnect_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocketClient_DidReceiveData_Params_Data* WebSocketClient_DidReceiveData_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocketClient_DidReceiveData_Params_Data))) WebSocketClient_DidReceiveData_Params_Data();
}

// static
mojo::internal::ValidationError WebSocketClient_DidReceiveData_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocketClient_DidReceiveData_Params_Data* object = static_cast<const WebSocketClient_DidReceiveData_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocketClient_DidReceiveData_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void WebSocketClient_DidReceiveData_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

WebSocketClient_DidReceiveData_Params_Data::WebSocketClient_DidReceiveData_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocketClient_DidReceiveFlowControl_Params_Data* WebSocketClient_DidReceiveFlowControl_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocketClient_DidReceiveFlowControl_Params_Data))) WebSocketClient_DidReceiveFlowControl_Params_Data();
}

// static
mojo::internal::ValidationError WebSocketClient_DidReceiveFlowControl_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocketClient_DidReceiveFlowControl_Params_Data* object = static_cast<const WebSocketClient_DidReceiveFlowControl_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocketClient_DidReceiveFlowControl_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void WebSocketClient_DidReceiveFlowControl_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

WebSocketClient_DidReceiveFlowControl_Params_Data::WebSocketClient_DidReceiveFlowControl_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocketClient_DidFail_Params_Data* WebSocketClient_DidFail_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocketClient_DidFail_Params_Data))) WebSocketClient_DidFail_Params_Data();
}

// static
mojo::internal::ValidationError WebSocketClient_DidFail_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocketClient_DidFail_Params_Data* object = static_cast<const WebSocketClient_DidFail_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->message.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null message field in WebSocketClient_DidFail_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->message.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams message_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->message.offset),
          bounds_checker, &message_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocketClient_DidFail_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->message, handles);
}

void WebSocketClient_DidFail_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->message, handles);
}

WebSocketClient_DidFail_Params_Data::WebSocketClient_DidFail_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
WebSocketClient_DidClose_Params_Data* WebSocketClient_DidClose_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(WebSocketClient_DidClose_Params_Data))) WebSocketClient_DidClose_Params_Data();
}

// static
mojo::internal::ValidationError WebSocketClient_DidClose_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const WebSocketClient_DidClose_Params_Data* object = static_cast<const WebSocketClient_DidClose_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->reason.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null reason field in WebSocketClient_DidClose_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->reason.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams reason_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->reason.offset),
          bounds_checker, &reason_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void WebSocketClient_DidClose_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->reason, handles);
}

void WebSocketClient_DidClose_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->reason, handles);
}

WebSocketClient_DidClose_Params_Data::WebSocketClient_DidClose_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError WebSocketRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'WebSocket', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::WebSocket_Base::MessageOrdinals method_ordinal =
      static_cast<internal::WebSocket_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::WebSocket_Base::MessageOrdinals::Connect: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocket_Connect_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::WebSocket_Base::MessageOrdinals::Send: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocket_Send_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::WebSocket_Base::MessageOrdinals::FlowControl: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocket_FlowControl_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::WebSocket_Base::MessageOrdinals::Close: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocket', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocket_Close_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocket', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'WebSocket'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError WebSocketClientRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'WebSocketClient', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::WebSocketClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::WebSocketClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::WebSocketClient_Base::MessageOrdinals::DidConnect: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocketClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocketClient_DidConnect_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocketClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::WebSocketClient_Base::MessageOrdinals::DidReceiveData: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocketClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocketClient_DidReceiveData_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocketClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::WebSocketClient_Base::MessageOrdinals::DidReceiveFlowControl: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocketClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocketClient_DidReceiveFlowControl_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocketClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::WebSocketClient_Base::MessageOrdinals::DidFail: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocketClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocketClient_DidFail_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocketClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::WebSocketClient_Base::MessageOrdinals::DidClose: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'WebSocketClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::WebSocketClient_DidClose_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'WebSocketClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'WebSocketClient'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::WebSocket_Base::Version_;

// Constants
const uint16_t internal::WebSocket_Base::kAbnormalCloseCode;

// Enums
  
// static
bool internal::WebSocket_Base::MessageType_IsValidValue(MessageType value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
    case 1:
    case 2:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream,
                         const internal::WebSocket_Base::MessageType& val) {
  return (stream << static_cast<int32_t>(val));
}
const uint32_t internal::WebSocketClient_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
WebSocket_Connect_ParamsPtr WebSocket_Connect_Params::New() {
  WebSocket_Connect_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocket_Connect_Params>::Initialize(&rv);
  return rv;
}

WebSocket_Connect_Params::WebSocket_Connect_Params()
    : url(),
      protocols(),
      origin(),
      send_stream(),
      client() {
}

WebSocket_Connect_Params::~WebSocket_Connect_Params() {
}



bool WebSocket_Connect_Params::Equals(const WebSocket_Connect_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->url, other.url))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::String>>::Equals(this->protocols, other.protocols))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->origin, other.origin))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->send_stream, other.send_stream))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<WebSocketClient>>::Equals(this->client, other.client))
    return false;
  return true;
}


size_t WebSocket_Connect_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocket_Connect_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocket_Connect_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocket_Connect_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocket_Connect_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocket_Connect_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocket_Connect_Params_Data* input =
      static_cast<internal::WebSocket_Connect_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocket_Connect_Params& input) {
  size_t size = sizeof(internal::WebSocket_Connect_Params_Data);
  size += GetSerializedSize_(input.url);
  size += GetSerializedSize_(input.protocols);
  size += GetSerializedSize_(input.origin);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocket_Connect_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocket_Connect_Params_Data** output) {
  if (input) {
    internal::WebSocket_Connect_Params_Data* result =
        internal::WebSocket_Connect_Params_Data::New(buf);
    SerializeString_(input->url, buf, &result->url.ptr);
    if (!result->url.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in WebSocket_Connect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams protocols_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));auto retval =mojo::SerializeArray_(&input->protocols, buf, &result->protocols.ptr,
                            &protocols_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->protocols.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null protocols in WebSocket_Connect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    SerializeString_(input->origin, buf, &result->origin.ptr);
    if (!result->origin.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null origin in WebSocket_Connect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->send_stream = input->send_stream.release();
    if (!result->send_stream.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid send_stream in WebSocket_Connect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    mojo::internal::InterfaceHandleToData(input->client.Pass(),
                                          &result->client);
    if (!result->client.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client in WebSocket_Connect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocket_Connect_Params_Data* input,
                  WebSocket_Connect_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->url.ptr, &result->url);
      Deserialize_(input->protocols.ptr, &result->protocols);
      Deserialize_(input->origin.ptr, &result->origin);
      result->send_stream.reset(mojo::internal::FetchAndReset(&input->send_stream));
      mojo::internal::InterfaceDataToHandle(&input->client, &result->client);
    } while (false);
  }
}



// static
WebSocket_Send_ParamsPtr WebSocket_Send_Params::New() {
  WebSocket_Send_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocket_Send_Params>::Initialize(&rv);
  return rv;
}

WebSocket_Send_Params::WebSocket_Send_Params()
    : fin(),
      type(),
      num_bytes() {
}

WebSocket_Send_Params::~WebSocket_Send_Params() {
}


WebSocket_Send_ParamsPtr WebSocket_Send_Params::Clone() const {
  WebSocket_Send_ParamsPtr rv(New());
  rv->fin = fin;
  rv->type = type;
  rv->num_bytes = num_bytes;
  return rv;
}


bool WebSocket_Send_Params::Equals(const WebSocket_Send_Params& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->fin, other.fin))
    return false;
  if (!mojo::internal::ValueTraits<WebSocket::MessageType>::Equals(this->type, other.type))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->num_bytes, other.num_bytes))
    return false;
  return true;
}


size_t WebSocket_Send_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocket_Send_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocket_Send_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocket_Send_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocket_Send_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocket_Send_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocket_Send_Params_Data* input =
      static_cast<internal::WebSocket_Send_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocket_Send_Params& input) {
  size_t size = sizeof(internal::WebSocket_Send_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocket_Send_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocket_Send_Params_Data** output) {
  if (input) {
    internal::WebSocket_Send_Params_Data* result =
        internal::WebSocket_Send_Params_Data::New(buf);
    result->fin = input->fin;
    result->type =
      static_cast<int32_t>(input->type);
    result->num_bytes = input->num_bytes;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocket_Send_Params_Data* input,
                  WebSocket_Send_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->fin = input->fin;
      result->type = static_cast<WebSocket::MessageType>(input->type);
      result->num_bytes = input->num_bytes;
    } while (false);
  }
}



// static
WebSocket_FlowControl_ParamsPtr WebSocket_FlowControl_Params::New() {
  WebSocket_FlowControl_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocket_FlowControl_Params>::Initialize(&rv);
  return rv;
}

WebSocket_FlowControl_Params::WebSocket_FlowControl_Params()
    : quota() {
}

WebSocket_FlowControl_Params::~WebSocket_FlowControl_Params() {
}


WebSocket_FlowControl_ParamsPtr WebSocket_FlowControl_Params::Clone() const {
  WebSocket_FlowControl_ParamsPtr rv(New());
  rv->quota = quota;
  return rv;
}


bool WebSocket_FlowControl_Params::Equals(const WebSocket_FlowControl_Params& other) const {
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->quota, other.quota))
    return false;
  return true;
}


size_t WebSocket_FlowControl_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocket_FlowControl_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocket_FlowControl_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocket_FlowControl_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocket_FlowControl_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocket_FlowControl_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocket_FlowControl_Params_Data* input =
      static_cast<internal::WebSocket_FlowControl_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocket_FlowControl_Params& input) {
  size_t size = sizeof(internal::WebSocket_FlowControl_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocket_FlowControl_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocket_FlowControl_Params_Data** output) {
  if (input) {
    internal::WebSocket_FlowControl_Params_Data* result =
        internal::WebSocket_FlowControl_Params_Data::New(buf);
    result->quota = input->quota;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocket_FlowControl_Params_Data* input,
                  WebSocket_FlowControl_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->quota = input->quota;
    } while (false);
  }
}



// static
WebSocket_Close_ParamsPtr WebSocket_Close_Params::New() {
  WebSocket_Close_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocket_Close_Params>::Initialize(&rv);
  return rv;
}

WebSocket_Close_Params::WebSocket_Close_Params()
    : code(),
      reason() {
}

WebSocket_Close_Params::~WebSocket_Close_Params() {
}


WebSocket_Close_ParamsPtr WebSocket_Close_Params::Clone() const {
  WebSocket_Close_ParamsPtr rv(New());
  rv->code = code;
  rv->reason = reason;
  return rv;
}


bool WebSocket_Close_Params::Equals(const WebSocket_Close_Params& other) const {
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->code, other.code))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->reason, other.reason))
    return false;
  return true;
}


size_t WebSocket_Close_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocket_Close_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocket_Close_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocket_Close_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocket_Close_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocket_Close_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocket_Close_Params_Data* input =
      static_cast<internal::WebSocket_Close_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocket_Close_Params& input) {
  size_t size = sizeof(internal::WebSocket_Close_Params_Data);
  size += GetSerializedSize_(input.reason);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocket_Close_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocket_Close_Params_Data** output) {
  if (input) {
    internal::WebSocket_Close_Params_Data* result =
        internal::WebSocket_Close_Params_Data::New(buf);
    result->code = input->code;
    SerializeString_(input->reason, buf, &result->reason.ptr);
    if (!result->reason.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null reason in WebSocket_Close_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocket_Close_Params_Data* input,
                  WebSocket_Close_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->code = input->code;
      Deserialize_(input->reason.ptr, &result->reason);
    } while (false);
  }
}



// static
WebSocketClient_DidConnect_ParamsPtr WebSocketClient_DidConnect_Params::New() {
  WebSocketClient_DidConnect_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocketClient_DidConnect_Params>::Initialize(&rv);
  return rv;
}

WebSocketClient_DidConnect_Params::WebSocketClient_DidConnect_Params()
    : selected_subprotocol(),
      extensions(),
      receive_stream() {
}

WebSocketClient_DidConnect_Params::~WebSocketClient_DidConnect_Params() {
}



bool WebSocketClient_DidConnect_Params::Equals(const WebSocketClient_DidConnect_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->selected_subprotocol, other.selected_subprotocol))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->extensions, other.extensions))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->receive_stream, other.receive_stream))
    return false;
  return true;
}


size_t WebSocketClient_DidConnect_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocketClient_DidConnect_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocketClient_DidConnect_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocketClient_DidConnect_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocketClient_DidConnect_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocketClient_DidConnect_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocketClient_DidConnect_Params_Data* input =
      static_cast<internal::WebSocketClient_DidConnect_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocketClient_DidConnect_Params& input) {
  size_t size = sizeof(internal::WebSocketClient_DidConnect_Params_Data);
  size += GetSerializedSize_(input.selected_subprotocol);
  size += GetSerializedSize_(input.extensions);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidConnect_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocketClient_DidConnect_Params_Data** output) {
  if (input) {
    internal::WebSocketClient_DidConnect_Params_Data* result =
        internal::WebSocketClient_DidConnect_Params_Data::New(buf);
    SerializeString_(input->selected_subprotocol, buf, &result->selected_subprotocol.ptr);
    if (!result->selected_subprotocol.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null selected_subprotocol in WebSocketClient_DidConnect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    SerializeString_(input->extensions, buf, &result->extensions.ptr);
    if (!result->extensions.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null extensions in WebSocketClient_DidConnect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->receive_stream = input->receive_stream.release();
    if (!result->receive_stream.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid receive_stream in WebSocketClient_DidConnect_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocketClient_DidConnect_Params_Data* input,
                  WebSocketClient_DidConnect_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->selected_subprotocol.ptr, &result->selected_subprotocol);
      Deserialize_(input->extensions.ptr, &result->extensions);
      result->receive_stream.reset(mojo::internal::FetchAndReset(&input->receive_stream));
    } while (false);
  }
}



// static
WebSocketClient_DidReceiveData_ParamsPtr WebSocketClient_DidReceiveData_Params::New() {
  WebSocketClient_DidReceiveData_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocketClient_DidReceiveData_Params>::Initialize(&rv);
  return rv;
}

WebSocketClient_DidReceiveData_Params::WebSocketClient_DidReceiveData_Params()
    : fin(),
      type(),
      num_bytes() {
}

WebSocketClient_DidReceiveData_Params::~WebSocketClient_DidReceiveData_Params() {
}


WebSocketClient_DidReceiveData_ParamsPtr WebSocketClient_DidReceiveData_Params::Clone() const {
  WebSocketClient_DidReceiveData_ParamsPtr rv(New());
  rv->fin = fin;
  rv->type = type;
  rv->num_bytes = num_bytes;
  return rv;
}


bool WebSocketClient_DidReceiveData_Params::Equals(const WebSocketClient_DidReceiveData_Params& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->fin, other.fin))
    return false;
  if (!mojo::internal::ValueTraits<WebSocket::MessageType>::Equals(this->type, other.type))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->num_bytes, other.num_bytes))
    return false;
  return true;
}


size_t WebSocketClient_DidReceiveData_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocketClient_DidReceiveData_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocketClient_DidReceiveData_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocketClient_DidReceiveData_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocketClient_DidReceiveData_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocketClient_DidReceiveData_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocketClient_DidReceiveData_Params_Data* input =
      static_cast<internal::WebSocketClient_DidReceiveData_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocketClient_DidReceiveData_Params& input) {
  size_t size = sizeof(internal::WebSocketClient_DidReceiveData_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidReceiveData_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocketClient_DidReceiveData_Params_Data** output) {
  if (input) {
    internal::WebSocketClient_DidReceiveData_Params_Data* result =
        internal::WebSocketClient_DidReceiveData_Params_Data::New(buf);
    result->fin = input->fin;
    result->type =
      static_cast<int32_t>(input->type);
    result->num_bytes = input->num_bytes;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocketClient_DidReceiveData_Params_Data* input,
                  WebSocketClient_DidReceiveData_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->fin = input->fin;
      result->type = static_cast<WebSocket::MessageType>(input->type);
      result->num_bytes = input->num_bytes;
    } while (false);
  }
}



// static
WebSocketClient_DidReceiveFlowControl_ParamsPtr WebSocketClient_DidReceiveFlowControl_Params::New() {
  WebSocketClient_DidReceiveFlowControl_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocketClient_DidReceiveFlowControl_Params>::Initialize(&rv);
  return rv;
}

WebSocketClient_DidReceiveFlowControl_Params::WebSocketClient_DidReceiveFlowControl_Params()
    : quota() {
}

WebSocketClient_DidReceiveFlowControl_Params::~WebSocketClient_DidReceiveFlowControl_Params() {
}


WebSocketClient_DidReceiveFlowControl_ParamsPtr WebSocketClient_DidReceiveFlowControl_Params::Clone() const {
  WebSocketClient_DidReceiveFlowControl_ParamsPtr rv(New());
  rv->quota = quota;
  return rv;
}


bool WebSocketClient_DidReceiveFlowControl_Params::Equals(const WebSocketClient_DidReceiveFlowControl_Params& other) const {
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->quota, other.quota))
    return false;
  return true;
}


size_t WebSocketClient_DidReceiveFlowControl_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocketClient_DidReceiveFlowControl_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocketClient_DidReceiveFlowControl_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocketClient_DidReceiveFlowControl_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocketClient_DidReceiveFlowControl_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocketClient_DidReceiveFlowControl_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocketClient_DidReceiveFlowControl_Params_Data* input =
      static_cast<internal::WebSocketClient_DidReceiveFlowControl_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocketClient_DidReceiveFlowControl_Params& input) {
  size_t size = sizeof(internal::WebSocketClient_DidReceiveFlowControl_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidReceiveFlowControl_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocketClient_DidReceiveFlowControl_Params_Data** output) {
  if (input) {
    internal::WebSocketClient_DidReceiveFlowControl_Params_Data* result =
        internal::WebSocketClient_DidReceiveFlowControl_Params_Data::New(buf);
    result->quota = input->quota;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocketClient_DidReceiveFlowControl_Params_Data* input,
                  WebSocketClient_DidReceiveFlowControl_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->quota = input->quota;
    } while (false);
  }
}



// static
WebSocketClient_DidFail_ParamsPtr WebSocketClient_DidFail_Params::New() {
  WebSocketClient_DidFail_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocketClient_DidFail_Params>::Initialize(&rv);
  return rv;
}

WebSocketClient_DidFail_Params::WebSocketClient_DidFail_Params()
    : message() {
}

WebSocketClient_DidFail_Params::~WebSocketClient_DidFail_Params() {
}


WebSocketClient_DidFail_ParamsPtr WebSocketClient_DidFail_Params::Clone() const {
  WebSocketClient_DidFail_ParamsPtr rv(New());
  rv->message = message;
  return rv;
}


bool WebSocketClient_DidFail_Params::Equals(const WebSocketClient_DidFail_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->message, other.message))
    return false;
  return true;
}


size_t WebSocketClient_DidFail_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocketClient_DidFail_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocketClient_DidFail_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocketClient_DidFail_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocketClient_DidFail_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocketClient_DidFail_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocketClient_DidFail_Params_Data* input =
      static_cast<internal::WebSocketClient_DidFail_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocketClient_DidFail_Params& input) {
  size_t size = sizeof(internal::WebSocketClient_DidFail_Params_Data);
  size += GetSerializedSize_(input.message);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidFail_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocketClient_DidFail_Params_Data** output) {
  if (input) {
    internal::WebSocketClient_DidFail_Params_Data* result =
        internal::WebSocketClient_DidFail_Params_Data::New(buf);
    SerializeString_(input->message, buf, &result->message.ptr);
    if (!result->message.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null message in WebSocketClient_DidFail_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocketClient_DidFail_Params_Data* input,
                  WebSocketClient_DidFail_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->message.ptr, &result->message);
    } while (false);
  }
}



// static
WebSocketClient_DidClose_ParamsPtr WebSocketClient_DidClose_Params::New() {
  WebSocketClient_DidClose_ParamsPtr rv;
  mojo::internal::StructHelper<WebSocketClient_DidClose_Params>::Initialize(&rv);
  return rv;
}

WebSocketClient_DidClose_Params::WebSocketClient_DidClose_Params()
    : was_clean(),
      code(),
      reason() {
}

WebSocketClient_DidClose_Params::~WebSocketClient_DidClose_Params() {
}


WebSocketClient_DidClose_ParamsPtr WebSocketClient_DidClose_Params::Clone() const {
  WebSocketClient_DidClose_ParamsPtr rv(New());
  rv->was_clean = was_clean;
  rv->code = code;
  rv->reason = reason;
  return rv;
}


bool WebSocketClient_DidClose_Params::Equals(const WebSocketClient_DidClose_Params& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->was_clean, other.was_clean))
    return false;
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->code, other.code))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->reason, other.reason))
    return false;
  return true;
}


size_t WebSocketClient_DidClose_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool WebSocketClient_DidClose_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::WebSocketClient_DidClose_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool WebSocketClient_DidClose_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::WebSocketClient_DidClose_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void WebSocketClient_DidClose_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::WebSocketClient_DidClose_Params_Data* input =
      static_cast<internal::WebSocketClient_DidClose_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const WebSocketClient_DidClose_Params& input) {
  size_t size = sizeof(internal::WebSocketClient_DidClose_Params_Data);
  size += GetSerializedSize_(input.reason);
  return size;
}

mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidClose_Params* input,
    mojo::internal::Buffer* buf,
    internal::WebSocketClient_DidClose_Params_Data** output) {
  if (input) {
    internal::WebSocketClient_DidClose_Params_Data* result =
        internal::WebSocketClient_DidClose_Params_Data::New(buf);
    result->was_clean = input->was_clean;
    result->code = input->code;
    SerializeString_(input->reason, buf, &result->reason.ptr);
    if (!result->reason.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null reason in WebSocketClient_DidClose_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::WebSocketClient_DidClose_Params_Data* input,
                  WebSocketClient_DidClose_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->was_clean = input->was_clean;
      result->code = input->code;
      Deserialize_(input->reason.ptr, &result->reason);
    } while (false);
  }
}

}  // namespace mojo
