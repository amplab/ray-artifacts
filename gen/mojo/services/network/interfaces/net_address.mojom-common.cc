// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/net_address.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
NetAddressIPv4_Data* NetAddressIPv4_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetAddressIPv4_Data))) NetAddressIPv4_Data();
}

// static
mojo::internal::ValidationError NetAddressIPv4_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetAddressIPv4_Data* object = static_cast<const NetAddressIPv4_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->addr.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null addr field in NetAddressIPv4 struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams addr_validate_params(
      4, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->addr.offset),
          bounds_checker, &addr_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetAddressIPv4_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->addr, handles);
}

void NetAddressIPv4_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->addr, handles);
}

NetAddressIPv4_Data::NetAddressIPv4_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
NetAddressIPv6_Data* NetAddressIPv6_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetAddressIPv6_Data))) NetAddressIPv6_Data();
}

// static
mojo::internal::ValidationError NetAddressIPv6_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetAddressIPv6_Data* object = static_cast<const NetAddressIPv6_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->addr.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null addr field in NetAddressIPv6 struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->addr.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams addr_validate_params(
      16, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->addr.offset),
          bounds_checker, &addr_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetAddressIPv6_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->addr, handles);
}

void NetAddressIPv6_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->addr, handles);
}

NetAddressIPv6_Data::NetAddressIPv6_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
NetAddress_Data* NetAddress_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetAddress_Data))) NetAddress_Data();
}

// static
mojo::internal::ValidationError NetAddress_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetAddress_Data* object = static_cast<const NetAddress_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->ipv4.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = NetAddressIPv4::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->ipv4.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->ipv6.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = NetAddressIPv6::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->ipv6.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetAddress_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->ipv4, handles);
  mojo::internal::Encode(&this->ipv6, handles);
}

void NetAddress_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->ipv4, handles);
  mojo::internal::Decode(&this->ipv6, handles);
}

NetAddress_Data::NetAddress_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---

}  // namespace internal

// --- Request and response validator definitions for interfaces --- 

// --- Enums ---
bool NetAddressFamily_IsValidValue(NetAddressFamily value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
    case 1:
    case 2:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const NetAddressFamily& val) {
  return (stream << static_cast<int32_t>(val));
}

// Base interface definitions (Name_, Version_, Constants, Enums)

// Struct Constants

// --- Struct builder definitions ---

// static
NetAddressIPv4Ptr NetAddressIPv4::New() {
  NetAddressIPv4Ptr rv;
  mojo::internal::StructHelper<NetAddressIPv4>::Initialize(&rv);
  return rv;
}

NetAddressIPv4::NetAddressIPv4()
    : port(),
      addr() {
}

NetAddressIPv4::~NetAddressIPv4() {
}


NetAddressIPv4Ptr NetAddressIPv4::Clone() const {
  NetAddressIPv4Ptr rv(New());
  rv->port = port;
  rv->addr = addr.Clone();
  return rv;
}


bool NetAddressIPv4::Equals(const NetAddressIPv4& other) const {
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->port, other.port))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->addr, other.addr))
    return false;
  return true;
}


// static
NetAddressIPv6Ptr NetAddressIPv6::New() {
  NetAddressIPv6Ptr rv;
  mojo::internal::StructHelper<NetAddressIPv6>::Initialize(&rv);
  return rv;
}

NetAddressIPv6::NetAddressIPv6()
    : port(),
      addr() {
}

NetAddressIPv6::~NetAddressIPv6() {
}


NetAddressIPv6Ptr NetAddressIPv6::Clone() const {
  NetAddressIPv6Ptr rv(New());
  rv->port = port;
  rv->addr = addr.Clone();
  return rv;
}


bool NetAddressIPv6::Equals(const NetAddressIPv6& other) const {
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->port, other.port))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->addr, other.addr))
    return false;
  return true;
}


// static
NetAddressPtr NetAddress::New() {
  NetAddressPtr rv;
  mojo::internal::StructHelper<NetAddress>::Initialize(&rv);
  return rv;
}

NetAddress::NetAddress()
    : family(NetAddressFamily::UNSPECIFIED),
      ipv4(),
      ipv6() {
}

NetAddress::~NetAddress() {
}


NetAddressPtr NetAddress::Clone() const {
  NetAddressPtr rv(New());
  rv->family = family;
  rv->ipv4 = ipv4.Clone();
  rv->ipv6 = ipv6.Clone();
  return rv;
}


bool NetAddress::Equals(const NetAddress& other) const {
  if (!mojo::internal::ValueTraits<NetAddressFamily>::Equals(this->family, other.family))
    return false;
  if (!mojo::internal::ValueTraits<NetAddressIPv4Ptr>::Equals(this->ipv4, other.ipv4))
    return false;
  if (!mojo::internal::ValueTraits<NetAddressIPv6Ptr>::Equals(this->ipv6, other.ipv6))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t NetAddressIPv4::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetAddressIPv4::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetAddressIPv4_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetAddressIPv4::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetAddressIPv4_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetAddressIPv4::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetAddressIPv4_Data* input =
      static_cast<internal::NetAddressIPv4_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetAddressIPv4& input) {
  size_t size = sizeof(internal::NetAddressIPv4_Data);
  size += GetSerializedSize_(input.addr);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetAddressIPv4* input,
    mojo::internal::Buffer* buf,
    internal::NetAddressIPv4_Data** output) {
  if (input) {
    internal::NetAddressIPv4_Data* result =
        internal::NetAddressIPv4_Data::New(buf);
    result->port = input->port;
    {
      const mojo::internal::ArrayValidateParams addr_validate_params(
        4, false, nullptr);auto retval =mojo::SerializeArray_(&input->addr, buf, &result->addr.ptr,
                            &addr_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->addr.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null addr in NetAddressIPv4 struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetAddressIPv4_Data* input,
                  NetAddressIPv4* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->port = input->port;
      Deserialize_(input->addr.ptr, &result->addr);
    } while (false);
  }
}


size_t NetAddressIPv6::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetAddressIPv6::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetAddressIPv6_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetAddressIPv6::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetAddressIPv6_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetAddressIPv6::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetAddressIPv6_Data* input =
      static_cast<internal::NetAddressIPv6_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetAddressIPv6& input) {
  size_t size = sizeof(internal::NetAddressIPv6_Data);
  size += GetSerializedSize_(input.addr);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetAddressIPv6* input,
    mojo::internal::Buffer* buf,
    internal::NetAddressIPv6_Data** output) {
  if (input) {
    internal::NetAddressIPv6_Data* result =
        internal::NetAddressIPv6_Data::New(buf);
    result->port = input->port;
    {
      const mojo::internal::ArrayValidateParams addr_validate_params(
        16, false, nullptr);auto retval =mojo::SerializeArray_(&input->addr, buf, &result->addr.ptr,
                            &addr_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->addr.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null addr in NetAddressIPv6 struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetAddressIPv6_Data* input,
                  NetAddressIPv6* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->port = input->port;
      Deserialize_(input->addr.ptr, &result->addr);
    } while (false);
  }
}


size_t NetAddress::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetAddress::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetAddress_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetAddress::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetAddress_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetAddress::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetAddress_Data* input =
      static_cast<internal::NetAddress_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetAddress& input) {
  size_t size = sizeof(internal::NetAddress_Data);
  size += input.ipv4.is_null()
              ? 0
              : GetSerializedSize_(*input.ipv4);
  size += input.ipv6.is_null()
              ? 0
              : GetSerializedSize_(*input.ipv6);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetAddress* input,
    mojo::internal::Buffer* buf,
    internal::NetAddress_Data** output) {
  if (input) {
    internal::NetAddress_Data* result =
        internal::NetAddress_Data::New(buf);
    result->family =
      static_cast<int32_t>(input->family);
    {auto retval =Serialize_(input->ipv4.get(),
                 buf,
                 &result->ipv4.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {auto retval =Serialize_(input->ipv6.get(),
                 buf,
                 &result->ipv6.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetAddress_Data* input,
                  NetAddress* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->family = static_cast<NetAddressFamily>(input->family);
      if (input->ipv4.ptr) {
        result->ipv4 = NetAddressIPv4::New();
        Deserialize_(input->ipv4.ptr, result->ipv4.get());
      }
      if (input->ipv6.ptr) {
        result->ipv6 = NetAddressIPv6::New();
        Deserialize_(input->ipv6.ptr, result->ipv6.get());
      }
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---
}  // namespace mojo
