// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/files/interfaces/file.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/files/interfaces/file.mojom-internal.h"
#include "mojo/services/files/interfaces/file.mojom-common.h"
namespace mojo {
namespace files {

// --- Interface definitions ---
File_SynchronousProxy::File_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool File_SynchronousProxy::Close(mojo::files::Error* out_err) {
  size_t size = sizeof(internal::File_Close_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Close);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Close_Params_Data* out_params =
      internal::File_Close_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Close_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Close_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_err) = static_cast<mojo::files::Error>(response_params->err);
  } while (false);
  return true;
}
bool File_SynchronousProxy::Read(uint32_t in_num_bytes_to_read, int64_t in_offset, mojo::files::Whence in_whence, mojo::files::Error* out_error, mojo::Array<uint8_t>* out_bytes_read) {
  size_t size = sizeof(internal::File_Read_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Read);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Read_Params_Data* out_params =
      internal::File_Read_Params_Data::New(builder.buffer());
  out_params->num_bytes_to_read = in_num_bytes_to_read;
  out_params->offset = in_offset;
  out_params->whence =
    static_cast<int32_t>(in_whence);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Read_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Read_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    Deserialize_(response_params->bytes_read.ptr, &(*out_bytes_read));
  } while (false);
  return true;
}
bool File_SynchronousProxy::Write(mojo::Array<uint8_t> in_bytes_to_write, int64_t in_offset, mojo::files::Whence in_whence, mojo::files::Error* out_error, uint32_t* out_num_bytes_written) {
  size_t size = sizeof(internal::File_Write_Params_Data);
  size += GetSerializedSize_(in_bytes_to_write);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Write);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Write_Params_Data* out_params =
      internal::File_Write_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams bytes_to_write_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_bytes_to_write, builder.buffer(), &out_params->bytes_to_write.ptr,
                          &bytes_to_write_validate_params);
  }
  if (!out_params->bytes_to_write.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null bytes_to_write in {{interface.name}}::{{method.name}}");
  }
  out_params->offset = in_offset;
  out_params->whence =
    static_cast<int32_t>(in_whence);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Write_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Write_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    (*out_num_bytes_written) = response_params->num_bytes_written;
  } while (false);
  return true;
}
bool File_SynchronousProxy::ReadToStream(mojo::ScopedDataPipeProducerHandle in_source, int64_t in_offset, mojo::files::Whence in_whence, int64_t in_num_bytes_to_read, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::File_ReadToStream_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::ReadToStream);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_ReadToStream_Params_Data* out_params =
      internal::File_ReadToStream_Params_Data::New(builder.buffer());
  out_params->source = in_source.release();
  if (!out_params->source.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid source in {{interface.name}}::{{method.name}}");
  }
  out_params->offset = in_offset;
  out_params->whence =
    static_cast<int32_t>(in_whence);
  out_params->num_bytes_to_read = in_num_bytes_to_read;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_ReadToStream_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_ReadToStream_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool File_SynchronousProxy::WriteFromStream(mojo::ScopedDataPipeConsumerHandle in_sink, int64_t in_offset, mojo::files::Whence in_whence, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::File_WriteFromStream_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::WriteFromStream);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_WriteFromStream_Params_Data* out_params =
      internal::File_WriteFromStream_Params_Data::New(builder.buffer());
  out_params->sink = in_sink.release();
  if (!out_params->sink.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid sink in {{interface.name}}::{{method.name}}");
  }
  out_params->offset = in_offset;
  out_params->whence =
    static_cast<int32_t>(in_whence);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_WriteFromStream_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_WriteFromStream_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool File_SynchronousProxy::Tell(mojo::files::Error* out_error, int64_t* out_position) {
  size_t size = sizeof(internal::File_Tell_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Tell);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Tell_Params_Data* out_params =
      internal::File_Tell_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Tell_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Tell_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    (*out_position) = response_params->position;
  } while (false);
  return true;
}
bool File_SynchronousProxy::Seek(int64_t in_offset, mojo::files::Whence in_whence, mojo::files::Error* out_error, int64_t* out_position) {
  size_t size = sizeof(internal::File_Seek_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Seek);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Seek_Params_Data* out_params =
      internal::File_Seek_Params_Data::New(builder.buffer());
  out_params->offset = in_offset;
  out_params->whence =
    static_cast<int32_t>(in_whence);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Seek_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Seek_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    (*out_position) = response_params->position;
  } while (false);
  return true;
}
bool File_SynchronousProxy::Stat(mojo::files::Error* out_error, mojo::files::FileInformationPtr* out_file_information) {
  size_t size = sizeof(internal::File_Stat_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Stat);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Stat_Params_Data* out_params =
      internal::File_Stat_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Stat_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Stat_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    if (response_params->file_information.ptr) {
      (*out_file_information) = mojo::files::FileInformation::New();
      Deserialize_(response_params->file_information.ptr, (*out_file_information).get());
    }
  } while (false);
  return true;
}
bool File_SynchronousProxy::Truncate(int64_t in_size, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::File_Truncate_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Truncate);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Truncate_Params_Data* out_params =
      internal::File_Truncate_Params_Data::New(builder.buffer());
  out_params->size = in_size;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Truncate_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Truncate_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool File_SynchronousProxy::Touch(mojo::files::TimespecOrNowPtr in_atime, mojo::files::TimespecOrNowPtr in_mtime, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::File_Touch_Params_Data);
  size += in_atime.is_null()
              ? 0
              : GetSerializedSize_(*in_atime);
  size += in_mtime.is_null()
              ? 0
              : GetSerializedSize_(*in_mtime);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Touch);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Touch_Params_Data* out_params =
      internal::File_Touch_Params_Data::New(builder.buffer());
  {Serialize_(in_atime.get(),
               builder.buffer(),
               &out_params->atime.ptr);
  }
  {Serialize_(in_mtime.get(),
               builder.buffer(),
               &out_params->mtime.ptr);
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Touch_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Touch_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool File_SynchronousProxy::Dup(mojo::InterfaceRequest<File> in_file, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::File_Dup_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Dup);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Dup_Params_Data* out_params =
      internal::File_Dup_Params_Data::New(builder.buffer());
  out_params->file = in_file.PassMessagePipe().release();
  if (!out_params->file.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid file in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Dup_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Dup_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool File_SynchronousProxy::Reopen(mojo::InterfaceRequest<File> in_file, uint32_t in_open_flags, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::File_Reopen_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Reopen);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Reopen_Params_Data* out_params =
      internal::File_Reopen_Params_Data::New(builder.buffer());
  out_params->file = in_file.PassMessagePipe().release();
  if (!out_params->file.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid file in {{interface.name}}::{{method.name}}");
  }
  out_params->open_flags = in_open_flags;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Reopen_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Reopen_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool File_SynchronousProxy::AsBuffer(mojo::files::Error* out_error, mojo::ScopedSharedBufferHandle* out_buffer) {
  size_t size = sizeof(internal::File_AsBuffer_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::AsBuffer);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_AsBuffer_Params_Data* out_params =
      internal::File_AsBuffer_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_AsBuffer_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_AsBuffer_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    (*out_buffer).reset(mojo::internal::FetchAndReset(&response_params->buffer));
  } while (false);
  return true;
}
bool File_SynchronousProxy::Ioctl(uint32_t in_request, mojo::Array<uint32_t> in_in_values, mojo::files::Error* out_error, mojo::Array<uint32_t>* out_out_values) {
  size_t size = sizeof(internal::File_Ioctl_Params_Data);
  size += GetSerializedSize_(in_in_values);

  auto msg_name = static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Ioctl);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::File_Ioctl_Params_Data* out_params =
      internal::File_Ioctl_Params_Data::New(builder.buffer());
  out_params->request = in_request;
  {
    const mojo::internal::ArrayValidateParams in_values_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_in_values, builder.buffer(), &out_params->in_values.ptr,
                          &in_values_validate_params);
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::File_Ioctl_ResponseParams_Data*
      response_params = reinterpret_cast<internal::File_Ioctl_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    Deserialize_(response_params->out_values.ptr, &(*out_out_values));
  } while (false);
  return true;
}
}  // namespace files
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
