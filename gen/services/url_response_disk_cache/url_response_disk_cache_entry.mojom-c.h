// This file was auto-generated by the C bindings generator.

#ifndef SERVICES_URL_RESPONSE_DISK_CACHE_URL_RESPONSE_DISK_CACHE_ENTRY_MOJOM_C_H_
#define SERVICES_URL_RESPONSE_DISK_CACHE_URL_RESPONSE_DISK_CACHE_ENTRY_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.
#include "mojo/public/interfaces/network/url_response.mojom-c.h"


// Forward declarations for structs.
struct mojo_CacheKey;
union mojo_CacheKeyPtr {
  struct mojo_CacheKey* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_CacheKeyPtr) == 8,
              "union mojo_CacheKeyPtr must be 8 bytes");

struct mojo_CacheEntry;
union mojo_CacheEntryPtr {
  struct mojo_CacheEntry* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_CacheEntryPtr) == 8,
              "union mojo_CacheEntryPtr must be 8 bytes");

// Forward declarations for unions.
// Top level constants.


// Top level enums.


// Union definitions.


// Struct definitions.
// -- mojo_CacheKey --
// Enums
// Constants
// Struct definition
struct mojo_CacheKey {
  struct MojomStructHeader header_;
  union MojomStringPtr request_origin;  // offset,bit = 0,0
  union MojomStringPtr url;  // offset,bit = 8,0
  int64_t timestamp;  // offset,bit = 16,0
  
};

struct mojo_CacheKey* mojo_CacheKey_New(struct MojomBuffer* in_buffer);

void mojo_CacheKey_Init(
  struct mojo_CacheKey* in_data);

void mojo_CacheKey_CloseAllHandles(
  struct mojo_CacheKey* in_data);

struct mojo_CacheKey* mojo_CacheKey_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_CacheKey* in_data);

size_t mojo_CacheKey_ComputeSerializedSize(
  const struct mojo_CacheKey* in_data);

MojomValidationResult mojo_CacheKey_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_CacheKey_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_CacheKey_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_CacheEntry --
// Enums
// Constants
// Struct definition
struct mojo_CacheEntry {
  struct MojomStructHeader header_;
  union mojo_URLResponsePtr response;  // offset,bit = 0,0
  union MojomStringPtr entry_directory;  // offset,bit = 8,0
  union MojomStringPtr response_body_path;  // offset,bit = 16,0
  int64_t last_invalidation;  // offset,bit = 24,0
  
};

struct mojo_CacheEntry* mojo_CacheEntry_New(struct MojomBuffer* in_buffer);

void mojo_CacheEntry_Init(
  struct mojo_CacheEntry* in_data);

void mojo_CacheEntry_CloseAllHandles(
  struct mojo_CacheEntry* in_data);

struct mojo_CacheEntry* mojo_CacheEntry_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_CacheEntry* in_data);

size_t mojo_CacheEntry_ComputeSerializedSize(
  const struct mojo_CacheEntry* in_data);

MojomValidationResult mojo_CacheEntry_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_CacheEntry_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_CacheEntry_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.


// Type tables declarations for structs and unions.



extern struct MojomPointerTableStructEntry mojo_CacheKey__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_CacheEntry__PointerTable[];


#endif  // SERVICES_URL_RESPONSE_DISK_CACHE_URL_RESPONSE_DISK_CACHE_ENTRY_MOJOM_C_H_