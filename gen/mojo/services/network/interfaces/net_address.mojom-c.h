// This file was auto-generated by the C bindings generator.

#ifndef MOJO_SERVICES_NETWORK_INTERFACES_NET_ADDRESS_MOJOM_C_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_NET_ADDRESS_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.


// Forward declarations for structs.
struct mojo_NetAddressIPv4;
union mojo_NetAddressIPv4Ptr {
  struct mojo_NetAddressIPv4* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_NetAddressIPv4Ptr) == 8,
              "union mojo_NetAddressIPv4Ptr must be 8 bytes");

struct mojo_NetAddressIPv6;
union mojo_NetAddressIPv6Ptr {
  struct mojo_NetAddressIPv6* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_NetAddressIPv6Ptr) == 8,
              "union mojo_NetAddressIPv6Ptr must be 8 bytes");

struct mojo_NetAddress;
union mojo_NetAddressPtr {
  struct mojo_NetAddress* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_NetAddressPtr) == 8,
              "union mojo_NetAddressPtr must be 8 bytes");

// Forward declarations for unions.
// Top level constants.


// Top level enums.
typedef uint32_t mojo_NetAddressFamily;
enum mojo_NetAddressFamily_Enum {
  mojo_NetAddressFamily_UNSPECIFIED = 0,
  mojo_NetAddressFamily_IPV4 = 1,
  mojo_NetAddressFamily_IPV6 = 2,
  
  mojo_NetAddressFamily__UNKNOWN__ = 0xFFFFFFFF,
};



// Union definitions.


// Struct definitions.
// -- mojo_NetAddressIPv4 --
// Enums
// Constants
// Struct definition
struct mojo_NetAddressIPv4 {
  struct MojomStructHeader header_;
  uint16_t port;  // offset,bit = 0,0
  uint8_t pad0_[6];  // padding
  union MojomArrayPtr addr;  // offset,bit = 8,0
  
};

struct mojo_NetAddressIPv4* mojo_NetAddressIPv4_New(struct MojomBuffer* in_buffer);

void mojo_NetAddressIPv4_Init(
  struct mojo_NetAddressIPv4* in_data);

void mojo_NetAddressIPv4_CloseAllHandles(
  struct mojo_NetAddressIPv4* in_data);

struct mojo_NetAddressIPv4* mojo_NetAddressIPv4_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_NetAddressIPv4* in_data);

size_t mojo_NetAddressIPv4_ComputeSerializedSize(
  const struct mojo_NetAddressIPv4* in_data);

MojomValidationResult mojo_NetAddressIPv4_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_NetAddressIPv4_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_NetAddressIPv4_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_NetAddressIPv6 --
// Enums
// Constants
// Struct definition
struct mojo_NetAddressIPv6 {
  struct MojomStructHeader header_;
  uint16_t port;  // offset,bit = 0,0
  uint8_t pad0_[6];  // padding
  union MojomArrayPtr addr;  // offset,bit = 8,0
  
};

struct mojo_NetAddressIPv6* mojo_NetAddressIPv6_New(struct MojomBuffer* in_buffer);

void mojo_NetAddressIPv6_Init(
  struct mojo_NetAddressIPv6* in_data);

void mojo_NetAddressIPv6_CloseAllHandles(
  struct mojo_NetAddressIPv6* in_data);

struct mojo_NetAddressIPv6* mojo_NetAddressIPv6_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_NetAddressIPv6* in_data);

size_t mojo_NetAddressIPv6_ComputeSerializedSize(
  const struct mojo_NetAddressIPv6* in_data);

MojomValidationResult mojo_NetAddressIPv6_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_NetAddressIPv6_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_NetAddressIPv6_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_NetAddress --
// Enums
// Constants
// Struct definition
struct mojo_NetAddress {
  struct MojomStructHeader header_;
  mojo_NetAddressFamily family;  // offset,bit = 0,0
  uint8_t pad0_[4];  // padding
  union mojo_NetAddressIPv4Ptr ipv4;  // offset,bit = 8,0
  union mojo_NetAddressIPv6Ptr ipv6;  // offset,bit = 16,0
  
};

struct mojo_NetAddress* mojo_NetAddress_New(struct MojomBuffer* in_buffer);

void mojo_NetAddress_Init(
  struct mojo_NetAddress* in_data);

void mojo_NetAddress_CloseAllHandles(
  struct mojo_NetAddress* in_data);

struct mojo_NetAddress* mojo_NetAddress_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_NetAddress* in_data);

size_t mojo_NetAddress_ComputeSerializedSize(
  const struct mojo_NetAddress* in_data);

MojomValidationResult mojo_NetAddress_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_NetAddress_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_NetAddress_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.


// Type tables declarations for structs and unions.



extern struct MojomPointerTableStructEntry mojo_NetAddressIPv4__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_NetAddressIPv6__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_NetAddress__PointerTable[];


#endif  // MOJO_SERVICES_NETWORK_INTERFACES_NET_ADDRESS_MOJOM_C_H_