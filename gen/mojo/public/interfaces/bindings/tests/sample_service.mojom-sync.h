// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_SYNC_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/interfaces/bindings/tests/sample_service.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/sample_service.mojom-common.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom.h"
#include "mojo/public/interfaces/bindings/tests/sample_import2.mojom.h"


namespace sample {

// --- Synchronous interface declaration ---

class Service_SynchronousProxy;
class Service_Synchronous
  : public internal::Service_Base {
 public:
  virtual ~Service_Synchronous() override {}
  
  using Proxy_ = Service_SynchronousProxy;
  virtual bool Frobinate(
      FooPtr in_foo, Service::BazOptions in_baz, mojo::InterfaceHandle<Port> in_port, int32_t* out_result)= 0;
  virtual bool GetPort(
      mojo::InterfaceRequest<Port> in_port)const= 0;
};

class Service_SynchronousProxy
    : public Service_Synchronous {
 public:
  explicit Service_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Frobinate(FooPtr in_foo, Service::BazOptions in_baz, mojo::InterfaceHandle<Port> in_port, int32_t* out_result) override;
  bool GetPort(mojo::InterfaceRequest<Port> in_port) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class Port_SynchronousProxy;
class Port_Synchronous
  : public internal::Port_Base {
 public:
  virtual ~Port_Synchronous() override {}
  
  using Proxy_ = Port_SynchronousProxy;
  virtual bool PostMessage(
      const mojo::String& in_message_text, mojo::InterfaceHandle<Port> in_port)const= 0;
};

class Port_SynchronousProxy
    : public Port_Synchronous {
 public:
  explicit Port_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool PostMessage(const mojo::String& in_message_text, mojo::InterfaceHandle<Port> in_port) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace sample

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_SYNC_H_
