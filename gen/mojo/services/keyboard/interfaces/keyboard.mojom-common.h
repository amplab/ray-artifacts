// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_KEYBOARD_INTERFACES_KEYBOARD_MOJOM_COMMON_H_
#define MOJO_SERVICES_KEYBOARD_INTERFACES_KEYBOARD_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/keyboard/interfaces/keyboard.mojom-internal.h"
#include "mojo/services/native_viewport/interfaces/native_viewport_event_dispatcher.mojom-common.h"
namespace keyboard {

// --- Interface Forward Declarations ---
class KeyboardClient;
class KeyboardClientRequestValidator;
class KeyboardClient_Synchronous;
class KeyboardService;
class KeyboardServiceRequestValidator;
class KeyboardService_Synchronous;
class KeyboardServiceFactory;
class KeyboardServiceFactoryRequestValidator;
class KeyboardServiceFactory_Synchronous;

// --- Struct Forward Declarations ---
class CompletionData;

using CompletionDataPtr = mojo::InlinedStructPtr<CompletionData>;


class CorrectionData;

using CorrectionDataPtr = mojo::InlinedStructPtr<CorrectionData>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---
  
enum class SubmitAction : int32_t {
  DONE,
};

bool SubmitAction_IsValidValue(SubmitAction value);
  
std::ostream& operator<<(std::ostream& stream, const SubmitAction& val);
  
enum class KeyboardType : int32_t {
  TEXT,
  NUMBER,
  PHONE,
  DATETIME,
};

bool KeyboardType_IsValidValue(KeyboardType value);
  
std::ostream& operator<<(std::ostream& stream, const KeyboardType& val);

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class KeyboardClient_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = KeyboardClientRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = KeyboardClient_Synchronous;
  enum class MessageOrdinals : uint32_t {
    CommitCompletion = 0,
    CommitCorrection = 1,
    CommitText = 2,
    DeleteSurroundingText = 3,
    SetComposingRegion = 4,
    SetComposingText = 5,
    SetSelection = 6,
    Submit = 7,
  };


  virtual ~KeyboardClient_Base() {}
};

}  // namespace internal

// Async interface declaration

class KeyboardClientProxy;
class KeyboardClientStub;
class KeyboardClient_Synchronous;

class KeyboardClientRequestValidator;

class KeyboardClient : public internal::KeyboardClient_Base {
 public:
  virtual ~KeyboardClient() override {}

  using Proxy_ = KeyboardClientProxy;
  using Stub_ = KeyboardClientStub;
  virtual void CommitCompletion(CompletionDataPtr completion) = 0;
  virtual void CommitCorrection(CorrectionDataPtr correction) = 0;
  virtual void CommitText(const mojo::String& text, int32_t newCursorPosition) = 0;
  virtual void DeleteSurroundingText(int32_t beforeLength, int32_t afterLength) = 0;
  virtual void SetComposingRegion(int32_t start, int32_t end) = 0;
  virtual void SetComposingText(const mojo::String& text, int32_t newCursorPosition) = 0;
  virtual void SetSelection(int32_t start, int32_t end) = 0;
  virtual void Submit(SubmitAction action) = 0;
};

namespace internal {
class KeyboardService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = KeyboardServiceRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = KeyboardService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Show = 0,
    ShowByRequest = 1,
    Hide = 2,
    SetText = 3,
    SetSelection = 4,
  };


  virtual ~KeyboardService_Base() {}
};

}  // namespace internal

// Async interface declaration

class KeyboardServiceProxy;
class KeyboardServiceStub;
class KeyboardService_Synchronous;

class KeyboardServiceRequestValidator;

class KeyboardService : public internal::KeyboardService_Base {
 public:
  virtual ~KeyboardService() override {}

  using Proxy_ = KeyboardServiceProxy;
  using Stub_ = KeyboardServiceStub;
  virtual void Show(mojo::InterfaceHandle<KeyboardClient> client, KeyboardType type) = 0;
  virtual void ShowByRequest() = 0;
  virtual void Hide() = 0;
  virtual void SetText(const mojo::String& text) = 0;
  virtual void SetSelection(int32_t start, int32_t end) = 0;
};

namespace internal {
class KeyboardServiceFactory_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = KeyboardServiceFactoryRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = KeyboardServiceFactory_Synchronous;
  enum class MessageOrdinals : uint32_t {
    CreateKeyboardService = 0,
  };


  virtual ~KeyboardServiceFactory_Base() {}
};

}  // namespace internal

// Async interface declaration

class KeyboardServiceFactoryProxy;
class KeyboardServiceFactoryStub;
class KeyboardServiceFactory_Synchronous;

class KeyboardServiceFactoryRequestValidator;

class KeyboardServiceFactory : public internal::KeyboardServiceFactory_Base {
 public:
  virtual ~KeyboardServiceFactory() override {}

  using Proxy_ = KeyboardServiceFactoryProxy;
  using Stub_ = KeyboardServiceFactoryStub;
  virtual void CreateKeyboardService(mojo::InterfaceRequest<mojo::NativeViewportEventDispatcher> keyEventDispatcher, mojo::InterfaceRequest<KeyboardService> serviceRequest) = 0;
};

}  // namespace keyboard

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<keyboard::CompletionDataPtr, true, false> {
  using DataType = keyboard::internal::CompletionData_Data*;
};
template <>
struct WrapperTraits<keyboard::CorrectionDataPtr, true, false> {
  using DataType = keyboard::internal::CorrectionData_Data*;
};

}  // internal
}  // mojo
namespace keyboard {

// --- Interface Request Validators ---
class KeyboardClientRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class KeyboardServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class KeyboardServiceFactoryRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class CompletionData {
 public:
  using Data_ = internal::CompletionData_Data;

  static CompletionDataPtr New();

  template <typename U>
  static CompletionDataPtr From(const U& u) {
    return mojo::TypeConverter<CompletionDataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CompletionData>::Convert(*this);
  }

  CompletionData();
  ~CompletionData();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  CompletionDataPtr Clone() const;
  bool Equals(const CompletionData& other) const;

  int64_t id;
  int32_t position;
  mojo::String text;
  mojo::String label;
};


class CorrectionData {
 public:
  using Data_ = internal::CorrectionData_Data;

  static CorrectionDataPtr New();

  template <typename U>
  static CorrectionDataPtr From(const U& u) {
    return mojo::TypeConverter<CorrectionDataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CorrectionData>::Convert(*this);
  }

  CorrectionData();
  ~CorrectionData();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  CorrectionDataPtr Clone() const;
  bool Equals(const CorrectionData& other) const;

  int32_t offset;
  mojo::String old_text;
  mojo::String new_text;
};



// --- Non-inlined structs ---

// --- Struct serialization helpers ---
size_t GetSerializedSize_(const CompletionData& input);
mojo::internal::ValidationError Serialize_(
    CompletionData* input,
    mojo::internal::Buffer* buffer,
    internal::CompletionData_Data** output);
void Deserialize_(internal::CompletionData_Data* input,
                  CompletionData* output);

size_t GetSerializedSize_(const CorrectionData& input);
mojo::internal::ValidationError Serialize_(
    CorrectionData* input,
    mojo::internal::Buffer* buffer,
    internal::CorrectionData_Data** output);
void Deserialize_(internal::CorrectionData_Data* input,
                  CorrectionData* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class KeyboardClient_CommitCompletion_Params;

using KeyboardClient_CommitCompletion_ParamsPtr = mojo::StructPtr<KeyboardClient_CommitCompletion_Params>;


size_t GetSerializedSize_(const KeyboardClient_CommitCompletion_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_CommitCompletion_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_CommitCompletion_Params_Data** output);
void Deserialize_(internal::KeyboardClient_CommitCompletion_Params_Data* input,
                  KeyboardClient_CommitCompletion_Params* output);

class KeyboardClient_CommitCompletion_Params {
 public:
  using Data_ = internal::KeyboardClient_CommitCompletion_Params_Data;

  static KeyboardClient_CommitCompletion_ParamsPtr New();

  template <typename U>
  static KeyboardClient_CommitCompletion_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_CommitCompletion_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_CommitCompletion_Params>::Convert(*this);
  }

  KeyboardClient_CommitCompletion_Params();
  ~KeyboardClient_CommitCompletion_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_CommitCompletion_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_CommitCompletion_Params& other) const;

  CompletionDataPtr completion;
};




class KeyboardClient_CommitCorrection_Params;

using KeyboardClient_CommitCorrection_ParamsPtr = mojo::StructPtr<KeyboardClient_CommitCorrection_Params>;


size_t GetSerializedSize_(const KeyboardClient_CommitCorrection_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_CommitCorrection_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_CommitCorrection_Params_Data** output);
void Deserialize_(internal::KeyboardClient_CommitCorrection_Params_Data* input,
                  KeyboardClient_CommitCorrection_Params* output);

class KeyboardClient_CommitCorrection_Params {
 public:
  using Data_ = internal::KeyboardClient_CommitCorrection_Params_Data;

  static KeyboardClient_CommitCorrection_ParamsPtr New();

  template <typename U>
  static KeyboardClient_CommitCorrection_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_CommitCorrection_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_CommitCorrection_Params>::Convert(*this);
  }

  KeyboardClient_CommitCorrection_Params();
  ~KeyboardClient_CommitCorrection_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_CommitCorrection_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_CommitCorrection_Params& other) const;

  CorrectionDataPtr correction;
};




class KeyboardClient_CommitText_Params;

using KeyboardClient_CommitText_ParamsPtr = mojo::InlinedStructPtr<KeyboardClient_CommitText_Params>;


size_t GetSerializedSize_(const KeyboardClient_CommitText_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_CommitText_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_CommitText_Params_Data** output);
void Deserialize_(internal::KeyboardClient_CommitText_Params_Data* input,
                  KeyboardClient_CommitText_Params* output);

class KeyboardClient_CommitText_Params {
 public:
  using Data_ = internal::KeyboardClient_CommitText_Params_Data;

  static KeyboardClient_CommitText_ParamsPtr New();

  template <typename U>
  static KeyboardClient_CommitText_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_CommitText_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_CommitText_Params>::Convert(*this);
  }

  KeyboardClient_CommitText_Params();
  ~KeyboardClient_CommitText_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_CommitText_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_CommitText_Params& other) const;

  mojo::String text;
  int32_t newCursorPosition;
};




class KeyboardClient_DeleteSurroundingText_Params;

using KeyboardClient_DeleteSurroundingText_ParamsPtr = mojo::InlinedStructPtr<KeyboardClient_DeleteSurroundingText_Params>;


size_t GetSerializedSize_(const KeyboardClient_DeleteSurroundingText_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_DeleteSurroundingText_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_DeleteSurroundingText_Params_Data** output);
void Deserialize_(internal::KeyboardClient_DeleteSurroundingText_Params_Data* input,
                  KeyboardClient_DeleteSurroundingText_Params* output);

class KeyboardClient_DeleteSurroundingText_Params {
 public:
  using Data_ = internal::KeyboardClient_DeleteSurroundingText_Params_Data;

  static KeyboardClient_DeleteSurroundingText_ParamsPtr New();

  template <typename U>
  static KeyboardClient_DeleteSurroundingText_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_DeleteSurroundingText_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_DeleteSurroundingText_Params>::Convert(*this);
  }

  KeyboardClient_DeleteSurroundingText_Params();
  ~KeyboardClient_DeleteSurroundingText_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_DeleteSurroundingText_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_DeleteSurroundingText_Params& other) const;

  int32_t beforeLength;
  int32_t afterLength;
};




class KeyboardClient_SetComposingRegion_Params;

using KeyboardClient_SetComposingRegion_ParamsPtr = mojo::InlinedStructPtr<KeyboardClient_SetComposingRegion_Params>;


size_t GetSerializedSize_(const KeyboardClient_SetComposingRegion_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_SetComposingRegion_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_SetComposingRegion_Params_Data** output);
void Deserialize_(internal::KeyboardClient_SetComposingRegion_Params_Data* input,
                  KeyboardClient_SetComposingRegion_Params* output);

class KeyboardClient_SetComposingRegion_Params {
 public:
  using Data_ = internal::KeyboardClient_SetComposingRegion_Params_Data;

  static KeyboardClient_SetComposingRegion_ParamsPtr New();

  template <typename U>
  static KeyboardClient_SetComposingRegion_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_SetComposingRegion_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_SetComposingRegion_Params>::Convert(*this);
  }

  KeyboardClient_SetComposingRegion_Params();
  ~KeyboardClient_SetComposingRegion_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_SetComposingRegion_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_SetComposingRegion_Params& other) const;

  int32_t start;
  int32_t end;
};




class KeyboardClient_SetComposingText_Params;

using KeyboardClient_SetComposingText_ParamsPtr = mojo::InlinedStructPtr<KeyboardClient_SetComposingText_Params>;


size_t GetSerializedSize_(const KeyboardClient_SetComposingText_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_SetComposingText_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_SetComposingText_Params_Data** output);
void Deserialize_(internal::KeyboardClient_SetComposingText_Params_Data* input,
                  KeyboardClient_SetComposingText_Params* output);

class KeyboardClient_SetComposingText_Params {
 public:
  using Data_ = internal::KeyboardClient_SetComposingText_Params_Data;

  static KeyboardClient_SetComposingText_ParamsPtr New();

  template <typename U>
  static KeyboardClient_SetComposingText_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_SetComposingText_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_SetComposingText_Params>::Convert(*this);
  }

  KeyboardClient_SetComposingText_Params();
  ~KeyboardClient_SetComposingText_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_SetComposingText_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_SetComposingText_Params& other) const;

  mojo::String text;
  int32_t newCursorPosition;
};




class KeyboardClient_SetSelection_Params;

using KeyboardClient_SetSelection_ParamsPtr = mojo::InlinedStructPtr<KeyboardClient_SetSelection_Params>;


size_t GetSerializedSize_(const KeyboardClient_SetSelection_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_SetSelection_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_SetSelection_Params_Data** output);
void Deserialize_(internal::KeyboardClient_SetSelection_Params_Data* input,
                  KeyboardClient_SetSelection_Params* output);

class KeyboardClient_SetSelection_Params {
 public:
  using Data_ = internal::KeyboardClient_SetSelection_Params_Data;

  static KeyboardClient_SetSelection_ParamsPtr New();

  template <typename U>
  static KeyboardClient_SetSelection_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_SetSelection_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_SetSelection_Params>::Convert(*this);
  }

  KeyboardClient_SetSelection_Params();
  ~KeyboardClient_SetSelection_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_SetSelection_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_SetSelection_Params& other) const;

  int32_t start;
  int32_t end;
};




class KeyboardClient_Submit_Params;

using KeyboardClient_Submit_ParamsPtr = mojo::InlinedStructPtr<KeyboardClient_Submit_Params>;


size_t GetSerializedSize_(const KeyboardClient_Submit_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardClient_Submit_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardClient_Submit_Params_Data** output);
void Deserialize_(internal::KeyboardClient_Submit_Params_Data* input,
                  KeyboardClient_Submit_Params* output);

class KeyboardClient_Submit_Params {
 public:
  using Data_ = internal::KeyboardClient_Submit_Params_Data;

  static KeyboardClient_Submit_ParamsPtr New();

  template <typename U>
  static KeyboardClient_Submit_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardClient_Submit_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardClient_Submit_Params>::Convert(*this);
  }

  KeyboardClient_Submit_Params();
  ~KeyboardClient_Submit_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardClient_Submit_ParamsPtr Clone() const;
  bool Equals(const KeyboardClient_Submit_Params& other) const;

  SubmitAction action;
};



      

class KeyboardService_Show_Params;

using KeyboardService_Show_ParamsPtr = mojo::StructPtr<KeyboardService_Show_Params>;


size_t GetSerializedSize_(const KeyboardService_Show_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardService_Show_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardService_Show_Params_Data** output);
void Deserialize_(internal::KeyboardService_Show_Params_Data* input,
                  KeyboardService_Show_Params* output);

class KeyboardService_Show_Params {
 public:
  using Data_ = internal::KeyboardService_Show_Params_Data;

  static KeyboardService_Show_ParamsPtr New();

  template <typename U>
  static KeyboardService_Show_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardService_Show_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardService_Show_Params>::Convert(*this);
  }

  KeyboardService_Show_Params();
  ~KeyboardService_Show_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const KeyboardService_Show_Params& other) const;

  mojo::InterfaceHandle<KeyboardClient> client;
  KeyboardType type;
};




class KeyboardService_ShowByRequest_Params;

using KeyboardService_ShowByRequest_ParamsPtr = mojo::InlinedStructPtr<KeyboardService_ShowByRequest_Params>;


size_t GetSerializedSize_(const KeyboardService_ShowByRequest_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardService_ShowByRequest_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardService_ShowByRequest_Params_Data** output);
void Deserialize_(internal::KeyboardService_ShowByRequest_Params_Data* input,
                  KeyboardService_ShowByRequest_Params* output);

class KeyboardService_ShowByRequest_Params {
 public:
  using Data_ = internal::KeyboardService_ShowByRequest_Params_Data;

  static KeyboardService_ShowByRequest_ParamsPtr New();

  template <typename U>
  static KeyboardService_ShowByRequest_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardService_ShowByRequest_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardService_ShowByRequest_Params>::Convert(*this);
  }

  KeyboardService_ShowByRequest_Params();
  ~KeyboardService_ShowByRequest_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardService_ShowByRequest_ParamsPtr Clone() const;
  bool Equals(const KeyboardService_ShowByRequest_Params& other) const;

};




class KeyboardService_Hide_Params;

using KeyboardService_Hide_ParamsPtr = mojo::InlinedStructPtr<KeyboardService_Hide_Params>;


size_t GetSerializedSize_(const KeyboardService_Hide_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardService_Hide_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardService_Hide_Params_Data** output);
void Deserialize_(internal::KeyboardService_Hide_Params_Data* input,
                  KeyboardService_Hide_Params* output);

class KeyboardService_Hide_Params {
 public:
  using Data_ = internal::KeyboardService_Hide_Params_Data;

  static KeyboardService_Hide_ParamsPtr New();

  template <typename U>
  static KeyboardService_Hide_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardService_Hide_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardService_Hide_Params>::Convert(*this);
  }

  KeyboardService_Hide_Params();
  ~KeyboardService_Hide_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardService_Hide_ParamsPtr Clone() const;
  bool Equals(const KeyboardService_Hide_Params& other) const;

};




class KeyboardService_SetText_Params;

using KeyboardService_SetText_ParamsPtr = mojo::InlinedStructPtr<KeyboardService_SetText_Params>;


size_t GetSerializedSize_(const KeyboardService_SetText_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardService_SetText_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardService_SetText_Params_Data** output);
void Deserialize_(internal::KeyboardService_SetText_Params_Data* input,
                  KeyboardService_SetText_Params* output);

class KeyboardService_SetText_Params {
 public:
  using Data_ = internal::KeyboardService_SetText_Params_Data;

  static KeyboardService_SetText_ParamsPtr New();

  template <typename U>
  static KeyboardService_SetText_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardService_SetText_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardService_SetText_Params>::Convert(*this);
  }

  KeyboardService_SetText_Params();
  ~KeyboardService_SetText_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardService_SetText_ParamsPtr Clone() const;
  bool Equals(const KeyboardService_SetText_Params& other) const;

  mojo::String text;
};




class KeyboardService_SetSelection_Params;

using KeyboardService_SetSelection_ParamsPtr = mojo::InlinedStructPtr<KeyboardService_SetSelection_Params>;


size_t GetSerializedSize_(const KeyboardService_SetSelection_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardService_SetSelection_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardService_SetSelection_Params_Data** output);
void Deserialize_(internal::KeyboardService_SetSelection_Params_Data* input,
                  KeyboardService_SetSelection_Params* output);

class KeyboardService_SetSelection_Params {
 public:
  using Data_ = internal::KeyboardService_SetSelection_Params_Data;

  static KeyboardService_SetSelection_ParamsPtr New();

  template <typename U>
  static KeyboardService_SetSelection_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardService_SetSelection_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardService_SetSelection_Params>::Convert(*this);
  }

  KeyboardService_SetSelection_Params();
  ~KeyboardService_SetSelection_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeyboardService_SetSelection_ParamsPtr Clone() const;
  bool Equals(const KeyboardService_SetSelection_Params& other) const;

  int32_t start;
  int32_t end;
};



      

class KeyboardServiceFactory_CreateKeyboardService_Params;

using KeyboardServiceFactory_CreateKeyboardService_ParamsPtr = mojo::StructPtr<KeyboardServiceFactory_CreateKeyboardService_Params>;


size_t GetSerializedSize_(const KeyboardServiceFactory_CreateKeyboardService_Params& input);
mojo::internal::ValidationError Serialize_(
    KeyboardServiceFactory_CreateKeyboardService_Params* input,
    mojo::internal::Buffer* buffer,
    internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data** output);
void Deserialize_(internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data* input,
                  KeyboardServiceFactory_CreateKeyboardService_Params* output);

class KeyboardServiceFactory_CreateKeyboardService_Params {
 public:
  using Data_ = internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data;

  static KeyboardServiceFactory_CreateKeyboardService_ParamsPtr New();

  template <typename U>
  static KeyboardServiceFactory_CreateKeyboardService_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<KeyboardServiceFactory_CreateKeyboardService_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeyboardServiceFactory_CreateKeyboardService_Params>::Convert(*this);
  }

  KeyboardServiceFactory_CreateKeyboardService_Params();
  ~KeyboardServiceFactory_CreateKeyboardService_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const KeyboardServiceFactory_CreateKeyboardService_Params& other) const;

  mojo::InterfaceRequest<mojo::NativeViewportEventDispatcher> keyEventDispatcher;
  mojo::InterfaceRequest<KeyboardService> serviceRequest;
};



}  // namespace keyboard

#endif  // MOJO_SERVICES_KEYBOARD_INTERFACES_KEYBOARD_MOJOM_COMMON_H_
