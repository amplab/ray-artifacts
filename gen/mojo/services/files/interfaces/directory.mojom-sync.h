// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_SYNC_H_
#define MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/files/interfaces/directory.mojom-internal.h"
#include "mojo/services/files/interfaces/directory.mojom-common.h"
#include "mojo/services/files/interfaces/file.mojom.h"
#include "mojo/services/files/interfaces/types.mojom.h"


namespace mojo {
namespace files {

// --- Synchronous interface declaration ---

class Directory_SynchronousProxy;
class Directory_Synchronous
  : public internal::Directory_Base {
 public:
  virtual ~Directory_Synchronous() override {}
  
  using Proxy_ = Directory_SynchronousProxy;
  virtual bool Read(
      mojo::files::Error* out_error, mojo::Array<mojo::files::DirectoryEntryPtr>* out_directory_contents)= 0;
  virtual bool Stat(
      mojo::files::Error* out_error, mojo::files::FileInformationPtr* out_file_information)= 0;
  virtual bool Touch(
      mojo::files::TimespecOrNowPtr in_atime, mojo::files::TimespecOrNowPtr in_mtime, mojo::files::Error* out_error)= 0;
  virtual bool OpenFile(
      const mojo::String& in_path, mojo::InterfaceRequest<mojo::files::File> in_file, uint32_t in_open_flags, mojo::files::Error* out_error)= 0;
  virtual bool OpenDirectory(
      const mojo::String& in_path, mojo::InterfaceRequest<Directory> in_directory, uint32_t in_open_flags, mojo::files::Error* out_error)= 0;
  virtual bool Rename(
      const mojo::String& in_path, const mojo::String& in_new_path, mojo::files::Error* out_error)= 0;
  virtual bool Delete(
      const mojo::String& in_path, uint32_t in_delete_flags, mojo::files::Error* out_error)= 0;
};

class Directory_SynchronousProxy
    : public Directory_Synchronous {
 public:
  explicit Directory_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Read(mojo::files::Error* out_error, mojo::Array<mojo::files::DirectoryEntryPtr>* out_directory_contents) override;
  bool Stat(mojo::files::Error* out_error, mojo::files::FileInformationPtr* out_file_information) override;
  bool Touch(mojo::files::TimespecOrNowPtr in_atime, mojo::files::TimespecOrNowPtr in_mtime, mojo::files::Error* out_error) override;
  bool OpenFile(const mojo::String& in_path, mojo::InterfaceRequest<mojo::files::File> in_file, uint32_t in_open_flags, mojo::files::Error* out_error) override;
  bool OpenDirectory(const mojo::String& in_path, mojo::InterfaceRequest<Directory> in_directory, uint32_t in_open_flags, mojo::files::Error* out_error) override;
  bool Rename(const mojo::String& in_path, const mojo::String& in_new_path, mojo::files::Error* out_error) override;
  bool Delete(const mojo::String& in_path, uint32_t in_delete_flags, mojo::files::Error* out_error) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_SYNC_H_
