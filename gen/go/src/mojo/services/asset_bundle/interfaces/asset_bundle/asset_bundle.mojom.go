// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/asset_bundle/interfaces/asset_bundle.mojom
//

package asset_bundle

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type AssetBundle interface {
	GetAsStream(inAssetName string) (outAssetData system.ConsumerHandle, err error)
}



var assetBundle_Name = "mojo::asset_bundle::AssetBundle"

type AssetBundle_Request bindings.InterfaceRequest

func (r *AssetBundle_Request) Name() string {
	return assetBundle_Name
}


type AssetBundle_Pointer bindings.InterfacePointer

func (p *AssetBundle_Pointer) Name() string {
	return assetBundle_Name
}

type AssetBundle_ServiceFactory struct{
	Delegate AssetBundle_Factory
}

type AssetBundle_Factory interface {
	Create(request AssetBundle_Request)
}

func (f *AssetBundle_ServiceFactory) Name() string {
	return assetBundle_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *AssetBundle_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &AssetBundle_ServiceDescription{}
}

func (f *AssetBundle_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := AssetBundle_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForAssetBundle creates a message pipe for use with the
// AssetBundle interface with a AssetBundle_Request on one end and a AssetBundle_Pointer on the other.
func CreateMessagePipeForAssetBundle() (AssetBundle_Request, AssetBundle_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return AssetBundle_Request(r), AssetBundle_Pointer(p)
}

const assetBundle_GetAsStream_Name uint32 = 0

type AssetBundle_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewAssetBundleProxy(p AssetBundle_Pointer, waiter bindings.AsyncWaiter) *AssetBundle_Proxy {
	return &AssetBundle_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *AssetBundle_Proxy) Close_Proxy() {
	p.router.Close()
}

type assetBundle_GetAsStream_Params struct {
	inAssetName string
}


func (s *assetBundle_GetAsStream_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inAssetName); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var assetBundle_GetAsStream_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *assetBundle_GetAsStream_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(assetBundle_GetAsStream_Params_Versions), func(i int) bool {
		return assetBundle_GetAsStream_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(assetBundle_GetAsStream_Params_Versions) {
		if assetBundle_GetAsStream_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := assetBundle_GetAsStream_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inAssetName = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type assetBundle_GetAsStream_ResponseParams struct {
	outAssetData system.ConsumerHandle
}


func (s *assetBundle_GetAsStream_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.outAssetData); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var assetBundle_GetAsStream_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *assetBundle_GetAsStream_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(assetBundle_GetAsStream_ResponseParams_Versions), func(i int) bool {
		return assetBundle_GetAsStream_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(assetBundle_GetAsStream_ResponseParams_Versions) {
		if assetBundle_GetAsStream_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := assetBundle_GetAsStream_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.outAssetData = handle0
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *AssetBundle_Proxy) GetAsStream(inAssetName string) (outAssetData system.ConsumerHandle, err error) {
	payload := &assetBundle_GetAsStream_Params{
		inAssetName,
	}
	header := bindings.MessageHeader{
		Type: assetBundle_GetAsStream_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, assetBundle_GetAsStream_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response assetBundle_GetAsStream_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outAssetData = response.outAssetData
	return
}

type assetBundle_Stub struct {
	connector *bindings.Connector
	impl AssetBundle
}

func NewAssetBundleStub(r AssetBundle_Request, impl AssetBundle, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &assetBundle_Stub{connector, impl})
}


func (f *AssetBundle_Request) ServiceDescription() service_describer.ServiceDescription {
	return &AssetBundle_ServiceDescription{}
}


type AssetBundle_ServiceDescription struct{}

func (sd *AssetBundle_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *AssetBundle_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *AssetBundle_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*AssetBundle_ServiceDescription)(nil)


func (s *assetBundle_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case assetBundle_GetAsStream_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request assetBundle_GetAsStream_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response assetBundle_GetAsStream_ResponseParams
		response.outAssetData, err = s.impl.GetAsStream(request.inAssetName)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: assetBundle_GetAsStream_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type AssetUnpacker interface {
	UnpackZipStream(inZippedAssets system.ConsumerHandle, inAssetBundle AssetBundle_Request) (err error)
}



var assetUnpacker_Name = "mojo::asset_bundle::AssetUnpacker"

type AssetUnpacker_Request bindings.InterfaceRequest

func (r *AssetUnpacker_Request) Name() string {
	return assetUnpacker_Name
}


type AssetUnpacker_Pointer bindings.InterfacePointer

func (p *AssetUnpacker_Pointer) Name() string {
	return assetUnpacker_Name
}

type AssetUnpacker_ServiceFactory struct{
	Delegate AssetUnpacker_Factory
}

type AssetUnpacker_Factory interface {
	Create(request AssetUnpacker_Request)
}

func (f *AssetUnpacker_ServiceFactory) Name() string {
	return assetUnpacker_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *AssetUnpacker_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &AssetUnpacker_ServiceDescription{}
}

func (f *AssetUnpacker_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := AssetUnpacker_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForAssetUnpacker creates a message pipe for use with the
// AssetUnpacker interface with a AssetUnpacker_Request on one end and a AssetUnpacker_Pointer on the other.
func CreateMessagePipeForAssetUnpacker() (AssetUnpacker_Request, AssetUnpacker_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return AssetUnpacker_Request(r), AssetUnpacker_Pointer(p)
}

const assetUnpacker_UnpackZipStream_Name uint32 = 0

type AssetUnpacker_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewAssetUnpackerProxy(p AssetUnpacker_Pointer, waiter bindings.AsyncWaiter) *AssetUnpacker_Proxy {
	return &AssetUnpacker_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *AssetUnpacker_Proxy) Close_Proxy() {
	p.router.Close()
}

type assetUnpacker_UnpackZipStream_Params struct {
	inZippedAssets system.ConsumerHandle
	inAssetBundle AssetBundle_Request
}


func (s *assetUnpacker_UnpackZipStream_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inZippedAssets); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inAssetBundle.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var assetUnpacker_UnpackZipStream_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *assetUnpacker_UnpackZipStream_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(assetUnpacker_UnpackZipStream_Params_Versions), func(i int) bool {
		return assetUnpacker_UnpackZipStream_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(assetUnpacker_UnpackZipStream_Params_Versions) {
		if assetUnpacker_UnpackZipStream_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := assetUnpacker_UnpackZipStream_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.inZippedAssets = handle0
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inAssetBundle = AssetBundle_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *AssetUnpacker_Proxy) UnpackZipStream(inZippedAssets system.ConsumerHandle, inAssetBundle AssetBundle_Request) (err error) {
	payload := &assetUnpacker_UnpackZipStream_Params{
		inZippedAssets,
		inAssetBundle,
	}
	header := bindings.MessageHeader{
		Type: assetUnpacker_UnpackZipStream_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type assetUnpacker_Stub struct {
	connector *bindings.Connector
	impl AssetUnpacker
}

func NewAssetUnpackerStub(r AssetUnpacker_Request, impl AssetUnpacker, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &assetUnpacker_Stub{connector, impl})
}


func (f *AssetUnpacker_Request) ServiceDescription() service_describer.ServiceDescription {
	return &AssetUnpacker_ServiceDescription{}
}


type AssetUnpacker_ServiceDescription struct{}

func (sd *AssetUnpacker_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *AssetUnpacker_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *AssetUnpacker_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*AssetUnpacker_ServiceDescription)(nil)


func (s *assetUnpacker_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case assetUnpacker_UnpackZipStream_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request assetUnpacker_UnpackZipStream_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.UnpackZipStream(request.inZippedAssets, request.inAssetBundle)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

