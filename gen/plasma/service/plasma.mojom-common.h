// NOTE: This file was generated by the Mojo bindings generator.
#ifndef PLASMA_SERVICE_PLASMA_MOJOM_COMMON_H_
#define PLASMA_SERVICE_PLASMA_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "plasma/service/plasma.mojom-internal.h"
namespace plasma {
namespace service {

// --- Interface Forward Declarations ---
class Plasma;
class PlasmaRequestValidator;
class PlasmaResponseValidator;
class Plasma_Synchronous;

// --- Struct Forward Declarations ---
class ObjectInfo;

using ObjectInfoPtr = mojo::StructPtr<ObjectInfo>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Plasma_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = PlasmaRequestValidator;
  using ResponseValidator_ = PlasmaResponseValidator;
  using Synchronous_ = Plasma_Synchronous;
  enum class MessageOrdinals : uint32_t {
    CreateObject = 0,
    ResizeObject = 1,
    SealObject = 2,
    GetObject = 3,
    ListObjects = 4,
  };


  virtual ~Plasma_Base() {}
};

}  // namespace internal

// Async interface declaration

class PlasmaProxy;
class PlasmaStub;
class Plasma_Synchronous;

class PlasmaRequestValidator;
class PlasmaResponseValidator;

class Plasma : public internal::Plasma_Base {
 public:
  virtual ~Plasma() override {}

  using Proxy_ = PlasmaProxy;
  using Stub_ = PlasmaStub;
  using CreateObjectCallback = mojo::Callback<void(mojo::ScopedSharedBufferHandle)>;
  virtual void CreateObject(const mojo::String& object_id, uint64_t size, const mojo::String& name, int64_t creator_id, const CreateObjectCallback& callback) = 0;
  using ResizeObjectCallback = mojo::Callback<void(mojo::ScopedSharedBufferHandle)>;
  virtual void ResizeObject(const mojo::String& object_id, uint64_t new_size, const ResizeObjectCallback& callback) = 0;
  virtual void SealObject(const mojo::String& object_id) = 0;
  using GetObjectCallback = mojo::Callback<void(mojo::ScopedSharedBufferHandle, uint64_t)>;
  virtual void GetObject(const mojo::String& object_id, bool block, const GetObjectCallback& callback) = 0;
  using ListObjectsCallback = mojo::Callback<void(mojo::Array<ObjectInfoPtr>)>;
  virtual void ListObjects(const ListObjectsCallback& callback) = 0;
};

}  // namespace service
}  // namespace plasma

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<plasma::service::ObjectInfoPtr, true, false> {
  using DataType = plasma::service::internal::ObjectInfo_Data*;
};

}  // internal
}  // mojo
namespace plasma {
namespace service {

// --- Interface Request Validators ---
class PlasmaRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class PlasmaResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class ObjectInfo {
 public:
  using Data_ = internal::ObjectInfo_Data;

  static ObjectInfoPtr New();

  template <typename U>
  static ObjectInfoPtr From(const U& u) {
    return mojo::TypeConverter<ObjectInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ObjectInfo>::Convert(*this);
  }

  ObjectInfo();
  ~ObjectInfo();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ObjectInfoPtr Clone() const;
  bool Equals(const ObjectInfo& other) const;

  mojo::String name;
  uint64_t size;
  int64_t create_time;
  int64_t construct_duration;
  int64_t creator_id;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const ObjectInfo& input);
mojo::internal::ValidationError Serialize_(
    ObjectInfo* input,
    mojo::internal::Buffer* buffer,
    internal::ObjectInfo_Data** output);
void Deserialize_(internal::ObjectInfo_Data* input,
                  ObjectInfo* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Plasma_CreateObject_Params;

using Plasma_CreateObject_ParamsPtr = mojo::InlinedStructPtr<Plasma_CreateObject_Params>;


size_t GetSerializedSize_(const Plasma_CreateObject_Params& input);
mojo::internal::ValidationError Serialize_(
    Plasma_CreateObject_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_CreateObject_Params_Data** output);
void Deserialize_(internal::Plasma_CreateObject_Params_Data* input,
                  Plasma_CreateObject_Params* output);

class Plasma_CreateObject_Params {
 public:
  using Data_ = internal::Plasma_CreateObject_Params_Data;

  static Plasma_CreateObject_ParamsPtr New();

  template <typename U>
  static Plasma_CreateObject_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_CreateObject_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_CreateObject_Params>::Convert(*this);
  }

  Plasma_CreateObject_Params();
  ~Plasma_CreateObject_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Plasma_CreateObject_ParamsPtr Clone() const;
  bool Equals(const Plasma_CreateObject_Params& other) const;

  mojo::String object_id;
  uint64_t size;
  mojo::String name;
  int64_t creator_id;
};



class Plasma_CreateObject_ResponseParams;

using Plasma_CreateObject_ResponseParamsPtr = mojo::StructPtr<Plasma_CreateObject_ResponseParams>;


size_t GetSerializedSize_(const Plasma_CreateObject_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Plasma_CreateObject_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_CreateObject_ResponseParams_Data** output);
void Deserialize_(internal::Plasma_CreateObject_ResponseParams_Data* input,
                  Plasma_CreateObject_ResponseParams* output);

class Plasma_CreateObject_ResponseParams {
 public:
  using Data_ = internal::Plasma_CreateObject_ResponseParams_Data;

  static Plasma_CreateObject_ResponseParamsPtr New();

  template <typename U>
  static Plasma_CreateObject_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_CreateObject_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_CreateObject_ResponseParams>::Convert(*this);
  }

  Plasma_CreateObject_ResponseParams();
  ~Plasma_CreateObject_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Plasma_CreateObject_ResponseParams& other) const;

  mojo::ScopedSharedBufferHandle buffer;
};



class Plasma_ResizeObject_Params;

using Plasma_ResizeObject_ParamsPtr = mojo::InlinedStructPtr<Plasma_ResizeObject_Params>;


size_t GetSerializedSize_(const Plasma_ResizeObject_Params& input);
mojo::internal::ValidationError Serialize_(
    Plasma_ResizeObject_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_ResizeObject_Params_Data** output);
void Deserialize_(internal::Plasma_ResizeObject_Params_Data* input,
                  Plasma_ResizeObject_Params* output);

class Plasma_ResizeObject_Params {
 public:
  using Data_ = internal::Plasma_ResizeObject_Params_Data;

  static Plasma_ResizeObject_ParamsPtr New();

  template <typename U>
  static Plasma_ResizeObject_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_ResizeObject_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_ResizeObject_Params>::Convert(*this);
  }

  Plasma_ResizeObject_Params();
  ~Plasma_ResizeObject_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Plasma_ResizeObject_ParamsPtr Clone() const;
  bool Equals(const Plasma_ResizeObject_Params& other) const;

  mojo::String object_id;
  uint64_t new_size;
};



class Plasma_ResizeObject_ResponseParams;

using Plasma_ResizeObject_ResponseParamsPtr = mojo::StructPtr<Plasma_ResizeObject_ResponseParams>;


size_t GetSerializedSize_(const Plasma_ResizeObject_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Plasma_ResizeObject_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_ResizeObject_ResponseParams_Data** output);
void Deserialize_(internal::Plasma_ResizeObject_ResponseParams_Data* input,
                  Plasma_ResizeObject_ResponseParams* output);

class Plasma_ResizeObject_ResponseParams {
 public:
  using Data_ = internal::Plasma_ResizeObject_ResponseParams_Data;

  static Plasma_ResizeObject_ResponseParamsPtr New();

  template <typename U>
  static Plasma_ResizeObject_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_ResizeObject_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_ResizeObject_ResponseParams>::Convert(*this);
  }

  Plasma_ResizeObject_ResponseParams();
  ~Plasma_ResizeObject_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Plasma_ResizeObject_ResponseParams& other) const;

  mojo::ScopedSharedBufferHandle buffer;
};



class Plasma_SealObject_Params;

using Plasma_SealObject_ParamsPtr = mojo::InlinedStructPtr<Plasma_SealObject_Params>;


size_t GetSerializedSize_(const Plasma_SealObject_Params& input);
mojo::internal::ValidationError Serialize_(
    Plasma_SealObject_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_SealObject_Params_Data** output);
void Deserialize_(internal::Plasma_SealObject_Params_Data* input,
                  Plasma_SealObject_Params* output);

class Plasma_SealObject_Params {
 public:
  using Data_ = internal::Plasma_SealObject_Params_Data;

  static Plasma_SealObject_ParamsPtr New();

  template <typename U>
  static Plasma_SealObject_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_SealObject_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_SealObject_Params>::Convert(*this);
  }

  Plasma_SealObject_Params();
  ~Plasma_SealObject_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Plasma_SealObject_ParamsPtr Clone() const;
  bool Equals(const Plasma_SealObject_Params& other) const;

  mojo::String object_id;
};




class Plasma_GetObject_Params;

using Plasma_GetObject_ParamsPtr = mojo::InlinedStructPtr<Plasma_GetObject_Params>;


size_t GetSerializedSize_(const Plasma_GetObject_Params& input);
mojo::internal::ValidationError Serialize_(
    Plasma_GetObject_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_GetObject_Params_Data** output);
void Deserialize_(internal::Plasma_GetObject_Params_Data* input,
                  Plasma_GetObject_Params* output);

class Plasma_GetObject_Params {
 public:
  using Data_ = internal::Plasma_GetObject_Params_Data;

  static Plasma_GetObject_ParamsPtr New();

  template <typename U>
  static Plasma_GetObject_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_GetObject_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_GetObject_Params>::Convert(*this);
  }

  Plasma_GetObject_Params();
  ~Plasma_GetObject_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Plasma_GetObject_ParamsPtr Clone() const;
  bool Equals(const Plasma_GetObject_Params& other) const;

  mojo::String object_id;
  bool block;
};



class Plasma_GetObject_ResponseParams;

using Plasma_GetObject_ResponseParamsPtr = mojo::StructPtr<Plasma_GetObject_ResponseParams>;


size_t GetSerializedSize_(const Plasma_GetObject_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Plasma_GetObject_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_GetObject_ResponseParams_Data** output);
void Deserialize_(internal::Plasma_GetObject_ResponseParams_Data* input,
                  Plasma_GetObject_ResponseParams* output);

class Plasma_GetObject_ResponseParams {
 public:
  using Data_ = internal::Plasma_GetObject_ResponseParams_Data;

  static Plasma_GetObject_ResponseParamsPtr New();

  template <typename U>
  static Plasma_GetObject_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_GetObject_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_GetObject_ResponseParams>::Convert(*this);
  }

  Plasma_GetObject_ResponseParams();
  ~Plasma_GetObject_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Plasma_GetObject_ResponseParams& other) const;

  mojo::ScopedSharedBufferHandle buffer;
  uint64_t size;
};



class Plasma_ListObjects_Params;

using Plasma_ListObjects_ParamsPtr = mojo::InlinedStructPtr<Plasma_ListObjects_Params>;


size_t GetSerializedSize_(const Plasma_ListObjects_Params& input);
mojo::internal::ValidationError Serialize_(
    Plasma_ListObjects_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_ListObjects_Params_Data** output);
void Deserialize_(internal::Plasma_ListObjects_Params_Data* input,
                  Plasma_ListObjects_Params* output);

class Plasma_ListObjects_Params {
 public:
  using Data_ = internal::Plasma_ListObjects_Params_Data;

  static Plasma_ListObjects_ParamsPtr New();

  template <typename U>
  static Plasma_ListObjects_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_ListObjects_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_ListObjects_Params>::Convert(*this);
  }

  Plasma_ListObjects_Params();
  ~Plasma_ListObjects_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Plasma_ListObjects_ParamsPtr Clone() const;
  bool Equals(const Plasma_ListObjects_Params& other) const;

};



class Plasma_ListObjects_ResponseParams;

using Plasma_ListObjects_ResponseParamsPtr = mojo::StructPtr<Plasma_ListObjects_ResponseParams>;


size_t GetSerializedSize_(const Plasma_ListObjects_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Plasma_ListObjects_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Plasma_ListObjects_ResponseParams_Data** output);
void Deserialize_(internal::Plasma_ListObjects_ResponseParams_Data* input,
                  Plasma_ListObjects_ResponseParams* output);

class Plasma_ListObjects_ResponseParams {
 public:
  using Data_ = internal::Plasma_ListObjects_ResponseParams_Data;

  static Plasma_ListObjects_ResponseParamsPtr New();

  template <typename U>
  static Plasma_ListObjects_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Plasma_ListObjects_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Plasma_ListObjects_ResponseParams>::Convert(*this);
  }

  Plasma_ListObjects_ResponseParams();
  ~Plasma_ListObjects_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Plasma_ListObjects_ResponseParamsPtr Clone() const;
  bool Equals(const Plasma_ListObjects_ResponseParams& other) const;

  mojo::Array<ObjectInfoPtr> info;
};


}  // namespace service
}  // namespace plasma

#endif  // PLASMA_SERVICE_PLASMA_MOJOM_COMMON_H_
