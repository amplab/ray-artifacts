// NOTE: This file was generated by the Mojo bindings generator.
#ifndef PLASMA_SERVICE_PLASMA_MOJOM_H_
#define PLASMA_SERVICE_PLASMA_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "plasma/service/plasma.mojom-common.h"
namespace plasma {
namespace service {

// --- Interface Forward Declarations ---

using PlasmaPtr = mojo::InterfacePtr<Plasma>;


// --- Interface Proxies ---


class PlasmaProxy
    : public Plasma,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit PlasmaProxy(mojo::MessageReceiverWithResponder* receiver);
  void CreateObject(
      const mojo::String& object_id, uint64_t size, const mojo::String& name, int64_t creator_id, const CreateObjectCallback& callback
  ) override;
  void ResizeObject(
      const mojo::String& object_id, uint64_t new_size, const ResizeObjectCallback& callback
  ) override;
  void SealObject(
      const mojo::String& object_id
  ) override;
  void GetObject(
      const mojo::String& object_id, bool block, const GetObjectCallback& callback
  ) override;
  void ListObjects(
      const ListObjectsCallback& callback
  ) override;
};


// --- Interface Stubs ---

class PlasmaStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  PlasmaStub();
  ~PlasmaStub() override;
  void set_sink(Plasma* sink) { sink_ = sink; }
  Plasma* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  Plasma* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace service
}  // namespace plasma

#endif  // PLASMA_SERVICE_PLASMA_MOJOM_H_
