// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_SERVICE_DESCRIBER_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_SERVICE_DESCRIBER_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/service_describer.mojom-internal.h"
#include "mojo/public/interfaces/bindings/mojom_types.mojom-common.h"
namespace mojo {
namespace bindings {
namespace types {

// --- Interface Forward Declarations ---
class ServiceDescriber;
class ServiceDescriberRequestValidator;
class ServiceDescriber_Synchronous;
class ServiceDescription;
class ServiceDescriptionRequestValidator;
class ServiceDescriptionResponseValidator;
class ServiceDescription_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class ServiceDescriber_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ServiceDescriberRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = ServiceDescriber_Synchronous;
  enum class MessageOrdinals : uint32_t {
    DescribeService = 0,
  };


  virtual ~ServiceDescriber_Base() {}
};

}  // namespace internal

// Async interface declaration

class ServiceDescriberProxy;
class ServiceDescriberStub;
class ServiceDescriber_Synchronous;

class ServiceDescriberRequestValidator;

class ServiceDescriber : public internal::ServiceDescriber_Base {
 public:
  virtual ~ServiceDescriber() override {}

  using Proxy_ = ServiceDescriberProxy;
  using Stub_ = ServiceDescriberStub;
  virtual void DescribeService(const mojo::String& interface_name, mojo::InterfaceRequest<ServiceDescription> description_request) = 0;
};

namespace internal {
class ServiceDescription_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ServiceDescriptionRequestValidator;
  using ResponseValidator_ = ServiceDescriptionResponseValidator;
  using Synchronous_ = ServiceDescription_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetTopLevelInterface = 0,
    GetTypeDefinition = 1,
    GetAllTypeDefinitions = 2,
  };


  virtual ~ServiceDescription_Base() {}
};

}  // namespace internal

// Async interface declaration

class ServiceDescriptionProxy;
class ServiceDescriptionStub;
class ServiceDescription_Synchronous;

class ServiceDescriptionRequestValidator;
class ServiceDescriptionResponseValidator;

class ServiceDescription : public internal::ServiceDescription_Base {
 public:
  virtual ~ServiceDescription() override {}

  using Proxy_ = ServiceDescriptionProxy;
  using Stub_ = ServiceDescriptionStub;
  using GetTopLevelInterfaceCallback = mojo::Callback<void(mojo::bindings::types::MojomInterfacePtr)>;
  virtual void GetTopLevelInterface(const GetTopLevelInterfaceCallback& callback) = 0;
  using GetTypeDefinitionCallback = mojo::Callback<void(mojo::bindings::types::UserDefinedTypePtr)>;
  virtual void GetTypeDefinition(const mojo::String& type_key, const GetTypeDefinitionCallback& callback) = 0;
  using GetAllTypeDefinitionsCallback = mojo::Callback<void(mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr>)>;
  virtual void GetAllTypeDefinitions(const GetAllTypeDefinitionsCallback& callback) = 0;
};

}  // namespace types
}  // namespace bindings
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {
namespace bindings {
namespace types {

// --- Interface Request Validators ---
class ServiceDescriberRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class ServiceDescriptionRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class ServiceDescriptionResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class ServiceDescriber_DescribeService_Params;

using ServiceDescriber_DescribeService_ParamsPtr = mojo::StructPtr<ServiceDescriber_DescribeService_Params>;


size_t GetSerializedSize_(const ServiceDescriber_DescribeService_Params& input);
mojo::internal::ValidationError Serialize_(
    ServiceDescriber_DescribeService_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceDescriber_DescribeService_Params_Data** output);
void Deserialize_(internal::ServiceDescriber_DescribeService_Params_Data* input,
                  ServiceDescriber_DescribeService_Params* output);

class ServiceDescriber_DescribeService_Params {
 public:
  using Data_ = internal::ServiceDescriber_DescribeService_Params_Data;

  static ServiceDescriber_DescribeService_ParamsPtr New();

  template <typename U>
  static ServiceDescriber_DescribeService_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceDescriber_DescribeService_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceDescriber_DescribeService_Params>::Convert(*this);
  }

  ServiceDescriber_DescribeService_Params();
  ~ServiceDescriber_DescribeService_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const ServiceDescriber_DescribeService_Params& other) const;

  mojo::String interface_name;
  mojo::InterfaceRequest<ServiceDescription> description_request;
};



      

class ServiceDescription_GetTopLevelInterface_Params;

using ServiceDescription_GetTopLevelInterface_ParamsPtr = mojo::InlinedStructPtr<ServiceDescription_GetTopLevelInterface_Params>;


size_t GetSerializedSize_(const ServiceDescription_GetTopLevelInterface_Params& input);
mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTopLevelInterface_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceDescription_GetTopLevelInterface_Params_Data** output);
void Deserialize_(internal::ServiceDescription_GetTopLevelInterface_Params_Data* input,
                  ServiceDescription_GetTopLevelInterface_Params* output);

class ServiceDescription_GetTopLevelInterface_Params {
 public:
  using Data_ = internal::ServiceDescription_GetTopLevelInterface_Params_Data;

  static ServiceDescription_GetTopLevelInterface_ParamsPtr New();

  template <typename U>
  static ServiceDescription_GetTopLevelInterface_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceDescription_GetTopLevelInterface_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceDescription_GetTopLevelInterface_Params>::Convert(*this);
  }

  ServiceDescription_GetTopLevelInterface_Params();
  ~ServiceDescription_GetTopLevelInterface_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceDescription_GetTopLevelInterface_ParamsPtr Clone() const;
  bool Equals(const ServiceDescription_GetTopLevelInterface_Params& other) const;

};



class ServiceDescription_GetTopLevelInterface_ResponseParams;

using ServiceDescription_GetTopLevelInterface_ResponseParamsPtr = mojo::StructPtr<ServiceDescription_GetTopLevelInterface_ResponseParams>;


size_t GetSerializedSize_(const ServiceDescription_GetTopLevelInterface_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTopLevelInterface_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data** output);
void Deserialize_(internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data* input,
                  ServiceDescription_GetTopLevelInterface_ResponseParams* output);

class ServiceDescription_GetTopLevelInterface_ResponseParams {
 public:
  using Data_ = internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data;

  static ServiceDescription_GetTopLevelInterface_ResponseParamsPtr New();

  template <typename U>
  static ServiceDescription_GetTopLevelInterface_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceDescription_GetTopLevelInterface_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceDescription_GetTopLevelInterface_ResponseParams>::Convert(*this);
  }

  ServiceDescription_GetTopLevelInterface_ResponseParams();
  ~ServiceDescription_GetTopLevelInterface_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceDescription_GetTopLevelInterface_ResponseParamsPtr Clone() const;
  bool Equals(const ServiceDescription_GetTopLevelInterface_ResponseParams& other) const;

  mojo::bindings::types::MojomInterfacePtr mojomInterface;
};



class ServiceDescription_GetTypeDefinition_Params;

using ServiceDescription_GetTypeDefinition_ParamsPtr = mojo::InlinedStructPtr<ServiceDescription_GetTypeDefinition_Params>;


size_t GetSerializedSize_(const ServiceDescription_GetTypeDefinition_Params& input);
mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTypeDefinition_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceDescription_GetTypeDefinition_Params_Data** output);
void Deserialize_(internal::ServiceDescription_GetTypeDefinition_Params_Data* input,
                  ServiceDescription_GetTypeDefinition_Params* output);

class ServiceDescription_GetTypeDefinition_Params {
 public:
  using Data_ = internal::ServiceDescription_GetTypeDefinition_Params_Data;

  static ServiceDescription_GetTypeDefinition_ParamsPtr New();

  template <typename U>
  static ServiceDescription_GetTypeDefinition_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceDescription_GetTypeDefinition_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceDescription_GetTypeDefinition_Params>::Convert(*this);
  }

  ServiceDescription_GetTypeDefinition_Params();
  ~ServiceDescription_GetTypeDefinition_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceDescription_GetTypeDefinition_ParamsPtr Clone() const;
  bool Equals(const ServiceDescription_GetTypeDefinition_Params& other) const;

  mojo::String type_key;
};



class ServiceDescription_GetTypeDefinition_ResponseParams;

using ServiceDescription_GetTypeDefinition_ResponseParamsPtr = mojo::StructPtr<ServiceDescription_GetTypeDefinition_ResponseParams>;


size_t GetSerializedSize_(const ServiceDescription_GetTypeDefinition_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTypeDefinition_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data** output);
void Deserialize_(internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data* input,
                  ServiceDescription_GetTypeDefinition_ResponseParams* output);

class ServiceDescription_GetTypeDefinition_ResponseParams {
 public:
  using Data_ = internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data;

  static ServiceDescription_GetTypeDefinition_ResponseParamsPtr New();

  template <typename U>
  static ServiceDescription_GetTypeDefinition_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceDescription_GetTypeDefinition_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceDescription_GetTypeDefinition_ResponseParams>::Convert(*this);
  }

  ServiceDescription_GetTypeDefinition_ResponseParams();
  ~ServiceDescription_GetTypeDefinition_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceDescription_GetTypeDefinition_ResponseParamsPtr Clone() const;
  bool Equals(const ServiceDescription_GetTypeDefinition_ResponseParams& other) const;

  mojo::bindings::types::UserDefinedTypePtr type;
};



class ServiceDescription_GetAllTypeDefinitions_Params;

using ServiceDescription_GetAllTypeDefinitions_ParamsPtr = mojo::InlinedStructPtr<ServiceDescription_GetAllTypeDefinitions_Params>;


size_t GetSerializedSize_(const ServiceDescription_GetAllTypeDefinitions_Params& input);
mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetAllTypeDefinitions_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceDescription_GetAllTypeDefinitions_Params_Data** output);
void Deserialize_(internal::ServiceDescription_GetAllTypeDefinitions_Params_Data* input,
                  ServiceDescription_GetAllTypeDefinitions_Params* output);

class ServiceDescription_GetAllTypeDefinitions_Params {
 public:
  using Data_ = internal::ServiceDescription_GetAllTypeDefinitions_Params_Data;

  static ServiceDescription_GetAllTypeDefinitions_ParamsPtr New();

  template <typename U>
  static ServiceDescription_GetAllTypeDefinitions_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceDescription_GetAllTypeDefinitions_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceDescription_GetAllTypeDefinitions_Params>::Convert(*this);
  }

  ServiceDescription_GetAllTypeDefinitions_Params();
  ~ServiceDescription_GetAllTypeDefinitions_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceDescription_GetAllTypeDefinitions_ParamsPtr Clone() const;
  bool Equals(const ServiceDescription_GetAllTypeDefinitions_Params& other) const;

};



class ServiceDescription_GetAllTypeDefinitions_ResponseParams;

using ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr = mojo::StructPtr<ServiceDescription_GetAllTypeDefinitions_ResponseParams>;


size_t GetSerializedSize_(const ServiceDescription_GetAllTypeDefinitions_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetAllTypeDefinitions_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data** output);
void Deserialize_(internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* input,
                  ServiceDescription_GetAllTypeDefinitions_ResponseParams* output);

class ServiceDescription_GetAllTypeDefinitions_ResponseParams {
 public:
  using Data_ = internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data;

  static ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr New();

  template <typename U>
  static ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceDescription_GetAllTypeDefinitions_ResponseParams>::Convert(*this);
  }

  ServiceDescription_GetAllTypeDefinitions_ResponseParams();
  ~ServiceDescription_GetAllTypeDefinitions_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr Clone() const;
  bool Equals(const ServiceDescription_GetAllTypeDefinitions_ResponseParams& other) const;

  mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr> definitions;
};


}  // namespace types
}  // namespace bindings
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_SERVICE_DESCRIBER_MOJOM_COMMON_H_
