// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/sample_service.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace sample {

// --- Interface definitions ---
class Service_Frobinate_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Service_Frobinate_ForwardToCallback(
      const Service::FrobinateCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Service::FrobinateCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Service_Frobinate_ForwardToCallback);
};
bool Service_Frobinate_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Service_Frobinate_ResponseParams_Data* params =
      reinterpret_cast<internal::Service_Frobinate_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  int32_t p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_result = params->result;
  } while (false);
  callback_.Run(p_result);
  return true;
}

ServiceProxy::ServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ServiceProxy::Frobinate(
    FooPtr in_foo, Service::BazOptions in_baz, mojo::InterfaceHandle<Port> in_port, const FrobinateCallback& callback) {
  size_t size = sizeof(internal::Service_Frobinate_Params_Data);
  size += in_foo.is_null()
              ? 0
              : GetSerializedSize_(*in_foo);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Service_Base::MessageOrdinals::Frobinate), size);

  internal::Service_Frobinate_Params_Data* params =
      internal::Service_Frobinate_Params_Data::New(builder.buffer());
  {Serialize_(in_foo.get(),
               builder.buffer(),
               &params->foo.ptr);
  }
  params->baz =
    static_cast<int32_t>(in_baz);
  mojo::internal::InterfaceHandleToData(in_port.Pass(),
                                        &params->port);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Service_Frobinate_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ServiceProxy::GetPort(
    mojo::InterfaceRequest<Port> in_port) {
  size_t size = sizeof(internal::Service_GetPort_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Service_Base::MessageOrdinals::GetPort), size);

  internal::Service_GetPort_Params_Data* params =
      internal::Service_GetPort_Params_Data::New(builder.buffer());
  params->port = in_port.PassMessagePipe().release();
  if (!params->port.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid port in Service.GetPort request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Service_Frobinate_ProxyToResponder
    : public Service::FrobinateCallback::Runnable {
 public:
  ~Service_Frobinate_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Service::Frobinate(p_foo.Pass(), p_baz, p_port.Pass(), callback) "
        "was never run.";
  }

  Service_Frobinate_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(int32_t in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Service_Frobinate_ProxyToResponder);
};

void Service_Frobinate_ProxyToResponder::Run(
    int32_t in_result) const {
  size_t size = sizeof(internal::Service_Frobinate_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Service_Base::MessageOrdinals::Frobinate), size, request_id_);
  internal::Service_Frobinate_ResponseParams_Data* params =
      internal::Service_Frobinate_ResponseParams_Data::New(builder.buffer());
  params->result = in_result;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ServiceStub::ServiceStub()
    : sink_(nullptr),
      control_message_handler_(Service::Version_) {
}

ServiceStub::~ServiceStub() {}

bool ServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Service_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Service_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Service_Base::MessageOrdinals::Frobinate: {
      break;
    }
    case internal::Service_Base::MessageOrdinals::GetPort: {
      internal::Service_GetPort_Params_Data* params =
          reinterpret_cast<internal::Service_GetPort_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<Port> p_port {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_port.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->port)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetPort(p_port.Pass());
      return true;
    }
  }
  return false;
}

bool ServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Service_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Service_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Service_Base::MessageOrdinals::Frobinate: {
      internal::Service_Frobinate_Params_Data* params =
          reinterpret_cast<internal::Service_Frobinate_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Service::FrobinateCallback::Runnable* runnable =
          new Service_Frobinate_ProxyToResponder(
              message->request_id(), responder);
      Service::FrobinateCallback callback(runnable);
      
      FooPtr p_foo {};
      Service::BazOptions p_baz {};
      mojo::InterfaceHandle<Port> p_port {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->foo.ptr) {
          p_foo = Foo::New();
          Deserialize_(params->foo.ptr, p_foo.get());
        }
        p_baz = static_cast<Service::BazOptions>(params->baz);
        mojo::internal::InterfaceDataToHandle(&params->port, &p_port);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Frobinate(p_foo.Pass(), p_baz, p_port.Pass(), callback);
      return true;
    }
    case internal::Service_Base::MessageOrdinals::GetPort: {
      break;
    }
  }
  return false;
}


PortProxy::PortProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void PortProxy::PostMessage(
    const mojo::String& in_message_text, mojo::InterfaceHandle<Port> in_port) {
  size_t size = sizeof(internal::Port_PostMessage_Params_Data);
  size += GetSerializedSize_(in_message_text);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Port_Base::MessageOrdinals::PostMessage), size);

  internal::Port_PostMessage_Params_Data* params =
      internal::Port_PostMessage_Params_Data::New(builder.buffer());
  SerializeString_(in_message_text, builder.buffer(), &params->message_text.ptr);
  if (!params->message_text.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null message_text in Port.PostMessage request");
  }
  mojo::internal::InterfaceHandleToData(in_port.Pass(),
                                        &params->port);
  if (!params->port.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid port in Port.PostMessage request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

PortStub::PortStub()
    : sink_(nullptr),
      control_message_handler_(Port::Version_) {
}

PortStub::~PortStub() {}

bool PortStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Port_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Port_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Port_Base::MessageOrdinals::PostMessage: {
      internal::Port_PostMessage_Params_Data* params =
          reinterpret_cast<internal::Port_PostMessage_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_message_text {};
      mojo::InterfaceHandle<Port> p_port {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->message_text.ptr, &p_message_text);
        mojo::internal::InterfaceDataToHandle(&params->port, &p_port);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->PostMessage(p_message_text, p_port.Pass());
      return true;
    }
  }
  return false;
}

bool PortStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Port_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Port_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Port_Base::MessageOrdinals::PostMessage: {
      break;
    }
  }
  return false;
}

}  // namespace sample
