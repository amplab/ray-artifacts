// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/gpu/interfaces/viewport_parameter_listener.mojom
//

package viewport_parameter_listener

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type ViewportParameterListener interface {
	OnVSyncParametersUpdated(inTimebase int64, inInterval int64) (err error)
}




type ViewportParameterListener_Request bindings.InterfaceRequest



type ViewportParameterListener_Pointer bindings.InterfacePointer


type ViewportParameterListener_ServiceFactory struct{
	Delegate ViewportParameterListener_Factory
}

type ViewportParameterListener_Factory interface {
	Create(request ViewportParameterListener_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *ViewportParameterListener_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &ViewportParameterListener_ServiceDescription{}
}

func (f *ViewportParameterListener_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := ViewportParameterListener_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForViewportParameterListener creates a message pipe for use with the
// ViewportParameterListener interface with a ViewportParameterListener_Request on one end and a ViewportParameterListener_Pointer on the other.
func CreateMessagePipeForViewportParameterListener() (ViewportParameterListener_Request, ViewportParameterListener_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return ViewportParameterListener_Request(r), ViewportParameterListener_Pointer(p)
}

const viewportParameterListener_OnVSyncParametersUpdated_Name uint32 = 0

type ViewportParameterListener_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewViewportParameterListenerProxy(p ViewportParameterListener_Pointer, waiter bindings.AsyncWaiter) *ViewportParameterListener_Proxy {
	return &ViewportParameterListener_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *ViewportParameterListener_Proxy) Close_Proxy() {
	p.router.Close()
}

type viewportParameterListener_OnVSyncParametersUpdated_Params struct {
	inTimebase int64
	inInterval int64
}


func (s *viewportParameterListener_OnVSyncParametersUpdated_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt64(s.inTimebase); err != nil {
		return err
	}
	if err := encoder.WriteInt64(s.inInterval); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var viewportParameterListener_OnVSyncParametersUpdated_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *viewportParameterListener_OnVSyncParametersUpdated_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(viewportParameterListener_OnVSyncParametersUpdated_Params_Versions), func(i int) bool {
		return viewportParameterListener_OnVSyncParametersUpdated_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(viewportParameterListener_OnVSyncParametersUpdated_Params_Versions) {
		if viewportParameterListener_OnVSyncParametersUpdated_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := viewportParameterListener_OnVSyncParametersUpdated_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inTimebase = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inInterval = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ViewportParameterListener_Proxy) OnVSyncParametersUpdated(inTimebase int64, inInterval int64) (err error) {
	payload := &viewportParameterListener_OnVSyncParametersUpdated_Params{
		inTimebase,
		inInterval,
	}
	header := bindings.MessageHeader{
		Type: viewportParameterListener_OnVSyncParametersUpdated_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type viewportParameterListener_Stub struct {
	connector *bindings.Connector
	impl ViewportParameterListener
}

func NewViewportParameterListenerStub(r ViewportParameterListener_Request, impl ViewportParameterListener, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &viewportParameterListener_Stub{connector, impl})
}


func (f *ViewportParameterListener_Request) ServiceDescription() service_describer.ServiceDescription {
	return &ViewportParameterListener_ServiceDescription{}
}


type ViewportParameterListener_ServiceDescription struct{}

func (sd *ViewportParameterListener_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *ViewportParameterListener_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *ViewportParameterListener_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*ViewportParameterListener_ServiceDescription)(nil)


func (s *viewportParameterListener_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case viewportParameterListener_OnVSyncParametersUpdated_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request viewportParameterListener_OnVSyncParametersUpdated_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.OnVSyncParametersUpdated(request.inTimebase, request.inInterval)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

