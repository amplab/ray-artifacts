// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_TCP_BOUND_SOCKET_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_TCP_BOUND_SOCKET_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/tcp_bound_socket.mojom-internal.h"
#include "mojo/public/interfaces/network/network_error.mojom-common.h"
#include "mojo/services/network/interfaces/net_address.mojom-common.h"
#include "mojo/services/network/interfaces/tcp_connected_socket.mojom-common.h"
#include "mojo/services/network/interfaces/tcp_server_socket.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class TCPBoundSocket;
class TCPBoundSocketRequestValidator;
class TCPBoundSocketResponseValidator;
class TCPBoundSocket_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class TCPBoundSocket_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TCPBoundSocketRequestValidator;
  using ResponseValidator_ = TCPBoundSocketResponseValidator;
  using Synchronous_ = TCPBoundSocket_Synchronous;
  enum class MessageOrdinals : uint32_t {
    StartListening = 0,
    Connect = 1,
  };


  virtual ~TCPBoundSocket_Base() {}
};

}  // namespace internal

// Async interface declaration

class TCPBoundSocketProxy;
class TCPBoundSocketStub;
class TCPBoundSocket_Synchronous;

class TCPBoundSocketRequestValidator;
class TCPBoundSocketResponseValidator;

class TCPBoundSocket : public internal::TCPBoundSocket_Base {
 public:
  virtual ~TCPBoundSocket() override {}

  using Proxy_ = TCPBoundSocketProxy;
  using Stub_ = TCPBoundSocketStub;
  using StartListeningCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void StartListening(mojo::InterfaceRequest<mojo::TCPServerSocket> server, const StartListeningCallback& callback) = 0;
  using ConnectCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void Connect(mojo::NetAddressPtr remote_address, mojo::ScopedDataPipeConsumerHandle send_stream, mojo::ScopedDataPipeProducerHandle receive_stream, mojo::InterfaceRequest<mojo::TCPConnectedSocket> client_socket, const ConnectCallback& callback) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class TCPBoundSocketRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class TCPBoundSocketResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class TCPBoundSocket_StartListening_Params;

using TCPBoundSocket_StartListening_ParamsPtr = mojo::StructPtr<TCPBoundSocket_StartListening_Params>;


size_t GetSerializedSize_(const TCPBoundSocket_StartListening_Params& input);
mojo::internal::ValidationError Serialize_(
    TCPBoundSocket_StartListening_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TCPBoundSocket_StartListening_Params_Data** output);
void Deserialize_(internal::TCPBoundSocket_StartListening_Params_Data* input,
                  TCPBoundSocket_StartListening_Params* output);

class TCPBoundSocket_StartListening_Params {
 public:
  using Data_ = internal::TCPBoundSocket_StartListening_Params_Data;

  static TCPBoundSocket_StartListening_ParamsPtr New();

  template <typename U>
  static TCPBoundSocket_StartListening_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TCPBoundSocket_StartListening_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TCPBoundSocket_StartListening_Params>::Convert(*this);
  }

  TCPBoundSocket_StartListening_Params();
  ~TCPBoundSocket_StartListening_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const TCPBoundSocket_StartListening_Params& other) const;

  mojo::InterfaceRequest<mojo::TCPServerSocket> server;
};



class TCPBoundSocket_StartListening_ResponseParams;

using TCPBoundSocket_StartListening_ResponseParamsPtr = mojo::StructPtr<TCPBoundSocket_StartListening_ResponseParams>;


size_t GetSerializedSize_(const TCPBoundSocket_StartListening_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TCPBoundSocket_StartListening_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TCPBoundSocket_StartListening_ResponseParams_Data** output);
void Deserialize_(internal::TCPBoundSocket_StartListening_ResponseParams_Data* input,
                  TCPBoundSocket_StartListening_ResponseParams* output);

class TCPBoundSocket_StartListening_ResponseParams {
 public:
  using Data_ = internal::TCPBoundSocket_StartListening_ResponseParams_Data;

  static TCPBoundSocket_StartListening_ResponseParamsPtr New();

  template <typename U>
  static TCPBoundSocket_StartListening_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TCPBoundSocket_StartListening_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TCPBoundSocket_StartListening_ResponseParams>::Convert(*this);
  }

  TCPBoundSocket_StartListening_ResponseParams();
  ~TCPBoundSocket_StartListening_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TCPBoundSocket_StartListening_ResponseParamsPtr Clone() const;
  bool Equals(const TCPBoundSocket_StartListening_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};



class TCPBoundSocket_Connect_Params;

using TCPBoundSocket_Connect_ParamsPtr = mojo::StructPtr<TCPBoundSocket_Connect_Params>;


size_t GetSerializedSize_(const TCPBoundSocket_Connect_Params& input);
mojo::internal::ValidationError Serialize_(
    TCPBoundSocket_Connect_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TCPBoundSocket_Connect_Params_Data** output);
void Deserialize_(internal::TCPBoundSocket_Connect_Params_Data* input,
                  TCPBoundSocket_Connect_Params* output);

class TCPBoundSocket_Connect_Params {
 public:
  using Data_ = internal::TCPBoundSocket_Connect_Params_Data;

  static TCPBoundSocket_Connect_ParamsPtr New();

  template <typename U>
  static TCPBoundSocket_Connect_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TCPBoundSocket_Connect_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TCPBoundSocket_Connect_Params>::Convert(*this);
  }

  TCPBoundSocket_Connect_Params();
  ~TCPBoundSocket_Connect_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const TCPBoundSocket_Connect_Params& other) const;

  mojo::NetAddressPtr remote_address;
  mojo::ScopedDataPipeConsumerHandle send_stream;
  mojo::ScopedDataPipeProducerHandle receive_stream;
  mojo::InterfaceRequest<mojo::TCPConnectedSocket> client_socket;
};



class TCPBoundSocket_Connect_ResponseParams;

using TCPBoundSocket_Connect_ResponseParamsPtr = mojo::StructPtr<TCPBoundSocket_Connect_ResponseParams>;


size_t GetSerializedSize_(const TCPBoundSocket_Connect_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TCPBoundSocket_Connect_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TCPBoundSocket_Connect_ResponseParams_Data** output);
void Deserialize_(internal::TCPBoundSocket_Connect_ResponseParams_Data* input,
                  TCPBoundSocket_Connect_ResponseParams* output);

class TCPBoundSocket_Connect_ResponseParams {
 public:
  using Data_ = internal::TCPBoundSocket_Connect_ResponseParams_Data;

  static TCPBoundSocket_Connect_ResponseParamsPtr New();

  template <typename U>
  static TCPBoundSocket_Connect_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TCPBoundSocket_Connect_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TCPBoundSocket_Connect_ResponseParams>::Convert(*this);
  }

  TCPBoundSocket_Connect_ResponseParams();
  ~TCPBoundSocket_Connect_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TCPBoundSocket_Connect_ResponseParamsPtr Clone() const;
  bool Equals(const TCPBoundSocket_Connect_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};


}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_TCP_BOUND_SOCKET_MOJOM_COMMON_H_
