// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_GPU_INTERFACES_COMMAND_BUFFER_MOJOM_SYNC_H_
#define MOJO_SERVICES_GPU_INTERFACES_COMMAND_BUFFER_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/gpu/interfaces/command_buffer.mojom-internal.h"
#include "mojo/services/gpu/interfaces/command_buffer.mojom-common.h"
#include "mojo/services/gpu/interfaces/gpu_capabilities.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class CommandBufferSyncClient_SynchronousProxy;
class CommandBufferSyncClient_Synchronous
  : public internal::CommandBufferSyncClient_Base {
 public:
  virtual ~CommandBufferSyncClient_Synchronous() override {}
  
  using Proxy_ = CommandBufferSyncClient_SynchronousProxy;
  virtual bool DidInitialize(
      bool in_success, mojo::GpuCapabilitiesPtr in_capabilities)const= 0;
  virtual bool DidMakeProgress(
      CommandBufferStatePtr in_state)const= 0;
};

class CommandBufferSyncClient_SynchronousProxy
    : public CommandBufferSyncClient_Synchronous {
 public:
  explicit CommandBufferSyncClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool DidInitialize(bool in_success, mojo::GpuCapabilitiesPtr in_capabilities) const  override;
  bool DidMakeProgress(CommandBufferStatePtr in_state) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class CommandBufferSyncPointClient_SynchronousProxy;
class CommandBufferSyncPointClient_Synchronous
  : public internal::CommandBufferSyncPointClient_Base {
 public:
  virtual ~CommandBufferSyncPointClient_Synchronous() override {}
  
  using Proxy_ = CommandBufferSyncPointClient_SynchronousProxy;
  virtual bool DidInsertSyncPoint(
      uint32_t in_sync_point)const= 0;
};

class CommandBufferSyncPointClient_SynchronousProxy
    : public CommandBufferSyncPointClient_Synchronous {
 public:
  explicit CommandBufferSyncPointClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool DidInsertSyncPoint(uint32_t in_sync_point) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class CommandBufferLostContextObserver_SynchronousProxy;
class CommandBufferLostContextObserver_Synchronous
  : public internal::CommandBufferLostContextObserver_Base {
 public:
  virtual ~CommandBufferLostContextObserver_Synchronous() override {}
  
  using Proxy_ = CommandBufferLostContextObserver_SynchronousProxy;
  virtual bool DidLoseContext(
      int32_t in_context_lost_reason)const= 0;
};

class CommandBufferLostContextObserver_SynchronousProxy
    : public CommandBufferLostContextObserver_Synchronous {
 public:
  explicit CommandBufferLostContextObserver_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool DidLoseContext(int32_t in_context_lost_reason) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class CommandBuffer_SynchronousProxy;
class CommandBuffer_Synchronous
  : public internal::CommandBuffer_Base {
 public:
  virtual ~CommandBuffer_Synchronous() override {}
  
  using Proxy_ = CommandBuffer_SynchronousProxy;
  virtual bool Initialize(
      mojo::InterfaceHandle<CommandBufferSyncClient> in_sync_client, mojo::InterfaceHandle<CommandBufferSyncPointClient> in_sync_point_client, mojo::InterfaceHandle<CommandBufferLostContextObserver> in_lost_observer, mojo::ScopedSharedBufferHandle in_shared_state)const= 0;
  virtual bool SetGetBuffer(
      int32_t in_buffer)const= 0;
  virtual bool Flush(
      int32_t in_put_offset)const= 0;
  virtual bool MakeProgress(
      int32_t in_last_get_offset)const= 0;
  virtual bool RegisterTransferBuffer(
      int32_t in_id, mojo::ScopedSharedBufferHandle in_transfer_buffer, uint32_t in_size)const= 0;
  virtual bool DestroyTransferBuffer(
      int32_t in_id)const= 0;
  virtual bool InsertSyncPoint(
      bool in_retire)const= 0;
  virtual bool RetireSyncPoint(
      uint32_t in_sync_point)const= 0;
  virtual bool Echo(
      )= 0;
};

class CommandBuffer_SynchronousProxy
    : public CommandBuffer_Synchronous {
 public:
  explicit CommandBuffer_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Initialize(mojo::InterfaceHandle<CommandBufferSyncClient> in_sync_client, mojo::InterfaceHandle<CommandBufferSyncPointClient> in_sync_point_client, mojo::InterfaceHandle<CommandBufferLostContextObserver> in_lost_observer, mojo::ScopedSharedBufferHandle in_shared_state) const  override;
  bool SetGetBuffer(int32_t in_buffer) const  override;
  bool Flush(int32_t in_put_offset) const  override;
  bool MakeProgress(int32_t in_last_get_offset) const  override;
  bool RegisterTransferBuffer(int32_t in_id, mojo::ScopedSharedBufferHandle in_transfer_buffer, uint32_t in_size) const  override;
  bool DestroyTransferBuffer(int32_t in_id) const  override;
  bool InsertSyncPoint(bool in_retire) const  override;
  bool RetireSyncPoint(uint32_t in_sync_point) const  override;
  bool Echo() override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_GPU_INTERFACES_COMMAND_BUFFER_MOJOM_SYNC_H_
