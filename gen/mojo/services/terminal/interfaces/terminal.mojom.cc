// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/terminal/interfaces/terminal.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace terminal {

// --- Interface definitions ---
class Terminal_Connect_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Terminal_Connect_ForwardToCallback(
      const Terminal::ConnectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Terminal::ConnectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_Connect_ForwardToCallback);
};
bool Terminal_Connect_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Terminal_Connect_ResponseParams_Data* params =
      reinterpret_cast<internal::Terminal_Connect_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class Terminal_ConnectToClient_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Terminal_ConnectToClient_ForwardToCallback(
      const Terminal::ConnectToClientCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Terminal::ConnectToClientCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_ConnectToClient_ForwardToCallback);
};
bool Terminal_ConnectToClient_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Terminal_ConnectToClient_ResponseParams_Data* params =
      reinterpret_cast<internal::Terminal_ConnectToClient_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class Terminal_GetSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Terminal_GetSize_ForwardToCallback(
      const Terminal::GetSizeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Terminal::GetSizeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_GetSize_ForwardToCallback);
};
bool Terminal_GetSize_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Terminal_GetSize_ResponseParams_Data* params =
      reinterpret_cast<internal::Terminal_GetSize_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  uint32_t p_rows {};
  uint32_t p_columns {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    p_rows = params->rows;
    p_columns = params->columns;
  } while (false);
  callback_.Run(p_error, p_rows, p_columns);
  return true;
}
class Terminal_SetSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Terminal_SetSize_ForwardToCallback(
      const Terminal::SetSizeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Terminal::SetSizeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_SetSize_ForwardToCallback);
};
bool Terminal_SetSize_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Terminal_SetSize_ResponseParams_Data* params =
      reinterpret_cast<internal::Terminal_SetSize_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  uint32_t p_rows {};
  uint32_t p_columns {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    p_rows = params->rows;
    p_columns = params->columns;
  } while (false);
  callback_.Run(p_error, p_rows, p_columns);
  return true;
}

TerminalProxy::TerminalProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TerminalProxy::Connect(
    mojo::InterfaceRequest<mojo::files::File> in_terminal_file, bool in_force, const ConnectCallback& callback) {
  size_t size = sizeof(internal::Terminal_Connect_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::Connect), size);

  internal::Terminal_Connect_Params_Data* params =
      internal::Terminal_Connect_Params_Data::New(builder.buffer());
  params->terminal_file = in_terminal_file.PassMessagePipe().release();
  if (!params->terminal_file.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid terminal_file in Terminal.Connect request");
  }
  params->force = in_force;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Terminal_Connect_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TerminalProxy::ConnectToClient(
    mojo::InterfaceHandle<mojo::terminal::TerminalClient> in_terminal_client, bool in_force, const ConnectToClientCallback& callback) {
  size_t size = sizeof(internal::Terminal_ConnectToClient_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::ConnectToClient), size);

  internal::Terminal_ConnectToClient_Params_Data* params =
      internal::Terminal_ConnectToClient_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_terminal_client.Pass(),
                                        &params->terminal_client);
  if (!params->terminal_client.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid terminal_client in Terminal.ConnectToClient request");
  }
  params->force = in_force;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Terminal_ConnectToClient_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TerminalProxy::GetSize(
    const GetSizeCallback& callback) {
  size_t size = sizeof(internal::Terminal_GetSize_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::GetSize), size);

  internal::Terminal_GetSize_Params_Data* params =
      internal::Terminal_GetSize_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Terminal_GetSize_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TerminalProxy::SetSize(
    uint32_t in_rows, uint32_t in_columns, bool in_reset, const SetSizeCallback& callback) {
  size_t size = sizeof(internal::Terminal_SetSize_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::SetSize), size);

  internal::Terminal_SetSize_Params_Data* params =
      internal::Terminal_SetSize_Params_Data::New(builder.buffer());
  params->rows = in_rows;
  params->columns = in_columns;
  params->reset = in_reset;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Terminal_SetSize_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Terminal_Connect_ProxyToResponder
    : public Terminal::ConnectCallback::Runnable {
 public:
  ~Terminal_Connect_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Terminal::Connect(p_terminal_file.Pass(), p_force, callback) "
        "was never run.";
  }

  Terminal_Connect_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_Connect_ProxyToResponder);
};

void Terminal_Connect_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::Terminal_Connect_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::Connect), size, request_id_);
  internal::Terminal_Connect_ResponseParams_Data* params =
      internal::Terminal_Connect_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Terminal_ConnectToClient_ProxyToResponder
    : public Terminal::ConnectToClientCallback::Runnable {
 public:
  ~Terminal_ConnectToClient_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Terminal::ConnectToClient(p_terminal_client.Pass(), p_force, callback) "
        "was never run.";
  }

  Terminal_ConnectToClient_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_ConnectToClient_ProxyToResponder);
};

void Terminal_ConnectToClient_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::Terminal_ConnectToClient_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::ConnectToClient), size, request_id_);
  internal::Terminal_ConnectToClient_ResponseParams_Data* params =
      internal::Terminal_ConnectToClient_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Terminal_GetSize_ProxyToResponder
    : public Terminal::GetSizeCallback::Runnable {
 public:
  ~Terminal_GetSize_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Terminal::GetSize(callback) "
        "was never run.";
  }

  Terminal_GetSize_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, uint32_t in_rows, uint32_t in_columns) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_GetSize_ProxyToResponder);
};

void Terminal_GetSize_ProxyToResponder::Run(
    mojo::files::Error in_error, uint32_t in_rows, uint32_t in_columns) const {
  size_t size = sizeof(internal::Terminal_GetSize_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::GetSize), size, request_id_);
  internal::Terminal_GetSize_ResponseParams_Data* params =
      internal::Terminal_GetSize_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->rows = in_rows;
  params->columns = in_columns;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Terminal_SetSize_ProxyToResponder
    : public Terminal::SetSizeCallback::Runnable {
 public:
  ~Terminal_SetSize_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Terminal::SetSize(p_rows, p_columns, p_reset, callback) "
        "was never run.";
  }

  Terminal_SetSize_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, uint32_t in_rows, uint32_t in_columns) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Terminal_SetSize_ProxyToResponder);
};

void Terminal_SetSize_ProxyToResponder::Run(
    mojo::files::Error in_error, uint32_t in_rows, uint32_t in_columns) const {
  size_t size = sizeof(internal::Terminal_SetSize_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Terminal_Base::MessageOrdinals::SetSize), size, request_id_);
  internal::Terminal_SetSize_ResponseParams_Data* params =
      internal::Terminal_SetSize_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->rows = in_rows;
  params->columns = in_columns;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TerminalStub::TerminalStub()
    : sink_(nullptr),
      control_message_handler_(Terminal::Version_) {
}

TerminalStub::~TerminalStub() {}

bool TerminalStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Terminal_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Terminal_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Terminal_Base::MessageOrdinals::Connect: {
      break;
    }
    case internal::Terminal_Base::MessageOrdinals::ConnectToClient: {
      break;
    }
    case internal::Terminal_Base::MessageOrdinals::GetSize: {
      break;
    }
    case internal::Terminal_Base::MessageOrdinals::SetSize: {
      break;
    }
  }
  return false;
}

bool TerminalStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Terminal_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Terminal_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Terminal_Base::MessageOrdinals::Connect: {
      internal::Terminal_Connect_Params_Data* params =
          reinterpret_cast<internal::Terminal_Connect_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Terminal::ConnectCallback::Runnable* runnable =
          new Terminal_Connect_ProxyToResponder(
              message->request_id(), responder);
      Terminal::ConnectCallback callback(runnable);
      
      mojo::InterfaceRequest<mojo::files::File> p_terminal_file {};
      bool p_force {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_terminal_file.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->terminal_file)));
        p_force = params->force;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Connect(p_terminal_file.Pass(), p_force, callback);
      return true;
    }
    case internal::Terminal_Base::MessageOrdinals::ConnectToClient: {
      internal::Terminal_ConnectToClient_Params_Data* params =
          reinterpret_cast<internal::Terminal_ConnectToClient_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Terminal::ConnectToClientCallback::Runnable* runnable =
          new Terminal_ConnectToClient_ProxyToResponder(
              message->request_id(), responder);
      Terminal::ConnectToClientCallback callback(runnable);
      
      mojo::InterfaceHandle<mojo::terminal::TerminalClient> p_terminal_client {};
      bool p_force {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->terminal_client, &p_terminal_client);
        p_force = params->force;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ConnectToClient(p_terminal_client.Pass(), p_force, callback);
      return true;
    }
    case internal::Terminal_Base::MessageOrdinals::GetSize: {
      internal::Terminal_GetSize_Params_Data* params =
          reinterpret_cast<internal::Terminal_GetSize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Terminal::GetSizeCallback::Runnable* runnable =
          new Terminal_GetSize_ProxyToResponder(
              message->request_id(), responder);
      Terminal::GetSizeCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetSize(callback);
      return true;
    }
    case internal::Terminal_Base::MessageOrdinals::SetSize: {
      internal::Terminal_SetSize_Params_Data* params =
          reinterpret_cast<internal::Terminal_SetSize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Terminal::SetSizeCallback::Runnable* runnable =
          new Terminal_SetSize_ProxyToResponder(
              message->request_id(), responder);
      Terminal::SetSizeCallback callback(runnable);
      
      uint32_t p_rows {};
      uint32_t p_columns {};
      bool p_reset {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_rows = params->rows;
        p_columns = params->columns;
        p_reset = params->reset;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetSize(p_rows, p_columns, p_reset, callback);
      return true;
    }
  }
  return false;
}

}  // namespace terminal
}  // namespace mojo
