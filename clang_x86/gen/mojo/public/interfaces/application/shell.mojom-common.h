// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_APPLICATION_SHELL_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_APPLICATION_SHELL_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/application/shell.mojom-internal.h"
#include "mojo/public/interfaces/application/application_connector.mojom-common.h"
#include "mojo/public/interfaces/application/service_provider.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class Shell;
class ShellRequestValidator;
class Shell_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Shell_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ShellRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = Shell_Synchronous;
  enum class MessageOrdinals : uint32_t {
    ConnectToApplication = 0,
    CreateApplicationConnector = 1,
  };


  virtual ~Shell_Base() {}
};

}  // namespace internal

// Async interface declaration

class ShellProxy;
class ShellStub;
class Shell_Synchronous;

class ShellRequestValidator;

class Shell : public internal::Shell_Base {
 public:
  virtual ~Shell() override {}

  using Proxy_ = ShellProxy;
  using Stub_ = ShellStub;
  virtual void ConnectToApplication(const mojo::String& application_url, mojo::InterfaceRequest<mojo::ServiceProvider> services) = 0;
  virtual void CreateApplicationConnector(mojo::InterfaceRequest<mojo::ApplicationConnector> application_connector_request) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class ShellRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Shell_ConnectToApplication_Params;

using Shell_ConnectToApplication_ParamsPtr = mojo::StructPtr<Shell_ConnectToApplication_Params>;


size_t GetSerializedSize_(const Shell_ConnectToApplication_Params& input);
mojo::internal::ValidationError Serialize_(
    Shell_ConnectToApplication_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Shell_ConnectToApplication_Params_Data** output);
void Deserialize_(internal::Shell_ConnectToApplication_Params_Data* input,
                  Shell_ConnectToApplication_Params* output);

class Shell_ConnectToApplication_Params {
 public:
  using Data_ = internal::Shell_ConnectToApplication_Params_Data;

  static Shell_ConnectToApplication_ParamsPtr New();

  template <typename U>
  static Shell_ConnectToApplication_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Shell_ConnectToApplication_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Shell_ConnectToApplication_Params>::Convert(*this);
  }

  Shell_ConnectToApplication_Params();
  ~Shell_ConnectToApplication_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Shell_ConnectToApplication_Params& other) const;

  mojo::String application_url;
  mojo::InterfaceRequest<mojo::ServiceProvider> services;
};




class Shell_CreateApplicationConnector_Params;

using Shell_CreateApplicationConnector_ParamsPtr = mojo::StructPtr<Shell_CreateApplicationConnector_Params>;


size_t GetSerializedSize_(const Shell_CreateApplicationConnector_Params& input);
mojo::internal::ValidationError Serialize_(
    Shell_CreateApplicationConnector_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Shell_CreateApplicationConnector_Params_Data** output);
void Deserialize_(internal::Shell_CreateApplicationConnector_Params_Data* input,
                  Shell_CreateApplicationConnector_Params* output);

class Shell_CreateApplicationConnector_Params {
 public:
  using Data_ = internal::Shell_CreateApplicationConnector_Params_Data;

  static Shell_CreateApplicationConnector_ParamsPtr New();

  template <typename U>
  static Shell_CreateApplicationConnector_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Shell_CreateApplicationConnector_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Shell_CreateApplicationConnector_Params>::Convert(*this);
  }

  Shell_CreateApplicationConnector_Params();
  ~Shell_CreateApplicationConnector_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Shell_CreateApplicationConnector_Params& other) const;

  mojo::InterfaceRequest<mojo::ApplicationConnector> application_connector_request;
};



}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_APPLICATION_SHELL_MOJOM_COMMON_H_
