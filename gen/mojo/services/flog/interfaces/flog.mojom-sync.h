// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_SYNC_H_
#define MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/flog/interfaces/flog.mojom-internal.h"
#include "mojo/services/flog/interfaces/flog.mojom-common.h"


namespace mojo {
namespace flog {

// --- Synchronous interface declaration ---

class FlogService_SynchronousProxy;
class FlogService_Synchronous
  : public internal::FlogService_Base {
 public:
  virtual ~FlogService_Synchronous() override {}
  
  using Proxy_ = FlogService_SynchronousProxy;
  virtual bool CreateLogger(
      mojo::InterfaceRequest<FlogLogger> in_logger, const mojo::String& in_label)const= 0;
  virtual bool GetLogDescriptions(
      mojo::Array<FlogDescriptionPtr>* out_descriptions)= 0;
  virtual bool CreateReader(
      mojo::InterfaceRequest<FlogReader> in_reader, uint32_t in_log_id)const= 0;
};

class FlogService_SynchronousProxy
    : public FlogService_Synchronous {
 public:
  explicit FlogService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool CreateLogger(mojo::InterfaceRequest<FlogLogger> in_logger, const mojo::String& in_label) const  override;
  bool GetLogDescriptions(mojo::Array<FlogDescriptionPtr>* out_descriptions) override;
  bool CreateReader(mojo::InterfaceRequest<FlogReader> in_reader, uint32_t in_log_id) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class FlogLogger_SynchronousProxy;
class FlogLogger_Synchronous
  : public internal::FlogLogger_Base {
 public:
  virtual ~FlogLogger_Synchronous() override {}
  
  using Proxy_ = FlogLogger_SynchronousProxy;
  virtual bool LogChannelCreation(
      int64_t in_time_us, uint32_t in_channel_id, const mojo::String& in_type_name)const= 0;
  virtual bool LogChannelMessage(
      int64_t in_time_us, uint32_t in_channel_id, mojo::Array<uint8_t> in_data)const= 0;
  virtual bool LogChannelDeletion(
      int64_t in_time_us, uint32_t in_channel_id)const= 0;
};

class FlogLogger_SynchronousProxy
    : public FlogLogger_Synchronous {
 public:
  explicit FlogLogger_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool LogChannelCreation(int64_t in_time_us, uint32_t in_channel_id, const mojo::String& in_type_name) const  override;
  bool LogChannelMessage(int64_t in_time_us, uint32_t in_channel_id, mojo::Array<uint8_t> in_data) const  override;
  bool LogChannelDeletion(int64_t in_time_us, uint32_t in_channel_id) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class FlogReader_SynchronousProxy;
class FlogReader_Synchronous
  : public internal::FlogReader_Base {
 public:
  virtual ~FlogReader_Synchronous() override {}
  
  using Proxy_ = FlogReader_SynchronousProxy;
  virtual bool GetEntries(
      uint32_t in_start_index, uint32_t in_max_count, mojo::Array<FlogEntryPtr>* out_entries)= 0;
};

class FlogReader_SynchronousProxy
    : public FlogReader_Synchronous {
 public:
  explicit FlogReader_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool GetEntries(uint32_t in_start_index, uint32_t in_max_count, mojo::Array<FlogEntryPtr>* out_entries) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace flog
}  // namespace mojo

#endif  // MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_SYNC_H_
