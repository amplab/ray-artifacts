// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_ASSET_BUNDLE_INTERFACES_ASSET_BUNDLE_MOJOM_SYNC_H_
#define MOJO_SERVICES_ASSET_BUNDLE_INTERFACES_ASSET_BUNDLE_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/asset_bundle/interfaces/asset_bundle.mojom-internal.h"
#include "mojo/services/asset_bundle/interfaces/asset_bundle.mojom-common.h"


namespace mojo {
namespace asset_bundle {

// --- Synchronous interface declaration ---

class AssetBundle_SynchronousProxy;
class AssetBundle_Synchronous
  : public internal::AssetBundle_Base {
 public:
  virtual ~AssetBundle_Synchronous() override {}
  
  using Proxy_ = AssetBundle_SynchronousProxy;
  virtual bool GetAsStream(
      const mojo::String& in_asset_name, mojo::ScopedDataPipeConsumerHandle* out_asset_data)= 0;
};

class AssetBundle_SynchronousProxy
    : public AssetBundle_Synchronous {
 public:
  explicit AssetBundle_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool GetAsStream(const mojo::String& in_asset_name, mojo::ScopedDataPipeConsumerHandle* out_asset_data) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class AssetUnpacker_SynchronousProxy;
class AssetUnpacker_Synchronous
  : public internal::AssetUnpacker_Base {
 public:
  virtual ~AssetUnpacker_Synchronous() override {}
  
  using Proxy_ = AssetUnpacker_SynchronousProxy;
  virtual bool UnpackZipStream(
      mojo::ScopedDataPipeConsumerHandle in_zipped_assets, mojo::InterfaceRequest<AssetBundle> in_asset_bundle)const= 0;
};

class AssetUnpacker_SynchronousProxy
    : public AssetUnpacker_Synchronous {
 public:
  explicit AssetUnpacker_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool UnpackZipStream(mojo::ScopedDataPipeConsumerHandle in_zipped_assets, mojo::InterfaceRequest<AssetBundle> in_asset_bundle) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace asset_bundle
}  // namespace mojo

#endif  // MOJO_SERVICES_ASSET_BUNDLE_INTERFACES_ASSET_BUNDLE_MOJOM_SYNC_H_
