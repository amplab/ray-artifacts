// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library native_viewport_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/geometry.mojom.dart' as geometry_mojom;
import 'package:mojo_services/mojo/native_viewport_event_dispatcher.mojom.dart' as native_viewport_event_dispatcher_mojom;
import 'package:mojom/mojo/context_provider.mojom.dart' as context_provider_mojom;



class ViewportMetrics extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  geometry_mojom.Size size = null;
  double devicePixelRatio = 1.0;

  ViewportMetrics() : super(kVersions.last.size);

  ViewportMetrics.init(
    geometry_mojom.Size this.size, 
    double this.devicePixelRatio
  ) : super(kVersions.last.size);

  static ViewportMetrics deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ViewportMetrics decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ViewportMetrics result = new ViewportMetrics();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.size = geometry_mojom.Size.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.devicePixelRatio = decoder0.decodeFloat(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ViewportMetrics";
    String fieldName;
    try {
      fieldName = "size";
      encoder0.encodeStruct(size, 8, false);
      fieldName = "devicePixelRatio";
      encoder0.encodeFloat(devicePixelRatio, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ViewportMetrics("
           "size: $size" ", "
           "devicePixelRatio: $devicePixelRatio" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["size"] = size;
    map["devicePixelRatio"] = devicePixelRatio;
    return map;
  }
}


class SurfaceConfiguration extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int redBits = 8;
  int greenBits = 8;
  int blueBits = 8;
  int alphaBits = 8;
  int depthBits = 0;
  int stencilBits = 0;

  SurfaceConfiguration() : super(kVersions.last.size);

  SurfaceConfiguration.init(
    int this.redBits, 
    int this.greenBits, 
    int this.blueBits, 
    int this.alphaBits, 
    int this.depthBits, 
    int this.stencilBits
  ) : super(kVersions.last.size);

  static SurfaceConfiguration deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static SurfaceConfiguration decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    SurfaceConfiguration result = new SurfaceConfiguration();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.redBits = decoder0.decodeUint8(8);
    }
    if (mainDataHeader.version >= 0) {
      
      result.greenBits = decoder0.decodeUint8(9);
    }
    if (mainDataHeader.version >= 0) {
      
      result.blueBits = decoder0.decodeUint8(10);
    }
    if (mainDataHeader.version >= 0) {
      
      result.alphaBits = decoder0.decodeUint8(11);
    }
    if (mainDataHeader.version >= 0) {
      
      result.depthBits = decoder0.decodeUint8(12);
    }
    if (mainDataHeader.version >= 0) {
      
      result.stencilBits = decoder0.decodeUint8(13);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "SurfaceConfiguration";
    String fieldName;
    try {
      fieldName = "redBits";
      encoder0.encodeUint8(redBits, 8);
      fieldName = "greenBits";
      encoder0.encodeUint8(greenBits, 9);
      fieldName = "blueBits";
      encoder0.encodeUint8(blueBits, 10);
      fieldName = "alphaBits";
      encoder0.encodeUint8(alphaBits, 11);
      fieldName = "depthBits";
      encoder0.encodeUint8(depthBits, 12);
      fieldName = "stencilBits";
      encoder0.encodeUint8(stencilBits, 13);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "SurfaceConfiguration("
           "redBits: $redBits" ", "
           "greenBits: $greenBits" ", "
           "blueBits: $blueBits" ", "
           "alphaBits: $alphaBits" ", "
           "depthBits: $depthBits" ", "
           "stencilBits: $stencilBits" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["redBits"] = redBits;
    map["greenBits"] = greenBits;
    map["blueBits"] = blueBits;
    map["alphaBits"] = alphaBits;
    map["depthBits"] = depthBits;
    map["stencilBits"] = stencilBits;
    return map;
  }
}


class _NativeViewportCreateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  geometry_mojom.Size size = null;
  SurfaceConfiguration requestedConfiguration = null;

  _NativeViewportCreateParams() : super(kVersions.last.size);

  _NativeViewportCreateParams.init(
    geometry_mojom.Size this.size, 
    SurfaceConfiguration this.requestedConfiguration
  ) : super(kVersions.last.size);

  static _NativeViewportCreateParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportCreateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportCreateParams result = new _NativeViewportCreateParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.size = geometry_mojom.Size.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(16, true);
      result.requestedConfiguration = SurfaceConfiguration.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportCreateParams";
    String fieldName;
    try {
      fieldName = "size";
      encoder0.encodeStruct(size, 8, false);
      fieldName = "requestedConfiguration";
      encoder0.encodeStruct(requestedConfiguration, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportCreateParams("
           "size: $size" ", "
           "requestedConfiguration: $requestedConfiguration" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["size"] = size;
    map["requestedConfiguration"] = requestedConfiguration;
    return map;
  }
}


class NativeViewportCreateResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  ViewportMetrics metrics = null;

  NativeViewportCreateResponseParams() : super(kVersions.last.size);

  NativeViewportCreateResponseParams.init(
    ViewportMetrics this.metrics
  ) : super(kVersions.last.size);

  static NativeViewportCreateResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static NativeViewportCreateResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NativeViewportCreateResponseParams result = new NativeViewportCreateResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.metrics = ViewportMetrics.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "NativeViewportCreateResponseParams";
    String fieldName;
    try {
      fieldName = "metrics";
      encoder0.encodeStruct(metrics, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "NativeViewportCreateResponseParams("
           "metrics: $metrics" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["metrics"] = metrics;
    return map;
  }
}


class _NativeViewportShowParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _NativeViewportShowParams() : super(kVersions.last.size);

  _NativeViewportShowParams.init(
  ) : super(kVersions.last.size);

  static _NativeViewportShowParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportShowParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportShowParams result = new _NativeViewportShowParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportShowParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportShowParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _NativeViewportHideParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _NativeViewportHideParams() : super(kVersions.last.size);

  _NativeViewportHideParams.init(
  ) : super(kVersions.last.size);

  static _NativeViewportHideParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportHideParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportHideParams result = new _NativeViewportHideParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportHideParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportHideParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _NativeViewportCloseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _NativeViewportCloseParams() : super(kVersions.last.size);

  _NativeViewportCloseParams.init(
  ) : super(kVersions.last.size);

  static _NativeViewportCloseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportCloseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportCloseParams result = new _NativeViewportCloseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportCloseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportCloseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _NativeViewportSetSizeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  geometry_mojom.Size size = null;

  _NativeViewportSetSizeParams() : super(kVersions.last.size);

  _NativeViewportSetSizeParams.init(
    geometry_mojom.Size this.size
  ) : super(kVersions.last.size);

  static _NativeViewportSetSizeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportSetSizeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportSetSizeParams result = new _NativeViewportSetSizeParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.size = geometry_mojom.Size.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportSetSizeParams";
    String fieldName;
    try {
      fieldName = "size";
      encoder0.encodeStruct(size, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportSetSizeParams("
           "size: $size" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["size"] = size;
    return map;
  }
}


class _NativeViewportSetEventDispatcherParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  native_viewport_event_dispatcher_mojom.NativeViewportEventDispatcherInterface dispatcher = null;

  _NativeViewportSetEventDispatcherParams() : super(kVersions.last.size);

  _NativeViewportSetEventDispatcherParams.init(
    native_viewport_event_dispatcher_mojom.NativeViewportEventDispatcherInterface this.dispatcher
  ) : super(kVersions.last.size);

  static _NativeViewportSetEventDispatcherParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportSetEventDispatcherParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportSetEventDispatcherParams result = new _NativeViewportSetEventDispatcherParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.dispatcher = decoder0.decodeServiceInterface(8, false, native_viewport_event_dispatcher_mojom.NativeViewportEventDispatcherProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportSetEventDispatcherParams";
    String fieldName;
    try {
      fieldName = "dispatcher";
      encoder0.encodeInterface(dispatcher, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportSetEventDispatcherParams("
           "dispatcher: $dispatcher" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NativeViewportGetContextProviderParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  context_provider_mojom.ContextProviderInterfaceRequest provider = null;

  _NativeViewportGetContextProviderParams() : super(kVersions.last.size);

  _NativeViewportGetContextProviderParams.init(
    context_provider_mojom.ContextProviderInterfaceRequest this.provider
  ) : super(kVersions.last.size);

  static _NativeViewportGetContextProviderParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportGetContextProviderParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportGetContextProviderParams result = new _NativeViewportGetContextProviderParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.provider = decoder0.decodeInterfaceRequest(8, false, context_provider_mojom.ContextProviderStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportGetContextProviderParams";
    String fieldName;
    try {
      fieldName = "provider";
      encoder0.encodeInterfaceRequest(provider, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportGetContextProviderParams("
           "provider: $provider" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _NativeViewportRequestMetricsParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _NativeViewportRequestMetricsParams() : super(kVersions.last.size);

  _NativeViewportRequestMetricsParams.init(
  ) : super(kVersions.last.size);

  static _NativeViewportRequestMetricsParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NativeViewportRequestMetricsParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NativeViewportRequestMetricsParams result = new _NativeViewportRequestMetricsParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NativeViewportRequestMetricsParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NativeViewportRequestMetricsParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class NativeViewportRequestMetricsResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  ViewportMetrics metrics = null;

  NativeViewportRequestMetricsResponseParams() : super(kVersions.last.size);

  NativeViewportRequestMetricsResponseParams.init(
    ViewportMetrics this.metrics
  ) : super(kVersions.last.size);

  static NativeViewportRequestMetricsResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static NativeViewportRequestMetricsResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NativeViewportRequestMetricsResponseParams result = new NativeViewportRequestMetricsResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.metrics = ViewportMetrics.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "NativeViewportRequestMetricsResponseParams";
    String fieldName;
    try {
      fieldName = "metrics";
      encoder0.encodeStruct(metrics, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "NativeViewportRequestMetricsResponseParams("
           "metrics: $metrics" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["metrics"] = metrics;
    return map;
  }
}

const int _nativeViewportMethodCreateName = 0;
const int _nativeViewportMethodShowName = 1;
const int _nativeViewportMethodHideName = 2;
const int _nativeViewportMethodCloseName = 3;
const int _nativeViewportMethodSetSizeName = 4;
const int _nativeViewportMethodSetEventDispatcherName = 5;
const int _nativeViewportMethodGetContextProviderName = 6;
const int _nativeViewportMethodRequestMetricsName = 7;

class _NativeViewportServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class NativeViewport {
  static const String serviceName = "mojo::NativeViewport";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _NativeViewportServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static NativeViewportProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    NativeViewportProxy p = new NativeViewportProxy.unbound();
    String name = serviceName ?? NativeViewport.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void create(geometry_mojom.Size size,SurfaceConfiguration requestedConfiguration,void callback(ViewportMetrics metrics));
  void show();
  void hide();
  void close_();
  void setSize(geometry_mojom.Size size);
  void setEventDispatcher(native_viewport_event_dispatcher_mojom.NativeViewportEventDispatcherInterface dispatcher);
  void getContextProvider(context_provider_mojom.ContextProviderInterfaceRequest provider);
  void requestMetrics(void callback(ViewportMetrics metrics));
}

abstract class NativeViewportInterface
    implements bindings.MojoInterface<NativeViewport>,
               NativeViewport {
  factory NativeViewportInterface([NativeViewport impl]) =>
      new NativeViewportStub.unbound(impl);

  factory NativeViewportInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [NativeViewport impl]) =>
      new NativeViewportStub.fromEndpoint(endpoint, impl);

  factory NativeViewportInterface.fromMock(
      NativeViewport mock) =>
      new NativeViewportProxy.fromMock(mock);
}

abstract class NativeViewportInterfaceRequest
    implements bindings.MojoInterface<NativeViewport>,
               NativeViewport {
  factory NativeViewportInterfaceRequest() =>
      new NativeViewportProxy.unbound();
}

class _NativeViewportProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<NativeViewport> {
  NativeViewport impl;

  _NativeViewportProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _NativeViewportProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _NativeViewportProxyControl.unbound() : super.unbound();

  String get serviceName => NativeViewport.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _nativeViewportMethodCreateName:
        var r = NativeViewportCreateResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.metrics );
        break;
      case _nativeViewportMethodRequestMetricsName:
        var r = NativeViewportRequestMetricsResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.metrics );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NativeViewportProxyControl($superString)";
  }
}

class NativeViewportProxy
    extends bindings.Proxy<NativeViewport>
    implements NativeViewport,
               NativeViewportInterface,
               NativeViewportInterfaceRequest {
  NativeViewportProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _NativeViewportProxyControl.fromEndpoint(endpoint));

  NativeViewportProxy.fromHandle(core.MojoHandle handle)
      : super(new _NativeViewportProxyControl.fromHandle(handle));

  NativeViewportProxy.unbound()
      : super(new _NativeViewportProxyControl.unbound());

  factory NativeViewportProxy.fromMock(NativeViewport mock) {
    NativeViewportProxy newMockedProxy =
        new NativeViewportProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static NativeViewportProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NativeViewportProxy"));
    return new NativeViewportProxy.fromEndpoint(endpoint);
  }


  void create(geometry_mojom.Size size,SurfaceConfiguration requestedConfiguration,void callback(ViewportMetrics metrics)) {
    if (impl != null) {
      impl.create(size,requestedConfiguration,callback);
      return;
    }
    var params = new _NativeViewportCreateParams();
    params.size = size;
    params.requestedConfiguration = requestedConfiguration;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((ViewportMetrics metrics) {
        z.bindCallback(() {
          callback(metrics);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _nativeViewportMethodCreateName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void show() {
    if (impl != null) {
      impl.show();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NativeViewportShowParams();
    ctrl.sendMessage(params,
        _nativeViewportMethodShowName);
  }
  void hide() {
    if (impl != null) {
      impl.hide();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NativeViewportHideParams();
    ctrl.sendMessage(params,
        _nativeViewportMethodHideName);
  }
  void close_() {
    if (impl != null) {
      impl.close_();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NativeViewportCloseParams();
    ctrl.sendMessage(params,
        _nativeViewportMethodCloseName);
  }
  void setSize(geometry_mojom.Size size) {
    if (impl != null) {
      impl.setSize(size);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NativeViewportSetSizeParams();
    params.size = size;
    ctrl.sendMessage(params,
        _nativeViewportMethodSetSizeName);
  }
  void setEventDispatcher(native_viewport_event_dispatcher_mojom.NativeViewportEventDispatcherInterface dispatcher) {
    if (impl != null) {
      impl.setEventDispatcher(dispatcher);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NativeViewportSetEventDispatcherParams();
    params.dispatcher = dispatcher;
    ctrl.sendMessage(params,
        _nativeViewportMethodSetEventDispatcherName);
  }
  void getContextProvider(context_provider_mojom.ContextProviderInterfaceRequest provider) {
    if (impl != null) {
      impl.getContextProvider(provider);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NativeViewportGetContextProviderParams();
    params.provider = provider;
    ctrl.sendMessage(params,
        _nativeViewportMethodGetContextProviderName);
  }
  void requestMetrics(void callback(ViewportMetrics metrics)) {
    if (impl != null) {
      impl.requestMetrics(callback);
      return;
    }
    var params = new _NativeViewportRequestMetricsParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((ViewportMetrics metrics) {
        z.bindCallback(() {
          callback(metrics);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _nativeViewportMethodRequestMetricsName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _NativeViewportStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<NativeViewport> {
  NativeViewport _impl;

  _NativeViewportStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NativeViewport impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _NativeViewportStubControl.fromHandle(
      core.MojoHandle handle, [NativeViewport impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _NativeViewportStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => NativeViewport.serviceName;


  Function _nativeViewportCreateResponseParamsResponder(
      int requestId) {
  return (ViewportMetrics metrics) {
      var result = new NativeViewportCreateResponseParams();
      result.metrics = metrics;
      sendResponse(buildResponseWithId(
          result,
          _nativeViewportMethodCreateName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _nativeViewportRequestMetricsResponseParamsResponder(
      int requestId) {
  return (ViewportMetrics metrics) {
      var result = new NativeViewportRequestMetricsResponseParams();
      result.metrics = metrics;
      sendResponse(buildResponseWithId(
          result,
          _nativeViewportMethodRequestMetricsName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _nativeViewportMethodCreateName:
        var params = _NativeViewportCreateParams.deserialize(
            message.payload);
        _impl.create(params.size, params.requestedConfiguration, _nativeViewportCreateResponseParamsResponder(message.header.requestId));
        break;
      case _nativeViewportMethodShowName:
        _impl.show();
        break;
      case _nativeViewportMethodHideName:
        _impl.hide();
        break;
      case _nativeViewportMethodCloseName:
        _impl.close_();
        break;
      case _nativeViewportMethodSetSizeName:
        var params = _NativeViewportSetSizeParams.deserialize(
            message.payload);
        _impl.setSize(params.size);
        break;
      case _nativeViewportMethodSetEventDispatcherName:
        var params = _NativeViewportSetEventDispatcherParams.deserialize(
            message.payload);
        _impl.setEventDispatcher(params.dispatcher);
        break;
      case _nativeViewportMethodGetContextProviderName:
        var params = _NativeViewportGetContextProviderParams.deserialize(
            message.payload);
        _impl.getContextProvider(params.provider);
        break;
      case _nativeViewportMethodRequestMetricsName:
        _impl.requestMetrics(_nativeViewportRequestMetricsResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  NativeViewport get impl => _impl;
  set impl(NativeViewport d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NativeViewportStubControl($superString)";
  }

  int get version => 0;
}

class NativeViewportStub
    extends bindings.Stub<NativeViewport>
    implements NativeViewport,
               NativeViewportInterface,
               NativeViewportInterfaceRequest {
  NativeViewportStub.unbound([NativeViewport impl])
      : super(new _NativeViewportStubControl.unbound(impl));

  NativeViewportStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NativeViewport impl])
      : super(new _NativeViewportStubControl.fromEndpoint(endpoint, impl));

  NativeViewportStub.fromHandle(
      core.MojoHandle handle, [NativeViewport impl])
      : super(new _NativeViewportStubControl.fromHandle(handle, impl));

  static NativeViewportStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NativeViewportStub"));
    return new NativeViewportStub.fromEndpoint(endpoint);
  }


  void create(geometry_mojom.Size size,SurfaceConfiguration requestedConfiguration,void callback(ViewportMetrics metrics)) {
    return impl.create(size,requestedConfiguration,callback);
  }
  void show() {
    return impl.show();
  }
  void hide() {
    return impl.hide();
  }
  void close_() {
    return impl.close_();
  }
  void setSize(geometry_mojom.Size size) {
    return impl.setSize(size);
  }
  void setEventDispatcher(native_viewport_event_dispatcher_mojom.NativeViewportEventDispatcherInterface dispatcher) {
    return impl.setEventDispatcher(dispatcher);
  }
  void getContextProvider(context_provider_mojom.ContextProviderInterfaceRequest provider) {
    return impl.getContextProvider(provider);
  }
  void requestMetrics(void callback(ViewportMetrics metrics)) {
    return impl.requestMetrics(callback);
  }
}



