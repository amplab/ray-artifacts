// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/network/interfaces/web_socket.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/network/interfaces/web_socket.mojom-internal.h"
#include "mojo/services/network/interfaces/web_socket.mojom-common.h"
namespace mojo {

// --- Interface definitions ---
WebSocket_SynchronousProxy::WebSocket_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool WebSocket_SynchronousProxy::Connect(const mojo::String& in_url, mojo::Array<mojo::String> in_protocols, const mojo::String& in_origin, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::InterfaceHandle<WebSocketClient> in_client) const  {
  size_t size = sizeof(internal::WebSocket_Connect_Params_Data);
  size += GetSerializedSize_(in_url);
  size += GetSerializedSize_(in_protocols);
  size += GetSerializedSize_(in_origin);

  auto msg_name = static_cast<uint32_t>(internal::WebSocket_Base::MessageOrdinals::Connect);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocket_Connect_Params_Data* out_params =
      internal::WebSocket_Connect_Params_Data::New(builder.buffer());
  SerializeString_(in_url, builder.buffer(), &out_params->url.ptr);
  if (!out_params->url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in {{interface.name}}::{{method.name}}");
  }
  {
    const mojo::internal::ArrayValidateParams protocols_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_protocols, builder.buffer(), &out_params->protocols.ptr,
                          &protocols_validate_params);
  }
  if (!out_params->protocols.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null protocols in {{interface.name}}::{{method.name}}");
  }
  SerializeString_(in_origin, builder.buffer(), &out_params->origin.ptr);
  if (!out_params->origin.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null origin in {{interface.name}}::{{method.name}}");
  }
  out_params->send_stream = in_send_stream.release();
  if (!out_params->send_stream.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid send_stream in {{interface.name}}::{{method.name}}");
  }
  mojo::internal::InterfaceHandleToData(in_client.Pass(),
                                        &out_params->client);
  if (!out_params->client.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool WebSocket_SynchronousProxy::Send(bool in_fin, WebSocket::MessageType in_type, uint32_t in_num_bytes) const  {
  size_t size = sizeof(internal::WebSocket_Send_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::WebSocket_Base::MessageOrdinals::Send);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocket_Send_Params_Data* out_params =
      internal::WebSocket_Send_Params_Data::New(builder.buffer());
  out_params->fin = in_fin;
  out_params->type =
    static_cast<int32_t>(in_type);
  out_params->num_bytes = in_num_bytes;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool WebSocket_SynchronousProxy::FlowControl(int64_t in_quota) const  {
  size_t size = sizeof(internal::WebSocket_FlowControl_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::WebSocket_Base::MessageOrdinals::FlowControl);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocket_FlowControl_Params_Data* out_params =
      internal::WebSocket_FlowControl_Params_Data::New(builder.buffer());
  out_params->quota = in_quota;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool WebSocket_SynchronousProxy::Close(uint16_t in_code, const mojo::String& in_reason) const  {
  size_t size = sizeof(internal::WebSocket_Close_Params_Data);
  size += GetSerializedSize_(in_reason);

  auto msg_name = static_cast<uint32_t>(internal::WebSocket_Base::MessageOrdinals::Close);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocket_Close_Params_Data* out_params =
      internal::WebSocket_Close_Params_Data::New(builder.buffer());
  out_params->code = in_code;
  SerializeString_(in_reason, builder.buffer(), &out_params->reason.ptr);
  if (!out_params->reason.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null reason in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}WebSocketClient_SynchronousProxy::WebSocketClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool WebSocketClient_SynchronousProxy::DidConnect(const mojo::String& in_selected_subprotocol, const mojo::String& in_extensions, mojo::ScopedDataPipeConsumerHandle in_receive_stream) const  {
  size_t size = sizeof(internal::WebSocketClient_DidConnect_Params_Data);
  size += GetSerializedSize_(in_selected_subprotocol);
  size += GetSerializedSize_(in_extensions);

  auto msg_name = static_cast<uint32_t>(internal::WebSocketClient_Base::MessageOrdinals::DidConnect);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocketClient_DidConnect_Params_Data* out_params =
      internal::WebSocketClient_DidConnect_Params_Data::New(builder.buffer());
  SerializeString_(in_selected_subprotocol, builder.buffer(), &out_params->selected_subprotocol.ptr);
  if (!out_params->selected_subprotocol.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null selected_subprotocol in {{interface.name}}::{{method.name}}");
  }
  SerializeString_(in_extensions, builder.buffer(), &out_params->extensions.ptr);
  if (!out_params->extensions.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null extensions in {{interface.name}}::{{method.name}}");
  }
  out_params->receive_stream = in_receive_stream.release();
  if (!out_params->receive_stream.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid receive_stream in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool WebSocketClient_SynchronousProxy::DidReceiveData(bool in_fin, WebSocket::MessageType in_type, uint32_t in_num_bytes) const  {
  size_t size = sizeof(internal::WebSocketClient_DidReceiveData_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::WebSocketClient_Base::MessageOrdinals::DidReceiveData);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocketClient_DidReceiveData_Params_Data* out_params =
      internal::WebSocketClient_DidReceiveData_Params_Data::New(builder.buffer());
  out_params->fin = in_fin;
  out_params->type =
    static_cast<int32_t>(in_type);
  out_params->num_bytes = in_num_bytes;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool WebSocketClient_SynchronousProxy::DidReceiveFlowControl(int64_t in_quota) const  {
  size_t size = sizeof(internal::WebSocketClient_DidReceiveFlowControl_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::WebSocketClient_Base::MessageOrdinals::DidReceiveFlowControl);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocketClient_DidReceiveFlowControl_Params_Data* out_params =
      internal::WebSocketClient_DidReceiveFlowControl_Params_Data::New(builder.buffer());
  out_params->quota = in_quota;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool WebSocketClient_SynchronousProxy::DidFail(const mojo::String& in_message) const  {
  size_t size = sizeof(internal::WebSocketClient_DidFail_Params_Data);
  size += GetSerializedSize_(in_message);

  auto msg_name = static_cast<uint32_t>(internal::WebSocketClient_Base::MessageOrdinals::DidFail);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocketClient_DidFail_Params_Data* out_params =
      internal::WebSocketClient_DidFail_Params_Data::New(builder.buffer());
  SerializeString_(in_message, builder.buffer(), &out_params->message.ptr);
  if (!out_params->message.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null message in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool WebSocketClient_SynchronousProxy::DidClose(bool in_was_clean, uint16_t in_code, const mojo::String& in_reason) const  {
  size_t size = sizeof(internal::WebSocketClient_DidClose_Params_Data);
  size += GetSerializedSize_(in_reason);

  auto msg_name = static_cast<uint32_t>(internal::WebSocketClient_Base::MessageOrdinals::DidClose);
  mojo::MessageBuilder builder(msg_name, size);

  internal::WebSocketClient_DidClose_Params_Data* out_params =
      internal::WebSocketClient_DidClose_Params_Data::New(builder.buffer());
  out_params->was_clean = in_was_clean;
  out_params->code = in_code;
  SerializeString_(in_reason, builder.buffer(), &out_params->reason.ptr);
  if (!out_params->reason.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null reason in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
