// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     shell/test/pingable.mojom
//

package pingable

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type Pingable interface {
	Ping(inMessage string) (outAppUrl string, outConnectionUrl string, outMessage string, err error)
}



var pingable_Name = "Pingable"

type Pingable_Request bindings.InterfaceRequest

func (r *Pingable_Request) Name() string {
	return pingable_Name
}


type Pingable_Pointer bindings.InterfacePointer

func (p *Pingable_Pointer) Name() string {
	return pingable_Name
}

type Pingable_ServiceFactory struct{
	Delegate Pingable_Factory
}

type Pingable_Factory interface {
	Create(request Pingable_Request)
}

func (f *Pingable_ServiceFactory) Name() string {
	return pingable_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Pingable_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Pingable_ServiceDescription{}
}

func (f *Pingable_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Pingable_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForPingable creates a message pipe for use with the
// Pingable interface with a Pingable_Request on one end and a Pingable_Pointer on the other.
func CreateMessagePipeForPingable() (Pingable_Request, Pingable_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Pingable_Request(r), Pingable_Pointer(p)
}

const pingable_Ping_Name uint32 = 0

type Pingable_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewPingableProxy(p Pingable_Pointer, waiter bindings.AsyncWaiter) *Pingable_Proxy {
	return &Pingable_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Pingable_Proxy) Close_Proxy() {
	p.router.Close()
}

type pingable_Ping_Params struct {
	inMessage string
}


func (s *pingable_Ping_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inMessage); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingable_Ping_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *pingable_Ping_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingable_Ping_Params_Versions), func(i int) bool {
		return pingable_Ping_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingable_Ping_Params_Versions) {
		if pingable_Ping_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingable_Ping_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inMessage = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type pingable_Ping_ResponseParams struct {
	outAppUrl string
	outConnectionUrl string
	outMessage string
}


func (s *pingable_Ping_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.outAppUrl); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.outConnectionUrl); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.outMessage); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingable_Ping_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *pingable_Ping_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingable_Ping_ResponseParams_Versions), func(i int) bool {
		return pingable_Ping_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingable_Ping_ResponseParams_Versions) {
		if pingable_Ping_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingable_Ping_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.outAppUrl = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.outConnectionUrl = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.outMessage = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Pingable_Proxy) Ping(inMessage string) (outAppUrl string, outConnectionUrl string, outMessage string, err error) {
	payload := &pingable_Ping_Params{
		inMessage,
	}
	header := bindings.MessageHeader{
		Type: pingable_Ping_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, pingable_Ping_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response pingable_Ping_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outAppUrl = response.outAppUrl
	outConnectionUrl = response.outConnectionUrl
	outMessage = response.outMessage
	return
}

type pingable_Stub struct {
	connector *bindings.Connector
	impl Pingable
}

func NewPingableStub(r Pingable_Request, impl Pingable, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &pingable_Stub{connector, impl})
}


func (f *Pingable_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Pingable_ServiceDescription{}
}


type Pingable_ServiceDescription struct{}

func (sd *Pingable_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Pingable_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Pingable_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Pingable_ServiceDescription)(nil)


func (s *pingable_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case pingable_Ping_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingable_Ping_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response pingable_Ping_ResponseParams
		response.outAppUrl, 		response.outConnectionUrl, 		response.outMessage, err = s.impl.Ping(request.inMessage)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: pingable_Ping_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

