// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/network/interfaces/url_loader.mojom
//

package url_loader

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	network_error "mojo/public/interfaces/network/network_error"
	fmt "fmt"
	url_response "mojo/public/interfaces/network/url_response"
	url_request "mojo/public/interfaces/network/url_request"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type UrlLoader interface {
	Start(inRequest url_request.UrlRequest) (outResponse url_response.UrlResponse, err error)
	FollowRedirect() (outResponse url_response.UrlResponse, err error)
	QueryStatus() (outStatus UrlLoaderStatus, err error)
}




type UrlLoader_Request bindings.InterfaceRequest



type UrlLoader_Pointer bindings.InterfacePointer


type UrlLoader_ServiceFactory struct{
	Delegate UrlLoader_Factory
}

type UrlLoader_Factory interface {
	Create(request UrlLoader_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *UrlLoader_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &UrlLoader_ServiceDescription{}
}

func (f *UrlLoader_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := UrlLoader_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForUrlLoader creates a message pipe for use with the
// UrlLoader interface with a UrlLoader_Request on one end and a UrlLoader_Pointer on the other.
func CreateMessagePipeForUrlLoader() (UrlLoader_Request, UrlLoader_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return UrlLoader_Request(r), UrlLoader_Pointer(p)
}

const uRLLoader_Start_Name uint32 = 0
const uRLLoader_FollowRedirect_Name uint32 = 1
const uRLLoader_QueryStatus_Name uint32 = 2

type UrlLoader_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewUrlLoaderProxy(p UrlLoader_Pointer, waiter bindings.AsyncWaiter) *UrlLoader_Proxy {
	return &UrlLoader_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *UrlLoader_Proxy) Close_Proxy() {
	p.router.Close()
}

type uRLLoader_Start_Params struct {
	inRequest url_request.UrlRequest
}


func (s *uRLLoader_Start_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inRequest.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLLoader_Start_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uRLLoader_Start_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLLoader_Start_Params_Versions), func(i int) bool {
		return uRLLoader_Start_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLLoader_Start_Params_Versions) {
		if uRLLoader_Start_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLLoader_Start_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inRequest.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uRLLoader_Start_ResponseParams struct {
	outResponse url_response.UrlResponse
}


func (s *uRLLoader_Start_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResponse.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLLoader_Start_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uRLLoader_Start_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLLoader_Start_ResponseParams_Versions), func(i int) bool {
		return uRLLoader_Start_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLLoader_Start_ResponseParams_Versions) {
		if uRLLoader_Start_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLLoader_Start_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResponse.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UrlLoader_Proxy) Start(inRequest url_request.UrlRequest) (outResponse url_response.UrlResponse, err error) {
	payload := &uRLLoader_Start_Params{
		inRequest,
	}
	header := bindings.MessageHeader{
		Type: uRLLoader_Start_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uRLLoader_Start_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uRLLoader_Start_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResponse = response.outResponse
	return
}

type uRLLoader_FollowRedirect_Params struct {
}


func (s *uRLLoader_FollowRedirect_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLLoader_FollowRedirect_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *uRLLoader_FollowRedirect_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLLoader_FollowRedirect_Params_Versions), func(i int) bool {
		return uRLLoader_FollowRedirect_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLLoader_FollowRedirect_Params_Versions) {
		if uRLLoader_FollowRedirect_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLLoader_FollowRedirect_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uRLLoader_FollowRedirect_ResponseParams struct {
	outResponse url_response.UrlResponse
}


func (s *uRLLoader_FollowRedirect_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResponse.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLLoader_FollowRedirect_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uRLLoader_FollowRedirect_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLLoader_FollowRedirect_ResponseParams_Versions), func(i int) bool {
		return uRLLoader_FollowRedirect_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLLoader_FollowRedirect_ResponseParams_Versions) {
		if uRLLoader_FollowRedirect_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLLoader_FollowRedirect_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResponse.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UrlLoader_Proxy) FollowRedirect() (outResponse url_response.UrlResponse, err error) {
	payload := &uRLLoader_FollowRedirect_Params{
	}
	header := bindings.MessageHeader{
		Type: uRLLoader_FollowRedirect_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uRLLoader_FollowRedirect_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uRLLoader_FollowRedirect_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResponse = response.outResponse
	return
}

type uRLLoader_QueryStatus_Params struct {
}


func (s *uRLLoader_QueryStatus_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLLoader_QueryStatus_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *uRLLoader_QueryStatus_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLLoader_QueryStatus_Params_Versions), func(i int) bool {
		return uRLLoader_QueryStatus_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLLoader_QueryStatus_Params_Versions) {
		if uRLLoader_QueryStatus_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLLoader_QueryStatus_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type uRLLoader_QueryStatus_ResponseParams struct {
	outStatus UrlLoaderStatus
}


func (s *uRLLoader_QueryStatus_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outStatus.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLLoader_QueryStatus_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *uRLLoader_QueryStatus_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLLoader_QueryStatus_ResponseParams_Versions), func(i int) bool {
		return uRLLoader_QueryStatus_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLLoader_QueryStatus_ResponseParams_Versions) {
		if uRLLoader_QueryStatus_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLLoader_QueryStatus_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outStatus.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *UrlLoader_Proxy) QueryStatus() (outStatus UrlLoaderStatus, err error) {
	payload := &uRLLoader_QueryStatus_Params{
	}
	header := bindings.MessageHeader{
		Type: uRLLoader_QueryStatus_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, uRLLoader_QueryStatus_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response uRLLoader_QueryStatus_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outStatus = response.outStatus
	return
}

type uRLLoader_Stub struct {
	connector *bindings.Connector
	impl UrlLoader
}

func NewUrlLoaderStub(r UrlLoader_Request, impl UrlLoader, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &uRLLoader_Stub{connector, impl})
}


func (f *UrlLoader_Request) ServiceDescription() service_describer.ServiceDescription {
	return &UrlLoader_ServiceDescription{}
}


type UrlLoader_ServiceDescription struct{}

func (sd *UrlLoader_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *UrlLoader_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *UrlLoader_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*UrlLoader_ServiceDescription)(nil)


func (s *uRLLoader_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case uRLLoader_Start_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uRLLoader_Start_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uRLLoader_Start_ResponseParams
		response.outResponse, err = s.impl.Start(request.inRequest)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uRLLoader_Start_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uRLLoader_FollowRedirect_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uRLLoader_FollowRedirect_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uRLLoader_FollowRedirect_ResponseParams
		response.outResponse, err = s.impl.FollowRedirect()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uRLLoader_FollowRedirect_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case uRLLoader_QueryStatus_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request uRLLoader_QueryStatus_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response uRLLoader_QueryStatus_ResponseParams
		response.outStatus, err = s.impl.QueryStatus()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: uRLLoader_QueryStatus_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type UrlLoaderStatus struct {
	Error *network_error.NetworkError
	IsLoading bool
}


func (s *UrlLoaderStatus) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.Error == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.Error).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.WriteBool(s.IsLoading); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLLoaderStatus_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *UrlLoaderStatus) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLLoaderStatus_Versions), func(i int) bool {
		return uRLLoaderStatus_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLLoaderStatus_Versions) {
		if uRLLoaderStatus_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLLoaderStatus_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Error = nil
		} else {
			s.Error = new(network_error.NetworkError)
			if err := (*s.Error).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.IsLoading = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

