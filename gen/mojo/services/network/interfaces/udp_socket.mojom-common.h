// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_UDP_SOCKET_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_UDP_SOCKET_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/udp_socket.mojom-internal.h"
#include "mojo/public/interfaces/network/network_error.mojom-common.h"
#include "mojo/services/network/interfaces/net_address.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class UDPSocket;
class UDPSocketRequestValidator;
class UDPSocketResponseValidator;
class UDPSocket_Synchronous;
class UDPSocketReceiver;
class UDPSocketReceiverRequestValidator;
class UDPSocketReceiver_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class UDPSocket_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = UDPSocketRequestValidator;
  using ResponseValidator_ = UDPSocketResponseValidator;
  using Synchronous_ = UDPSocket_Synchronous;
  enum class MessageOrdinals : uint32_t {
    AllowAddressReuse = 0,
    Bind = 1,
    Connect = 2,
    SetSendBufferSize = 3,
    SetReceiveBufferSize = 4,
    NegotiateMaxPendingSendRequests = 5,
    ReceiveMore = 6,
    SendTo = 7,
  };


  virtual ~UDPSocket_Base() {}
};

}  // namespace internal

// Async interface declaration

class UDPSocketProxy;
class UDPSocketStub;
class UDPSocket_Synchronous;

class UDPSocketRequestValidator;
class UDPSocketResponseValidator;

class UDPSocket : public internal::UDPSocket_Base {
 public:
  virtual ~UDPSocket() override {}

  using Proxy_ = UDPSocketProxy;
  using Stub_ = UDPSocketStub;
  using AllowAddressReuseCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void AllowAddressReuse(const AllowAddressReuseCallback& callback) = 0;
  using BindCallback = mojo::Callback<void(mojo::NetworkErrorPtr, mojo::NetAddressPtr, mojo::InterfaceRequest<UDPSocketReceiver>)>;
  virtual void Bind(mojo::NetAddressPtr addr, const BindCallback& callback) = 0;
  using ConnectCallback = mojo::Callback<void(mojo::NetworkErrorPtr, mojo::NetAddressPtr, mojo::InterfaceRequest<UDPSocketReceiver>)>;
  virtual void Connect(mojo::NetAddressPtr remote_addr, const ConnectCallback& callback) = 0;
  using SetSendBufferSizeCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void SetSendBufferSize(uint32_t size, const SetSendBufferSizeCallback& callback) = 0;
  using SetReceiveBufferSizeCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void SetReceiveBufferSize(uint32_t size, const SetReceiveBufferSizeCallback& callback) = 0;
  using NegotiateMaxPendingSendRequestsCallback = mojo::Callback<void(uint32_t)>;
  virtual void NegotiateMaxPendingSendRequests(uint32_t requested_size, const NegotiateMaxPendingSendRequestsCallback& callback) = 0;
  virtual void ReceiveMore(uint32_t datagram_number) = 0;
  using SendToCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void SendTo(mojo::NetAddressPtr dest_addr, mojo::Array<uint8_t> data, const SendToCallback& callback) = 0;
};

namespace internal {
class UDPSocketReceiver_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = UDPSocketReceiverRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = UDPSocketReceiver_Synchronous;
  enum class MessageOrdinals : uint32_t {
    OnReceived = 0,
  };


  virtual ~UDPSocketReceiver_Base() {}
};

}  // namespace internal

// Async interface declaration

class UDPSocketReceiverProxy;
class UDPSocketReceiverStub;
class UDPSocketReceiver_Synchronous;

class UDPSocketReceiverRequestValidator;

class UDPSocketReceiver : public internal::UDPSocketReceiver_Base {
 public:
  virtual ~UDPSocketReceiver() override {}

  using Proxy_ = UDPSocketReceiverProxy;
  using Stub_ = UDPSocketReceiverStub;
  virtual void OnReceived(mojo::NetworkErrorPtr result, mojo::NetAddressPtr src_addr, mojo::Array<uint8_t> data) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class UDPSocketRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class UDPSocketReceiverRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class UDPSocketResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class UDPSocket_AllowAddressReuse_Params;

using UDPSocket_AllowAddressReuse_ParamsPtr = mojo::InlinedStructPtr<UDPSocket_AllowAddressReuse_Params>;


size_t GetSerializedSize_(const UDPSocket_AllowAddressReuse_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_AllowAddressReuse_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_AllowAddressReuse_Params_Data** output);
void Deserialize_(internal::UDPSocket_AllowAddressReuse_Params_Data* input,
                  UDPSocket_AllowAddressReuse_Params* output);

class UDPSocket_AllowAddressReuse_Params {
 public:
  using Data_ = internal::UDPSocket_AllowAddressReuse_Params_Data;

  static UDPSocket_AllowAddressReuse_ParamsPtr New();

  template <typename U>
  static UDPSocket_AllowAddressReuse_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_AllowAddressReuse_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_AllowAddressReuse_Params>::Convert(*this);
  }

  UDPSocket_AllowAddressReuse_Params();
  ~UDPSocket_AllowAddressReuse_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_AllowAddressReuse_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_AllowAddressReuse_Params& other) const;

};



class UDPSocket_AllowAddressReuse_ResponseParams;

using UDPSocket_AllowAddressReuse_ResponseParamsPtr = mojo::StructPtr<UDPSocket_AllowAddressReuse_ResponseParams>;


size_t GetSerializedSize_(const UDPSocket_AllowAddressReuse_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_AllowAddressReuse_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_AllowAddressReuse_ResponseParams_Data** output);
void Deserialize_(internal::UDPSocket_AllowAddressReuse_ResponseParams_Data* input,
                  UDPSocket_AllowAddressReuse_ResponseParams* output);

class UDPSocket_AllowAddressReuse_ResponseParams {
 public:
  using Data_ = internal::UDPSocket_AllowAddressReuse_ResponseParams_Data;

  static UDPSocket_AllowAddressReuse_ResponseParamsPtr New();

  template <typename U>
  static UDPSocket_AllowAddressReuse_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_AllowAddressReuse_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_AllowAddressReuse_ResponseParams>::Convert(*this);
  }

  UDPSocket_AllowAddressReuse_ResponseParams();
  ~UDPSocket_AllowAddressReuse_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_AllowAddressReuse_ResponseParamsPtr Clone() const;
  bool Equals(const UDPSocket_AllowAddressReuse_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};



class UDPSocket_Bind_Params;

using UDPSocket_Bind_ParamsPtr = mojo::StructPtr<UDPSocket_Bind_Params>;


size_t GetSerializedSize_(const UDPSocket_Bind_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_Bind_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_Bind_Params_Data** output);
void Deserialize_(internal::UDPSocket_Bind_Params_Data* input,
                  UDPSocket_Bind_Params* output);

class UDPSocket_Bind_Params {
 public:
  using Data_ = internal::UDPSocket_Bind_Params_Data;

  static UDPSocket_Bind_ParamsPtr New();

  template <typename U>
  static UDPSocket_Bind_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_Bind_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_Bind_Params>::Convert(*this);
  }

  UDPSocket_Bind_Params();
  ~UDPSocket_Bind_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_Bind_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_Bind_Params& other) const;

  mojo::NetAddressPtr addr;
};



class UDPSocket_Bind_ResponseParams;

using UDPSocket_Bind_ResponseParamsPtr = mojo::StructPtr<UDPSocket_Bind_ResponseParams>;


size_t GetSerializedSize_(const UDPSocket_Bind_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_Bind_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_Bind_ResponseParams_Data** output);
void Deserialize_(internal::UDPSocket_Bind_ResponseParams_Data* input,
                  UDPSocket_Bind_ResponseParams* output);

class UDPSocket_Bind_ResponseParams {
 public:
  using Data_ = internal::UDPSocket_Bind_ResponseParams_Data;

  static UDPSocket_Bind_ResponseParamsPtr New();

  template <typename U>
  static UDPSocket_Bind_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_Bind_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_Bind_ResponseParams>::Convert(*this);
  }

  UDPSocket_Bind_ResponseParams();
  ~UDPSocket_Bind_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const UDPSocket_Bind_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
  mojo::NetAddressPtr bound_addr;
  mojo::InterfaceRequest<UDPSocketReceiver> receiver;
};



class UDPSocket_Connect_Params;

using UDPSocket_Connect_ParamsPtr = mojo::StructPtr<UDPSocket_Connect_Params>;


size_t GetSerializedSize_(const UDPSocket_Connect_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_Connect_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_Connect_Params_Data** output);
void Deserialize_(internal::UDPSocket_Connect_Params_Data* input,
                  UDPSocket_Connect_Params* output);

class UDPSocket_Connect_Params {
 public:
  using Data_ = internal::UDPSocket_Connect_Params_Data;

  static UDPSocket_Connect_ParamsPtr New();

  template <typename U>
  static UDPSocket_Connect_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_Connect_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_Connect_Params>::Convert(*this);
  }

  UDPSocket_Connect_Params();
  ~UDPSocket_Connect_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_Connect_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_Connect_Params& other) const;

  mojo::NetAddressPtr remote_addr;
};



class UDPSocket_Connect_ResponseParams;

using UDPSocket_Connect_ResponseParamsPtr = mojo::StructPtr<UDPSocket_Connect_ResponseParams>;


size_t GetSerializedSize_(const UDPSocket_Connect_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_Connect_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_Connect_ResponseParams_Data** output);
void Deserialize_(internal::UDPSocket_Connect_ResponseParams_Data* input,
                  UDPSocket_Connect_ResponseParams* output);

class UDPSocket_Connect_ResponseParams {
 public:
  using Data_ = internal::UDPSocket_Connect_ResponseParams_Data;

  static UDPSocket_Connect_ResponseParamsPtr New();

  template <typename U>
  static UDPSocket_Connect_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_Connect_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_Connect_ResponseParams>::Convert(*this);
  }

  UDPSocket_Connect_ResponseParams();
  ~UDPSocket_Connect_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const UDPSocket_Connect_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
  mojo::NetAddressPtr local_addr;
  mojo::InterfaceRequest<UDPSocketReceiver> receiver;
};



class UDPSocket_SetSendBufferSize_Params;

using UDPSocket_SetSendBufferSize_ParamsPtr = mojo::InlinedStructPtr<UDPSocket_SetSendBufferSize_Params>;


size_t GetSerializedSize_(const UDPSocket_SetSendBufferSize_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_SetSendBufferSize_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_SetSendBufferSize_Params_Data** output);
void Deserialize_(internal::UDPSocket_SetSendBufferSize_Params_Data* input,
                  UDPSocket_SetSendBufferSize_Params* output);

class UDPSocket_SetSendBufferSize_Params {
 public:
  using Data_ = internal::UDPSocket_SetSendBufferSize_Params_Data;

  static UDPSocket_SetSendBufferSize_ParamsPtr New();

  template <typename U>
  static UDPSocket_SetSendBufferSize_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_SetSendBufferSize_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_SetSendBufferSize_Params>::Convert(*this);
  }

  UDPSocket_SetSendBufferSize_Params();
  ~UDPSocket_SetSendBufferSize_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_SetSendBufferSize_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_SetSendBufferSize_Params& other) const;

  uint32_t size;
};



class UDPSocket_SetSendBufferSize_ResponseParams;

using UDPSocket_SetSendBufferSize_ResponseParamsPtr = mojo::StructPtr<UDPSocket_SetSendBufferSize_ResponseParams>;


size_t GetSerializedSize_(const UDPSocket_SetSendBufferSize_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_SetSendBufferSize_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_SetSendBufferSize_ResponseParams_Data** output);
void Deserialize_(internal::UDPSocket_SetSendBufferSize_ResponseParams_Data* input,
                  UDPSocket_SetSendBufferSize_ResponseParams* output);

class UDPSocket_SetSendBufferSize_ResponseParams {
 public:
  using Data_ = internal::UDPSocket_SetSendBufferSize_ResponseParams_Data;

  static UDPSocket_SetSendBufferSize_ResponseParamsPtr New();

  template <typename U>
  static UDPSocket_SetSendBufferSize_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_SetSendBufferSize_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_SetSendBufferSize_ResponseParams>::Convert(*this);
  }

  UDPSocket_SetSendBufferSize_ResponseParams();
  ~UDPSocket_SetSendBufferSize_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_SetSendBufferSize_ResponseParamsPtr Clone() const;
  bool Equals(const UDPSocket_SetSendBufferSize_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};



class UDPSocket_SetReceiveBufferSize_Params;

using UDPSocket_SetReceiveBufferSize_ParamsPtr = mojo::InlinedStructPtr<UDPSocket_SetReceiveBufferSize_Params>;


size_t GetSerializedSize_(const UDPSocket_SetReceiveBufferSize_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_SetReceiveBufferSize_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_SetReceiveBufferSize_Params_Data** output);
void Deserialize_(internal::UDPSocket_SetReceiveBufferSize_Params_Data* input,
                  UDPSocket_SetReceiveBufferSize_Params* output);

class UDPSocket_SetReceiveBufferSize_Params {
 public:
  using Data_ = internal::UDPSocket_SetReceiveBufferSize_Params_Data;

  static UDPSocket_SetReceiveBufferSize_ParamsPtr New();

  template <typename U>
  static UDPSocket_SetReceiveBufferSize_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_SetReceiveBufferSize_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_SetReceiveBufferSize_Params>::Convert(*this);
  }

  UDPSocket_SetReceiveBufferSize_Params();
  ~UDPSocket_SetReceiveBufferSize_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_SetReceiveBufferSize_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_SetReceiveBufferSize_Params& other) const;

  uint32_t size;
};



class UDPSocket_SetReceiveBufferSize_ResponseParams;

using UDPSocket_SetReceiveBufferSize_ResponseParamsPtr = mojo::StructPtr<UDPSocket_SetReceiveBufferSize_ResponseParams>;


size_t GetSerializedSize_(const UDPSocket_SetReceiveBufferSize_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_SetReceiveBufferSize_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data** output);
void Deserialize_(internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data* input,
                  UDPSocket_SetReceiveBufferSize_ResponseParams* output);

class UDPSocket_SetReceiveBufferSize_ResponseParams {
 public:
  using Data_ = internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data;

  static UDPSocket_SetReceiveBufferSize_ResponseParamsPtr New();

  template <typename U>
  static UDPSocket_SetReceiveBufferSize_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_SetReceiveBufferSize_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_SetReceiveBufferSize_ResponseParams>::Convert(*this);
  }

  UDPSocket_SetReceiveBufferSize_ResponseParams();
  ~UDPSocket_SetReceiveBufferSize_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_SetReceiveBufferSize_ResponseParamsPtr Clone() const;
  bool Equals(const UDPSocket_SetReceiveBufferSize_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};



class UDPSocket_NegotiateMaxPendingSendRequests_Params;

using UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr = mojo::InlinedStructPtr<UDPSocket_NegotiateMaxPendingSendRequests_Params>;


size_t GetSerializedSize_(const UDPSocket_NegotiateMaxPendingSendRequests_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_NegotiateMaxPendingSendRequests_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data** output);
void Deserialize_(internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* input,
                  UDPSocket_NegotiateMaxPendingSendRequests_Params* output);

class UDPSocket_NegotiateMaxPendingSendRequests_Params {
 public:
  using Data_ = internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data;

  static UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr New();

  template <typename U>
  static UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_NegotiateMaxPendingSendRequests_Params>::Convert(*this);
  }

  UDPSocket_NegotiateMaxPendingSendRequests_Params();
  ~UDPSocket_NegotiateMaxPendingSendRequests_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_NegotiateMaxPendingSendRequests_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_NegotiateMaxPendingSendRequests_Params& other) const;

  uint32_t requested_size;
};



class UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams;

using UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr = mojo::InlinedStructPtr<UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams>;


size_t GetSerializedSize_(const UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data** output);
void Deserialize_(internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* input,
                  UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams* output);

class UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams {
 public:
  using Data_ = internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data;

  static UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr New();

  template <typename U>
  static UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams>::Convert(*this);
  }

  UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams();
  ~UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_NegotiateMaxPendingSendRequests_ResponseParamsPtr Clone() const;
  bool Equals(const UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams& other) const;

  uint32_t actual_size;
};



class UDPSocket_ReceiveMore_Params;

using UDPSocket_ReceiveMore_ParamsPtr = mojo::InlinedStructPtr<UDPSocket_ReceiveMore_Params>;


size_t GetSerializedSize_(const UDPSocket_ReceiveMore_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_ReceiveMore_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_ReceiveMore_Params_Data** output);
void Deserialize_(internal::UDPSocket_ReceiveMore_Params_Data* input,
                  UDPSocket_ReceiveMore_Params* output);

class UDPSocket_ReceiveMore_Params {
 public:
  using Data_ = internal::UDPSocket_ReceiveMore_Params_Data;

  static UDPSocket_ReceiveMore_ParamsPtr New();

  template <typename U>
  static UDPSocket_ReceiveMore_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_ReceiveMore_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_ReceiveMore_Params>::Convert(*this);
  }

  UDPSocket_ReceiveMore_Params();
  ~UDPSocket_ReceiveMore_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_ReceiveMore_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_ReceiveMore_Params& other) const;

  uint32_t datagram_number;
};




class UDPSocket_SendTo_Params;

using UDPSocket_SendTo_ParamsPtr = mojo::StructPtr<UDPSocket_SendTo_Params>;


size_t GetSerializedSize_(const UDPSocket_SendTo_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_SendTo_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_SendTo_Params_Data** output);
void Deserialize_(internal::UDPSocket_SendTo_Params_Data* input,
                  UDPSocket_SendTo_Params* output);

class UDPSocket_SendTo_Params {
 public:
  using Data_ = internal::UDPSocket_SendTo_Params_Data;

  static UDPSocket_SendTo_ParamsPtr New();

  template <typename U>
  static UDPSocket_SendTo_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_SendTo_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_SendTo_Params>::Convert(*this);
  }

  UDPSocket_SendTo_Params();
  ~UDPSocket_SendTo_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_SendTo_ParamsPtr Clone() const;
  bool Equals(const UDPSocket_SendTo_Params& other) const;

  mojo::NetAddressPtr dest_addr;
  mojo::Array<uint8_t> data;
};



class UDPSocket_SendTo_ResponseParams;

using UDPSocket_SendTo_ResponseParamsPtr = mojo::StructPtr<UDPSocket_SendTo_ResponseParams>;


size_t GetSerializedSize_(const UDPSocket_SendTo_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    UDPSocket_SendTo_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocket_SendTo_ResponseParams_Data** output);
void Deserialize_(internal::UDPSocket_SendTo_ResponseParams_Data* input,
                  UDPSocket_SendTo_ResponseParams* output);

class UDPSocket_SendTo_ResponseParams {
 public:
  using Data_ = internal::UDPSocket_SendTo_ResponseParams_Data;

  static UDPSocket_SendTo_ResponseParamsPtr New();

  template <typename U>
  static UDPSocket_SendTo_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocket_SendTo_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocket_SendTo_ResponseParams>::Convert(*this);
  }

  UDPSocket_SendTo_ResponseParams();
  ~UDPSocket_SendTo_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocket_SendTo_ResponseParamsPtr Clone() const;
  bool Equals(const UDPSocket_SendTo_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};


      

class UDPSocketReceiver_OnReceived_Params;

using UDPSocketReceiver_OnReceived_ParamsPtr = mojo::StructPtr<UDPSocketReceiver_OnReceived_Params>;


size_t GetSerializedSize_(const UDPSocketReceiver_OnReceived_Params& input);
mojo::internal::ValidationError Serialize_(
    UDPSocketReceiver_OnReceived_Params* input,
    mojo::internal::Buffer* buffer,
    internal::UDPSocketReceiver_OnReceived_Params_Data** output);
void Deserialize_(internal::UDPSocketReceiver_OnReceived_Params_Data* input,
                  UDPSocketReceiver_OnReceived_Params* output);

class UDPSocketReceiver_OnReceived_Params {
 public:
  using Data_ = internal::UDPSocketReceiver_OnReceived_Params_Data;

  static UDPSocketReceiver_OnReceived_ParamsPtr New();

  template <typename U>
  static UDPSocketReceiver_OnReceived_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<UDPSocketReceiver_OnReceived_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, UDPSocketReceiver_OnReceived_Params>::Convert(*this);
  }

  UDPSocketReceiver_OnReceived_Params();
  ~UDPSocketReceiver_OnReceived_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UDPSocketReceiver_OnReceived_ParamsPtr Clone() const;
  bool Equals(const UDPSocketReceiver_OnReceived_Params& other) const;

  mojo::NetworkErrorPtr result;
  mojo::NetAddressPtr src_addr;
  mojo::Array<uint8_t> data;
};



}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_UDP_SOCKET_MOJOM_COMMON_H_
