// NOTE: This file was generated by the Mojo bindings generator.
#include "services/test_service/test_request_tracker.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {
namespace test {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
ServiceStats_Data* ServiceStats_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceStats_Data))) ServiceStats_Data();
}

// static
mojo::internal::ValidationError ServiceStats_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceStats_Data* object = static_cast<const ServiceStats_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceStats_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ServiceStats_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ServiceStats_Data::ServiceStats_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ServiceReport_Data* ServiceReport_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceReport_Data))) ServiceReport_Data();
}

// static
mojo::internal::ValidationError ServiceReport_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceReport_Data* object = static_cast<const ServiceReport_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->service_name.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams service_name_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->service_name.offset),
          bounds_checker, &service_name_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceReport_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->service_name, handles);
}

void ServiceReport_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->service_name, handles);
}

ServiceReport_Data::ServiceReport_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
TestTrackedRequestService_GetReport_Params_Data* TestTrackedRequestService_GetReport_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TestTrackedRequestService_GetReport_Params_Data))) TestTrackedRequestService_GetReport_Params_Data();
}

// static
mojo::internal::ValidationError TestTrackedRequestService_GetReport_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestTrackedRequestService_GetReport_Params_Data* object = static_cast<const TestTrackedRequestService_GetReport_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void TestTrackedRequestService_GetReport_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void TestTrackedRequestService_GetReport_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

TestTrackedRequestService_GetReport_Params_Data::TestTrackedRequestService_GetReport_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
TestTrackedRequestService_GetReport_ResponseParams_Data* TestTrackedRequestService_GetReport_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TestTrackedRequestService_GetReport_ResponseParams_Data))) TestTrackedRequestService_GetReport_ResponseParams_Data();
}

// static
mojo::internal::ValidationError TestTrackedRequestService_GetReport_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestTrackedRequestService_GetReport_ResponseParams_Data* object = static_cast<const TestTrackedRequestService_GetReport_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->report.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams report_validate_params(
      0, true, nullptr);
  auto validate_retval =
      mojo::Array<ServiceReportPtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->report.offset),
          bounds_checker, &report_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void TestTrackedRequestService_GetReport_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->report, handles);
}

void TestTrackedRequestService_GetReport_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->report, handles);
}

TestTrackedRequestService_GetReport_ResponseParams_Data::TestTrackedRequestService_GetReport_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
TestRequestTracker_SetNameAndReturnId_Params_Data* TestRequestTracker_SetNameAndReturnId_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TestRequestTracker_SetNameAndReturnId_Params_Data))) TestRequestTracker_SetNameAndReturnId_Params_Data();
}

// static
mojo::internal::ValidationError TestRequestTracker_SetNameAndReturnId_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestRequestTracker_SetNameAndReturnId_Params_Data* object = static_cast<const TestRequestTracker_SetNameAndReturnId_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->service_name.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null service_name field in TestRequestTracker_SetNameAndReturnId_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->service_name.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams service_name_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->service_name.offset),
          bounds_checker, &service_name_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void TestRequestTracker_SetNameAndReturnId_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->service_name, handles);
}

void TestRequestTracker_SetNameAndReturnId_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->service_name, handles);
}

TestRequestTracker_SetNameAndReturnId_Params_Data::TestRequestTracker_SetNameAndReturnId_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TestRequestTracker_SetNameAndReturnId_ResponseParams_Data))) TestRequestTracker_SetNameAndReturnId_ResponseParams_Data();
}

// static
mojo::internal::ValidationError TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* object = static_cast<const TestRequestTracker_SetNameAndReturnId_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
TestRequestTracker_RecordStats_Params_Data* TestRequestTracker_RecordStats_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TestRequestTracker_RecordStats_Params_Data))) TestRequestTracker_RecordStats_Params_Data();
}

// static
mojo::internal::ValidationError TestRequestTracker_RecordStats_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TestRequestTracker_RecordStats_Params_Data* object = static_cast<const TestRequestTracker_RecordStats_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->stats.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = ServiceStats::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->stats.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void TestRequestTracker_RecordStats_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->stats, handles);
}

void TestRequestTracker_RecordStats_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->stats, handles);
}

TestRequestTracker_RecordStats_Params_Data::TestRequestTracker_RecordStats_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError TestTrackedRequestServiceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'TestTrackedRequestService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::TestTrackedRequestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestTrackedRequestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestTrackedRequestService_Base::MessageOrdinals::GetReport: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TestTrackedRequestService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TestTrackedRequestService_GetReport_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TestTrackedRequestService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'TestTrackedRequestService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError TestTrackedRequestServiceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'TestTrackedRequestService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'TestTrackedRequestService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::TestTrackedRequestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestTrackedRequestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestTrackedRequestService_Base::MessageOrdinals::GetReport: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::TestTrackedRequestService_GetReport_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'TestTrackedRequestService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'TestTrackedRequestService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError TestRequestTrackerRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'TestRequestTracker', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::TestRequestTracker_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestRequestTracker_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestRequestTracker_Base::MessageOrdinals::SetNameAndReturnId: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TestRequestTracker', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TestRequestTracker_SetNameAndReturnId_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TestRequestTracker', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::TestRequestTracker_Base::MessageOrdinals::RecordStats: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TestRequestTracker', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TestRequestTracker_RecordStats_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TestRequestTracker', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'TestRequestTracker'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError TestRequestTrackerResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'TestRequestTracker', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'TestRequestTracker', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::TestRequestTracker_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestRequestTracker_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestRequestTracker_Base::MessageOrdinals::SetNameAndReturnId: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'TestRequestTracker',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'TestRequestTracker'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::TestTrackedRequestService_Base::Name_[] = "mojo::test::TestTrackedRequestService";
const uint32_t internal::TestTrackedRequestService_Base::Version_;

// Constants

// Enums
const char internal::TestRequestTracker_Base::Name_[] = "mojo::test::TestRequestTracker";
const uint32_t internal::TestRequestTracker_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
ServiceStatsPtr ServiceStats::New() {
  ServiceStatsPtr rv;
  mojo::internal::StructHelper<ServiceStats>::Initialize(&rv);
  return rv;
}

ServiceStats::ServiceStats()
    : num_new_requests(),
      health() {
}

ServiceStats::~ServiceStats() {
}


ServiceStatsPtr ServiceStats::Clone() const {
  ServiceStatsPtr rv(New());
  rv->num_new_requests = num_new_requests;
  rv->health = health;
  return rv;
}


bool ServiceStats::Equals(const ServiceStats& other) const {
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->num_new_requests, other.num_new_requests))
    return false;
  if (!mojo::internal::ValueTraits<double>::Equals(this->health, other.health))
    return false;
  return true;
}


// static
ServiceReportPtr ServiceReport::New() {
  ServiceReportPtr rv;
  mojo::internal::StructHelper<ServiceReport>::Initialize(&rv);
  return rv;
}

ServiceReport::ServiceReport()
    : service_name(),
      total_requests(),
      mean_health() {
}

ServiceReport::~ServiceReport() {
}


ServiceReportPtr ServiceReport::Clone() const {
  ServiceReportPtr rv(New());
  rv->service_name = service_name;
  rv->total_requests = total_requests;
  rv->mean_health = mean_health;
  return rv;
}


bool ServiceReport::Equals(const ServiceReport& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->service_name, other.service_name))
    return false;
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->total_requests, other.total_requests))
    return false;
  if (!mojo::internal::ValueTraits<double>::Equals(this->mean_health, other.mean_health))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t ServiceStats::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceStats::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceStats_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceStats::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceStats_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceStats::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceStats_Data* input =
      static_cast<internal::ServiceStats_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceStats& input) {
  size_t size = sizeof(internal::ServiceStats_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceStats* input,
    mojo::internal::Buffer* buf,
    internal::ServiceStats_Data** output) {
  if (input) {
    internal::ServiceStats_Data* result =
        internal::ServiceStats_Data::New(buf);
    result->num_new_requests = input->num_new_requests;
    result->health = input->health;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceStats_Data* input,
                  ServiceStats* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->num_new_requests = input->num_new_requests;
      result->health = input->health;
    } while (false);
  }
}


size_t ServiceReport::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceReport::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceReport_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceReport::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceReport_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceReport::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceReport_Data* input =
      static_cast<internal::ServiceReport_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceReport& input) {
  size_t size = sizeof(internal::ServiceReport_Data);
  size += GetSerializedSize_(input.service_name);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceReport* input,
    mojo::internal::Buffer* buf,
    internal::ServiceReport_Data** output) {
  if (input) {
    internal::ServiceReport_Data* result =
        internal::ServiceReport_Data::New(buf);
    SerializeString_(input->service_name, buf, &result->service_name.ptr);
    result->total_requests = input->total_requests;
    result->mean_health = input->mean_health;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceReport_Data* input,
                  ServiceReport* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->service_name.ptr, &result->service_name);
      result->total_requests = input->total_requests;
      result->mean_health = input->mean_health;
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
TestTrackedRequestService_GetReport_ParamsPtr TestTrackedRequestService_GetReport_Params::New() {
  TestTrackedRequestService_GetReport_ParamsPtr rv;
  mojo::internal::StructHelper<TestTrackedRequestService_GetReport_Params>::Initialize(&rv);
  return rv;
}

TestTrackedRequestService_GetReport_Params::TestTrackedRequestService_GetReport_Params() {
}

TestTrackedRequestService_GetReport_Params::~TestTrackedRequestService_GetReport_Params() {
}


TestTrackedRequestService_GetReport_ParamsPtr TestTrackedRequestService_GetReport_Params::Clone() const {
  TestTrackedRequestService_GetReport_ParamsPtr rv(New());
  return rv;
}


bool TestTrackedRequestService_GetReport_Params::Equals(const TestTrackedRequestService_GetReport_Params& other) const {
  return true;
}


size_t TestTrackedRequestService_GetReport_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TestTrackedRequestService_GetReport_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TestTrackedRequestService_GetReport_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TestTrackedRequestService_GetReport_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TestTrackedRequestService_GetReport_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TestTrackedRequestService_GetReport_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TestTrackedRequestService_GetReport_Params_Data* input =
      static_cast<internal::TestTrackedRequestService_GetReport_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TestTrackedRequestService_GetReport_Params& input) {
  size_t size = sizeof(internal::TestTrackedRequestService_GetReport_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TestTrackedRequestService_GetReport_Params* input,
    mojo::internal::Buffer* buf,
    internal::TestTrackedRequestService_GetReport_Params_Data** output) {
  if (input) {
    internal::TestTrackedRequestService_GetReport_Params_Data* result =
        internal::TestTrackedRequestService_GetReport_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TestTrackedRequestService_GetReport_Params_Data* input,
                  TestTrackedRequestService_GetReport_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
TestTrackedRequestService_GetReport_ResponseParamsPtr TestTrackedRequestService_GetReport_ResponseParams::New() {
  TestTrackedRequestService_GetReport_ResponseParamsPtr rv;
  mojo::internal::StructHelper<TestTrackedRequestService_GetReport_ResponseParams>::Initialize(&rv);
  return rv;
}

TestTrackedRequestService_GetReport_ResponseParams::TestTrackedRequestService_GetReport_ResponseParams()
    : report() {
}

TestTrackedRequestService_GetReport_ResponseParams::~TestTrackedRequestService_GetReport_ResponseParams() {
}


TestTrackedRequestService_GetReport_ResponseParamsPtr TestTrackedRequestService_GetReport_ResponseParams::Clone() const {
  TestTrackedRequestService_GetReport_ResponseParamsPtr rv(New());
  rv->report = report.Clone();
  return rv;
}


bool TestTrackedRequestService_GetReport_ResponseParams::Equals(const TestTrackedRequestService_GetReport_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<ServiceReportPtr>>::Equals(this->report, other.report))
    return false;
  return true;
}


size_t TestTrackedRequestService_GetReport_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TestTrackedRequestService_GetReport_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TestTrackedRequestService_GetReport_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TestTrackedRequestService_GetReport_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TestTrackedRequestService_GetReport_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TestTrackedRequestService_GetReport_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TestTrackedRequestService_GetReport_ResponseParams_Data* input =
      static_cast<internal::TestTrackedRequestService_GetReport_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TestTrackedRequestService_GetReport_ResponseParams& input) {
  size_t size = sizeof(internal::TestTrackedRequestService_GetReport_ResponseParams_Data);
  size += GetSerializedSize_(input.report);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TestTrackedRequestService_GetReport_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::TestTrackedRequestService_GetReport_ResponseParams_Data** output) {
  if (input) {
    internal::TestTrackedRequestService_GetReport_ResponseParams_Data* result =
        internal::TestTrackedRequestService_GetReport_ResponseParams_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams report_validate_params(
        0, true, nullptr);auto retval =mojo::SerializeArray_(&input->report, buf, &result->report.ptr,
                            &report_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TestTrackedRequestService_GetReport_ResponseParams_Data* input,
                  TestTrackedRequestService_GetReport_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->report.ptr, &result->report);
    } while (false);
  }
}



// static
TestRequestTracker_SetNameAndReturnId_ParamsPtr TestRequestTracker_SetNameAndReturnId_Params::New() {
  TestRequestTracker_SetNameAndReturnId_ParamsPtr rv;
  mojo::internal::StructHelper<TestRequestTracker_SetNameAndReturnId_Params>::Initialize(&rv);
  return rv;
}

TestRequestTracker_SetNameAndReturnId_Params::TestRequestTracker_SetNameAndReturnId_Params()
    : service_name() {
}

TestRequestTracker_SetNameAndReturnId_Params::~TestRequestTracker_SetNameAndReturnId_Params() {
}


TestRequestTracker_SetNameAndReturnId_ParamsPtr TestRequestTracker_SetNameAndReturnId_Params::Clone() const {
  TestRequestTracker_SetNameAndReturnId_ParamsPtr rv(New());
  rv->service_name = service_name;
  return rv;
}


bool TestRequestTracker_SetNameAndReturnId_Params::Equals(const TestRequestTracker_SetNameAndReturnId_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->service_name, other.service_name))
    return false;
  return true;
}


size_t TestRequestTracker_SetNameAndReturnId_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TestRequestTracker_SetNameAndReturnId_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TestRequestTracker_SetNameAndReturnId_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TestRequestTracker_SetNameAndReturnId_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TestRequestTracker_SetNameAndReturnId_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TestRequestTracker_SetNameAndReturnId_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TestRequestTracker_SetNameAndReturnId_Params_Data* input =
      static_cast<internal::TestRequestTracker_SetNameAndReturnId_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TestRequestTracker_SetNameAndReturnId_Params& input) {
  size_t size = sizeof(internal::TestRequestTracker_SetNameAndReturnId_Params_Data);
  size += GetSerializedSize_(input.service_name);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TestRequestTracker_SetNameAndReturnId_Params* input,
    mojo::internal::Buffer* buf,
    internal::TestRequestTracker_SetNameAndReturnId_Params_Data** output) {
  if (input) {
    internal::TestRequestTracker_SetNameAndReturnId_Params_Data* result =
        internal::TestRequestTracker_SetNameAndReturnId_Params_Data::New(buf);
    SerializeString_(input->service_name, buf, &result->service_name.ptr);
    if (!result->service_name.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null service_name in TestRequestTracker_SetNameAndReturnId_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TestRequestTracker_SetNameAndReturnId_Params_Data* input,
                  TestRequestTracker_SetNameAndReturnId_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->service_name.ptr, &result->service_name);
    } while (false);
  }
}


// static
TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr TestRequestTracker_SetNameAndReturnId_ResponseParams::New() {
  TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr rv;
  mojo::internal::StructHelper<TestRequestTracker_SetNameAndReturnId_ResponseParams>::Initialize(&rv);
  return rv;
}

TestRequestTracker_SetNameAndReturnId_ResponseParams::TestRequestTracker_SetNameAndReturnId_ResponseParams()
    : id() {
}

TestRequestTracker_SetNameAndReturnId_ResponseParams::~TestRequestTracker_SetNameAndReturnId_ResponseParams() {
}


TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr TestRequestTracker_SetNameAndReturnId_ResponseParams::Clone() const {
  TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr rv(New());
  rv->id = id;
  return rv;
}


bool TestRequestTracker_SetNameAndReturnId_ResponseParams::Equals(const TestRequestTracker_SetNameAndReturnId_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->id, other.id))
    return false;
  return true;
}


size_t TestRequestTracker_SetNameAndReturnId_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TestRequestTracker_SetNameAndReturnId_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TestRequestTracker_SetNameAndReturnId_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TestRequestTracker_SetNameAndReturnId_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* input =
      static_cast<internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TestRequestTracker_SetNameAndReturnId_ResponseParams& input) {
  size_t size = sizeof(internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TestRequestTracker_SetNameAndReturnId_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data** output) {
  if (input) {
    internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* result =
        internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::New(buf);
    result->id = input->id;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* input,
                  TestRequestTracker_SetNameAndReturnId_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id = input->id;
    } while (false);
  }
}



// static
TestRequestTracker_RecordStats_ParamsPtr TestRequestTracker_RecordStats_Params::New() {
  TestRequestTracker_RecordStats_ParamsPtr rv;
  mojo::internal::StructHelper<TestRequestTracker_RecordStats_Params>::Initialize(&rv);
  return rv;
}

TestRequestTracker_RecordStats_Params::TestRequestTracker_RecordStats_Params()
    : client_id(),
      stats() {
}

TestRequestTracker_RecordStats_Params::~TestRequestTracker_RecordStats_Params() {
}


TestRequestTracker_RecordStats_ParamsPtr TestRequestTracker_RecordStats_Params::Clone() const {
  TestRequestTracker_RecordStats_ParamsPtr rv(New());
  rv->client_id = client_id;
  rv->stats = stats.Clone();
  return rv;
}


bool TestRequestTracker_RecordStats_Params::Equals(const TestRequestTracker_RecordStats_Params& other) const {
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->client_id, other.client_id))
    return false;
  if (!mojo::internal::ValueTraits<ServiceStatsPtr>::Equals(this->stats, other.stats))
    return false;
  return true;
}


size_t TestRequestTracker_RecordStats_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TestRequestTracker_RecordStats_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TestRequestTracker_RecordStats_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TestRequestTracker_RecordStats_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TestRequestTracker_RecordStats_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TestRequestTracker_RecordStats_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TestRequestTracker_RecordStats_Params_Data* input =
      static_cast<internal::TestRequestTracker_RecordStats_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TestRequestTracker_RecordStats_Params& input) {
  size_t size = sizeof(internal::TestRequestTracker_RecordStats_Params_Data);
  size += input.stats.is_null()
              ? 0
              : GetSerializedSize_(*input.stats);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TestRequestTracker_RecordStats_Params* input,
    mojo::internal::Buffer* buf,
    internal::TestRequestTracker_RecordStats_Params_Data** output) {
  if (input) {
    internal::TestRequestTracker_RecordStats_Params_Data* result =
        internal::TestRequestTracker_RecordStats_Params_Data::New(buf);
    result->client_id = input->client_id;
    {auto retval =Serialize_(input->stats.get(),
                 buf,
                 &result->stats.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TestRequestTracker_RecordStats_Params_Data* input,
                  TestRequestTracker_RecordStats_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->client_id = input->client_id;
      if (input->stats.ptr) {
        result->stats = ServiceStats::New();
        Deserialize_(input->stats.ptr, result->stats.get());
      }
    } while (false);
  }
}

}  // namespace test
}  // namespace mojo
