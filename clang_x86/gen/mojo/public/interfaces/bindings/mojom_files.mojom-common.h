// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_FILES_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_FILES_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/mojom_files.mojom-internal.h"
#include "mojo/public/interfaces/bindings/mojom_types.mojom-common.h"
namespace mojo {
namespace bindings {
namespace types {

// --- Interface Forward Declarations ---

// --- Struct Forward Declarations ---
class MojomFile;

using MojomFilePtr = mojo::StructPtr<MojomFile>;


class MojomFileGraph;

using MojomFileGraphPtr = mojo::StructPtr<MojomFileGraph>;


class KeysByType;

using KeysByTypePtr = mojo::StructPtr<KeysByType>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
}  // namespace types
}  // namespace bindings
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::bindings::types::MojomFilePtr, true, false> {
  using DataType = mojo::bindings::types::internal::MojomFile_Data*;
};
template <>
struct WrapperTraits<mojo::bindings::types::MojomFileGraphPtr, true, false> {
  using DataType = mojo::bindings::types::internal::MojomFileGraph_Data*;
};
template <>
struct WrapperTraits<mojo::bindings::types::KeysByTypePtr, true, false> {
  using DataType = mojo::bindings::types::internal::KeysByType_Data*;
};

}  // internal
}  // mojo
namespace mojo {
namespace bindings {
namespace types {

// --- Interface Request Validators ---

// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class MojomFile {
 public:
  using Data_ = internal::MojomFile_Data;

  static MojomFilePtr New();

  template <typename U>
  static MojomFilePtr From(const U& u) {
    return mojo::TypeConverter<MojomFilePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MojomFile>::Convert(*this);
  }

  MojomFile();
  ~MojomFile();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  MojomFilePtr Clone() const;
  bool Equals(const MojomFile& other) const;

  mojo::String file_name;
  mojo::String specified_file_name;
  mojo::String module_namespace;
  mojo::Array<mojo::bindings::types::AttributePtr> attributes;
  mojo::Array<mojo::String> imports;
  KeysByTypePtr declared_mojom_objects;
  mojo::String serialized_runtime_type_info;
};


class MojomFileGraph {
 public:
  using Data_ = internal::MojomFileGraph_Data;

  static MojomFileGraphPtr New();

  template <typename U>
  static MojomFileGraphPtr From(const U& u) {
    return mojo::TypeConverter<MojomFileGraphPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MojomFileGraph>::Convert(*this);
  }

  MojomFileGraph();
  ~MojomFileGraph();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  MojomFileGraphPtr Clone() const;
  bool Equals(const MojomFileGraph& other) const;

  mojo::Map<mojo::String, MojomFilePtr> files;
  mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr> resolved_types;
  mojo::Map<mojo::String, mojo::bindings::types::DeclaredConstantPtr> resolved_constants;
};


class KeysByType {
 public:
  using Data_ = internal::KeysByType_Data;

  static KeysByTypePtr New();

  template <typename U>
  static KeysByTypePtr From(const U& u) {
    return mojo::TypeConverter<KeysByTypePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, KeysByType>::Convert(*this);
  }

  KeysByType();
  ~KeysByType();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  KeysByTypePtr Clone() const;
  bool Equals(const KeysByType& other) const;

  mojo::Array<mojo::String> interfaces;
  mojo::Array<mojo::String> structs;
  mojo::Array<mojo::String> unions;
  mojo::Array<mojo::String> top_level_enums;
  mojo::Array<mojo::String> embedded_enums;
  mojo::Array<mojo::String> top_level_constants;
  mojo::Array<mojo::String> embedded_constants;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const MojomFile& input);
mojo::internal::ValidationError Serialize_(
    MojomFile* input,
    mojo::internal::Buffer* buffer,
    internal::MojomFile_Data** output);
void Deserialize_(internal::MojomFile_Data* input,
                  MojomFile* output);

size_t GetSerializedSize_(const MojomFileGraph& input);
mojo::internal::ValidationError Serialize_(
    MojomFileGraph* input,
    mojo::internal::Buffer* buffer,
    internal::MojomFileGraph_Data** output);
void Deserialize_(internal::MojomFileGraph_Data* input,
                  MojomFileGraph* output);

size_t GetSerializedSize_(const KeysByType& input);
mojo::internal::ValidationError Serialize_(
    KeysByType* input,
    mojo::internal::Buffer* buffer,
    internal::KeysByType_Data** output);
void Deserialize_(internal::KeysByType_Data* input,
                  KeysByType* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
}  // namespace types
}  // namespace bindings
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_FILES_MOJOM_COMMON_H_
