// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/authentication/interfaces/authentication_admin.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace authentication {

// --- Interface definitions ---
class AuthenticationAdminService_GetOAuth2DeviceCode_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AuthenticationAdminService_GetOAuth2DeviceCode_ForwardToCallback(
      const AuthenticationAdminService::GetOAuth2DeviceCodeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  AuthenticationAdminService::GetOAuth2DeviceCodeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationAdminService_GetOAuth2DeviceCode_ForwardToCallback);
};
bool AuthenticationAdminService_GetOAuth2DeviceCode_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data* params =
      reinterpret_cast<internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_verification_url {};
  mojo::String p_device_code {};
  mojo::String p_user_code {};
  mojo::String p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->verification_url.ptr, &p_verification_url);
    Deserialize_(params->device_code.ptr, &p_device_code);
    Deserialize_(params->user_code.ptr, &p_user_code);
    Deserialize_(params->error.ptr, &p_error);
  } while (false);
  callback_.Run(p_verification_url, p_device_code, p_user_code, p_error);
  return true;
}
class AuthenticationAdminService_AddAccount_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AuthenticationAdminService_AddAccount_ForwardToCallback(
      const AuthenticationAdminService::AddAccountCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  AuthenticationAdminService::AddAccountCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationAdminService_AddAccount_ForwardToCallback);
};
bool AuthenticationAdminService_AddAccount_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::AuthenticationAdminService_AddAccount_ResponseParams_Data* params =
      reinterpret_cast<internal::AuthenticationAdminService_AddAccount_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_username {};
  mojo::String p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->username.ptr, &p_username);
    Deserialize_(params->error.ptr, &p_error);
  } while (false);
  callback_.Run(p_username, p_error);
  return true;
}
class AuthenticationAdminService_GetAllUsers_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AuthenticationAdminService_GetAllUsers_ForwardToCallback(
      const AuthenticationAdminService::GetAllUsersCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  AuthenticationAdminService::GetAllUsersCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationAdminService_GetAllUsers_ForwardToCallback);
};
bool AuthenticationAdminService_GetAllUsers_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data* params =
      reinterpret_cast<internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<mojo::String> p_usernames {};
  mojo::String p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->usernames.ptr, &p_usernames);
    Deserialize_(params->error.ptr, &p_error);
  } while (false);
  callback_.Run(p_usernames.Pass(), p_error);
  return true;
}

AuthenticationAdminServiceProxy::AuthenticationAdminServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void AuthenticationAdminServiceProxy::GetOAuth2DeviceCode(
    mojo::Array<mojo::String> in_scopes, const GetOAuth2DeviceCodeCallback& callback) {
  size_t size = sizeof(internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data);
  size += GetSerializedSize_(in_scopes);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationAdminService_Base::MessageOrdinals::GetOAuth2DeviceCode), size);

  internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data* params =
      internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams scopes_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_scopes, builder.buffer(), &params->scopes.ptr,
                          &scopes_validate_params);
  }
  if (!params->scopes.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null scopes in AuthenticationAdminService.GetOAuth2DeviceCode request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new AuthenticationAdminService_GetOAuth2DeviceCode_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void AuthenticationAdminServiceProxy::AddAccount(
    const mojo::String& in_device_code, const AddAccountCallback& callback) {
  size_t size = sizeof(internal::AuthenticationAdminService_AddAccount_Params_Data);
  size += GetSerializedSize_(in_device_code);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationAdminService_Base::MessageOrdinals::AddAccount), size);

  internal::AuthenticationAdminService_AddAccount_Params_Data* params =
      internal::AuthenticationAdminService_AddAccount_Params_Data::New(builder.buffer());
  SerializeString_(in_device_code, builder.buffer(), &params->device_code.ptr);
  if (!params->device_code.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null device_code in AuthenticationAdminService.AddAccount request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new AuthenticationAdminService_AddAccount_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void AuthenticationAdminServiceProxy::GetAllUsers(
    const GetAllUsersCallback& callback) {
  size_t size = sizeof(internal::AuthenticationAdminService_GetAllUsers_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationAdminService_Base::MessageOrdinals::GetAllUsers), size);

  internal::AuthenticationAdminService_GetAllUsers_Params_Data* params =
      internal::AuthenticationAdminService_GetAllUsers_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new AuthenticationAdminService_GetAllUsers_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class AuthenticationAdminService_GetOAuth2DeviceCode_ProxyToResponder
    : public AuthenticationAdminService::GetOAuth2DeviceCodeCallback::Runnable {
 public:
  ~AuthenticationAdminService_GetOAuth2DeviceCode_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "AuthenticationAdminService::GetOAuth2DeviceCode(p_scopes.Pass(), callback) "
        "was never run.";
  }

  AuthenticationAdminService_GetOAuth2DeviceCode_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_verification_url, const mojo::String& in_device_code, const mojo::String& in_user_code, const mojo::String& in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationAdminService_GetOAuth2DeviceCode_ProxyToResponder);
};

void AuthenticationAdminService_GetOAuth2DeviceCode_ProxyToResponder::Run(
    const mojo::String& in_verification_url, const mojo::String& in_device_code, const mojo::String& in_user_code, const mojo::String& in_error) const {
  size_t size = sizeof(internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data);
  size += GetSerializedSize_(in_verification_url);
  size += GetSerializedSize_(in_device_code);
  size += GetSerializedSize_(in_user_code);
  size += GetSerializedSize_(in_error);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationAdminService_Base::MessageOrdinals::GetOAuth2DeviceCode), size, request_id_);
  internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data* params =
      internal::AuthenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_verification_url, builder.buffer(), &params->verification_url.ptr);
  SerializeString_(in_device_code, builder.buffer(), &params->device_code.ptr);
  SerializeString_(in_user_code, builder.buffer(), &params->user_code.ptr);
  SerializeString_(in_error, builder.buffer(), &params->error.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class AuthenticationAdminService_AddAccount_ProxyToResponder
    : public AuthenticationAdminService::AddAccountCallback::Runnable {
 public:
  ~AuthenticationAdminService_AddAccount_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "AuthenticationAdminService::AddAccount(p_device_code, callback) "
        "was never run.";
  }

  AuthenticationAdminService_AddAccount_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_username, const mojo::String& in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationAdminService_AddAccount_ProxyToResponder);
};

void AuthenticationAdminService_AddAccount_ProxyToResponder::Run(
    const mojo::String& in_username, const mojo::String& in_error) const {
  size_t size = sizeof(internal::AuthenticationAdminService_AddAccount_ResponseParams_Data);
  size += GetSerializedSize_(in_username);
  size += GetSerializedSize_(in_error);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationAdminService_Base::MessageOrdinals::AddAccount), size, request_id_);
  internal::AuthenticationAdminService_AddAccount_ResponseParams_Data* params =
      internal::AuthenticationAdminService_AddAccount_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_username, builder.buffer(), &params->username.ptr);
  SerializeString_(in_error, builder.buffer(), &params->error.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class AuthenticationAdminService_GetAllUsers_ProxyToResponder
    : public AuthenticationAdminService::GetAllUsersCallback::Runnable {
 public:
  ~AuthenticationAdminService_GetAllUsers_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "AuthenticationAdminService::GetAllUsers(callback) "
        "was never run.";
  }

  AuthenticationAdminService_GetAllUsers_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<mojo::String> in_usernames, const mojo::String& in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationAdminService_GetAllUsers_ProxyToResponder);
};

void AuthenticationAdminService_GetAllUsers_ProxyToResponder::Run(
    mojo::Array<mojo::String> in_usernames, const mojo::String& in_error) const {
  size_t size = sizeof(internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data);
  size += GetSerializedSize_(in_usernames);
  size += GetSerializedSize_(in_error);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationAdminService_Base::MessageOrdinals::GetAllUsers), size, request_id_);
  internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data* params =
      internal::AuthenticationAdminService_GetAllUsers_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams usernames_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_usernames, builder.buffer(), &params->usernames.ptr,
                          &usernames_validate_params);
  }
  if (!params->usernames.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null usernames in AuthenticationAdminService.GetAllUsers response");
  }
  SerializeString_(in_error, builder.buffer(), &params->error.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

AuthenticationAdminServiceStub::AuthenticationAdminServiceStub()
    : sink_(nullptr),
      control_message_handler_(AuthenticationAdminService::Version_) {
}

AuthenticationAdminServiceStub::~AuthenticationAdminServiceStub() {}

bool AuthenticationAdminServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::AuthenticationAdminService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::AuthenticationAdminService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::AuthenticationAdminService_Base::MessageOrdinals::GetOAuth2DeviceCode: {
      break;
    }
    case internal::AuthenticationAdminService_Base::MessageOrdinals::AddAccount: {
      break;
    }
    case internal::AuthenticationAdminService_Base::MessageOrdinals::GetAllUsers: {
      break;
    }
  }
  return false;
}

bool AuthenticationAdminServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::AuthenticationAdminService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::AuthenticationAdminService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::AuthenticationAdminService_Base::MessageOrdinals::GetOAuth2DeviceCode: {
      internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data* params =
          reinterpret_cast<internal::AuthenticationAdminService_GetOAuth2DeviceCode_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      AuthenticationAdminService::GetOAuth2DeviceCodeCallback::Runnable* runnable =
          new AuthenticationAdminService_GetOAuth2DeviceCode_ProxyToResponder(
              message->request_id(), responder);
      AuthenticationAdminService::GetOAuth2DeviceCodeCallback callback(runnable);
      
      mojo::Array<mojo::String> p_scopes {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->scopes.ptr, &p_scopes);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetOAuth2DeviceCode(p_scopes.Pass(), callback);
      return true;
    }
    case internal::AuthenticationAdminService_Base::MessageOrdinals::AddAccount: {
      internal::AuthenticationAdminService_AddAccount_Params_Data* params =
          reinterpret_cast<internal::AuthenticationAdminService_AddAccount_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      AuthenticationAdminService::AddAccountCallback::Runnable* runnable =
          new AuthenticationAdminService_AddAccount_ProxyToResponder(
              message->request_id(), responder);
      AuthenticationAdminService::AddAccountCallback callback(runnable);
      
      mojo::String p_device_code {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->device_code.ptr, &p_device_code);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AddAccount(p_device_code, callback);
      return true;
    }
    case internal::AuthenticationAdminService_Base::MessageOrdinals::GetAllUsers: {
      internal::AuthenticationAdminService_GetAllUsers_Params_Data* params =
          reinterpret_cast<internal::AuthenticationAdminService_GetAllUsers_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      AuthenticationAdminService::GetAllUsersCallback::Runnable* runnable =
          new AuthenticationAdminService_GetAllUsers_ProxyToResponder(
              message->request_id(), responder);
      AuthenticationAdminService::GetAllUsersCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetAllUsers(callback);
      return true;
    }
  }
  return false;
}

}  // namespace authentication
