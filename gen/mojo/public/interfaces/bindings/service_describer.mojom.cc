// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/service_describer.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace bindings {
namespace types {

// --- Interface definitions ---

ServiceDescriberProxy::ServiceDescriberProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ServiceDescriberProxy::DescribeService(
    const mojo::String& in_interface_name, mojo::InterfaceRequest<ServiceDescription> in_description_request) {
  size_t size = sizeof(internal::ServiceDescriber_DescribeService_Params_Data);
  size += GetSerializedSize_(in_interface_name);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ServiceDescriber_Base::MessageOrdinals::DescribeService), size);

  internal::ServiceDescriber_DescribeService_Params_Data* params =
      internal::ServiceDescriber_DescribeService_Params_Data::New(builder.buffer());
  SerializeString_(in_interface_name, builder.buffer(), &params->interface_name.ptr);
  if (!params->interface_name.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null interface_name in ServiceDescriber.DescribeService request");
  }
  params->description_request = in_description_request.PassMessagePipe().release();
  if (!params->description_request.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid description_request in ServiceDescriber.DescribeService request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ServiceDescriberStub::ServiceDescriberStub()
    : sink_(nullptr),
      control_message_handler_(ServiceDescriber::Version_) {
}

ServiceDescriberStub::~ServiceDescriberStub() {}

bool ServiceDescriberStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ServiceDescriber_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceDescriber_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceDescriber_Base::MessageOrdinals::DescribeService: {
      internal::ServiceDescriber_DescribeService_Params_Data* params =
          reinterpret_cast<internal::ServiceDescriber_DescribeService_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_interface_name {};
      mojo::InterfaceRequest<ServiceDescription> p_description_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->interface_name.ptr, &p_interface_name);
        p_description_request.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->description_request)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->DescribeService(p_interface_name, p_description_request.Pass());
      return true;
    }
  }
  return false;
}

bool ServiceDescriberStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ServiceDescriber_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceDescriber_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceDescriber_Base::MessageOrdinals::DescribeService: {
      break;
    }
  }
  return false;
}

class ServiceDescription_GetTopLevelInterface_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ServiceDescription_GetTopLevelInterface_ForwardToCallback(
      const ServiceDescription::GetTopLevelInterfaceCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ServiceDescription::GetTopLevelInterfaceCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceDescription_GetTopLevelInterface_ForwardToCallback);
};
bool ServiceDescription_GetTopLevelInterface_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data* params =
      reinterpret_cast<internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::bindings::types::MojomInterfacePtr p_mojomInterface {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->mojomInterface.ptr) {
      p_mojomInterface = mojo::bindings::types::MojomInterface::New();
      Deserialize_(params->mojomInterface.ptr, p_mojomInterface.get());
    }
  } while (false);
  callback_.Run(p_mojomInterface.Pass());
  return true;
}
class ServiceDescription_GetTypeDefinition_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ServiceDescription_GetTypeDefinition_ForwardToCallback(
      const ServiceDescription::GetTypeDefinitionCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ServiceDescription::GetTypeDefinitionCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceDescription_GetTypeDefinition_ForwardToCallback);
};
bool ServiceDescription_GetTypeDefinition_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data* params =
      reinterpret_cast<internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::bindings::types::UserDefinedTypePtr p_type {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (!params->type.is_null()) {
      p_type = mojo::bindings::types::UserDefinedType::New();
      Deserialize_(&params->type, p_type.get());
    }
  } while (false);
  callback_.Run(p_type.Pass());
  return true;
}
class ServiceDescription_GetAllTypeDefinitions_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ServiceDescription_GetAllTypeDefinitions_ForwardToCallback(
      const ServiceDescription::GetAllTypeDefinitionsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ServiceDescription::GetAllTypeDefinitionsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceDescription_GetAllTypeDefinitions_ForwardToCallback);
};
bool ServiceDescription_GetAllTypeDefinitions_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* params =
      reinterpret_cast<internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr> p_definitions {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->definitions.ptr, &p_definitions);
  } while (false);
  callback_.Run(p_definitions.Pass());
  return true;
}

ServiceDescriptionProxy::ServiceDescriptionProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ServiceDescriptionProxy::GetTopLevelInterface(
    const GetTopLevelInterfaceCallback& callback) {
  size_t size = sizeof(internal::ServiceDescription_GetTopLevelInterface_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceDescription_Base::MessageOrdinals::GetTopLevelInterface), size);

  internal::ServiceDescription_GetTopLevelInterface_Params_Data* params =
      internal::ServiceDescription_GetTopLevelInterface_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ServiceDescription_GetTopLevelInterface_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ServiceDescriptionProxy::GetTypeDefinition(
    const mojo::String& in_type_key, const GetTypeDefinitionCallback& callback) {
  size_t size = sizeof(internal::ServiceDescription_GetTypeDefinition_Params_Data);
  size += GetSerializedSize_(in_type_key);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceDescription_Base::MessageOrdinals::GetTypeDefinition), size);

  internal::ServiceDescription_GetTypeDefinition_Params_Data* params =
      internal::ServiceDescription_GetTypeDefinition_Params_Data::New(builder.buffer());
  SerializeString_(in_type_key, builder.buffer(), &params->type_key.ptr);
  if (!params->type_key.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null type_key in ServiceDescription.GetTypeDefinition request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ServiceDescription_GetTypeDefinition_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ServiceDescriptionProxy::GetAllTypeDefinitions(
    const GetAllTypeDefinitionsCallback& callback) {
  size_t size = sizeof(internal::ServiceDescription_GetAllTypeDefinitions_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceDescription_Base::MessageOrdinals::GetAllTypeDefinitions), size);

  internal::ServiceDescription_GetAllTypeDefinitions_Params_Data* params =
      internal::ServiceDescription_GetAllTypeDefinitions_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ServiceDescription_GetAllTypeDefinitions_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ServiceDescription_GetTopLevelInterface_ProxyToResponder
    : public ServiceDescription::GetTopLevelInterfaceCallback::Runnable {
 public:
  ~ServiceDescription_GetTopLevelInterface_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ServiceDescription::GetTopLevelInterface(callback) "
        "was never run.";
  }

  ServiceDescription_GetTopLevelInterface_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::bindings::types::MojomInterfacePtr in_mojomInterface) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceDescription_GetTopLevelInterface_ProxyToResponder);
};

void ServiceDescription_GetTopLevelInterface_ProxyToResponder::Run(
    mojo::bindings::types::MojomInterfacePtr in_mojomInterface) const {
  size_t size = sizeof(internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data);
  size += in_mojomInterface.is_null()
              ? 0
              : GetSerializedSize_(*in_mojomInterface);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceDescription_Base::MessageOrdinals::GetTopLevelInterface), size, request_id_);
  internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data* params =
      internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_mojomInterface.get(),
               builder.buffer(),
               &params->mojomInterface.ptr);
  }
  if (!params->mojomInterface.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null mojomInterface in ServiceDescription.GetTopLevelInterface response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ServiceDescription_GetTypeDefinition_ProxyToResponder
    : public ServiceDescription::GetTypeDefinitionCallback::Runnable {
 public:
  ~ServiceDescription_GetTypeDefinition_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ServiceDescription::GetTypeDefinition(p_type_key, callback) "
        "was never run.";
  }

  ServiceDescription_GetTypeDefinition_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::bindings::types::UserDefinedTypePtr in_type) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceDescription_GetTypeDefinition_ProxyToResponder);
};

void ServiceDescription_GetTypeDefinition_ProxyToResponder::Run(
    mojo::bindings::types::UserDefinedTypePtr in_type) const {
  size_t size = sizeof(internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data);
  size += GetSerializedSize_(in_type);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceDescription_Base::MessageOrdinals::GetTypeDefinition), size, request_id_);
  internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data* params =
      internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data::New(builder.buffer());
  internal::UserDefinedType_Data* type_ptr = &params->type;
  {
      SerializeUnion_(in_type.get(),
                      builder.buffer(),
                      &type_ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ServiceDescription_GetAllTypeDefinitions_ProxyToResponder
    : public ServiceDescription::GetAllTypeDefinitionsCallback::Runnable {
 public:
  ~ServiceDescription_GetAllTypeDefinitions_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ServiceDescription::GetAllTypeDefinitions(callback) "
        "was never run.";
  }

  ServiceDescription_GetAllTypeDefinitions_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr> in_definitions) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceDescription_GetAllTypeDefinitions_ProxyToResponder);
};

void ServiceDescription_GetAllTypeDefinitions_ProxyToResponder::Run(
    mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr> in_definitions) const {
  size_t size = sizeof(internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data);
  size += GetSerializedSize_(in_definitions);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceDescription_Base::MessageOrdinals::GetAllTypeDefinitions), size, request_id_);
  internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* params =
      internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams definitions_validate_params(
        0, false, nullptr);mojo::SerializeMap_(
        &in_definitions, builder.buffer(), &params->definitions.ptr,
        &definitions_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ServiceDescriptionStub::ServiceDescriptionStub()
    : sink_(nullptr),
      control_message_handler_(ServiceDescription::Version_) {
}

ServiceDescriptionStub::~ServiceDescriptionStub() {}

bool ServiceDescriptionStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ServiceDescription_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceDescription_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceDescription_Base::MessageOrdinals::GetTopLevelInterface: {
      break;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetTypeDefinition: {
      break;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetAllTypeDefinitions: {
      break;
    }
  }
  return false;
}

bool ServiceDescriptionStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ServiceDescription_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceDescription_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceDescription_Base::MessageOrdinals::GetTopLevelInterface: {
      internal::ServiceDescription_GetTopLevelInterface_Params_Data* params =
          reinterpret_cast<internal::ServiceDescription_GetTopLevelInterface_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ServiceDescription::GetTopLevelInterfaceCallback::Runnable* runnable =
          new ServiceDescription_GetTopLevelInterface_ProxyToResponder(
              message->request_id(), responder);
      ServiceDescription::GetTopLevelInterfaceCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetTopLevelInterface(callback);
      return true;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetTypeDefinition: {
      internal::ServiceDescription_GetTypeDefinition_Params_Data* params =
          reinterpret_cast<internal::ServiceDescription_GetTypeDefinition_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ServiceDescription::GetTypeDefinitionCallback::Runnable* runnable =
          new ServiceDescription_GetTypeDefinition_ProxyToResponder(
              message->request_id(), responder);
      ServiceDescription::GetTypeDefinitionCallback callback(runnable);
      
      mojo::String p_type_key {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->type_key.ptr, &p_type_key);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetTypeDefinition(p_type_key, callback);
      return true;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetAllTypeDefinitions: {
      internal::ServiceDescription_GetAllTypeDefinitions_Params_Data* params =
          reinterpret_cast<internal::ServiceDescription_GetAllTypeDefinitions_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ServiceDescription::GetAllTypeDefinitionsCallback::Runnable* runnable =
          new ServiceDescription_GetAllTypeDefinitions_ProxyToResponder(
              message->request_id(), responder);
      ServiceDescription::GetAllTypeDefinitionsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetAllTypeDefinitions(callback);
      return true;
    }
  }
  return false;
}

}  // namespace types
}  // namespace bindings
}  // namespace mojo
