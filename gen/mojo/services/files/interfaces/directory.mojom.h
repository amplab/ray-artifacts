// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_H_
#define MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/directory.mojom-common.h"
#include "mojo/services/files/interfaces/file.mojom.h"
#include "mojo/services/files/interfaces/types.mojom.h"
namespace mojo {
namespace files {

// --- Interface Forward Declarations ---

using DirectoryPtr = mojo::InterfacePtr<Directory>;


// --- Interface Proxies ---


class DirectoryProxy
    : public Directory,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit DirectoryProxy(mojo::MessageReceiverWithResponder* receiver);
  void Read(
      const ReadCallback& callback
  ) override;
  void Stat(
      const StatCallback& callback
  ) override;
  void Touch(
      mojo::files::TimespecOrNowPtr atime, mojo::files::TimespecOrNowPtr mtime, const TouchCallback& callback
  ) override;
  void OpenFile(
      const mojo::String& path, mojo::InterfaceRequest<mojo::files::File> file, uint32_t open_flags, const OpenFileCallback& callback
  ) override;
  void OpenDirectory(
      const mojo::String& path, mojo::InterfaceRequest<Directory> directory, uint32_t open_flags, const OpenDirectoryCallback& callback
  ) override;
  void Rename(
      const mojo::String& path, const mojo::String& new_path, const RenameCallback& callback
  ) override;
  void Delete(
      const mojo::String& path, uint32_t delete_flags, const DeleteCallback& callback
  ) override;
};


// --- Interface Stubs ---

class DirectoryStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  DirectoryStub();
  ~DirectoryStub() override;
  void set_sink(Directory* sink) { sink_ = sink; }
  Directory* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  Directory* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_H_
