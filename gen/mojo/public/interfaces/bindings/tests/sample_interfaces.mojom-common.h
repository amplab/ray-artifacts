// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_INTERFACES_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_INTERFACES_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/sample_interfaces.mojom-internal.h"
namespace sample {

// --- Interface Forward Declarations ---
class Provider;
class ProviderRequestValidator;
class ProviderResponseValidator;
class Provider_Synchronous;
class IntegerAccessor;
class IntegerAccessorRequestValidator;
class IntegerAccessorResponseValidator;
class IntegerAccessor_Synchronous;
class SampleInterface;
class SampleInterfaceRequestValidator;
class SampleInterfaceResponseValidator;
class SampleInterface_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---
  
enum class Enum : int32_t {
  VALUE,
};

bool Enum_IsValidValue(Enum value);
  
std::ostream& operator<<(std::ostream& stream, const Enum& val);

// --- Constants ---
const uint64_t kLong = 4405ULL;

// --- Interface declarations ---
namespace internal {
class Provider_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ProviderRequestValidator;
  using ResponseValidator_ = ProviderResponseValidator;
  using Synchronous_ = Provider_Synchronous;
  enum class MessageOrdinals : uint32_t {
    EchoString = 0,
    EchoStrings = 1,
    EchoMessagePipeHandle = 2,
    EchoEnum = 3,
    EchoInt = 4,
  };


  virtual ~Provider_Base() {}
};

}  // namespace internal

// Async interface declaration

class ProviderProxy;
class ProviderStub;
class Provider_Synchronous;

class ProviderRequestValidator;
class ProviderResponseValidator;

class Provider : public internal::Provider_Base {
 public:
  virtual ~Provider() override {}

  using Proxy_ = ProviderProxy;
  using Stub_ = ProviderStub;
  using EchoStringCallback = mojo::Callback<void(mojo::String)>;
  virtual void EchoString(const mojo::String& a, const EchoStringCallback& callback) = 0;
  using EchoStringsCallback = mojo::Callback<void(mojo::String, mojo::String)>;
  virtual void EchoStrings(const mojo::String& a, const mojo::String& b, const EchoStringsCallback& callback) = 0;
  using EchoMessagePipeHandleCallback = mojo::Callback<void(mojo::ScopedMessagePipeHandle)>;
  virtual void EchoMessagePipeHandle(mojo::ScopedMessagePipeHandle a, const EchoMessagePipeHandleCallback& callback) = 0;
  using EchoEnumCallback = mojo::Callback<void(Enum)>;
  virtual void EchoEnum(Enum a, const EchoEnumCallback& callback) = 0;
  using EchoIntCallback = mojo::Callback<void(int32_t)>;
  virtual void EchoInt(int32_t a, const EchoIntCallback& callback) = 0;
};

namespace internal {
class IntegerAccessor_Base {
 public:
  static const uint32_t Version_ = 3;

  using RequestValidator_ = IntegerAccessorRequestValidator;
  using ResponseValidator_ = IntegerAccessorResponseValidator;
  using Synchronous_ = IntegerAccessor_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetInteger = 0,
    SetInteger = 1,
  };


  virtual ~IntegerAccessor_Base() {}
};

}  // namespace internal

// Async interface declaration

class IntegerAccessorProxy;
class IntegerAccessorStub;
class IntegerAccessor_Synchronous;

class IntegerAccessorRequestValidator;
class IntegerAccessorResponseValidator;

class IntegerAccessor : public internal::IntegerAccessor_Base {
 public:
  virtual ~IntegerAccessor() override {}

  using Proxy_ = IntegerAccessorProxy;
  using Stub_ = IntegerAccessorStub;
  using GetIntegerCallback = mojo::Callback<void(int64_t, Enum)>;
  virtual void GetInteger(const GetIntegerCallback& callback) = 0;
  virtual void SetInteger(int64_t data, Enum type) = 0;
};

namespace internal {
class SampleInterface_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = SampleInterfaceRequestValidator;
  using ResponseValidator_ = SampleInterfaceResponseValidator;
  using Synchronous_ = SampleInterface_Synchronous;
  enum class MessageOrdinals : uint32_t {
    SampleMethod1 = 1,
    SampleMethod0 = 0,
    SampleMethod2 = 2,
  };


  virtual ~SampleInterface_Base() {}
};

}  // namespace internal

// Async interface declaration

class SampleInterfaceProxy;
class SampleInterfaceStub;
class SampleInterface_Synchronous;

class SampleInterfaceRequestValidator;
class SampleInterfaceResponseValidator;

class SampleInterface : public internal::SampleInterface_Base {
 public:
  virtual ~SampleInterface() override {}

  using Proxy_ = SampleInterfaceProxy;
  using Stub_ = SampleInterfaceStub;
  using SampleMethod1Callback = mojo::Callback<void(mojo::String, Enum)>;
  virtual void SampleMethod1(int32_t in1, const mojo::String& in2, const SampleMethod1Callback& callback) = 0;
  virtual void SampleMethod0() = 0;
  virtual void SampleMethod2() = 0;
};

}  // namespace sample

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace sample {

// --- Interface Request Validators ---
class ProviderRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class IntegerAccessorRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class SampleInterfaceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class ProviderResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class IntegerAccessorResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class SampleInterfaceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Provider_EchoString_Params;

using Provider_EchoString_ParamsPtr = mojo::InlinedStructPtr<Provider_EchoString_Params>;


size_t GetSerializedSize_(const Provider_EchoString_Params& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoString_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoString_Params_Data** output);
void Deserialize_(internal::Provider_EchoString_Params_Data* input,
                  Provider_EchoString_Params* output);

class Provider_EchoString_Params {
 public:
  using Data_ = internal::Provider_EchoString_Params_Data;

  static Provider_EchoString_ParamsPtr New();

  template <typename U>
  static Provider_EchoString_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoString_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoString_Params>::Convert(*this);
  }

  Provider_EchoString_Params();
  ~Provider_EchoString_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoString_ParamsPtr Clone() const;
  bool Equals(const Provider_EchoString_Params& other) const;

  mojo::String a;
};



class Provider_EchoString_ResponseParams;

using Provider_EchoString_ResponseParamsPtr = mojo::InlinedStructPtr<Provider_EchoString_ResponseParams>;


size_t GetSerializedSize_(const Provider_EchoString_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoString_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoString_ResponseParams_Data** output);
void Deserialize_(internal::Provider_EchoString_ResponseParams_Data* input,
                  Provider_EchoString_ResponseParams* output);

class Provider_EchoString_ResponseParams {
 public:
  using Data_ = internal::Provider_EchoString_ResponseParams_Data;

  static Provider_EchoString_ResponseParamsPtr New();

  template <typename U>
  static Provider_EchoString_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoString_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoString_ResponseParams>::Convert(*this);
  }

  Provider_EchoString_ResponseParams();
  ~Provider_EchoString_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoString_ResponseParamsPtr Clone() const;
  bool Equals(const Provider_EchoString_ResponseParams& other) const;

  mojo::String a;
};



class Provider_EchoStrings_Params;

using Provider_EchoStrings_ParamsPtr = mojo::InlinedStructPtr<Provider_EchoStrings_Params>;


size_t GetSerializedSize_(const Provider_EchoStrings_Params& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoStrings_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoStrings_Params_Data** output);
void Deserialize_(internal::Provider_EchoStrings_Params_Data* input,
                  Provider_EchoStrings_Params* output);

class Provider_EchoStrings_Params {
 public:
  using Data_ = internal::Provider_EchoStrings_Params_Data;

  static Provider_EchoStrings_ParamsPtr New();

  template <typename U>
  static Provider_EchoStrings_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoStrings_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoStrings_Params>::Convert(*this);
  }

  Provider_EchoStrings_Params();
  ~Provider_EchoStrings_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoStrings_ParamsPtr Clone() const;
  bool Equals(const Provider_EchoStrings_Params& other) const;

  mojo::String a;
  mojo::String b;
};



class Provider_EchoStrings_ResponseParams;

using Provider_EchoStrings_ResponseParamsPtr = mojo::InlinedStructPtr<Provider_EchoStrings_ResponseParams>;


size_t GetSerializedSize_(const Provider_EchoStrings_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoStrings_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoStrings_ResponseParams_Data** output);
void Deserialize_(internal::Provider_EchoStrings_ResponseParams_Data* input,
                  Provider_EchoStrings_ResponseParams* output);

class Provider_EchoStrings_ResponseParams {
 public:
  using Data_ = internal::Provider_EchoStrings_ResponseParams_Data;

  static Provider_EchoStrings_ResponseParamsPtr New();

  template <typename U>
  static Provider_EchoStrings_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoStrings_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoStrings_ResponseParams>::Convert(*this);
  }

  Provider_EchoStrings_ResponseParams();
  ~Provider_EchoStrings_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoStrings_ResponseParamsPtr Clone() const;
  bool Equals(const Provider_EchoStrings_ResponseParams& other) const;

  mojo::String a;
  mojo::String b;
};



class Provider_EchoMessagePipeHandle_Params;

using Provider_EchoMessagePipeHandle_ParamsPtr = mojo::StructPtr<Provider_EchoMessagePipeHandle_Params>;


size_t GetSerializedSize_(const Provider_EchoMessagePipeHandle_Params& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoMessagePipeHandle_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoMessagePipeHandle_Params_Data** output);
void Deserialize_(internal::Provider_EchoMessagePipeHandle_Params_Data* input,
                  Provider_EchoMessagePipeHandle_Params* output);

class Provider_EchoMessagePipeHandle_Params {
 public:
  using Data_ = internal::Provider_EchoMessagePipeHandle_Params_Data;

  static Provider_EchoMessagePipeHandle_ParamsPtr New();

  template <typename U>
  static Provider_EchoMessagePipeHandle_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoMessagePipeHandle_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoMessagePipeHandle_Params>::Convert(*this);
  }

  Provider_EchoMessagePipeHandle_Params();
  ~Provider_EchoMessagePipeHandle_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Provider_EchoMessagePipeHandle_Params& other) const;

  mojo::ScopedMessagePipeHandle a;
};



class Provider_EchoMessagePipeHandle_ResponseParams;

using Provider_EchoMessagePipeHandle_ResponseParamsPtr = mojo::StructPtr<Provider_EchoMessagePipeHandle_ResponseParams>;


size_t GetSerializedSize_(const Provider_EchoMessagePipeHandle_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoMessagePipeHandle_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoMessagePipeHandle_ResponseParams_Data** output);
void Deserialize_(internal::Provider_EchoMessagePipeHandle_ResponseParams_Data* input,
                  Provider_EchoMessagePipeHandle_ResponseParams* output);

class Provider_EchoMessagePipeHandle_ResponseParams {
 public:
  using Data_ = internal::Provider_EchoMessagePipeHandle_ResponseParams_Data;

  static Provider_EchoMessagePipeHandle_ResponseParamsPtr New();

  template <typename U>
  static Provider_EchoMessagePipeHandle_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoMessagePipeHandle_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoMessagePipeHandle_ResponseParams>::Convert(*this);
  }

  Provider_EchoMessagePipeHandle_ResponseParams();
  ~Provider_EchoMessagePipeHandle_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Provider_EchoMessagePipeHandle_ResponseParams& other) const;

  mojo::ScopedMessagePipeHandle a;
};



class Provider_EchoEnum_Params;

using Provider_EchoEnum_ParamsPtr = mojo::InlinedStructPtr<Provider_EchoEnum_Params>;


size_t GetSerializedSize_(const Provider_EchoEnum_Params& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoEnum_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoEnum_Params_Data** output);
void Deserialize_(internal::Provider_EchoEnum_Params_Data* input,
                  Provider_EchoEnum_Params* output);

class Provider_EchoEnum_Params {
 public:
  using Data_ = internal::Provider_EchoEnum_Params_Data;

  static Provider_EchoEnum_ParamsPtr New();

  template <typename U>
  static Provider_EchoEnum_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoEnum_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoEnum_Params>::Convert(*this);
  }

  Provider_EchoEnum_Params();
  ~Provider_EchoEnum_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoEnum_ParamsPtr Clone() const;
  bool Equals(const Provider_EchoEnum_Params& other) const;

  Enum a;
};



class Provider_EchoEnum_ResponseParams;

using Provider_EchoEnum_ResponseParamsPtr = mojo::InlinedStructPtr<Provider_EchoEnum_ResponseParams>;


size_t GetSerializedSize_(const Provider_EchoEnum_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoEnum_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoEnum_ResponseParams_Data** output);
void Deserialize_(internal::Provider_EchoEnum_ResponseParams_Data* input,
                  Provider_EchoEnum_ResponseParams* output);

class Provider_EchoEnum_ResponseParams {
 public:
  using Data_ = internal::Provider_EchoEnum_ResponseParams_Data;

  static Provider_EchoEnum_ResponseParamsPtr New();

  template <typename U>
  static Provider_EchoEnum_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoEnum_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoEnum_ResponseParams>::Convert(*this);
  }

  Provider_EchoEnum_ResponseParams();
  ~Provider_EchoEnum_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoEnum_ResponseParamsPtr Clone() const;
  bool Equals(const Provider_EchoEnum_ResponseParams& other) const;

  Enum a;
};



class Provider_EchoInt_Params;

using Provider_EchoInt_ParamsPtr = mojo::InlinedStructPtr<Provider_EchoInt_Params>;


size_t GetSerializedSize_(const Provider_EchoInt_Params& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoInt_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoInt_Params_Data** output);
void Deserialize_(internal::Provider_EchoInt_Params_Data* input,
                  Provider_EchoInt_Params* output);

class Provider_EchoInt_Params {
 public:
  using Data_ = internal::Provider_EchoInt_Params_Data;

  static Provider_EchoInt_ParamsPtr New();

  template <typename U>
  static Provider_EchoInt_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoInt_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoInt_Params>::Convert(*this);
  }

  Provider_EchoInt_Params();
  ~Provider_EchoInt_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoInt_ParamsPtr Clone() const;
  bool Equals(const Provider_EchoInt_Params& other) const;

  int32_t a;
};



class Provider_EchoInt_ResponseParams;

using Provider_EchoInt_ResponseParamsPtr = mojo::InlinedStructPtr<Provider_EchoInt_ResponseParams>;


size_t GetSerializedSize_(const Provider_EchoInt_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Provider_EchoInt_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Provider_EchoInt_ResponseParams_Data** output);
void Deserialize_(internal::Provider_EchoInt_ResponseParams_Data* input,
                  Provider_EchoInt_ResponseParams* output);

class Provider_EchoInt_ResponseParams {
 public:
  using Data_ = internal::Provider_EchoInt_ResponseParams_Data;

  static Provider_EchoInt_ResponseParamsPtr New();

  template <typename U>
  static Provider_EchoInt_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Provider_EchoInt_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Provider_EchoInt_ResponseParams>::Convert(*this);
  }

  Provider_EchoInt_ResponseParams();
  ~Provider_EchoInt_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Provider_EchoInt_ResponseParamsPtr Clone() const;
  bool Equals(const Provider_EchoInt_ResponseParams& other) const;

  int32_t a;
};


      

class IntegerAccessor_GetInteger_Params;

using IntegerAccessor_GetInteger_ParamsPtr = mojo::InlinedStructPtr<IntegerAccessor_GetInteger_Params>;


size_t GetSerializedSize_(const IntegerAccessor_GetInteger_Params& input);
mojo::internal::ValidationError Serialize_(
    IntegerAccessor_GetInteger_Params* input,
    mojo::internal::Buffer* buffer,
    internal::IntegerAccessor_GetInteger_Params_Data** output);
void Deserialize_(internal::IntegerAccessor_GetInteger_Params_Data* input,
                  IntegerAccessor_GetInteger_Params* output);

class IntegerAccessor_GetInteger_Params {
 public:
  using Data_ = internal::IntegerAccessor_GetInteger_Params_Data;

  static IntegerAccessor_GetInteger_ParamsPtr New();

  template <typename U>
  static IntegerAccessor_GetInteger_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<IntegerAccessor_GetInteger_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IntegerAccessor_GetInteger_Params>::Convert(*this);
  }

  IntegerAccessor_GetInteger_Params();
  ~IntegerAccessor_GetInteger_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  IntegerAccessor_GetInteger_ParamsPtr Clone() const;
  bool Equals(const IntegerAccessor_GetInteger_Params& other) const;

};



class IntegerAccessor_GetInteger_ResponseParams;

using IntegerAccessor_GetInteger_ResponseParamsPtr = mojo::InlinedStructPtr<IntegerAccessor_GetInteger_ResponseParams>;


size_t GetSerializedSize_(const IntegerAccessor_GetInteger_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    IntegerAccessor_GetInteger_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::IntegerAccessor_GetInteger_ResponseParams_Data** output);
void Deserialize_(internal::IntegerAccessor_GetInteger_ResponseParams_Data* input,
                  IntegerAccessor_GetInteger_ResponseParams* output);

class IntegerAccessor_GetInteger_ResponseParams {
 public:
  using Data_ = internal::IntegerAccessor_GetInteger_ResponseParams_Data;

  static IntegerAccessor_GetInteger_ResponseParamsPtr New();

  template <typename U>
  static IntegerAccessor_GetInteger_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<IntegerAccessor_GetInteger_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IntegerAccessor_GetInteger_ResponseParams>::Convert(*this);
  }

  IntegerAccessor_GetInteger_ResponseParams();
  ~IntegerAccessor_GetInteger_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  IntegerAccessor_GetInteger_ResponseParamsPtr Clone() const;
  bool Equals(const IntegerAccessor_GetInteger_ResponseParams& other) const;

  int64_t data;
  Enum type;
};



class IntegerAccessor_SetInteger_Params;

using IntegerAccessor_SetInteger_ParamsPtr = mojo::InlinedStructPtr<IntegerAccessor_SetInteger_Params>;


size_t GetSerializedSize_(const IntegerAccessor_SetInteger_Params& input);
mojo::internal::ValidationError Serialize_(
    IntegerAccessor_SetInteger_Params* input,
    mojo::internal::Buffer* buffer,
    internal::IntegerAccessor_SetInteger_Params_Data** output);
void Deserialize_(internal::IntegerAccessor_SetInteger_Params_Data* input,
                  IntegerAccessor_SetInteger_Params* output);

class IntegerAccessor_SetInteger_Params {
 public:
  using Data_ = internal::IntegerAccessor_SetInteger_Params_Data;

  static IntegerAccessor_SetInteger_ParamsPtr New();

  template <typename U>
  static IntegerAccessor_SetInteger_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<IntegerAccessor_SetInteger_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IntegerAccessor_SetInteger_Params>::Convert(*this);
  }

  IntegerAccessor_SetInteger_Params();
  ~IntegerAccessor_SetInteger_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  IntegerAccessor_SetInteger_ParamsPtr Clone() const;
  bool Equals(const IntegerAccessor_SetInteger_Params& other) const;

  int64_t data;
  Enum type;
};



      

class SampleInterface_SampleMethod1_Params;

using SampleInterface_SampleMethod1_ParamsPtr = mojo::InlinedStructPtr<SampleInterface_SampleMethod1_Params>;


size_t GetSerializedSize_(const SampleInterface_SampleMethod1_Params& input);
mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod1_Params* input,
    mojo::internal::Buffer* buffer,
    internal::SampleInterface_SampleMethod1_Params_Data** output);
void Deserialize_(internal::SampleInterface_SampleMethod1_Params_Data* input,
                  SampleInterface_SampleMethod1_Params* output);

class SampleInterface_SampleMethod1_Params {
 public:
  using Data_ = internal::SampleInterface_SampleMethod1_Params_Data;

  static SampleInterface_SampleMethod1_ParamsPtr New();

  template <typename U>
  static SampleInterface_SampleMethod1_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<SampleInterface_SampleMethod1_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SampleInterface_SampleMethod1_Params>::Convert(*this);
  }

  SampleInterface_SampleMethod1_Params();
  ~SampleInterface_SampleMethod1_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  SampleInterface_SampleMethod1_ParamsPtr Clone() const;
  bool Equals(const SampleInterface_SampleMethod1_Params& other) const;

  int32_t in1;
  mojo::String in2;
};



class SampleInterface_SampleMethod1_ResponseParams;

using SampleInterface_SampleMethod1_ResponseParamsPtr = mojo::InlinedStructPtr<SampleInterface_SampleMethod1_ResponseParams>;


size_t GetSerializedSize_(const SampleInterface_SampleMethod1_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod1_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::SampleInterface_SampleMethod1_ResponseParams_Data** output);
void Deserialize_(internal::SampleInterface_SampleMethod1_ResponseParams_Data* input,
                  SampleInterface_SampleMethod1_ResponseParams* output);

class SampleInterface_SampleMethod1_ResponseParams {
 public:
  using Data_ = internal::SampleInterface_SampleMethod1_ResponseParams_Data;

  static SampleInterface_SampleMethod1_ResponseParamsPtr New();

  template <typename U>
  static SampleInterface_SampleMethod1_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<SampleInterface_SampleMethod1_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SampleInterface_SampleMethod1_ResponseParams>::Convert(*this);
  }

  SampleInterface_SampleMethod1_ResponseParams();
  ~SampleInterface_SampleMethod1_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  SampleInterface_SampleMethod1_ResponseParamsPtr Clone() const;
  bool Equals(const SampleInterface_SampleMethod1_ResponseParams& other) const;

  mojo::String out1;
  Enum out2;
};



class SampleInterface_SampleMethod0_Params;

using SampleInterface_SampleMethod0_ParamsPtr = mojo::InlinedStructPtr<SampleInterface_SampleMethod0_Params>;


size_t GetSerializedSize_(const SampleInterface_SampleMethod0_Params& input);
mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod0_Params* input,
    mojo::internal::Buffer* buffer,
    internal::SampleInterface_SampleMethod0_Params_Data** output);
void Deserialize_(internal::SampleInterface_SampleMethod0_Params_Data* input,
                  SampleInterface_SampleMethod0_Params* output);

class SampleInterface_SampleMethod0_Params {
 public:
  using Data_ = internal::SampleInterface_SampleMethod0_Params_Data;

  static SampleInterface_SampleMethod0_ParamsPtr New();

  template <typename U>
  static SampleInterface_SampleMethod0_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<SampleInterface_SampleMethod0_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SampleInterface_SampleMethod0_Params>::Convert(*this);
  }

  SampleInterface_SampleMethod0_Params();
  ~SampleInterface_SampleMethod0_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  SampleInterface_SampleMethod0_ParamsPtr Clone() const;
  bool Equals(const SampleInterface_SampleMethod0_Params& other) const;

};




class SampleInterface_SampleMethod2_Params;

using SampleInterface_SampleMethod2_ParamsPtr = mojo::InlinedStructPtr<SampleInterface_SampleMethod2_Params>;


size_t GetSerializedSize_(const SampleInterface_SampleMethod2_Params& input);
mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod2_Params* input,
    mojo::internal::Buffer* buffer,
    internal::SampleInterface_SampleMethod2_Params_Data** output);
void Deserialize_(internal::SampleInterface_SampleMethod2_Params_Data* input,
                  SampleInterface_SampleMethod2_Params* output);

class SampleInterface_SampleMethod2_Params {
 public:
  using Data_ = internal::SampleInterface_SampleMethod2_Params_Data;

  static SampleInterface_SampleMethod2_ParamsPtr New();

  template <typename U>
  static SampleInterface_SampleMethod2_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<SampleInterface_SampleMethod2_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SampleInterface_SampleMethod2_Params>::Convert(*this);
  }

  SampleInterface_SampleMethod2_Params();
  ~SampleInterface_SampleMethod2_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  SampleInterface_SampleMethod2_ParamsPtr Clone() const;
  bool Equals(const SampleInterface_SampleMethod2_Params& other) const;

};



}  // namespace sample

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_INTERFACES_MOJOM_COMMON_H_
