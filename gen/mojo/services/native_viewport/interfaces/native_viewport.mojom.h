// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NATIVE_VIEWPORT_INTERFACES_NATIVE_VIEWPORT_MOJOM_H_
#define MOJO_SERVICES_NATIVE_VIEWPORT_INTERFACES_NATIVE_VIEWPORT_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/native_viewport/interfaces/native_viewport.mojom-common.h"
#include "mojo/services/geometry/interfaces/geometry.mojom.h"
#include "mojo/services/gpu/interfaces/context_provider.mojom.h"
#include "mojo/services/native_viewport/interfaces/native_viewport_event_dispatcher.mojom.h"
namespace mojo {

// --- Interface Forward Declarations ---

using NativeViewportPtr = mojo::InterfacePtr<NativeViewport>;


// --- Interface Proxies ---


class NativeViewportProxy
    : public NativeViewport,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit NativeViewportProxy(mojo::MessageReceiverWithResponder* receiver);
  void Create(
      mojo::SizePtr size, SurfaceConfigurationPtr requested_configuration, const CreateCallback& callback
  ) override;
  void Show(
      
  ) override;
  void Hide(
      
  ) override;
  void Close(
      
  ) override;
  void SetSize(
      mojo::SizePtr size
  ) override;
  void SetEventDispatcher(
      mojo::InterfaceHandle<mojo::NativeViewportEventDispatcher> dispatcher
  ) override;
  void GetContextProvider(
      mojo::InterfaceRequest<mojo::ContextProvider> provider
  ) override;
  void RequestMetrics(
      const RequestMetricsCallback& callback
  ) override;
};


// --- Interface Stubs ---

class NativeViewportStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  NativeViewportStub();
  ~NativeViewportStub() override;
  void set_sink(NativeViewport* sink) { sink_ = sink; }
  NativeViewport* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  NativeViewport* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NATIVE_VIEWPORT_INTERFACES_NATIVE_VIEWPORT_MOJOM_H_
