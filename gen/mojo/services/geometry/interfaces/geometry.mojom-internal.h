// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_GEOMETRY_INTERFACES_GEOMETRY_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_GEOMETRY_INTERFACES_GEOMETRY_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {

class Point;
class PointF;
class Size;
class Rect;
class RectF;
class RRectF;
class Transform;


namespace internal {

class Point_Data;
class PointF_Data;
class Size_Data;
class Rect_Data;
class RectF_Data;
class RRectF_Data;
class Transform_Data;



#pragma pack(push, 1)


class Point_Data {
 public:
  static Point_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t x;
  int32_t y;

 private:
  Point_Data();
  ~Point_Data() = delete;
};
static_assert(sizeof(Point_Data) == 16,
              "Bad sizeof(Point_Data)");

class PointF_Data {
 public:
  static PointF_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  float x;
  float y;

 private:
  PointF_Data();
  ~PointF_Data() = delete;
};
static_assert(sizeof(PointF_Data) == 16,
              "Bad sizeof(PointF_Data)");

class Size_Data {
 public:
  static Size_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t width;
  int32_t height;

 private:
  Size_Data();
  ~Size_Data() = delete;
};
static_assert(sizeof(Size_Data) == 16,
              "Bad sizeof(Size_Data)");

class Rect_Data {
 public:
  static Rect_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t x;
  int32_t y;
  int32_t width;
  int32_t height;

 private:
  Rect_Data();
  ~Rect_Data() = delete;
};
static_assert(sizeof(Rect_Data) == 24,
              "Bad sizeof(Rect_Data)");

class RectF_Data {
 public:
  static RectF_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  float x;
  float y;
  float width;
  float height;

 private:
  RectF_Data();
  ~RectF_Data() = delete;
};
static_assert(sizeof(RectF_Data) == 24,
              "Bad sizeof(RectF_Data)");

class RRectF_Data {
 public:
  static RRectF_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  float x;
  float y;
  float width;
  float height;
  float top_left_radius_x;
  float top_left_radius_y;
  float top_right_radius_x;
  float top_right_radius_y;
  float bottom_left_radius_x;
  float bottom_left_radius_y;
  float bottom_right_radius_x;
  float bottom_right_radius_y;

 private:
  RRectF_Data();
  ~RRectF_Data() = delete;
};
static_assert(sizeof(RRectF_Data) == 56,
              "Bad sizeof(RRectF_Data)");

class Transform_Data {
 public:
  static Transform_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<float> matrix;

 private:
  Transform_Data();
  ~Transform_Data() = delete;
};
static_assert(sizeof(Transform_Data) == 16,
              "Bad sizeof(Transform_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_GEOMETRY_INTERFACES_GEOMETRY_MOJOM_INTERNAL_H_
