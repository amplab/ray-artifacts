// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_FILES_MOJOM_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_FILES_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/mojom_types.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace bindings {
namespace types {

class MojomFile;
class MojomFileGraph;
class KeysByType;


namespace internal {

class MojomFile_Data;
class MojomFileGraph_Data;
class KeysByType_Data;



#pragma pack(push, 1)


class MojomFile_Data {
 public:
  static MojomFile_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer file_name;
  mojo::internal::StringPointer specified_file_name;
  mojo::internal::StringPointer module_namespace;
  mojo::internal::ArrayPointer<mojo::bindings::types::internal::Attribute_Data*> attributes;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> imports;
  mojo::internal::StructPointer<internal::KeysByType_Data> declared_mojom_objects;
  mojo::internal::StringPointer serialized_runtime_type_info;

 private:
  MojomFile_Data();
  ~MojomFile_Data() = delete;
};
static_assert(sizeof(MojomFile_Data) == 64,
              "Bad sizeof(MojomFile_Data)");

class MojomFileGraph_Data {
 public:
  static MojomFileGraph_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, internal::MojomFile_Data*>> files;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::bindings::types::internal::UserDefinedType_Data>> resolved_types;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::bindings::types::internal::DeclaredConstant_Data*>> resolved_constants;

 private:
  MojomFileGraph_Data();
  ~MojomFileGraph_Data() = delete;
};
static_assert(sizeof(MojomFileGraph_Data) == 32,
              "Bad sizeof(MojomFileGraph_Data)");

class KeysByType_Data {
 public:
  static KeysByType_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> interfaces;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> structs;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> unions;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> top_level_enums;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> embedded_enums;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> top_level_constants;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> embedded_constants;

 private:
  KeysByType_Data();
  ~KeysByType_Data() = delete;
};
static_assert(sizeof(KeysByType_Data) == 64,
              "Bad sizeof(KeysByType_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace types
}  // namespace bindings
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_FILES_MOJOM_INTERNAL_H_
