// NOTE: This file was generated by the Mojo bindings generator.
#include "examples/indirect_service/indirect_service_demo.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace examples {

// --- Interface definitions ---
class IntegerService_Increment_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IntegerService_Increment_ForwardToCallback(
      const IntegerService::IncrementCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  IntegerService::IncrementCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(IntegerService_Increment_ForwardToCallback);
};
bool IntegerService_Increment_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::IntegerService_Increment_ResponseParams_Data* params =
      reinterpret_cast<internal::IntegerService_Increment_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  int32_t p_value {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_value = params->value;
  } while (false);
  callback_.Run(p_value);
  return true;
}

IntegerServiceProxy::IntegerServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void IntegerServiceProxy::Increment(
    const IncrementCallback& callback) {
  size_t size = sizeof(internal::IntegerService_Increment_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::IntegerService_Base::MessageOrdinals::Increment), size);

  internal::IntegerService_Increment_Params_Data* params =
      internal::IntegerService_Increment_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new IntegerService_Increment_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class IntegerService_Increment_ProxyToResponder
    : public IntegerService::IncrementCallback::Runnable {
 public:
  ~IntegerService_Increment_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "IntegerService::Increment(callback) "
        "was never run.";
  }

  IntegerService_Increment_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(int32_t in_value) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(IntegerService_Increment_ProxyToResponder);
};

void IntegerService_Increment_ProxyToResponder::Run(
    int32_t in_value) const {
  size_t size = sizeof(internal::IntegerService_Increment_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::IntegerService_Base::MessageOrdinals::Increment), size, request_id_);
  internal::IntegerService_Increment_ResponseParams_Data* params =
      internal::IntegerService_Increment_ResponseParams_Data::New(builder.buffer());
  params->value = in_value;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

IntegerServiceStub::IntegerServiceStub()
    : sink_(nullptr),
      control_message_handler_(IntegerService::Version_) {
}

IntegerServiceStub::~IntegerServiceStub() {}

bool IntegerServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::IntegerService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IntegerService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IntegerService_Base::MessageOrdinals::Increment: {
      break;
    }
  }
  return false;
}

bool IntegerServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::IntegerService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IntegerService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IntegerService_Base::MessageOrdinals::Increment: {
      internal::IntegerService_Increment_Params_Data* params =
          reinterpret_cast<internal::IntegerService_Increment_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      IntegerService::IncrementCallback::Runnable* runnable =
          new IntegerService_Increment_ProxyToResponder(
              message->request_id(), responder);
      IntegerService::IncrementCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Increment(callback);
      return true;
    }
  }
  return false;
}


IndirectIntegerServiceProxy::IndirectIntegerServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void IndirectIntegerServiceProxy::Set(
    mojo::InterfaceHandle<IntegerService> in_service) {
  size_t size = sizeof(internal::IndirectIntegerService_Set_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::IndirectIntegerService_Base::MessageOrdinals::Set), size);

  internal::IndirectIntegerService_Set_Params_Data* params =
      internal::IndirectIntegerService_Set_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_service.Pass(),
                                        &params->service);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void IndirectIntegerServiceProxy::Get(
    mojo::InterfaceRequest<IntegerService> in_service) {
  size_t size = sizeof(internal::IndirectIntegerService_Get_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::IndirectIntegerService_Base::MessageOrdinals::Get), size);

  internal::IndirectIntegerService_Get_Params_Data* params =
      internal::IndirectIntegerService_Get_Params_Data::New(builder.buffer());
  params->service = in_service.PassMessagePipe().release();
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

IndirectIntegerServiceStub::IndirectIntegerServiceStub()
    : sink_(nullptr),
      control_message_handler_(IndirectIntegerService::Version_) {
}

IndirectIntegerServiceStub::~IndirectIntegerServiceStub() {}

bool IndirectIntegerServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::IndirectIntegerService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IndirectIntegerService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IndirectIntegerService_Base::MessageOrdinals::Set: {
      internal::IndirectIntegerService_Set_Params_Data* params =
          reinterpret_cast<internal::IndirectIntegerService_Set_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<IntegerService> p_service {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->service, &p_service);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Set(p_service.Pass());
      return true;
    }
    case internal::IndirectIntegerService_Base::MessageOrdinals::Get: {
      internal::IndirectIntegerService_Get_Params_Data* params =
          reinterpret_cast<internal::IndirectIntegerService_Get_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<IntegerService> p_service {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_service.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->service)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Get(p_service.Pass());
      return true;
    }
  }
  return false;
}

bool IndirectIntegerServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::IndirectIntegerService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IndirectIntegerService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IndirectIntegerService_Base::MessageOrdinals::Set: {
      break;
    }
    case internal::IndirectIntegerService_Base::MessageOrdinals::Get: {
      break;
    }
  }
  return false;
}

}  // namespace examples
}  // namespace mojo
