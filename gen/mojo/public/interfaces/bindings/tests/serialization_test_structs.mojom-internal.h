// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SERIALIZATION_TEST_STRUCTS_MOJOM_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SERIALIZATION_TEST_STRUCTS_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace test {

class Struct1;
class Struct2;
class Struct3;
class Struct4;
class Struct5;
class Struct6;
class StructOfNullables;


namespace internal {

class Struct1_Data;
class Struct2_Data;
class Struct3_Data;
class Struct4_Data;
class Struct5_Data;
class Struct6_Data;
class StructOfNullables_Data;



#pragma pack(push, 1)


class Struct1_Data {
 public:
  static Struct1_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t i;
  uint8_t padfinal_[7];

 private:
  Struct1_Data();
  ~Struct1_Data() = delete;
};
static_assert(sizeof(Struct1_Data) == 16,
              "Bad sizeof(Struct1_Data)");

class Struct2_Data {
 public:
  static Struct2_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::Handle hdl;
  uint8_t padfinal_[4];

 private:
  Struct2_Data();
  ~Struct2_Data() = delete;
};
static_assert(sizeof(Struct2_Data) == 16,
              "Bad sizeof(Struct2_Data)");

class Struct3_Data {
 public:
  static Struct3_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::Struct1_Data> struct_1;

 private:
  Struct3_Data();
  ~Struct3_Data() = delete;
};
static_assert(sizeof(Struct3_Data) == 16,
              "Bad sizeof(Struct3_Data)");

class Struct4_Data {
 public:
  static Struct4_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<internal::Struct1_Data*> data;

 private:
  Struct4_Data();
  ~Struct4_Data() = delete;
};
static_assert(sizeof(Struct4_Data) == 16,
              "Bad sizeof(Struct4_Data)");

class Struct5_Data {
 public:
  static Struct5_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<internal::Struct1_Data*> pair;

 private:
  Struct5_Data();
  ~Struct5_Data() = delete;
};
static_assert(sizeof(Struct5_Data) == 16,
              "Bad sizeof(Struct5_Data)");

class Struct6_Data {
 public:
  static Struct6_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer str;

 private:
  Struct6_Data();
  ~Struct6_Data() = delete;
};
static_assert(sizeof(Struct6_Data) == 16,
              "Bad sizeof(Struct6_Data)");

class StructOfNullables_Data {
 public:
  static StructOfNullables_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::Handle hdl;
  uint8_t pad0_[4];
  mojo::internal::StructPointer<internal::Struct1_Data> struct_1;
  mojo::internal::StringPointer str;

 private:
  StructOfNullables_Data();
  ~StructOfNullables_Data() = delete;
};
static_assert(sizeof(StructOfNullables_Data) == 32,
              "Bad sizeof(StructOfNullables_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SERIALIZATION_TEST_STRUCTS_MOJOM_INTERNAL_H_
