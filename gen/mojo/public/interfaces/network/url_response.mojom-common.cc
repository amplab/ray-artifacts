// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/network/url_response.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
URLResponse_Data* URLResponse_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLResponse_Data))) URLResponse_Data();
}

// static
mojo::internal::ValidationError URLResponse_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLResponse_Data* object = static_cast<const URLResponse_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 88 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->error.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->error.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle body_handle = object->body;
  if (!bounds_checker->ClaimHandle(body_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->url.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams url_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->url.offset),
          bounds_checker, &url_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->status_line.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams status_line_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->status_line.offset),
          bounds_checker, &status_line_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->headers.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams headers_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::HttpHeaderPtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->headers.offset),
          bounds_checker, &headers_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->mime_type.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams mime_type_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->mime_type.offset),
          bounds_checker, &mime_type_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->charset.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams charset_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->charset.offset),
          bounds_checker, &charset_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->redirect_method.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams redirect_method_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->redirect_method.offset),
          bounds_checker, &redirect_method_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->redirect_url.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams redirect_url_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->redirect_url.offset),
          bounds_checker, &redirect_url_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->redirect_referrer.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams redirect_referrer_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->redirect_referrer.offset),
          bounds_checker, &redirect_referrer_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLResponse_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->error, handles);
  mojo::internal::EncodeHandle(&this->body, handles);
  mojo::internal::Encode(&this->url, handles);
  mojo::internal::Encode(&this->status_line, handles);
  mojo::internal::Encode(&this->headers, handles);
  mojo::internal::Encode(&this->mime_type, handles);
  mojo::internal::Encode(&this->charset, handles);
  mojo::internal::Encode(&this->redirect_method, handles);
  mojo::internal::Encode(&this->redirect_url, handles);
  mojo::internal::Encode(&this->redirect_referrer, handles);
}

void URLResponse_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->error, handles);
  mojo::internal::DecodeHandle(&this->body, handles);
  mojo::internal::Decode(&this->url, handles);
  mojo::internal::Decode(&this->status_line, handles);
  mojo::internal::Decode(&this->headers, handles);
  mojo::internal::Decode(&this->mime_type, handles);
  mojo::internal::Decode(&this->charset, handles);
  mojo::internal::Decode(&this->redirect_method, handles);
  mojo::internal::Decode(&this->redirect_url, handles);
  mojo::internal::Decode(&this->redirect_referrer, handles);
}

URLResponse_Data::URLResponse_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---

}  // namespace internal

// --- Request and response validator definitions for interfaces --- 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)

// Struct Constants

// --- Struct builder definitions ---

// static
URLResponsePtr URLResponse::New() {
  URLResponsePtr rv;
  mojo::internal::StructHelper<URLResponse>::Initialize(&rv);
  return rv;
}

URLResponse::URLResponse()
    : error(),
      body(),
      url(),
      status_code(),
      status_line(),
      headers(),
      mime_type(),
      charset(),
      redirect_method(),
      redirect_url(),
      redirect_referrer() {
}

URLResponse::~URLResponse() {
}



bool URLResponse::Equals(const URLResponse& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->body, other.body))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->url, other.url))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->status_code, other.status_code))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->status_line, other.status_line))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::HttpHeaderPtr>>::Equals(this->headers, other.headers))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->mime_type, other.mime_type))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->charset, other.charset))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->redirect_method, other.redirect_method))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->redirect_url, other.redirect_url))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->redirect_referrer, other.redirect_referrer))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t URLResponse::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLResponse::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLResponse_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLResponse::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLResponse_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLResponse::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLResponse_Data* input =
      static_cast<internal::URLResponse_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLResponse& input) {
  size_t size = sizeof(internal::URLResponse_Data);
  size += input.error.is_null()
              ? 0
              : GetSerializedSize_(*input.error);
  size += GetSerializedSize_(input.url);
  size += GetSerializedSize_(input.status_line);
  size += GetSerializedSize_(input.headers);
  size += GetSerializedSize_(input.mime_type);
  size += GetSerializedSize_(input.charset);
  size += GetSerializedSize_(input.redirect_method);
  size += GetSerializedSize_(input.redirect_url);
  size += GetSerializedSize_(input.redirect_referrer);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLResponse* input,
    mojo::internal::Buffer* buf,
    internal::URLResponse_Data** output) {
  if (input) {
    internal::URLResponse_Data* result =
        internal::URLResponse_Data::New(buf);
    {auto retval =Serialize_(input->error.get(),
                 buf,
                 &result->error.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    result->body = input->body.release();
    SerializeString_(input->url, buf, &result->url.ptr);
    result->status_code = input->status_code;
    SerializeString_(input->status_line, buf, &result->status_line.ptr);
    {
      const mojo::internal::ArrayValidateParams headers_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->headers, buf, &result->headers.ptr,
                            &headers_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    SerializeString_(input->mime_type, buf, &result->mime_type.ptr);
    SerializeString_(input->charset, buf, &result->charset.ptr);
    SerializeString_(input->redirect_method, buf, &result->redirect_method.ptr);
    SerializeString_(input->redirect_url, buf, &result->redirect_url.ptr);
    SerializeString_(input->redirect_referrer, buf, &result->redirect_referrer.ptr);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLResponse_Data* input,
                  URLResponse* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->error.ptr) {
        result->error = mojo::NetworkError::New();
        Deserialize_(input->error.ptr, result->error.get());
      }
      result->body.reset(mojo::internal::FetchAndReset(&input->body));
      Deserialize_(input->url.ptr, &result->url);
      result->status_code = input->status_code;
      Deserialize_(input->status_line.ptr, &result->status_line);
      Deserialize_(input->headers.ptr, &result->headers);
      Deserialize_(input->mime_type.ptr, &result->mime_type);
      Deserialize_(input->charset.ptr, &result->charset);
      Deserialize_(input->redirect_method.ptr, &result->redirect_method);
      Deserialize_(input->redirect_url.ptr, &result->redirect_url);
      Deserialize_(input->redirect_referrer.ptr, &result->redirect_referrer);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---
}  // namespace mojo
