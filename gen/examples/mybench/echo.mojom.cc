// NOTE: This file was generated by the Mojo bindings generator.
#include "examples/mybench/echo.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace examples {

// --- Interface definitions ---
class Echo_EchoString_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Echo_EchoString_ForwardToCallback(
      const Echo::EchoStringCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Echo::EchoStringCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Echo_EchoString_ForwardToCallback);
};
bool Echo_EchoString_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Echo_EchoString_ResponseParams_Data* params =
      reinterpret_cast<internal::Echo_EchoString_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint32_t p_value {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_value = params->value;
  } while (false);
  callback_.Run(p_value);
  return true;
}
class Echo_BuildObject_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Echo_BuildObject_ForwardToCallback(
      const Echo::BuildObjectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Echo::BuildObjectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Echo_BuildObject_ForwardToCallback);
};
bool Echo_BuildObject_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Echo_BuildObject_ResponseParams_Data* params =
      reinterpret_cast<internal::Echo_BuildObject_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::ScopedSharedBufferHandle p_buffer {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_buffer.reset(mojo::internal::FetchAndReset(&params->buffer));
  } while (false);
  callback_.Run(p_buffer.Pass());
  return true;
}
class Echo_ListObjects_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Echo_ListObjects_ForwardToCallback(
      const Echo::ListObjectsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Echo::ListObjectsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Echo_ListObjects_ForwardToCallback);
};
bool Echo_ListObjects_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Echo_ListObjects_ResponseParams_Data* params =
      reinterpret_cast<internal::Echo_ListObjects_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<ObjectInfoPtr> p_info {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->info.ptr, &p_info);
  } while (false);
  callback_.Run(p_info.Pass());
  return true;
}

EchoProxy::EchoProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void EchoProxy::EchoString(
    uint32_t in_value, const EchoStringCallback& callback) {
  size_t size = sizeof(internal::Echo_EchoString_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Echo_Base::MessageOrdinals::EchoString), size);

  internal::Echo_EchoString_Params_Data* params =
      internal::Echo_EchoString_Params_Data::New(builder.buffer());
  params->value = in_value;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Echo_EchoString_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void EchoProxy::BuildObject(
    int64_t in_object_id, uint64_t in_size, const BuildObjectCallback& callback) {
  size_t size = sizeof(internal::Echo_BuildObject_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Echo_Base::MessageOrdinals::BuildObject), size);

  internal::Echo_BuildObject_Params_Data* params =
      internal::Echo_BuildObject_Params_Data::New(builder.buffer());
  params->object_id = in_object_id;
  params->size = in_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Echo_BuildObject_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void EchoProxy::ListObjects(
    const ListObjectsCallback& callback) {
  size_t size = sizeof(internal::Echo_ListObjects_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Echo_Base::MessageOrdinals::ListObjects), size);

  internal::Echo_ListObjects_Params_Data* params =
      internal::Echo_ListObjects_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Echo_ListObjects_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Echo_EchoString_ProxyToResponder
    : public Echo::EchoStringCallback::Runnable {
 public:
  ~Echo_EchoString_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Echo::EchoString(p_value, callback) "
        "was never run.";
  }

  Echo_EchoString_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint32_t in_value) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Echo_EchoString_ProxyToResponder);
};

void Echo_EchoString_ProxyToResponder::Run(
    uint32_t in_value) const {
  size_t size = sizeof(internal::Echo_EchoString_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Echo_Base::MessageOrdinals::EchoString), size, request_id_);
  internal::Echo_EchoString_ResponseParams_Data* params =
      internal::Echo_EchoString_ResponseParams_Data::New(builder.buffer());
  params->value = in_value;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Echo_BuildObject_ProxyToResponder
    : public Echo::BuildObjectCallback::Runnable {
 public:
  ~Echo_BuildObject_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Echo::BuildObject(p_object_id, p_size, callback) "
        "was never run.";
  }

  Echo_BuildObject_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::ScopedSharedBufferHandle in_buffer) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Echo_BuildObject_ProxyToResponder);
};

void Echo_BuildObject_ProxyToResponder::Run(
    mojo::ScopedSharedBufferHandle in_buffer) const {
  size_t size = sizeof(internal::Echo_BuildObject_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Echo_Base::MessageOrdinals::BuildObject), size, request_id_);
  internal::Echo_BuildObject_ResponseParams_Data* params =
      internal::Echo_BuildObject_ResponseParams_Data::New(builder.buffer());
  params->buffer = in_buffer.release();
  if (!params->buffer.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid buffer in Echo.BuildObject response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Echo_ListObjects_ProxyToResponder
    : public Echo::ListObjectsCallback::Runnable {
 public:
  ~Echo_ListObjects_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Echo::ListObjects(callback) "
        "was never run.";
  }

  Echo_ListObjects_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<ObjectInfoPtr> in_info) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Echo_ListObjects_ProxyToResponder);
};

void Echo_ListObjects_ProxyToResponder::Run(
    mojo::Array<ObjectInfoPtr> in_info) const {
  size_t size = sizeof(internal::Echo_ListObjects_ResponseParams_Data);
  size += GetSerializedSize_(in_info);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Echo_Base::MessageOrdinals::ListObjects), size, request_id_);
  internal::Echo_ListObjects_ResponseParams_Data* params =
      internal::Echo_ListObjects_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams info_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_info, builder.buffer(), &params->info.ptr,
                          &info_validate_params);
  }
  if (!params->info.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null info in Echo.ListObjects response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

EchoStub::EchoStub()
    : sink_(nullptr),
      control_message_handler_(Echo::Version_) {
}

EchoStub::~EchoStub() {}

bool EchoStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Echo_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Echo_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Echo_Base::MessageOrdinals::EchoString: {
      break;
    }
    case internal::Echo_Base::MessageOrdinals::BuildObject: {
      break;
    }
    case internal::Echo_Base::MessageOrdinals::ListObjects: {
      break;
    }
  }
  return false;
}

bool EchoStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Echo_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Echo_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Echo_Base::MessageOrdinals::EchoString: {
      internal::Echo_EchoString_Params_Data* params =
          reinterpret_cast<internal::Echo_EchoString_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Echo::EchoStringCallback::Runnable* runnable =
          new Echo_EchoString_ProxyToResponder(
              message->request_id(), responder);
      Echo::EchoStringCallback callback(runnable);
      
      uint32_t p_value {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_value = params->value;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->EchoString(p_value, callback);
      return true;
    }
    case internal::Echo_Base::MessageOrdinals::BuildObject: {
      internal::Echo_BuildObject_Params_Data* params =
          reinterpret_cast<internal::Echo_BuildObject_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Echo::BuildObjectCallback::Runnable* runnable =
          new Echo_BuildObject_ProxyToResponder(
              message->request_id(), responder);
      Echo::BuildObjectCallback callback(runnable);
      
      int64_t p_object_id {};
      uint64_t p_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_object_id = params->object_id;
        p_size = params->size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->BuildObject(p_object_id, p_size, callback);
      return true;
    }
    case internal::Echo_Base::MessageOrdinals::ListObjects: {
      internal::Echo_ListObjects_Params_Data* params =
          reinterpret_cast<internal::Echo_ListObjects_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Echo::ListObjectsCallback::Runnable* runnable =
          new Echo_ListObjects_ProxyToResponder(
              message->request_id(), responder);
      Echo::ListObjectsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ListObjects(callback);
      return true;
    }
  }
  return false;
}

}  // namespace examples
}  // namespace mojo
