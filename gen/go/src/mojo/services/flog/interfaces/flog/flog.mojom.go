// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/flog/interfaces/flog.mojom
//

package flog

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type FlogService interface {
	CreateLogger(inLogger FlogLogger_Request, inLabel string) (err error)
	GetLogDescriptions() (outDescriptions []FlogDescription, err error)
	CreateReader(inReader FlogReader_Request, inLogId uint32) (err error)
}



var flogService_Name = "mojo::flog::FlogService"

type FlogService_Request bindings.InterfaceRequest

func (r *FlogService_Request) Name() string {
	return flogService_Name
}


type FlogService_Pointer bindings.InterfacePointer

func (p *FlogService_Pointer) Name() string {
	return flogService_Name
}

type FlogService_ServiceFactory struct{
	Delegate FlogService_Factory
}

type FlogService_Factory interface {
	Create(request FlogService_Request)
}

func (f *FlogService_ServiceFactory) Name() string {
	return flogService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *FlogService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &FlogService_ServiceDescription{}
}

func (f *FlogService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := FlogService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForFlogService creates a message pipe for use with the
// FlogService interface with a FlogService_Request on one end and a FlogService_Pointer on the other.
func CreateMessagePipeForFlogService() (FlogService_Request, FlogService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return FlogService_Request(r), FlogService_Pointer(p)
}

const flogService_CreateLogger_Name uint32 = 0
const flogService_GetLogDescriptions_Name uint32 = 1
const flogService_CreateReader_Name uint32 = 2

type FlogService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewFlogServiceProxy(p FlogService_Pointer, waiter bindings.AsyncWaiter) *FlogService_Proxy {
	return &FlogService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *FlogService_Proxy) Close_Proxy() {
	p.router.Close()
}

type flogService_CreateLogger_Params struct {
	inLogger FlogLogger_Request
	inLabel string
}


func (s *flogService_CreateLogger_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteHandle(s.inLogger.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inLabel); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogService_CreateLogger_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *flogService_CreateLogger_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogService_CreateLogger_Params_Versions), func(i int) bool {
		return flogService_CreateLogger_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogService_CreateLogger_Params_Versions) {
		if flogService_CreateLogger_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogService_CreateLogger_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inLogger = FlogLogger_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inLabel = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *FlogService_Proxy) CreateLogger(inLogger FlogLogger_Request, inLabel string) (err error) {
	payload := &flogService_CreateLogger_Params{
		inLogger,
		inLabel,
	}
	header := bindings.MessageHeader{
		Type: flogService_CreateLogger_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type flogService_GetLogDescriptions_Params struct {
}


func (s *flogService_GetLogDescriptions_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogService_GetLogDescriptions_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *flogService_GetLogDescriptions_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogService_GetLogDescriptions_Params_Versions), func(i int) bool {
		return flogService_GetLogDescriptions_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogService_GetLogDescriptions_Params_Versions) {
		if flogService_GetLogDescriptions_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogService_GetLogDescriptions_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type flogService_GetLogDescriptions_ResponseParams struct {
	outDescriptions []FlogDescription
}


func (s *flogService_GetLogDescriptions_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.outDescriptions)), 64)
	for _, elem0 := range s.outDescriptions {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogService_GetLogDescriptions_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *flogService_GetLogDescriptions_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogService_GetLogDescriptions_ResponseParams_Versions), func(i int) bool {
		return flogService_GetLogDescriptions_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogService_GetLogDescriptions_ResponseParams_Versions) {
		if flogService_GetLogDescriptions_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogService_GetLogDescriptions_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.outDescriptions = make([]FlogDescription, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.outDescriptions[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *FlogService_Proxy) GetLogDescriptions() (outDescriptions []FlogDescription, err error) {
	payload := &flogService_GetLogDescriptions_Params{
	}
	header := bindings.MessageHeader{
		Type: flogService_GetLogDescriptions_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, flogService_GetLogDescriptions_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response flogService_GetLogDescriptions_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outDescriptions = response.outDescriptions
	return
}

type flogService_CreateReader_Params struct {
	inReader FlogReader_Request
	inLogId uint32
}


func (s *flogService_CreateReader_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inReader.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inLogId); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogService_CreateReader_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *flogService_CreateReader_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogService_CreateReader_Params_Versions), func(i int) bool {
		return flogService_CreateReader_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogService_CreateReader_Params_Versions) {
		if flogService_CreateReader_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogService_CreateReader_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inReader = FlogReader_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inLogId = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *FlogService_Proxy) CreateReader(inReader FlogReader_Request, inLogId uint32) (err error) {
	payload := &flogService_CreateReader_Params{
		inReader,
		inLogId,
	}
	header := bindings.MessageHeader{
		Type: flogService_CreateReader_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type flogService_Stub struct {
	connector *bindings.Connector
	impl FlogService
}

func NewFlogServiceStub(r FlogService_Request, impl FlogService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &flogService_Stub{connector, impl})
}


func (f *FlogService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &FlogService_ServiceDescription{}
}


type FlogService_ServiceDescription struct{}

func (sd *FlogService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *FlogService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *FlogService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*FlogService_ServiceDescription)(nil)


func (s *flogService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case flogService_CreateLogger_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request flogService_CreateLogger_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateLogger(request.inLogger, request.inLabel)
		if err != nil {
			return
		}
	case flogService_GetLogDescriptions_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request flogService_GetLogDescriptions_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response flogService_GetLogDescriptions_ResponseParams
		response.outDescriptions, err = s.impl.GetLogDescriptions()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: flogService_GetLogDescriptions_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case flogService_CreateReader_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request flogService_CreateReader_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateReader(request.inReader, request.inLogId)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type FlogLogger interface {
	LogChannelCreation(inTimeUs int64, inChannelId uint32, inTypeName string) (err error)
	LogChannelMessage(inTimeUs int64, inChannelId uint32, inData []uint8) (err error)
	LogChannelDeletion(inTimeUs int64, inChannelId uint32) (err error)
}




type FlogLogger_Request bindings.InterfaceRequest



type FlogLogger_Pointer bindings.InterfacePointer


type FlogLogger_ServiceFactory struct{
	Delegate FlogLogger_Factory
}

type FlogLogger_Factory interface {
	Create(request FlogLogger_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *FlogLogger_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &FlogLogger_ServiceDescription{}
}

func (f *FlogLogger_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := FlogLogger_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForFlogLogger creates a message pipe for use with the
// FlogLogger interface with a FlogLogger_Request on one end and a FlogLogger_Pointer on the other.
func CreateMessagePipeForFlogLogger() (FlogLogger_Request, FlogLogger_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return FlogLogger_Request(r), FlogLogger_Pointer(p)
}

const flogLogger_LogChannelCreation_Name uint32 = 0
const flogLogger_LogChannelMessage_Name uint32 = 1
const flogLogger_LogChannelDeletion_Name uint32 = 2

type FlogLogger_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewFlogLoggerProxy(p FlogLogger_Pointer, waiter bindings.AsyncWaiter) *FlogLogger_Proxy {
	return &FlogLogger_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *FlogLogger_Proxy) Close_Proxy() {
	p.router.Close()
}

type flogLogger_LogChannelCreation_Params struct {
	inTimeUs int64
	inChannelId uint32
	inTypeName string
}


func (s *flogLogger_LogChannelCreation_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WriteInt64(s.inTimeUs); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inChannelId); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inTypeName); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogLogger_LogChannelCreation_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *flogLogger_LogChannelCreation_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogLogger_LogChannelCreation_Params_Versions), func(i int) bool {
		return flogLogger_LogChannelCreation_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogLogger_LogChannelCreation_Params_Versions) {
		if flogLogger_LogChannelCreation_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogLogger_LogChannelCreation_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inTimeUs = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inChannelId = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inTypeName = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *FlogLogger_Proxy) LogChannelCreation(inTimeUs int64, inChannelId uint32, inTypeName string) (err error) {
	payload := &flogLogger_LogChannelCreation_Params{
		inTimeUs,
		inChannelId,
		inTypeName,
	}
	header := bindings.MessageHeader{
		Type: flogLogger_LogChannelCreation_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type flogLogger_LogChannelMessage_Params struct {
	inTimeUs int64
	inChannelId uint32
	inData []uint8
}


func (s *flogLogger_LogChannelMessage_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WriteInt64(s.inTimeUs); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inChannelId); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.inData)), 8)
	for _, elem0 := range s.inData {
		if err := encoder.WriteUint8(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogLogger_LogChannelMessage_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *flogLogger_LogChannelMessage_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogLogger_LogChannelMessage_Params_Versions), func(i int) bool {
		return flogLogger_LogChannelMessage_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogLogger_LogChannelMessage_Params_Versions) {
		if flogLogger_LogChannelMessage_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogLogger_LogChannelMessage_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inTimeUs = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inChannelId = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			s.inData = make([]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadUint8()
				if err != nil {
					return err
				}
				s.inData[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *FlogLogger_Proxy) LogChannelMessage(inTimeUs int64, inChannelId uint32, inData []uint8) (err error) {
	payload := &flogLogger_LogChannelMessage_Params{
		inTimeUs,
		inChannelId,
		inData,
	}
	header := bindings.MessageHeader{
		Type: flogLogger_LogChannelMessage_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type flogLogger_LogChannelDeletion_Params struct {
	inTimeUs int64
	inChannelId uint32
}


func (s *flogLogger_LogChannelDeletion_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt64(s.inTimeUs); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inChannelId); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogLogger_LogChannelDeletion_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *flogLogger_LogChannelDeletion_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogLogger_LogChannelDeletion_Params_Versions), func(i int) bool {
		return flogLogger_LogChannelDeletion_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogLogger_LogChannelDeletion_Params_Versions) {
		if flogLogger_LogChannelDeletion_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogLogger_LogChannelDeletion_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inTimeUs = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inChannelId = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *FlogLogger_Proxy) LogChannelDeletion(inTimeUs int64, inChannelId uint32) (err error) {
	payload := &flogLogger_LogChannelDeletion_Params{
		inTimeUs,
		inChannelId,
	}
	header := bindings.MessageHeader{
		Type: flogLogger_LogChannelDeletion_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type flogLogger_Stub struct {
	connector *bindings.Connector
	impl FlogLogger
}

func NewFlogLoggerStub(r FlogLogger_Request, impl FlogLogger, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &flogLogger_Stub{connector, impl})
}


func (f *FlogLogger_Request) ServiceDescription() service_describer.ServiceDescription {
	return &FlogLogger_ServiceDescription{}
}


type FlogLogger_ServiceDescription struct{}

func (sd *FlogLogger_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *FlogLogger_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *FlogLogger_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*FlogLogger_ServiceDescription)(nil)


func (s *flogLogger_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case flogLogger_LogChannelCreation_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request flogLogger_LogChannelCreation_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.LogChannelCreation(request.inTimeUs, request.inChannelId, request.inTypeName)
		if err != nil {
			return
		}
	case flogLogger_LogChannelMessage_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request flogLogger_LogChannelMessage_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.LogChannelMessage(request.inTimeUs, request.inChannelId, request.inData)
		if err != nil {
			return
		}
	case flogLogger_LogChannelDeletion_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request flogLogger_LogChannelDeletion_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.LogChannelDeletion(request.inTimeUs, request.inChannelId)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type FlogReader interface {
	GetEntries(inStartIndex uint32, inMaxCount uint32) (outEntries []FlogEntry, err error)
}




type FlogReader_Request bindings.InterfaceRequest



type FlogReader_Pointer bindings.InterfacePointer


type FlogReader_ServiceFactory struct{
	Delegate FlogReader_Factory
}

type FlogReader_Factory interface {
	Create(request FlogReader_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *FlogReader_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &FlogReader_ServiceDescription{}
}

func (f *FlogReader_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := FlogReader_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForFlogReader creates a message pipe for use with the
// FlogReader interface with a FlogReader_Request on one end and a FlogReader_Pointer on the other.
func CreateMessagePipeForFlogReader() (FlogReader_Request, FlogReader_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return FlogReader_Request(r), FlogReader_Pointer(p)
}

const flogReader_GetEntries_Name uint32 = 0

type FlogReader_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewFlogReaderProxy(p FlogReader_Pointer, waiter bindings.AsyncWaiter) *FlogReader_Proxy {
	return &FlogReader_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *FlogReader_Proxy) Close_Proxy() {
	p.router.Close()
}

type flogReader_GetEntries_Params struct {
	inStartIndex uint32
	inMaxCount uint32
}


func (s *flogReader_GetEntries_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.inStartIndex); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inMaxCount); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogReader_GetEntries_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *flogReader_GetEntries_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogReader_GetEntries_Params_Versions), func(i int) bool {
		return flogReader_GetEntries_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogReader_GetEntries_Params_Versions) {
		if flogReader_GetEntries_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogReader_GetEntries_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inStartIndex = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inMaxCount = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type flogReader_GetEntries_ResponseParams struct {
	outEntries []FlogEntry
}


func (s *flogReader_GetEntries_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.outEntries)), 64)
	for _, elem0 := range s.outEntries {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogReader_GetEntries_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *flogReader_GetEntries_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogReader_GetEntries_ResponseParams_Versions), func(i int) bool {
		return flogReader_GetEntries_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogReader_GetEntries_ResponseParams_Versions) {
		if flogReader_GetEntries_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogReader_GetEntries_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.outEntries = make([]FlogEntry, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.outEntries[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *FlogReader_Proxy) GetEntries(inStartIndex uint32, inMaxCount uint32) (outEntries []FlogEntry, err error) {
	payload := &flogReader_GetEntries_Params{
		inStartIndex,
		inMaxCount,
	}
	header := bindings.MessageHeader{
		Type: flogReader_GetEntries_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, flogReader_GetEntries_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response flogReader_GetEntries_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outEntries = response.outEntries
	return
}

type flogReader_Stub struct {
	connector *bindings.Connector
	impl FlogReader
}

func NewFlogReaderStub(r FlogReader_Request, impl FlogReader, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &flogReader_Stub{connector, impl})
}


func (f *FlogReader_Request) ServiceDescription() service_describer.ServiceDescription {
	return &FlogReader_ServiceDescription{}
}


type FlogReader_ServiceDescription struct{}

func (sd *FlogReader_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *FlogReader_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *FlogReader_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*FlogReader_ServiceDescription)(nil)


func (s *flogReader_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case flogReader_GetEntries_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request flogReader_GetEntries_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response flogReader_GetEntries_ResponseParams
		response.outEntries, err = s.impl.GetEntries(request.inStartIndex, request.inMaxCount)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: flogReader_GetEntries_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type FlogDescription struct {
	LogId uint32
	Label string
	Open bool
}


func (s *FlogDescription) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteUint32(s.LogId); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.Open); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.Label); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogDescription_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *FlogDescription) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogDescription_Versions), func(i int) bool {
		return flogDescription_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogDescription_Versions) {
		if flogDescription_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogDescription_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.LogId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.Open = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.Label = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type FlogEntry struct {
	TimeUs int64
	LogId uint32
	ChannelId uint32
	Details FlogEntryDetails
}


func (s *FlogEntry) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(32, 0)
	if err := encoder.WriteInt64(s.TimeUs); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.LogId); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.ChannelId); err != nil {
		return err
	}
	if s.Details == nil {
		encoder.WriteNullUnion()
	} else {
		if err := s.Details.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogEntry_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{40, 0},
}

func (s *FlogEntry) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogEntry_Versions), func(i int) bool {
		return flogEntry_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogEntry_Versions) {
		if flogEntry_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogEntry_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.TimeUs = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.LogId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.ChannelId = value0
	}
	if header.ElementsOrVersion >= 0 {
		var err error
		s.Details, err = DecodeFlogEntryDetails(decoder)
		if err != nil {
			return err
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type FlogChannelCreationEntryDetails struct {
	TypeName string
}


func (s *FlogChannelCreationEntryDetails) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.TypeName); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogChannelCreationEntryDetails_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *FlogChannelCreationEntryDetails) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogChannelCreationEntryDetails_Versions), func(i int) bool {
		return flogChannelCreationEntryDetails_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogChannelCreationEntryDetails_Versions) {
		if flogChannelCreationEntryDetails_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogChannelCreationEntryDetails_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.TypeName = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type FlogChannelMessageEntryDetails struct {
	Data []uint8
}


func (s *FlogChannelMessageEntryDetails) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.Data)), 8)
	for _, elem0 := range s.Data {
		if err := encoder.WriteUint8(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogChannelMessageEntryDetails_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *FlogChannelMessageEntryDetails) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogChannelMessageEntryDetails_Versions), func(i int) bool {
		return flogChannelMessageEntryDetails_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogChannelMessageEntryDetails_Versions) {
		if flogChannelMessageEntryDetails_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogChannelMessageEntryDetails_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			s.Data = make([]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadUint8()
				if err != nil {
					return err
				}
				s.Data[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type FlogChannelDeletionEntryDetails struct {
}


func (s *FlogChannelDeletionEntryDetails) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var flogChannelDeletionEntryDetails_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *FlogChannelDeletionEntryDetails) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(flogChannelDeletionEntryDetails_Versions), func(i int) bool {
		return flogChannelDeletionEntryDetails_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(flogChannelDeletionEntryDetails_Versions) {
		if flogChannelDeletionEntryDetails_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := flogChannelDeletionEntryDetails_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type FlogEntryDetails interface {
	Tag() uint32
	Interface() interface{}
	__Reflect(__FlogEntryDetailsReflect)
	Encode(encoder *bindings.Encoder) error
}



type __FlogEntryDetailsReflect struct {
	ChannelCreation FlogChannelCreationEntryDetails
	ChannelMessage FlogChannelMessageEntryDetails
	ChannelDeletion FlogChannelDeletionEntryDetails
}

func DecodeFlogEntryDetails(decoder *bindings.Decoder) (FlogEntryDetails, error) {
	size, tag, err := decoder.ReadUnionHeader()
	if err != nil {
		return nil, err
	}

	if size == 0 {
		decoder.SkipUnionValue()
		return nil, nil
	}

	switch tag {
	case 0:
		var value FlogEntryDetailsChannelCreation
		if err := value.decodeInternal(decoder); err != nil {
			return nil, err
		}
		decoder.FinishReadingUnionValue()
		return &value, nil
	case 1:
		var value FlogEntryDetailsChannelMessage
		if err := value.decodeInternal(decoder); err != nil {
			return nil, err
		}
		decoder.FinishReadingUnionValue()
		return &value, nil
	case 2:
		var value FlogEntryDetailsChannelDeletion
		if err := value.decodeInternal(decoder); err != nil {
			return nil, err
		}
		decoder.FinishReadingUnionValue()
		return &value, nil
	}

	decoder.SkipUnionValue()
	return &FlogEntryDetailsUnknown{tag: tag}, nil
}

type FlogEntryDetailsUnknown struct { tag uint32 }
func (u *FlogEntryDetailsUnknown) Tag() uint32 { return u.tag }
func (u *FlogEntryDetailsUnknown) Interface() interface{} { return nil }
func (u *FlogEntryDetailsUnknown) __Reflect(__FlogEntryDetailsReflect) {}

func (u *FlogEntryDetailsUnknown) Encode(encoder *bindings.Encoder) error {
	return fmt.Errorf("Trying to serialize an unknown FlogEntryDetails. There is no sane way to do that!");
}

type FlogEntryDetailsChannelCreation struct { Value FlogChannelCreationEntryDetails }
func (u *FlogEntryDetailsChannelCreation) Tag() uint32 { return 0 }
func (u *FlogEntryDetailsChannelCreation) Interface() interface{} { return u.Value }
func (u *FlogEntryDetailsChannelCreation) __Reflect(__FlogEntryDetailsReflect) {}

func (u *FlogEntryDetailsChannelCreation) Encode(encoder *bindings.Encoder) error {
	encoder.WriteUnionHeader(u.Tag())
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := u.Value.Encode(encoder); err != nil {
		return err
	}
	
	encoder.FinishWritingUnionValue()
	return nil
}

func (u *FlogEntryDetailsChannelCreation) decodeInternal(decoder *bindings.Decoder) error {
	pointer0, err := decoder.ReadPointer()
	if err != nil {
		return err
	}
	if pointer0 == 0 {
		return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
	} else {
		if err := u.Value.Decode(decoder); err != nil {
			return err
		}
	}
	
	return nil
}



type FlogEntryDetailsChannelMessage struct { Value FlogChannelMessageEntryDetails }
func (u *FlogEntryDetailsChannelMessage) Tag() uint32 { return 1 }
func (u *FlogEntryDetailsChannelMessage) Interface() interface{} { return u.Value }
func (u *FlogEntryDetailsChannelMessage) __Reflect(__FlogEntryDetailsReflect) {}

func (u *FlogEntryDetailsChannelMessage) Encode(encoder *bindings.Encoder) error {
	encoder.WriteUnionHeader(u.Tag())
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := u.Value.Encode(encoder); err != nil {
		return err
	}
	
	encoder.FinishWritingUnionValue()
	return nil
}

func (u *FlogEntryDetailsChannelMessage) decodeInternal(decoder *bindings.Decoder) error {
	pointer0, err := decoder.ReadPointer()
	if err != nil {
		return err
	}
	if pointer0 == 0 {
		return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
	} else {
		if err := u.Value.Decode(decoder); err != nil {
			return err
		}
	}
	
	return nil
}



type FlogEntryDetailsChannelDeletion struct { Value FlogChannelDeletionEntryDetails }
func (u *FlogEntryDetailsChannelDeletion) Tag() uint32 { return 2 }
func (u *FlogEntryDetailsChannelDeletion) Interface() interface{} { return u.Value }
func (u *FlogEntryDetailsChannelDeletion) __Reflect(__FlogEntryDetailsReflect) {}

func (u *FlogEntryDetailsChannelDeletion) Encode(encoder *bindings.Encoder) error {
	encoder.WriteUnionHeader(u.Tag())
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := u.Value.Encode(encoder); err != nil {
		return err
	}
	
	encoder.FinishWritingUnionValue()
	return nil
}

func (u *FlogEntryDetailsChannelDeletion) decodeInternal(decoder *bindings.Decoder) error {
	pointer0, err := decoder.ReadPointer()
	if err != nil {
		return err
	}
	if pointer0 == 0 {
		return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
	} else {
		if err := u.Value.Decode(decoder); err != nil {
			return err
		}
	}
	
	return nil
}




