// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_CAMERA_INTERFACES_CAMERA_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_CAMERA_INTERFACES_CAMERA_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {

class Photo;


namespace internal {

class Photo_Data;



#pragma pack(push, 1)


class Photo_Data {
 public:
  static Photo_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer unique_id;
  mojo::DataPipeConsumerHandle content;
  uint8_t padfinal_[4];

 private:
  Photo_Data();
  ~Photo_Data() = delete;
};
static_assert(sizeof(Photo_Data) == 24,
              "Bad sizeof(Photo_Data)");


class CameraRollService_Update_Params_Data {
 public:
  static CameraRollService_Update_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CameraRollService_Update_Params_Data();
  ~CameraRollService_Update_Params_Data() = delete;
};
static_assert(sizeof(CameraRollService_Update_Params_Data) == 8,
              "Bad sizeof(CameraRollService_Update_Params_Data)");


class CameraRollService_GetCount_Params_Data {
 public:
  static CameraRollService_GetCount_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CameraRollService_GetCount_Params_Data();
  ~CameraRollService_GetCount_Params_Data() = delete;
};
static_assert(sizeof(CameraRollService_GetCount_Params_Data) == 8,
              "Bad sizeof(CameraRollService_GetCount_Params_Data)");

class CameraRollService_GetCount_ResponseParams_Data {
 public:
  static CameraRollService_GetCount_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t num_photos;
  uint8_t padfinal_[4];

 private:
  CameraRollService_GetCount_ResponseParams_Data();
  ~CameraRollService_GetCount_ResponseParams_Data() = delete;
};
static_assert(sizeof(CameraRollService_GetCount_ResponseParams_Data) == 16,
              "Bad sizeof(CameraRollService_GetCount_ResponseParams_Data)");


class CameraRollService_GetPhoto_Params_Data {
 public:
  static CameraRollService_GetPhoto_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t index;
  uint8_t padfinal_[4];

 private:
  CameraRollService_GetPhoto_Params_Data();
  ~CameraRollService_GetPhoto_Params_Data() = delete;
};
static_assert(sizeof(CameraRollService_GetPhoto_Params_Data) == 16,
              "Bad sizeof(CameraRollService_GetPhoto_Params_Data)");

class CameraRollService_GetPhoto_ResponseParams_Data {
 public:
  static CameraRollService_GetPhoto_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::Photo_Data> photo;

 private:
  CameraRollService_GetPhoto_ResponseParams_Data();
  ~CameraRollService_GetPhoto_ResponseParams_Data() = delete;
};
static_assert(sizeof(CameraRollService_GetPhoto_ResponseParams_Data) == 16,
              "Bad sizeof(CameraRollService_GetPhoto_ResponseParams_Data)");


class CameraService_GetLatestFrame_Params_Data {
 public:
  static CameraService_GetLatestFrame_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CameraService_GetLatestFrame_Params_Data();
  ~CameraService_GetLatestFrame_Params_Data() = delete;
};
static_assert(sizeof(CameraService_GetLatestFrame_Params_Data) == 8,
              "Bad sizeof(CameraService_GetLatestFrame_Params_Data)");

class CameraService_GetLatestFrame_ResponseParams_Data {
 public:
  static CameraService_GetLatestFrame_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::DataPipeConsumerHandle content;
  uint8_t padfinal_[4];

 private:
  CameraService_GetLatestFrame_ResponseParams_Data();
  ~CameraService_GetLatestFrame_ResponseParams_Data() = delete;
};
static_assert(sizeof(CameraService_GetLatestFrame_ResponseParams_Data) == 16,
              "Bad sizeof(CameraService_GetLatestFrame_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_CAMERA_INTERFACES_CAMERA_MOJOM_INTERNAL_H_
