// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/test_unions.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace test {

// --- Interface definitions ---
class SmallCache_GetIntValue_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SmallCache_GetIntValue_ForwardToCallback(
      const SmallCache::GetIntValueCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  SmallCache::GetIntValueCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(SmallCache_GetIntValue_ForwardToCallback);
};
bool SmallCache_GetIntValue_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::SmallCache_GetIntValue_ResponseParams_Data* params =
      reinterpret_cast<internal::SmallCache_GetIntValue_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  int64_t p_int_value {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_int_value = params->int_value;
  } while (false);
  callback_.Run(p_int_value);
  return true;
}

SmallCacheProxy::SmallCacheProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void SmallCacheProxy::SetIntValue(
    int64_t in_int_value) {
  size_t size = sizeof(internal::SmallCache_SetIntValue_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::SmallCache_Base::MessageOrdinals::SetIntValue), size);

  internal::SmallCache_SetIntValue_Params_Data* params =
      internal::SmallCache_SetIntValue_Params_Data::New(builder.buffer());
  params->int_value = in_int_value;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void SmallCacheProxy::GetIntValue(
    const GetIntValueCallback& callback) {
  size_t size = sizeof(internal::SmallCache_GetIntValue_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::SmallCache_Base::MessageOrdinals::GetIntValue), size);

  internal::SmallCache_GetIntValue_Params_Data* params =
      internal::SmallCache_GetIntValue_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new SmallCache_GetIntValue_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class SmallCache_GetIntValue_ProxyToResponder
    : public SmallCache::GetIntValueCallback::Runnable {
 public:
  ~SmallCache_GetIntValue_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "SmallCache::GetIntValue(callback) "
        "was never run.";
  }

  SmallCache_GetIntValue_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(int64_t in_int_value) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(SmallCache_GetIntValue_ProxyToResponder);
};

void SmallCache_GetIntValue_ProxyToResponder::Run(
    int64_t in_int_value) const {
  size_t size = sizeof(internal::SmallCache_GetIntValue_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::SmallCache_Base::MessageOrdinals::GetIntValue), size, request_id_);
  internal::SmallCache_GetIntValue_ResponseParams_Data* params =
      internal::SmallCache_GetIntValue_ResponseParams_Data::New(builder.buffer());
  params->int_value = in_int_value;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

SmallCacheStub::SmallCacheStub()
    : sink_(nullptr),
      control_message_handler_(SmallCache::Version_) {
}

SmallCacheStub::~SmallCacheStub() {}

bool SmallCacheStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::SmallCache_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SmallCache_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SmallCache_Base::MessageOrdinals::SetIntValue: {
      internal::SmallCache_SetIntValue_Params_Data* params =
          reinterpret_cast<internal::SmallCache_SetIntValue_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int64_t p_int_value {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_int_value = params->int_value;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetIntValue(p_int_value);
      return true;
    }
    case internal::SmallCache_Base::MessageOrdinals::GetIntValue: {
      break;
    }
  }
  return false;
}

bool SmallCacheStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::SmallCache_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SmallCache_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SmallCache_Base::MessageOrdinals::SetIntValue: {
      break;
    }
    case internal::SmallCache_Base::MessageOrdinals::GetIntValue: {
      internal::SmallCache_GetIntValue_Params_Data* params =
          reinterpret_cast<internal::SmallCache_GetIntValue_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      SmallCache::GetIntValueCallback::Runnable* runnable =
          new SmallCache_GetIntValue_ProxyToResponder(
              message->request_id(), responder);
      SmallCache::GetIntValueCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetIntValue(callback);
      return true;
    }
  }
  return false;
}

class UnionInterface_Echo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UnionInterface_Echo_ForwardToCallback(
      const UnionInterface::EchoCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UnionInterface::EchoCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UnionInterface_Echo_ForwardToCallback);
};
bool UnionInterface_Echo_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UnionInterface_Echo_ResponseParams_Data* params =
      reinterpret_cast<internal::UnionInterface_Echo_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  PodUnionPtr p_out_val {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (!params->out_val.is_null()) {
      p_out_val = PodUnion::New();
      Deserialize_(&params->out_val, p_out_val.get());
    }
  } while (false);
  callback_.Run(p_out_val.Pass());
  return true;
}

UnionInterfaceProxy::UnionInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void UnionInterfaceProxy::Echo(
    PodUnionPtr in_in_val, const EchoCallback& callback) {
  size_t size = sizeof(internal::UnionInterface_Echo_Params_Data);
  size += GetSerializedSize_(in_in_val);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UnionInterface_Base::MessageOrdinals::Echo), size);

  internal::UnionInterface_Echo_Params_Data* params =
      internal::UnionInterface_Echo_Params_Data::New(builder.buffer());
  internal::PodUnion_Data* in_val_ptr = &params->in_val;
  {
      SerializeUnion_(in_in_val.get(),
                      builder.buffer(),
                      &in_val_ptr);
  }
  if (params->in_val.is_null()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null in_val in UnionInterface.Echo request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UnionInterface_Echo_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UnionInterface_Echo_ProxyToResponder
    : public UnionInterface::EchoCallback::Runnable {
 public:
  ~UnionInterface_Echo_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UnionInterface::Echo(p_in_val.Pass(), callback) "
        "was never run.";
  }

  UnionInterface_Echo_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(PodUnionPtr in_out_val) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UnionInterface_Echo_ProxyToResponder);
};

void UnionInterface_Echo_ProxyToResponder::Run(
    PodUnionPtr in_out_val) const {
  size_t size = sizeof(internal::UnionInterface_Echo_ResponseParams_Data);
  size += GetSerializedSize_(in_out_val);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UnionInterface_Base::MessageOrdinals::Echo), size, request_id_);
  internal::UnionInterface_Echo_ResponseParams_Data* params =
      internal::UnionInterface_Echo_ResponseParams_Data::New(builder.buffer());
  internal::PodUnion_Data* out_val_ptr = &params->out_val;
  {
      SerializeUnion_(in_out_val.get(),
                      builder.buffer(),
                      &out_val_ptr);
  }
  if (params->out_val.is_null()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null out_val in UnionInterface.Echo response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

UnionInterfaceStub::UnionInterfaceStub()
    : sink_(nullptr),
      control_message_handler_(UnionInterface::Version_) {
}

UnionInterfaceStub::~UnionInterfaceStub() {}

bool UnionInterfaceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::UnionInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UnionInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UnionInterface_Base::MessageOrdinals::Echo: {
      break;
    }
  }
  return false;
}

bool UnionInterfaceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::UnionInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UnionInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UnionInterface_Base::MessageOrdinals::Echo: {
      internal::UnionInterface_Echo_Params_Data* params =
          reinterpret_cast<internal::UnionInterface_Echo_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UnionInterface::EchoCallback::Runnable* runnable =
          new UnionInterface_Echo_ProxyToResponder(
              message->request_id(), responder);
      UnionInterface::EchoCallback callback(runnable);
      
      PodUnionPtr p_in_val {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (!params->in_val.is_null()) {
          p_in_val = PodUnion::New();
          Deserialize_(&params->in_val, p_in_val.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Echo(p_in_val.Pass(), callback);
      return true;
    }
  }
  return false;
}

}  // namespace test
}  // namespace mojo
