// NOTE: This file was generated by the Mojo bindings generator.
#include "services/js/system/tests/js_to_cpp.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace js_to_cpp {

// --- Interface definitions ---

CppSideProxy::CppSideProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CppSideProxy::StartTest(
    ) {
  size_t size = sizeof(internal::CppSide_StartTest_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::StartTest), size);

  internal::CppSide_StartTest_Params_Data* params =
      internal::CppSide_StartTest_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void CppSideProxy::TestFinished(
    ) {
  size_t size = sizeof(internal::CppSide_TestFinished_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::TestFinished), size);

  internal::CppSide_TestFinished_Params_Data* params =
      internal::CppSide_TestFinished_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void CppSideProxy::PingResponse(
    ) {
  size_t size = sizeof(internal::CppSide_PingResponse_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::PingResponse), size);

  internal::CppSide_PingResponse_Params_Data* params =
      internal::CppSide_PingResponse_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void CppSideProxy::EchoResponse(
    EchoArgsListPtr in_list) {
  size_t size = sizeof(internal::CppSide_EchoResponse_Params_Data);
  size += in_list.is_null()
              ? 0
              : GetSerializedSize_(*in_list);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::EchoResponse), size);

  internal::CppSide_EchoResponse_Params_Data* params =
      internal::CppSide_EchoResponse_Params_Data::New(builder.buffer());
  {Serialize_(in_list.get(),
               builder.buffer(),
               &params->list.ptr);
  }
  if (!params->list.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null list in CppSide.EchoResponse request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void CppSideProxy::BitFlipResponse(
    EchoArgsListPtr in_arg) {
  size_t size = sizeof(internal::CppSide_BitFlipResponse_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::BitFlipResponse), size);

  internal::CppSide_BitFlipResponse_Params_Data* params =
      internal::CppSide_BitFlipResponse_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &params->arg.ptr);
  }
  if (!params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in CppSide.BitFlipResponse request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void CppSideProxy::BackPointerResponse(
    EchoArgsListPtr in_arg) {
  size_t size = sizeof(internal::CppSide_BackPointerResponse_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::BackPointerResponse), size);

  internal::CppSide_BackPointerResponse_Params_Data* params =
      internal::CppSide_BackPointerResponse_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &params->arg.ptr);
  }
  if (!params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in CppSide.BackPointerResponse request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

CppSideStub::CppSideStub()
    : sink_(nullptr),
      control_message_handler_(CppSide::Version_) {
}

CppSideStub::~CppSideStub() {}

bool CppSideStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::CppSide_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CppSide_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CppSide_Base::MessageOrdinals::StartTest: {
      internal::CppSide_StartTest_Params_Data* params =
          reinterpret_cast<internal::CppSide_StartTest_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StartTest();
      return true;
    }
    case internal::CppSide_Base::MessageOrdinals::TestFinished: {
      internal::CppSide_TestFinished_Params_Data* params =
          reinterpret_cast<internal::CppSide_TestFinished_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->TestFinished();
      return true;
    }
    case internal::CppSide_Base::MessageOrdinals::PingResponse: {
      internal::CppSide_PingResponse_Params_Data* params =
          reinterpret_cast<internal::CppSide_PingResponse_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->PingResponse();
      return true;
    }
    case internal::CppSide_Base::MessageOrdinals::EchoResponse: {
      internal::CppSide_EchoResponse_Params_Data* params =
          reinterpret_cast<internal::CppSide_EchoResponse_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      EchoArgsListPtr p_list {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->list.ptr) {
          p_list = EchoArgsList::New();
          Deserialize_(params->list.ptr, p_list.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->EchoResponse(p_list.Pass());
      return true;
    }
    case internal::CppSide_Base::MessageOrdinals::BitFlipResponse: {
      internal::CppSide_BitFlipResponse_Params_Data* params =
          reinterpret_cast<internal::CppSide_BitFlipResponse_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      EchoArgsListPtr p_arg {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->arg.ptr) {
          p_arg = EchoArgsList::New();
          Deserialize_(params->arg.ptr, p_arg.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->BitFlipResponse(p_arg.Pass());
      return true;
    }
    case internal::CppSide_Base::MessageOrdinals::BackPointerResponse: {
      internal::CppSide_BackPointerResponse_Params_Data* params =
          reinterpret_cast<internal::CppSide_BackPointerResponse_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      EchoArgsListPtr p_arg {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->arg.ptr) {
          p_arg = EchoArgsList::New();
          Deserialize_(params->arg.ptr, p_arg.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->BackPointerResponse(p_arg.Pass());
      return true;
    }
  }
  return false;
}

bool CppSideStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::CppSide_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CppSide_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CppSide_Base::MessageOrdinals::StartTest: {
      break;
    }
    case internal::CppSide_Base::MessageOrdinals::TestFinished: {
      break;
    }
    case internal::CppSide_Base::MessageOrdinals::PingResponse: {
      break;
    }
    case internal::CppSide_Base::MessageOrdinals::EchoResponse: {
      break;
    }
    case internal::CppSide_Base::MessageOrdinals::BitFlipResponse: {
      break;
    }
    case internal::CppSide_Base::MessageOrdinals::BackPointerResponse: {
      break;
    }
  }
  return false;
}


JsSideProxy::JsSideProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void JsSideProxy::SetCppSide(
    mojo::InterfaceHandle<CppSide> in_cpp) {
  size_t size = sizeof(internal::JsSide_SetCppSide_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::SetCppSide), size);

  internal::JsSide_SetCppSide_Params_Data* params =
      internal::JsSide_SetCppSide_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_cpp.Pass(),
                                        &params->cpp);
  if (!params->cpp.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid cpp in JsSide.SetCppSide request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void JsSideProxy::Ping(
    ) {
  size_t size = sizeof(internal::JsSide_Ping_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::Ping), size);

  internal::JsSide_Ping_Params_Data* params =
      internal::JsSide_Ping_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void JsSideProxy::Echo(
    int32_t in_numIterations, EchoArgsPtr in_arg) {
  size_t size = sizeof(internal::JsSide_Echo_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::Echo), size);

  internal::JsSide_Echo_Params_Data* params =
      internal::JsSide_Echo_Params_Data::New(builder.buffer());
  params->numIterations = in_numIterations;
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &params->arg.ptr);
  }
  if (!params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in JsSide.Echo request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void JsSideProxy::BitFlip(
    EchoArgsPtr in_arg) {
  size_t size = sizeof(internal::JsSide_BitFlip_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::BitFlip), size);

  internal::JsSide_BitFlip_Params_Data* params =
      internal::JsSide_BitFlip_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &params->arg.ptr);
  }
  if (!params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in JsSide.BitFlip request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void JsSideProxy::BackPointer(
    EchoArgsPtr in_arg) {
  size_t size = sizeof(internal::JsSide_BackPointer_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::BackPointer), size);

  internal::JsSide_BackPointer_Params_Data* params =
      internal::JsSide_BackPointer_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &params->arg.ptr);
  }
  if (!params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in JsSide.BackPointer request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

JsSideStub::JsSideStub()
    : sink_(nullptr),
      control_message_handler_(JsSide::Version_) {
}

JsSideStub::~JsSideStub() {}

bool JsSideStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::JsSide_Base::MessageOrdinals method_ordinal =
      static_cast<internal::JsSide_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::JsSide_Base::MessageOrdinals::SetCppSide: {
      internal::JsSide_SetCppSide_Params_Data* params =
          reinterpret_cast<internal::JsSide_SetCppSide_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<CppSide> p_cpp {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->cpp, &p_cpp);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetCppSide(p_cpp.Pass());
      return true;
    }
    case internal::JsSide_Base::MessageOrdinals::Ping: {
      internal::JsSide_Ping_Params_Data* params =
          reinterpret_cast<internal::JsSide_Ping_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Ping();
      return true;
    }
    case internal::JsSide_Base::MessageOrdinals::Echo: {
      internal::JsSide_Echo_Params_Data* params =
          reinterpret_cast<internal::JsSide_Echo_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_numIterations {};
      EchoArgsPtr p_arg {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_numIterations = params->numIterations;
        if (params->arg.ptr) {
          p_arg = EchoArgs::New();
          Deserialize_(params->arg.ptr, p_arg.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Echo(p_numIterations, p_arg.Pass());
      return true;
    }
    case internal::JsSide_Base::MessageOrdinals::BitFlip: {
      internal::JsSide_BitFlip_Params_Data* params =
          reinterpret_cast<internal::JsSide_BitFlip_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      EchoArgsPtr p_arg {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->arg.ptr) {
          p_arg = EchoArgs::New();
          Deserialize_(params->arg.ptr, p_arg.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->BitFlip(p_arg.Pass());
      return true;
    }
    case internal::JsSide_Base::MessageOrdinals::BackPointer: {
      internal::JsSide_BackPointer_Params_Data* params =
          reinterpret_cast<internal::JsSide_BackPointer_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      EchoArgsPtr p_arg {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->arg.ptr) {
          p_arg = EchoArgs::New();
          Deserialize_(params->arg.ptr, p_arg.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->BackPointer(p_arg.Pass());
      return true;
    }
  }
  return false;
}

bool JsSideStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::JsSide_Base::MessageOrdinals method_ordinal =
      static_cast<internal::JsSide_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::JsSide_Base::MessageOrdinals::SetCppSide: {
      break;
    }
    case internal::JsSide_Base::MessageOrdinals::Ping: {
      break;
    }
    case internal::JsSide_Base::MessageOrdinals::Echo: {
      break;
    }
    case internal::JsSide_Base::MessageOrdinals::BitFlip: {
      break;
    }
    case internal::JsSide_Base::MessageOrdinals::BackPointer: {
      break;
    }
  }
  return false;
}

}  // namespace js_to_cpp
