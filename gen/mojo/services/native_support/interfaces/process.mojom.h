// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_H_
#define MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/native_support/interfaces/process.mojom-common.h"
#include "mojo/services/files/interfaces/file.mojom.h"
#include "mojo/services/files/interfaces/types.mojom.h"
namespace native_support {

// --- Interface Forward Declarations ---

using ProcessPtr = mojo::InterfacePtr<Process>;

using ProcessControllerPtr = mojo::InterfacePtr<ProcessController>;


// --- Interface Proxies ---


class ProcessProxy
    : public Process,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit ProcessProxy(mojo::MessageReceiverWithResponder* receiver);
  void Spawn(
      mojo::Array<uint8_t> path, mojo::Array<mojo::Array<uint8_t> > argv, mojo::Array<mojo::Array<uint8_t> > envp, mojo::InterfaceHandle<mojo::files::File> stdin_file, mojo::InterfaceHandle<mojo::files::File> stdout_file, mojo::InterfaceHandle<mojo::files::File> stderr_file, mojo::InterfaceRequest<ProcessController> process_controller, const SpawnCallback& callback
  ) override;
  void SpawnWithTerminal(
      mojo::Array<uint8_t> path, mojo::Array<mojo::Array<uint8_t> > argv, mojo::Array<mojo::Array<uint8_t> > envp, mojo::InterfaceHandle<mojo::files::File> terminal_file, mojo::InterfaceRequest<ProcessController> process_controller, const SpawnWithTerminalCallback& callback
  ) override;
};


class ProcessControllerProxy
    : public ProcessController,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit ProcessControllerProxy(mojo::MessageReceiverWithResponder* receiver);
  void Wait(
      const WaitCallback& callback
  ) override;
  void Kill(
      int32_t signal, const KillCallback& callback
  ) override;
};


// --- Interface Stubs ---

class ProcessStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  ProcessStub();
  ~ProcessStub() override;
  void set_sink(Process* sink) { sink_ = sink; }
  Process* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  Process* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class ProcessControllerStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  ProcessControllerStub();
  ~ProcessControllerStub() override;
  void set_sink(ProcessController* sink) { sink_ = sink; }
  ProcessController* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  ProcessController* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace native_support

#endif  // MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_H_
