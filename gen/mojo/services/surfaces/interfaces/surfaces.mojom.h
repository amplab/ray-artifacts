// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_H_
#define MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/surfaces/interfaces/surfaces.mojom-common.h"
#include "mojo/services/geometry/interfaces/geometry.mojom.h"
#include "mojo/services/surfaces/interfaces/quads.mojom.h"
#include "mojo/services/surfaces/interfaces/surface_id.mojom.h"
namespace mojo {

// --- Interface Forward Declarations ---

using ResourceReturnerPtr = mojo::InterfacePtr<ResourceReturner>;

using SurfacePtr = mojo::InterfacePtr<Surface>;


// --- Interface Proxies ---


class ResourceReturnerProxy
    : public ResourceReturner,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit ResourceReturnerProxy(mojo::MessageReceiverWithResponder* receiver);
  void ReturnResources(
      mojo::Array<ReturnedResourcePtr> resources
  ) override;
};


class SurfaceProxy
    : public Surface,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit SurfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  void GetIdNamespace(
      const GetIdNamespaceCallback& callback
  ) override;
  void SetResourceReturner(
      mojo::InterfaceHandle<ResourceReturner> returner
  ) override;
  void CreateSurface(
      uint32_t id_local
  ) override;
  void SubmitFrame(
      uint32_t id_local, FramePtr frame, const SubmitFrameCallback& callback
  ) override;
  void DestroySurface(
      uint32_t id_local
  ) override;
};


// --- Interface Stubs ---

class ResourceReturnerStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  ResourceReturnerStub();
  ~ResourceReturnerStub() override;
  void set_sink(ResourceReturner* sink) { sink_ = sink; }
  ResourceReturner* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  ResourceReturner* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class SurfaceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  SurfaceStub();
  ~SurfaceStub() override;
  void set_sink(Surface* sink) { sink_ = sink; }
  Surface* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  Surface* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_H_
