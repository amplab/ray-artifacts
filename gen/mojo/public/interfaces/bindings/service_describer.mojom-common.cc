// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/service_describer.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {
namespace bindings {
namespace types {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
ServiceDescriber_DescribeService_Params_Data* ServiceDescriber_DescribeService_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceDescriber_DescribeService_Params_Data))) ServiceDescriber_DescribeService_Params_Data();
}

// static
mojo::internal::ValidationError ServiceDescriber_DescribeService_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceDescriber_DescribeService_Params_Data* object = static_cast<const ServiceDescriber_DescribeService_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->interface_name.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null interface_name field in ServiceDescriber_DescribeService_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->interface_name.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams interface_name_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->interface_name.offset),
          bounds_checker, &interface_name_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle description_request_handle = object->description_request;
  if (description_request_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid description_request field in ServiceDescriber_DescribeService_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(description_request_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceDescriber_DescribeService_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->interface_name, handles);
  mojo::internal::EncodeHandle(&this->description_request, handles);
}

void ServiceDescriber_DescribeService_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->interface_name, handles);
  mojo::internal::DecodeHandle(&this->description_request, handles);
}

ServiceDescriber_DescribeService_Params_Data::ServiceDescriber_DescribeService_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
ServiceDescription_GetTopLevelInterface_Params_Data* ServiceDescription_GetTopLevelInterface_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceDescription_GetTopLevelInterface_Params_Data))) ServiceDescription_GetTopLevelInterface_Params_Data();
}

// static
mojo::internal::ValidationError ServiceDescription_GetTopLevelInterface_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceDescription_GetTopLevelInterface_Params_Data* object = static_cast<const ServiceDescription_GetTopLevelInterface_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceDescription_GetTopLevelInterface_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ServiceDescription_GetTopLevelInterface_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ServiceDescription_GetTopLevelInterface_Params_Data::ServiceDescription_GetTopLevelInterface_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ServiceDescription_GetTopLevelInterface_ResponseParams_Data* ServiceDescription_GetTopLevelInterface_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceDescription_GetTopLevelInterface_ResponseParams_Data))) ServiceDescription_GetTopLevelInterface_ResponseParams_Data();
}

// static
mojo::internal::ValidationError ServiceDescription_GetTopLevelInterface_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceDescription_GetTopLevelInterface_ResponseParams_Data* object = static_cast<const ServiceDescription_GetTopLevelInterface_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->mojomInterface.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null mojomInterface field in ServiceDescription_GetTopLevelInterface_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->mojomInterface.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::bindings::types::MojomInterface::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->mojomInterface.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceDescription_GetTopLevelInterface_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->mojomInterface, handles);
}

void ServiceDescription_GetTopLevelInterface_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->mojomInterface, handles);
}

ServiceDescription_GetTopLevelInterface_ResponseParams_Data::ServiceDescription_GetTopLevelInterface_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
ServiceDescription_GetTypeDefinition_Params_Data* ServiceDescription_GetTypeDefinition_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceDescription_GetTypeDefinition_Params_Data))) ServiceDescription_GetTypeDefinition_Params_Data();
}

// static
mojo::internal::ValidationError ServiceDescription_GetTypeDefinition_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceDescription_GetTypeDefinition_Params_Data* object = static_cast<const ServiceDescription_GetTypeDefinition_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->type_key.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null type_key field in ServiceDescription_GetTypeDefinition_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->type_key.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams type_key_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->type_key.offset),
          bounds_checker, &type_key_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceDescription_GetTypeDefinition_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->type_key, handles);
}

void ServiceDescription_GetTypeDefinition_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->type_key, handles);
}

ServiceDescription_GetTypeDefinition_Params_Data::ServiceDescription_GetTypeDefinition_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ServiceDescription_GetTypeDefinition_ResponseParams_Data* ServiceDescription_GetTypeDefinition_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceDescription_GetTypeDefinition_ResponseParams_Data))) ServiceDescription_GetTypeDefinition_ResponseParams_Data();
}

// static
mojo::internal::ValidationError ServiceDescription_GetTypeDefinition_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceDescription_GetTypeDefinition_ResponseParams_Data* object = static_cast<const ServiceDescription_GetTypeDefinition_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  auto validate_retval = mojo::bindings::types::UserDefinedType::Data_::Validate(
          &object->type, bounds_checker, true, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceDescription_GetTypeDefinition_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  type.EncodePointersAndHandles(handles);
}

void ServiceDescription_GetTypeDefinition_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  type.DecodePointersAndHandles(handles);
}

ServiceDescription_GetTypeDefinition_ResponseParams_Data::ServiceDescription_GetTypeDefinition_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
ServiceDescription_GetAllTypeDefinitions_Params_Data* ServiceDescription_GetAllTypeDefinitions_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceDescription_GetAllTypeDefinitions_Params_Data))) ServiceDescription_GetAllTypeDefinitions_Params_Data();
}

// static
mojo::internal::ValidationError ServiceDescription_GetAllTypeDefinitions_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceDescription_GetAllTypeDefinitions_Params_Data* object = static_cast<const ServiceDescription_GetAllTypeDefinitions_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceDescription_GetAllTypeDefinitions_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ServiceDescription_GetAllTypeDefinitions_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ServiceDescription_GetAllTypeDefinitions_Params_Data::ServiceDescription_GetAllTypeDefinitions_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data))) ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data();
}

// static
mojo::internal::ValidationError ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* object = static_cast<const ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->definitions.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams definitions_validate_params(
      0, false, nullptr);
  auto validate_retval = mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr>::Data_::Validate(
              mojo::internal::DecodePointerRaw(&object->definitions.offset),
              bounds_checker, &definitions_validate_params, err); 
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->definitions, handles);
}

void ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->definitions, handles);
}

ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError ServiceDescriberRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'ServiceDescriber', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::ServiceDescriber_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceDescriber_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceDescriber_Base::MessageOrdinals::DescribeService: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'ServiceDescriber', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::ServiceDescriber_DescribeService_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'ServiceDescriber', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'ServiceDescriber'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError ServiceDescriptionRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'ServiceDescription', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::ServiceDescription_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceDescription_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceDescription_Base::MessageOrdinals::GetTopLevelInterface: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'ServiceDescription', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::ServiceDescription_GetTopLevelInterface_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'ServiceDescription', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetTypeDefinition: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'ServiceDescription', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::ServiceDescription_GetTypeDefinition_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'ServiceDescription', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetAllTypeDefinitions: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'ServiceDescription', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::ServiceDescription_GetAllTypeDefinitions_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'ServiceDescription', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'ServiceDescription'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError ServiceDescriptionResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'ServiceDescription', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'ServiceDescription', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::ServiceDescription_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceDescription_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceDescription_Base::MessageOrdinals::GetTopLevelInterface: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'ServiceDescription',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetTypeDefinition: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'ServiceDescription',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::ServiceDescription_Base::MessageOrdinals::GetAllTypeDefinitions: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'ServiceDescription',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'ServiceDescription'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::ServiceDescriber_Base::Name_[] = "mojo::bindings::types::ServiceDescriber";
const uint32_t internal::ServiceDescriber_Base::Version_;

// Constants

// Enums
const uint32_t internal::ServiceDescription_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
ServiceDescriber_DescribeService_ParamsPtr ServiceDescriber_DescribeService_Params::New() {
  ServiceDescriber_DescribeService_ParamsPtr rv;
  mojo::internal::StructHelper<ServiceDescriber_DescribeService_Params>::Initialize(&rv);
  return rv;
}

ServiceDescriber_DescribeService_Params::ServiceDescriber_DescribeService_Params()
    : interface_name(),
      description_request() {
}

ServiceDescriber_DescribeService_Params::~ServiceDescriber_DescribeService_Params() {
}



bool ServiceDescriber_DescribeService_Params::Equals(const ServiceDescriber_DescribeService_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->interface_name, other.interface_name))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<ServiceDescription>>::Equals(this->description_request, other.description_request))
    return false;
  return true;
}


size_t ServiceDescriber_DescribeService_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceDescriber_DescribeService_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceDescriber_DescribeService_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceDescriber_DescribeService_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceDescriber_DescribeService_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceDescriber_DescribeService_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceDescriber_DescribeService_Params_Data* input =
      static_cast<internal::ServiceDescriber_DescribeService_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceDescriber_DescribeService_Params& input) {
  size_t size = sizeof(internal::ServiceDescriber_DescribeService_Params_Data);
  size += GetSerializedSize_(input.interface_name);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceDescriber_DescribeService_Params* input,
    mojo::internal::Buffer* buf,
    internal::ServiceDescriber_DescribeService_Params_Data** output) {
  if (input) {
    internal::ServiceDescriber_DescribeService_Params_Data* result =
        internal::ServiceDescriber_DescribeService_Params_Data::New(buf);
    SerializeString_(input->interface_name, buf, &result->interface_name.ptr);
    if (!result->interface_name.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null interface_name in ServiceDescriber_DescribeService_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->description_request = input->description_request.PassMessagePipe().release();
    if (!result->description_request.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid description_request in ServiceDescriber_DescribeService_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceDescriber_DescribeService_Params_Data* input,
                  ServiceDescriber_DescribeService_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->interface_name.ptr, &result->interface_name);
      result->description_request.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->description_request)));
    } while (false);
  }
}



// static
ServiceDescription_GetTopLevelInterface_ParamsPtr ServiceDescription_GetTopLevelInterface_Params::New() {
  ServiceDescription_GetTopLevelInterface_ParamsPtr rv;
  mojo::internal::StructHelper<ServiceDescription_GetTopLevelInterface_Params>::Initialize(&rv);
  return rv;
}

ServiceDescription_GetTopLevelInterface_Params::ServiceDescription_GetTopLevelInterface_Params() {
}

ServiceDescription_GetTopLevelInterface_Params::~ServiceDescription_GetTopLevelInterface_Params() {
}


ServiceDescription_GetTopLevelInterface_ParamsPtr ServiceDescription_GetTopLevelInterface_Params::Clone() const {
  ServiceDescription_GetTopLevelInterface_ParamsPtr rv(New());
  return rv;
}


bool ServiceDescription_GetTopLevelInterface_Params::Equals(const ServiceDescription_GetTopLevelInterface_Params& other) const {
  return true;
}


size_t ServiceDescription_GetTopLevelInterface_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceDescription_GetTopLevelInterface_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceDescription_GetTopLevelInterface_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceDescription_GetTopLevelInterface_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceDescription_GetTopLevelInterface_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceDescription_GetTopLevelInterface_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceDescription_GetTopLevelInterface_Params_Data* input =
      static_cast<internal::ServiceDescription_GetTopLevelInterface_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceDescription_GetTopLevelInterface_Params& input) {
  size_t size = sizeof(internal::ServiceDescription_GetTopLevelInterface_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTopLevelInterface_Params* input,
    mojo::internal::Buffer* buf,
    internal::ServiceDescription_GetTopLevelInterface_Params_Data** output) {
  if (input) {
    internal::ServiceDescription_GetTopLevelInterface_Params_Data* result =
        internal::ServiceDescription_GetTopLevelInterface_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceDescription_GetTopLevelInterface_Params_Data* input,
                  ServiceDescription_GetTopLevelInterface_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
ServiceDescription_GetTopLevelInterface_ResponseParamsPtr ServiceDescription_GetTopLevelInterface_ResponseParams::New() {
  ServiceDescription_GetTopLevelInterface_ResponseParamsPtr rv;
  mojo::internal::StructHelper<ServiceDescription_GetTopLevelInterface_ResponseParams>::Initialize(&rv);
  return rv;
}

ServiceDescription_GetTopLevelInterface_ResponseParams::ServiceDescription_GetTopLevelInterface_ResponseParams()
    : mojomInterface() {
}

ServiceDescription_GetTopLevelInterface_ResponseParams::~ServiceDescription_GetTopLevelInterface_ResponseParams() {
}


ServiceDescription_GetTopLevelInterface_ResponseParamsPtr ServiceDescription_GetTopLevelInterface_ResponseParams::Clone() const {
  ServiceDescription_GetTopLevelInterface_ResponseParamsPtr rv(New());
  rv->mojomInterface = mojomInterface.Clone();
  return rv;
}


bool ServiceDescription_GetTopLevelInterface_ResponseParams::Equals(const ServiceDescription_GetTopLevelInterface_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::bindings::types::MojomInterfacePtr>::Equals(this->mojomInterface, other.mojomInterface))
    return false;
  return true;
}


size_t ServiceDescription_GetTopLevelInterface_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceDescription_GetTopLevelInterface_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceDescription_GetTopLevelInterface_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceDescription_GetTopLevelInterface_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data* input =
      static_cast<internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceDescription_GetTopLevelInterface_ResponseParams& input) {
  size_t size = sizeof(internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data);
  size += input.mojomInterface.is_null()
              ? 0
              : GetSerializedSize_(*input.mojomInterface);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTopLevelInterface_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data** output) {
  if (input) {
    internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data* result =
        internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->mojomInterface.get(),
                 buf,
                 &result->mojomInterface.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->mojomInterface.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null mojomInterface in ServiceDescription_GetTopLevelInterface_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceDescription_GetTopLevelInterface_ResponseParams_Data* input,
                  ServiceDescription_GetTopLevelInterface_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->mojomInterface.ptr) {
        result->mojomInterface = mojo::bindings::types::MojomInterface::New();
        Deserialize_(input->mojomInterface.ptr, result->mojomInterface.get());
      }
    } while (false);
  }
}



// static
ServiceDescription_GetTypeDefinition_ParamsPtr ServiceDescription_GetTypeDefinition_Params::New() {
  ServiceDescription_GetTypeDefinition_ParamsPtr rv;
  mojo::internal::StructHelper<ServiceDescription_GetTypeDefinition_Params>::Initialize(&rv);
  return rv;
}

ServiceDescription_GetTypeDefinition_Params::ServiceDescription_GetTypeDefinition_Params()
    : type_key() {
}

ServiceDescription_GetTypeDefinition_Params::~ServiceDescription_GetTypeDefinition_Params() {
}


ServiceDescription_GetTypeDefinition_ParamsPtr ServiceDescription_GetTypeDefinition_Params::Clone() const {
  ServiceDescription_GetTypeDefinition_ParamsPtr rv(New());
  rv->type_key = type_key;
  return rv;
}


bool ServiceDescription_GetTypeDefinition_Params::Equals(const ServiceDescription_GetTypeDefinition_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->type_key, other.type_key))
    return false;
  return true;
}


size_t ServiceDescription_GetTypeDefinition_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceDescription_GetTypeDefinition_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceDescription_GetTypeDefinition_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceDescription_GetTypeDefinition_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceDescription_GetTypeDefinition_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceDescription_GetTypeDefinition_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceDescription_GetTypeDefinition_Params_Data* input =
      static_cast<internal::ServiceDescription_GetTypeDefinition_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceDescription_GetTypeDefinition_Params& input) {
  size_t size = sizeof(internal::ServiceDescription_GetTypeDefinition_Params_Data);
  size += GetSerializedSize_(input.type_key);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTypeDefinition_Params* input,
    mojo::internal::Buffer* buf,
    internal::ServiceDescription_GetTypeDefinition_Params_Data** output) {
  if (input) {
    internal::ServiceDescription_GetTypeDefinition_Params_Data* result =
        internal::ServiceDescription_GetTypeDefinition_Params_Data::New(buf);
    SerializeString_(input->type_key, buf, &result->type_key.ptr);
    if (!result->type_key.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null type_key in ServiceDescription_GetTypeDefinition_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceDescription_GetTypeDefinition_Params_Data* input,
                  ServiceDescription_GetTypeDefinition_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->type_key.ptr, &result->type_key);
    } while (false);
  }
}


// static
ServiceDescription_GetTypeDefinition_ResponseParamsPtr ServiceDescription_GetTypeDefinition_ResponseParams::New() {
  ServiceDescription_GetTypeDefinition_ResponseParamsPtr rv;
  mojo::internal::StructHelper<ServiceDescription_GetTypeDefinition_ResponseParams>::Initialize(&rv);
  return rv;
}

ServiceDescription_GetTypeDefinition_ResponseParams::ServiceDescription_GetTypeDefinition_ResponseParams()
    : type() {
}

ServiceDescription_GetTypeDefinition_ResponseParams::~ServiceDescription_GetTypeDefinition_ResponseParams() {
}


ServiceDescription_GetTypeDefinition_ResponseParamsPtr ServiceDescription_GetTypeDefinition_ResponseParams::Clone() const {
  ServiceDescription_GetTypeDefinition_ResponseParamsPtr rv(New());
  rv->type = type.Clone();
  return rv;
}


bool ServiceDescription_GetTypeDefinition_ResponseParams::Equals(const ServiceDescription_GetTypeDefinition_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::bindings::types::UserDefinedTypePtr>::Equals(this->type, other.type))
    return false;
  return true;
}


size_t ServiceDescription_GetTypeDefinition_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceDescription_GetTypeDefinition_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceDescription_GetTypeDefinition_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceDescription_GetTypeDefinition_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data* input =
      static_cast<internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceDescription_GetTypeDefinition_ResponseParams& input) {
  size_t size = sizeof(internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data);
  size += GetSerializedSize_(input.type);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetTypeDefinition_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data** output) {
  if (input) {
    internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data* result =
        internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data::New(buf);
    internal::UserDefinedType_Data* type_ptr = &result->type;
    {
      auto retval =
        SerializeUnion_(input->type.get(),
                        buf,
                        &type_ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceDescription_GetTypeDefinition_ResponseParams_Data* input,
                  ServiceDescription_GetTypeDefinition_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (!input->type.is_null()) {
        result->type = mojo::bindings::types::UserDefinedType::New();
        Deserialize_(&input->type, result->type.get());
      }
    } while (false);
  }
}



// static
ServiceDescription_GetAllTypeDefinitions_ParamsPtr ServiceDescription_GetAllTypeDefinitions_Params::New() {
  ServiceDescription_GetAllTypeDefinitions_ParamsPtr rv;
  mojo::internal::StructHelper<ServiceDescription_GetAllTypeDefinitions_Params>::Initialize(&rv);
  return rv;
}

ServiceDescription_GetAllTypeDefinitions_Params::ServiceDescription_GetAllTypeDefinitions_Params() {
}

ServiceDescription_GetAllTypeDefinitions_Params::~ServiceDescription_GetAllTypeDefinitions_Params() {
}


ServiceDescription_GetAllTypeDefinitions_ParamsPtr ServiceDescription_GetAllTypeDefinitions_Params::Clone() const {
  ServiceDescription_GetAllTypeDefinitions_ParamsPtr rv(New());
  return rv;
}


bool ServiceDescription_GetAllTypeDefinitions_Params::Equals(const ServiceDescription_GetAllTypeDefinitions_Params& other) const {
  return true;
}


size_t ServiceDescription_GetAllTypeDefinitions_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceDescription_GetAllTypeDefinitions_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceDescription_GetAllTypeDefinitions_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceDescription_GetAllTypeDefinitions_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceDescription_GetAllTypeDefinitions_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceDescription_GetAllTypeDefinitions_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceDescription_GetAllTypeDefinitions_Params_Data* input =
      static_cast<internal::ServiceDescription_GetAllTypeDefinitions_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceDescription_GetAllTypeDefinitions_Params& input) {
  size_t size = sizeof(internal::ServiceDescription_GetAllTypeDefinitions_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetAllTypeDefinitions_Params* input,
    mojo::internal::Buffer* buf,
    internal::ServiceDescription_GetAllTypeDefinitions_Params_Data** output) {
  if (input) {
    internal::ServiceDescription_GetAllTypeDefinitions_Params_Data* result =
        internal::ServiceDescription_GetAllTypeDefinitions_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceDescription_GetAllTypeDefinitions_Params_Data* input,
                  ServiceDescription_GetAllTypeDefinitions_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr ServiceDescription_GetAllTypeDefinitions_ResponseParams::New() {
  ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr rv;
  mojo::internal::StructHelper<ServiceDescription_GetAllTypeDefinitions_ResponseParams>::Initialize(&rv);
  return rv;
}

ServiceDescription_GetAllTypeDefinitions_ResponseParams::ServiceDescription_GetAllTypeDefinitions_ResponseParams()
    : definitions() {
}

ServiceDescription_GetAllTypeDefinitions_ResponseParams::~ServiceDescription_GetAllTypeDefinitions_ResponseParams() {
}


ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr ServiceDescription_GetAllTypeDefinitions_ResponseParams::Clone() const {
  ServiceDescription_GetAllTypeDefinitions_ResponseParamsPtr rv(New());
  rv->definitions = definitions.Clone();
  return rv;
}


bool ServiceDescription_GetAllTypeDefinitions_ResponseParams::Equals(const ServiceDescription_GetAllTypeDefinitions_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::Map<mojo::String, mojo::bindings::types::UserDefinedTypePtr>>::Equals(this->definitions, other.definitions))
    return false;
  return true;
}


size_t ServiceDescription_GetAllTypeDefinitions_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ServiceDescription_GetAllTypeDefinitions_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ServiceDescription_GetAllTypeDefinitions_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ServiceDescription_GetAllTypeDefinitions_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* input =
      static_cast<internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ServiceDescription_GetAllTypeDefinitions_ResponseParams& input) {
  size_t size = sizeof(internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data);
  size += GetSerializedSize_(input.definitions);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ServiceDescription_GetAllTypeDefinitions_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data** output) {
  if (input) {
    internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* result =
        internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams definitions_validate_params(
          0, false, nullptr);auto retval =mojo::SerializeMap_(
          &input->definitions, buf, &result->definitions.ptr,
          &definitions_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ServiceDescription_GetAllTypeDefinitions_ResponseParams_Data* input,
                  ServiceDescription_GetAllTypeDefinitions_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->definitions.ptr, &result->definitions);
    } while (false);
  }
}

}  // namespace types
}  // namespace bindings
}  // namespace mojo
