// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library test_interfaces_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _DummyFooParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _DummyFooParams() : super(kVersions.last.size);

  _DummyFooParams.init(
  ) : super(kVersions.last.size);

  static _DummyFooParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DummyFooParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DummyFooParams result = new _DummyFooParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DummyFooParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DummyFooParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _dummyMethodFooName = 0;

class _DummyServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Dummy {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _DummyServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static DummyProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    DummyProxy p = new DummyProxy.unbound();
    String name = serviceName ?? Dummy.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void foo();
}

abstract class DummyInterface
    implements bindings.MojoInterface<Dummy>,
               Dummy {
  factory DummyInterface([Dummy impl]) =>
      new DummyStub.unbound(impl);

  factory DummyInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Dummy impl]) =>
      new DummyStub.fromEndpoint(endpoint, impl);

  factory DummyInterface.fromMock(
      Dummy mock) =>
      new DummyProxy.fromMock(mock);
}

abstract class DummyInterfaceRequest
    implements bindings.MojoInterface<Dummy>,
               Dummy {
  factory DummyInterfaceRequest() =>
      new DummyProxy.unbound();
}

class _DummyProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Dummy> {
  Dummy impl;

  _DummyProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _DummyProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _DummyProxyControl.unbound() : super.unbound();

  String get serviceName => Dummy.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DummyProxyControl($superString)";
  }
}

class DummyProxy
    extends bindings.Proxy<Dummy>
    implements Dummy,
               DummyInterface,
               DummyInterfaceRequest {
  DummyProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _DummyProxyControl.fromEndpoint(endpoint));

  DummyProxy.fromHandle(core.MojoHandle handle)
      : super(new _DummyProxyControl.fromHandle(handle));

  DummyProxy.unbound()
      : super(new _DummyProxyControl.unbound());

  factory DummyProxy.fromMock(Dummy mock) {
    DummyProxy newMockedProxy =
        new DummyProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static DummyProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DummyProxy"));
    return new DummyProxy.fromEndpoint(endpoint);
  }


  void foo() {
    if (impl != null) {
      impl.foo();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _DummyFooParams();
    ctrl.sendMessage(params,
        _dummyMethodFooName);
  }
}

class _DummyStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Dummy> {
  Dummy _impl;

  _DummyStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Dummy impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _DummyStubControl.fromHandle(
      core.MojoHandle handle, [Dummy impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _DummyStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Dummy.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _dummyMethodFooName:
        _impl.foo();
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Dummy get impl => _impl;
  set impl(Dummy d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DummyStubControl($superString)";
  }

  int get version => 0;
}

class DummyStub
    extends bindings.Stub<Dummy>
    implements Dummy,
               DummyInterface,
               DummyInterfaceRequest {
  DummyStub.unbound([Dummy impl])
      : super(new _DummyStubControl.unbound(impl));

  DummyStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Dummy impl])
      : super(new _DummyStubControl.fromEndpoint(endpoint, impl));

  DummyStub.fromHandle(
      core.MojoHandle handle, [Dummy impl])
      : super(new _DummyStubControl.fromHandle(handle, impl));

  static DummyStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DummyStub"));
    return new DummyStub.fromEndpoint(endpoint);
  }


  void foo() {
    return impl.foo();
  }
}



