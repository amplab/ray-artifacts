// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/sample_import2.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace sample {

class Bar;
class Foo;
class DefaultsTest;
class StructWithHoleV1;
class StructWithHoleV2;
class NonNullableMapStruct;


namespace internal {

class Bar_Data;
class Foo_Data;
class DefaultsTest_Data;
class StructWithHoleV1_Data;
class StructWithHoleV2_Data;
class NonNullableMapStruct_Data;



#pragma pack(push, 1)


class Bar_Data {
 public:
  static Bar_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t alpha;
  uint8_t beta;
  uint8_t gamma;
  uint8_t pad2_[1];
  int32_t type;

 private:
  Bar_Data();
  ~Bar_Data() = delete;
};
static_assert(sizeof(Bar_Data) == 16,
              "Bad sizeof(Bar_Data)");

class Foo_Data {
 public:
  static Foo_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t x;
  int32_t y;
  uint8_t a : 1;
  uint8_t b : 1;
  uint8_t c : 1;
  uint8_t pad4_[3];
  mojo::MessagePipeHandle source;
  mojo::internal::StructPointer<internal::Bar_Data> bar;
  mojo::internal::ArrayPointer<uint8_t> data;
  mojo::internal::ArrayPointer<internal::Bar_Data*> extra_bars;
  mojo::internal::StringPointer name;
  mojo::internal::ArrayPointer<mojo::DataPipeConsumerHandle> input_streams;
  mojo::internal::ArrayPointer<mojo::DataPipeProducerHandle> output_streams;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<bool>*> array_of_array_of_bools;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<mojo::internal::Array_Data<mojo::internal::String_Data*>*>*> multi_array_of_strings;
  mojo::internal::ArrayPointer<bool> array_of_bools;

 private:
  Foo_Data();
  ~Foo_Data() = delete;
};
static_assert(sizeof(Foo_Data) == 96,
              "Bad sizeof(Foo_Data)");

class DefaultsTest_Data {
 public:
  static DefaultsTest_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int8_t a0;
  uint8_t a1;
  int16_t a2;
  uint16_t a3;
  uint8_t a11 : 1;
  uint8_t a12 : 1;
  uint8_t pad5_[1];
  int32_t a4;
  uint32_t a5;
  int64_t a6;
  uint64_t a7;
  int32_t a8;
  int32_t a9;
  int32_t a10;
  float a13;
  double a14;
  double a15;
  double a16;
  double a17;
  mojo::internal::ArrayPointer<uint8_t> a18;
  mojo::internal::StringPointer a19;
  int32_t a20;
  float a29;
  mojo::internal::StructPointer<imported::internal::Point_Data> a21;
  mojo::internal::StructPointer<imported::internal::Thing_Data> a22;
  uint64_t a23;
  int64_t a24;
  int64_t a25;
  double a26;
  double a27;
  double a28;
  float a30;
  float a31;

 private:
  DefaultsTest_Data();
  ~DefaultsTest_Data() = delete;
};
static_assert(sizeof(DefaultsTest_Data) == 184,
              "Bad sizeof(DefaultsTest_Data)");

class StructWithHoleV1_Data {
 public:
  static StructWithHoleV1_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t v1;
  uint8_t pad0_[4];
  int64_t v2;

 private:
  StructWithHoleV1_Data();
  ~StructWithHoleV1_Data() = delete;
};
static_assert(sizeof(StructWithHoleV1_Data) == 24,
              "Bad sizeof(StructWithHoleV1_Data)");

class StructWithHoleV2_Data {
 public:
  static StructWithHoleV2_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t v1;
  int32_t v3;
  int64_t v2;

 private:
  StructWithHoleV2_Data();
  ~StructWithHoleV2_Data() = delete;
};
static_assert(sizeof(StructWithHoleV2_Data) == 24,
              "Bad sizeof(StructWithHoleV2_Data)");

class NonNullableMapStruct_Data {
 public:
  static NonNullableMapStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::String_Data*>> map_field;

 private:
  NonNullableMapStruct_Data();
  ~NonNullableMapStruct_Data() = delete;
};
static_assert(sizeof(NonNullableMapStruct_Data) == 16,
              "Bad sizeof(NonNullableMapStruct_Data)");


class Service_Frobinate_Params_Data {
 public:
  static Service_Frobinate_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::Foo_Data> foo;
  int32_t baz;
  mojo::internal::Interface_Data port;
  uint8_t padfinal_[4];

 private:
  Service_Frobinate_Params_Data();
  ~Service_Frobinate_Params_Data() = delete;
};
static_assert(sizeof(Service_Frobinate_Params_Data) == 32,
              "Bad sizeof(Service_Frobinate_Params_Data)");

class Service_Frobinate_ResponseParams_Data {
 public:
  static Service_Frobinate_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  Service_Frobinate_ResponseParams_Data();
  ~Service_Frobinate_ResponseParams_Data() = delete;
};
static_assert(sizeof(Service_Frobinate_ResponseParams_Data) == 16,
              "Bad sizeof(Service_Frobinate_ResponseParams_Data)");


class Service_GetPort_Params_Data {
 public:
  static Service_GetPort_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle port;
  uint8_t padfinal_[4];

 private:
  Service_GetPort_Params_Data();
  ~Service_GetPort_Params_Data() = delete;
};
static_assert(sizeof(Service_GetPort_Params_Data) == 16,
              "Bad sizeof(Service_GetPort_Params_Data)");


class Port_PostMessage_Params_Data {
 public:
  static Port_PostMessage_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer message_text;
  mojo::internal::Interface_Data port;

 private:
  Port_PostMessage_Params_Data();
  ~Port_PostMessage_Params_Data() = delete;
};
static_assert(sizeof(Port_PostMessage_Params_Data) == 24,
              "Bad sizeof(Port_PostMessage_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace sample

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_INTERNAL_H_
