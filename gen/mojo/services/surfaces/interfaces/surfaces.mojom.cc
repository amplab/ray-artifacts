// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/surfaces/interfaces/surfaces.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---

ResourceReturnerProxy::ResourceReturnerProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ResourceReturnerProxy::ReturnResources(
    mojo::Array<ReturnedResourcePtr> in_resources) {
  size_t size = sizeof(internal::ResourceReturner_ReturnResources_Params_Data);
  size += GetSerializedSize_(in_resources);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ResourceReturner_Base::MessageOrdinals::ReturnResources), size);

  internal::ResourceReturner_ReturnResources_Params_Data* params =
      internal::ResourceReturner_ReturnResources_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams resources_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_resources, builder.buffer(), &params->resources.ptr,
                          &resources_validate_params);
  }
  if (!params->resources.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null resources in ResourceReturner.ReturnResources request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ResourceReturnerStub::ResourceReturnerStub()
    : sink_(nullptr),
      control_message_handler_(ResourceReturner::Version_) {
}

ResourceReturnerStub::~ResourceReturnerStub() {}

bool ResourceReturnerStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ResourceReturner_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ResourceReturner_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ResourceReturner_Base::MessageOrdinals::ReturnResources: {
      internal::ResourceReturner_ReturnResources_Params_Data* params =
          reinterpret_cast<internal::ResourceReturner_ReturnResources_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::Array<ReturnedResourcePtr> p_resources {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->resources.ptr, &p_resources);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ReturnResources(p_resources.Pass());
      return true;
    }
  }
  return false;
}

bool ResourceReturnerStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ResourceReturner_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ResourceReturner_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ResourceReturner_Base::MessageOrdinals::ReturnResources: {
      break;
    }
  }
  return false;
}

class Surface_GetIdNamespace_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Surface_GetIdNamespace_ForwardToCallback(
      const Surface::GetIdNamespaceCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Surface::GetIdNamespaceCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Surface_GetIdNamespace_ForwardToCallback);
};
bool Surface_GetIdNamespace_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Surface_GetIdNamespace_ResponseParams_Data* params =
      reinterpret_cast<internal::Surface_GetIdNamespace_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint32_t p_id_namespace {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_id_namespace = params->id_namespace;
  } while (false);
  callback_.Run(p_id_namespace);
  return true;
}
class Surface_SubmitFrame_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Surface_SubmitFrame_ForwardToCallback(
      const Surface::SubmitFrameCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Surface::SubmitFrameCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Surface_SubmitFrame_ForwardToCallback);
};
bool Surface_SubmitFrame_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Surface_SubmitFrame_ResponseParams_Data* params =
      reinterpret_cast<internal::Surface_SubmitFrame_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

SurfaceProxy::SurfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void SurfaceProxy::GetIdNamespace(
    const GetIdNamespaceCallback& callback) {
  size_t size = sizeof(internal::Surface_GetIdNamespace_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Surface_Base::MessageOrdinals::GetIdNamespace), size);

  internal::Surface_GetIdNamespace_Params_Data* params =
      internal::Surface_GetIdNamespace_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Surface_GetIdNamespace_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void SurfaceProxy::SetResourceReturner(
    mojo::InterfaceHandle<ResourceReturner> in_returner) {
  size_t size = sizeof(internal::Surface_SetResourceReturner_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Surface_Base::MessageOrdinals::SetResourceReturner), size);

  internal::Surface_SetResourceReturner_Params_Data* params =
      internal::Surface_SetResourceReturner_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_returner.Pass(),
                                        &params->returner);
  if (!params->returner.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid returner in Surface.SetResourceReturner request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void SurfaceProxy::CreateSurface(
    uint32_t in_id_local) {
  size_t size = sizeof(internal::Surface_CreateSurface_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Surface_Base::MessageOrdinals::CreateSurface), size);

  internal::Surface_CreateSurface_Params_Data* params =
      internal::Surface_CreateSurface_Params_Data::New(builder.buffer());
  params->id_local = in_id_local;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void SurfaceProxy::SubmitFrame(
    uint32_t in_id_local, FramePtr in_frame, const SubmitFrameCallback& callback) {
  size_t size = sizeof(internal::Surface_SubmitFrame_Params_Data);
  size += in_frame.is_null()
              ? 0
              : GetSerializedSize_(*in_frame);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Surface_Base::MessageOrdinals::SubmitFrame), size);

  internal::Surface_SubmitFrame_Params_Data* params =
      internal::Surface_SubmitFrame_Params_Data::New(builder.buffer());
  params->id_local = in_id_local;
  {Serialize_(in_frame.get(),
               builder.buffer(),
               &params->frame.ptr);
  }
  if (!params->frame.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null frame in Surface.SubmitFrame request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Surface_SubmitFrame_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void SurfaceProxy::DestroySurface(
    uint32_t in_id_local) {
  size_t size = sizeof(internal::Surface_DestroySurface_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Surface_Base::MessageOrdinals::DestroySurface), size);

  internal::Surface_DestroySurface_Params_Data* params =
      internal::Surface_DestroySurface_Params_Data::New(builder.buffer());
  params->id_local = in_id_local;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Surface_GetIdNamespace_ProxyToResponder
    : public Surface::GetIdNamespaceCallback::Runnable {
 public:
  ~Surface_GetIdNamespace_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Surface::GetIdNamespace(callback) "
        "was never run.";
  }

  Surface_GetIdNamespace_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint32_t in_id_namespace) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Surface_GetIdNamespace_ProxyToResponder);
};

void Surface_GetIdNamespace_ProxyToResponder::Run(
    uint32_t in_id_namespace) const {
  size_t size = sizeof(internal::Surface_GetIdNamespace_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Surface_Base::MessageOrdinals::GetIdNamespace), size, request_id_);
  internal::Surface_GetIdNamespace_ResponseParams_Data* params =
      internal::Surface_GetIdNamespace_ResponseParams_Data::New(builder.buffer());
  params->id_namespace = in_id_namespace;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Surface_SubmitFrame_ProxyToResponder
    : public Surface::SubmitFrameCallback::Runnable {
 public:
  ~Surface_SubmitFrame_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Surface::SubmitFrame(p_id_local, p_frame.Pass(), callback) "
        "was never run.";
  }

  Surface_SubmitFrame_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Surface_SubmitFrame_ProxyToResponder);
};

void Surface_SubmitFrame_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::Surface_SubmitFrame_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Surface_Base::MessageOrdinals::SubmitFrame), size, request_id_);
  internal::Surface_SubmitFrame_ResponseParams_Data* params =
      internal::Surface_SubmitFrame_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

SurfaceStub::SurfaceStub()
    : sink_(nullptr),
      control_message_handler_(Surface::Version_) {
}

SurfaceStub::~SurfaceStub() {}

bool SurfaceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Surface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Surface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Surface_Base::MessageOrdinals::GetIdNamespace: {
      break;
    }
    case internal::Surface_Base::MessageOrdinals::SetResourceReturner: {
      internal::Surface_SetResourceReturner_Params_Data* params =
          reinterpret_cast<internal::Surface_SetResourceReturner_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<ResourceReturner> p_returner {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->returner, &p_returner);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetResourceReturner(p_returner.Pass());
      return true;
    }
    case internal::Surface_Base::MessageOrdinals::CreateSurface: {
      internal::Surface_CreateSurface_Params_Data* params =
          reinterpret_cast<internal::Surface_CreateSurface_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      uint32_t p_id_local {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_id_local = params->id_local;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateSurface(p_id_local);
      return true;
    }
    case internal::Surface_Base::MessageOrdinals::SubmitFrame: {
      break;
    }
    case internal::Surface_Base::MessageOrdinals::DestroySurface: {
      internal::Surface_DestroySurface_Params_Data* params =
          reinterpret_cast<internal::Surface_DestroySurface_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      uint32_t p_id_local {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_id_local = params->id_local;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->DestroySurface(p_id_local);
      return true;
    }
  }
  return false;
}

bool SurfaceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Surface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Surface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Surface_Base::MessageOrdinals::GetIdNamespace: {
      internal::Surface_GetIdNamespace_Params_Data* params =
          reinterpret_cast<internal::Surface_GetIdNamespace_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Surface::GetIdNamespaceCallback::Runnable* runnable =
          new Surface_GetIdNamespace_ProxyToResponder(
              message->request_id(), responder);
      Surface::GetIdNamespaceCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetIdNamespace(callback);
      return true;
    }
    case internal::Surface_Base::MessageOrdinals::SetResourceReturner: {
      break;
    }
    case internal::Surface_Base::MessageOrdinals::CreateSurface: {
      break;
    }
    case internal::Surface_Base::MessageOrdinals::SubmitFrame: {
      internal::Surface_SubmitFrame_Params_Data* params =
          reinterpret_cast<internal::Surface_SubmitFrame_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Surface::SubmitFrameCallback::Runnable* runnable =
          new Surface_SubmitFrame_ProxyToResponder(
              message->request_id(), responder);
      Surface::SubmitFrameCallback callback(runnable);
      
      uint32_t p_id_local {};
      FramePtr p_frame {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_id_local = params->id_local;
        if (params->frame.ptr) {
          p_frame = Frame::New();
          Deserialize_(params->frame.ptr, p_frame.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SubmitFrame(p_id_local, p_frame.Pass(), callback);
      return true;
    }
    case internal::Surface_Base::MessageOrdinals::DestroySurface: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
