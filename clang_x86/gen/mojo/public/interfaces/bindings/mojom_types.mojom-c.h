// This file was auto-generated by the C bindings generator.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_TYPES_MOJOM_C_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_TYPES_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.


// Forward declarations for structs.
struct mojo_bindings_types_StringType;
union mojo_bindings_types_StringTypePtr {
  struct mojo_bindings_types_StringType* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_StringTypePtr) == 8,
              "union mojo_bindings_types_StringTypePtr must be 8 bytes");

struct mojo_bindings_types_HandleType;
union mojo_bindings_types_HandleTypePtr {
  struct mojo_bindings_types_HandleType* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_HandleTypePtr) == 8,
              "union mojo_bindings_types_HandleTypePtr must be 8 bytes");

struct mojo_bindings_types_ArrayType;
union mojo_bindings_types_ArrayTypePtr {
  struct mojo_bindings_types_ArrayType* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_ArrayTypePtr) == 8,
              "union mojo_bindings_types_ArrayTypePtr must be 8 bytes");

struct mojo_bindings_types_MapType;
union mojo_bindings_types_MapTypePtr {
  struct mojo_bindings_types_MapType* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_MapTypePtr) == 8,
              "union mojo_bindings_types_MapTypePtr must be 8 bytes");

struct mojo_bindings_types_TypeReference;
union mojo_bindings_types_TypeReferencePtr {
  struct mojo_bindings_types_TypeReference* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_TypeReferencePtr) == 8,
              "union mojo_bindings_types_TypeReferencePtr must be 8 bytes");

struct mojo_bindings_types_StructField;
union mojo_bindings_types_StructFieldPtr {
  struct mojo_bindings_types_StructField* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_StructFieldPtr) == 8,
              "union mojo_bindings_types_StructFieldPtr must be 8 bytes");

struct mojo_bindings_types_DefaultKeyword;
union mojo_bindings_types_DefaultKeywordPtr {
  struct mojo_bindings_types_DefaultKeyword* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_DefaultKeywordPtr) == 8,
              "union mojo_bindings_types_DefaultKeywordPtr must be 8 bytes");

struct mojo_bindings_types_StructVersion;
union mojo_bindings_types_StructVersionPtr {
  struct mojo_bindings_types_StructVersion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_StructVersionPtr) == 8,
              "union mojo_bindings_types_StructVersionPtr must be 8 bytes");

struct mojo_bindings_types_MojomStruct;
union mojo_bindings_types_MojomStructPtr {
  struct mojo_bindings_types_MojomStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_MojomStructPtr) == 8,
              "union mojo_bindings_types_MojomStructPtr must be 8 bytes");

struct mojo_bindings_types_UnionField;
union mojo_bindings_types_UnionFieldPtr {
  struct mojo_bindings_types_UnionField* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_UnionFieldPtr) == 8,
              "union mojo_bindings_types_UnionFieldPtr must be 8 bytes");

struct mojo_bindings_types_MojomUnion;
union mojo_bindings_types_MojomUnionPtr {
  struct mojo_bindings_types_MojomUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_MojomUnionPtr) == 8,
              "union mojo_bindings_types_MojomUnionPtr must be 8 bytes");

struct mojo_bindings_types_EnumValue;
union mojo_bindings_types_EnumValuePtr {
  struct mojo_bindings_types_EnumValue* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_EnumValuePtr) == 8,
              "union mojo_bindings_types_EnumValuePtr must be 8 bytes");

struct mojo_bindings_types_MojomEnum;
union mojo_bindings_types_MojomEnumPtr {
  struct mojo_bindings_types_MojomEnum* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_MojomEnumPtr) == 8,
              "union mojo_bindings_types_MojomEnumPtr must be 8 bytes");

struct mojo_bindings_types_MojomMethod;
union mojo_bindings_types_MojomMethodPtr {
  struct mojo_bindings_types_MojomMethod* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_MojomMethodPtr) == 8,
              "union mojo_bindings_types_MojomMethodPtr must be 8 bytes");

struct mojo_bindings_types_MojomInterface;
union mojo_bindings_types_MojomInterfacePtr {
  struct mojo_bindings_types_MojomInterface* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_MojomInterfacePtr) == 8,
              "union mojo_bindings_types_MojomInterfacePtr must be 8 bytes");

struct mojo_bindings_types_ConstantReference;
union mojo_bindings_types_ConstantReferencePtr {
  struct mojo_bindings_types_ConstantReference* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_ConstantReferencePtr) == 8,
              "union mojo_bindings_types_ConstantReferencePtr must be 8 bytes");

struct mojo_bindings_types_EnumValueReference;
union mojo_bindings_types_EnumValueReferencePtr {
  struct mojo_bindings_types_EnumValueReference* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_EnumValueReferencePtr) == 8,
              "union mojo_bindings_types_EnumValueReferencePtr must be 8 bytes");

struct mojo_bindings_types_DeclaredConstant;
union mojo_bindings_types_DeclaredConstantPtr {
  struct mojo_bindings_types_DeclaredConstant* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_DeclaredConstantPtr) == 8,
              "union mojo_bindings_types_DeclaredConstantPtr must be 8 bytes");

struct mojo_bindings_types_Attribute;
union mojo_bindings_types_AttributePtr {
  struct mojo_bindings_types_Attribute* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_AttributePtr) == 8,
              "union mojo_bindings_types_AttributePtr must be 8 bytes");

struct mojo_bindings_types_DeclarationData;
union mojo_bindings_types_DeclarationDataPtr {
  struct mojo_bindings_types_DeclarationData* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_DeclarationDataPtr) == 8,
              "union mojo_bindings_types_DeclarationDataPtr must be 8 bytes");

struct mojo_bindings_types_SourceFileInfo;
union mojo_bindings_types_SourceFileInfoPtr {
  struct mojo_bindings_types_SourceFileInfo* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_SourceFileInfoPtr) == 8,
              "union mojo_bindings_types_SourceFileInfoPtr must be 8 bytes");

struct mojo_bindings_types_ContainedDeclarations;
union mojo_bindings_types_ContainedDeclarationsPtr {
  struct mojo_bindings_types_ContainedDeclarations* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_ContainedDeclarationsPtr) == 8,
              "union mojo_bindings_types_ContainedDeclarationsPtr must be 8 bytes");

struct mojo_bindings_types_RuntimeTypeInfo;
union mojo_bindings_types_RuntimeTypeInfoPtr {
  struct mojo_bindings_types_RuntimeTypeInfo* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_RuntimeTypeInfoPtr) == 8,
              "union mojo_bindings_types_RuntimeTypeInfoPtr must be 8 bytes");

// Forward declarations for unions.
struct mojo_bindings_types_Type;
union mojo_bindings_types_TypePtr {
  struct mojo_bindings_types_Type* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_TypePtr) == 8,
             "union mojo_bindings_types_Type must be 8 bytes");

struct mojo_bindings_types_UserDefinedType;
union mojo_bindings_types_UserDefinedTypePtr {
  struct mojo_bindings_types_UserDefinedType* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_UserDefinedTypePtr) == 8,
             "union mojo_bindings_types_UserDefinedType must be 8 bytes");

struct mojo_bindings_types_DefaultFieldValue;
union mojo_bindings_types_DefaultFieldValuePtr {
  struct mojo_bindings_types_DefaultFieldValue* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_DefaultFieldValuePtr) == 8,
             "union mojo_bindings_types_DefaultFieldValue must be 8 bytes");

struct mojo_bindings_types_Value;
union mojo_bindings_types_ValuePtr {
  struct mojo_bindings_types_Value* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_ValuePtr) == 8,
             "union mojo_bindings_types_Value must be 8 bytes");

struct mojo_bindings_types_LiteralValue;
union mojo_bindings_types_LiteralValuePtr {
  struct mojo_bindings_types_LiteralValue* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_bindings_types_LiteralValuePtr) == 8,
             "union mojo_bindings_types_LiteralValue must be 8 bytes");

// Top level constants.


// Top level enums.
typedef uint32_t mojo_bindings_types_SimpleType;
enum mojo_bindings_types_SimpleType_Enum {
  mojo_bindings_types_SimpleType_BOOL = 0,
  mojo_bindings_types_SimpleType_DOUBLE = 1,
  mojo_bindings_types_SimpleType_FLOAT = 2,
  mojo_bindings_types_SimpleType_INT8 = 3,
  mojo_bindings_types_SimpleType_INT16 = 4,
  mojo_bindings_types_SimpleType_INT32 = 5,
  mojo_bindings_types_SimpleType_INT64 = 6,
  mojo_bindings_types_SimpleType_UINT8 = 7,
  mojo_bindings_types_SimpleType_UINT16 = 8,
  mojo_bindings_types_SimpleType_UINT32 = 9,
  mojo_bindings_types_SimpleType_UINT64 = 10,
  
  mojo_bindings_types_SimpleType__UNKNOWN__ = 0xFFFFFFFF,
};

typedef uint32_t mojo_bindings_types_BuiltinConstantValue;
enum mojo_bindings_types_BuiltinConstantValue_Enum {
  mojo_bindings_types_BuiltinConstantValue_DOUBLE_INFINITY = 0,
  mojo_bindings_types_BuiltinConstantValue_DOUBLE_NEGATIVE_INFINITY = 1,
  mojo_bindings_types_BuiltinConstantValue_DOUBLE_NAN = 2,
  mojo_bindings_types_BuiltinConstantValue_FLOAT_INFINITY = 3,
  mojo_bindings_types_BuiltinConstantValue_FLOAT_NEGATIVE_INFINITY = 4,
  mojo_bindings_types_BuiltinConstantValue_FLOAT_NAN = 5,
  
  mojo_bindings_types_BuiltinConstantValue__UNKNOWN__ = 0xFFFFFFFF,
};



// Union definitions.
// -- mojo_bindings_types_Type --
// Enum describing the union tags.
typedef uint32_t mojo_bindings_types_Type_Tag;
enum mojo_bindings_types_Type_Tag_Enum {
  mojo_bindings_types_Type_Tag_simple_type = 0,
  mojo_bindings_types_Type_Tag_string_type = 1,
  mojo_bindings_types_Type_Tag_array_type = 2,
  mojo_bindings_types_Type_Tag_map_type = 3,
  mojo_bindings_types_Type_Tag_handle_type = 4,
  mojo_bindings_types_Type_Tag_type_reference = 5,
  
  mojo_bindings_types_Type_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_bindings_types_Type {
  uint32_t size;
  mojo_bindings_types_Type_Tag tag;
  
  union {
    mojo_bindings_types_SimpleType f_simple_type;
    union mojo_bindings_types_StringTypePtr f_string_type;
    union mojo_bindings_types_ArrayTypePtr f_array_type;
    union mojo_bindings_types_MapTypePtr f_map_type;
    union mojo_bindings_types_HandleTypePtr f_handle_type;
    union mojo_bindings_types_TypeReferencePtr f_type_reference;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_bindings_types_Type) == 16,
             "struct mojo_bindings_types_Type must be 16 bytes");

// -- mojo_bindings_types_UserDefinedType --
// Enum describing the union tags.
typedef uint32_t mojo_bindings_types_UserDefinedType_Tag;
enum mojo_bindings_types_UserDefinedType_Tag_Enum {
  mojo_bindings_types_UserDefinedType_Tag_enum_type = 0,
  mojo_bindings_types_UserDefinedType_Tag_struct_type = 1,
  mojo_bindings_types_UserDefinedType_Tag_union_type = 2,
  mojo_bindings_types_UserDefinedType_Tag_interface_type = 3,
  
  mojo_bindings_types_UserDefinedType_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_bindings_types_UserDefinedType {
  uint32_t size;
  mojo_bindings_types_UserDefinedType_Tag tag;
  
  union {
    union mojo_bindings_types_MojomEnumPtr f_enum_type;
    union mojo_bindings_types_MojomStructPtr f_struct_type;
    union mojo_bindings_types_MojomUnionPtr f_union_type;
    union mojo_bindings_types_MojomInterfacePtr f_interface_type;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_bindings_types_UserDefinedType) == 16,
             "struct mojo_bindings_types_UserDefinedType must be 16 bytes");

// -- mojo_bindings_types_DefaultFieldValue --
// Enum describing the union tags.
typedef uint32_t mojo_bindings_types_DefaultFieldValue_Tag;
enum mojo_bindings_types_DefaultFieldValue_Tag_Enum {
  mojo_bindings_types_DefaultFieldValue_Tag_value = 0,
  mojo_bindings_types_DefaultFieldValue_Tag_default_keyword = 1,
  
  mojo_bindings_types_DefaultFieldValue_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_bindings_types_DefaultFieldValue {
  uint32_t size;
  mojo_bindings_types_DefaultFieldValue_Tag tag;
  
  union {
    union mojo_bindings_types_ValuePtr f_value;
    union mojo_bindings_types_DefaultKeywordPtr f_default_keyword;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_bindings_types_DefaultFieldValue) == 16,
             "struct mojo_bindings_types_DefaultFieldValue must be 16 bytes");

// -- mojo_bindings_types_Value --
// Enum describing the union tags.
typedef uint32_t mojo_bindings_types_Value_Tag;
enum mojo_bindings_types_Value_Tag_Enum {
  mojo_bindings_types_Value_Tag_literal_value = 0,
  mojo_bindings_types_Value_Tag_constant_reference = 1,
  mojo_bindings_types_Value_Tag_enum_value_reference = 2,
  mojo_bindings_types_Value_Tag_builtin_value = 3,
  
  mojo_bindings_types_Value_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_bindings_types_Value {
  uint32_t size;
  mojo_bindings_types_Value_Tag tag;
  
  union {
    union mojo_bindings_types_LiteralValuePtr f_literal_value;
    union mojo_bindings_types_ConstantReferencePtr f_constant_reference;
    union mojo_bindings_types_EnumValueReferencePtr f_enum_value_reference;
    mojo_bindings_types_BuiltinConstantValue f_builtin_value;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_bindings_types_Value) == 16,
             "struct mojo_bindings_types_Value must be 16 bytes");

// -- mojo_bindings_types_LiteralValue --
// Enum describing the union tags.
typedef uint32_t mojo_bindings_types_LiteralValue_Tag;
enum mojo_bindings_types_LiteralValue_Tag_Enum {
  mojo_bindings_types_LiteralValue_Tag_bool_value = 0,
  mojo_bindings_types_LiteralValue_Tag_double_value = 1,
  mojo_bindings_types_LiteralValue_Tag_float_value = 2,
  mojo_bindings_types_LiteralValue_Tag_int8_value = 3,
  mojo_bindings_types_LiteralValue_Tag_int16_value = 4,
  mojo_bindings_types_LiteralValue_Tag_int32_value = 5,
  mojo_bindings_types_LiteralValue_Tag_int64_value = 6,
  mojo_bindings_types_LiteralValue_Tag_string_value = 7,
  mojo_bindings_types_LiteralValue_Tag_uint8_value = 8,
  mojo_bindings_types_LiteralValue_Tag_uint16_value = 9,
  mojo_bindings_types_LiteralValue_Tag_uint32_value = 10,
  mojo_bindings_types_LiteralValue_Tag_uint64_value = 11,
  
  mojo_bindings_types_LiteralValue_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_bindings_types_LiteralValue {
  uint32_t size;
  mojo_bindings_types_LiteralValue_Tag tag;
  
  union {
    bool bool_value : 1;
    double f_double_value;
    float f_float_value;
    int8_t f_int8_value;
    int16_t f_int16_value;
    int32_t f_int32_value;
    int64_t f_int64_value;
    union MojomStringPtr f_string_value;
    uint8_t f_uint8_value;
    uint16_t f_uint16_value;
    uint32_t f_uint32_value;
    uint64_t f_uint64_value;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_bindings_types_LiteralValue) == 16,
             "struct mojo_bindings_types_LiteralValue must be 16 bytes");



// Struct definitions.
// -- mojo_bindings_types_StringType --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_StringType {
  struct MojomStructHeader header_;
  bool nullable : 1;  // offset,bit = 0,0
  
};

struct mojo_bindings_types_StringType* mojo_bindings_types_StringType_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_StringType_Init(
  struct mojo_bindings_types_StringType* in_data);

void mojo_bindings_types_StringType_CloseAllHandles(
  struct mojo_bindings_types_StringType* in_data);

struct mojo_bindings_types_StringType* mojo_bindings_types_StringType_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_StringType* in_data);

size_t mojo_bindings_types_StringType_ComputeSerializedSize(
  const struct mojo_bindings_types_StringType* in_data);

MojomValidationResult mojo_bindings_types_StringType_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_StringType_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_StringType_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_HandleType --
// Enums
typedef uint32_t mojo_bindings_types_HandleType_Kind;
enum mojo_bindings_types_HandleType_Kind_Enum {
  mojo_bindings_types_HandleType_Kind_UNSPECIFIED = 0,
  mojo_bindings_types_HandleType_Kind_MESSAGE_PIPE = 1,
  mojo_bindings_types_HandleType_Kind_DATA_PIPE_CONSUMER = 2,
  mojo_bindings_types_HandleType_Kind_DATA_PIPE_PRODUCER = 3,
  mojo_bindings_types_HandleType_Kind_SHARED_BUFFER = 4,
  
  mojo_bindings_types_HandleType_Kind__UNKNOWN__ = 0xFFFFFFFF,
};

// Constants
// Struct definition
struct mojo_bindings_types_HandleType {
  struct MojomStructHeader header_;
  bool nullable : 1;  // offset,bit = 0,0
  uint8_t pad0_[3];  // padding
  mojo_bindings_types_HandleType_Kind kind;  // offset,bit = 4,0
  uint8_t pad1_[4];  // padding
  
};

struct mojo_bindings_types_HandleType* mojo_bindings_types_HandleType_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_HandleType_Init(
  struct mojo_bindings_types_HandleType* in_data);

void mojo_bindings_types_HandleType_CloseAllHandles(
  struct mojo_bindings_types_HandleType* in_data);

struct mojo_bindings_types_HandleType* mojo_bindings_types_HandleType_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_HandleType* in_data);

size_t mojo_bindings_types_HandleType_ComputeSerializedSize(
  const struct mojo_bindings_types_HandleType* in_data);

MojomValidationResult mojo_bindings_types_HandleType_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_HandleType_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_HandleType_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_ArrayType --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_ArrayType {
  struct MojomStructHeader header_;
  bool nullable : 1;  // offset,bit = 0,0
  uint8_t pad0_[3];  // padding
  int32_t fixed_length;  // offset,bit = 4,0
  struct mojo_bindings_types_Type element_type;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_ArrayType* mojo_bindings_types_ArrayType_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_ArrayType_Init(
  struct mojo_bindings_types_ArrayType* in_data);

void mojo_bindings_types_ArrayType_CloseAllHandles(
  struct mojo_bindings_types_ArrayType* in_data);

struct mojo_bindings_types_ArrayType* mojo_bindings_types_ArrayType_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_ArrayType* in_data);

size_t mojo_bindings_types_ArrayType_ComputeSerializedSize(
  const struct mojo_bindings_types_ArrayType* in_data);

MojomValidationResult mojo_bindings_types_ArrayType_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_ArrayType_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_ArrayType_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_MapType --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_MapType {
  struct MojomStructHeader header_;
  bool nullable : 1;  // offset,bit = 0,0
  uint8_t pad0_[7];  // padding
  struct mojo_bindings_types_Type key_type;  // offset,bit = 8,0
  struct mojo_bindings_types_Type value_type;  // offset,bit = 24,0
  
};

struct mojo_bindings_types_MapType* mojo_bindings_types_MapType_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_MapType_Init(
  struct mojo_bindings_types_MapType* in_data);

void mojo_bindings_types_MapType_CloseAllHandles(
  struct mojo_bindings_types_MapType* in_data);

struct mojo_bindings_types_MapType* mojo_bindings_types_MapType_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_MapType* in_data);

size_t mojo_bindings_types_MapType_ComputeSerializedSize(
  const struct mojo_bindings_types_MapType* in_data);

MojomValidationResult mojo_bindings_types_MapType_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_MapType_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_MapType_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_TypeReference --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_TypeReference {
  struct MojomStructHeader header_;
  bool nullable : 1;  // offset,bit = 0,0
  bool is_interface_request : 1;  // offset,bit = 0,1
  uint8_t pad1_[7];  // padding
  union MojomStringPtr identifier;  // offset,bit = 8,0
  union MojomStringPtr type_key;  // offset,bit = 16,0
  
};

struct mojo_bindings_types_TypeReference* mojo_bindings_types_TypeReference_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_TypeReference_Init(
  struct mojo_bindings_types_TypeReference* in_data);

void mojo_bindings_types_TypeReference_CloseAllHandles(
  struct mojo_bindings_types_TypeReference* in_data);

struct mojo_bindings_types_TypeReference* mojo_bindings_types_TypeReference_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_TypeReference* in_data);

size_t mojo_bindings_types_TypeReference_ComputeSerializedSize(
  const struct mojo_bindings_types_TypeReference* in_data);

MojomValidationResult mojo_bindings_types_TypeReference_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_TypeReference_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_TypeReference_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_StructField --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_StructField {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  struct mojo_bindings_types_Type type;  // offset,bit = 8,0
  struct mojo_bindings_types_DefaultFieldValue default_value;  // offset,bit = 24,0
  uint8_t pad2_[8];  // padding
  uint32_t offset;  // offset,bit = 40,0
  int8_t bit;  // offset,bit = 44,0
  uint8_t pad4_[3];  // padding
  uint32_t min_version;  // offset,bit = 48,0
  
};

struct mojo_bindings_types_StructField* mojo_bindings_types_StructField_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_StructField_Init(
  struct mojo_bindings_types_StructField* in_data);

void mojo_bindings_types_StructField_CloseAllHandles(
  struct mojo_bindings_types_StructField* in_data);

struct mojo_bindings_types_StructField* mojo_bindings_types_StructField_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_StructField* in_data);

size_t mojo_bindings_types_StructField_ComputeSerializedSize(
  const struct mojo_bindings_types_StructField* in_data);

MojomValidationResult mojo_bindings_types_StructField_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_StructField_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_StructField_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_DefaultKeyword --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_DefaultKeyword {
  struct MojomStructHeader header_;
  
};

struct mojo_bindings_types_DefaultKeyword* mojo_bindings_types_DefaultKeyword_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_DefaultKeyword_Init(
  struct mojo_bindings_types_DefaultKeyword* in_data);

void mojo_bindings_types_DefaultKeyword_CloseAllHandles(
  struct mojo_bindings_types_DefaultKeyword* in_data);

struct mojo_bindings_types_DefaultKeyword* mojo_bindings_types_DefaultKeyword_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_DefaultKeyword* in_data);

size_t mojo_bindings_types_DefaultKeyword_ComputeSerializedSize(
  const struct mojo_bindings_types_DefaultKeyword* in_data);

MojomValidationResult mojo_bindings_types_DefaultKeyword_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_DefaultKeyword_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_DefaultKeyword_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_StructVersion --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_StructVersion {
  struct MojomStructHeader header_;
  uint32_t version_number;  // offset,bit = 0,0
  uint32_t num_fields;  // offset,bit = 4,0
  uint32_t num_bytes;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_StructVersion* mojo_bindings_types_StructVersion_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_StructVersion_Init(
  struct mojo_bindings_types_StructVersion* in_data);

void mojo_bindings_types_StructVersion_CloseAllHandles(
  struct mojo_bindings_types_StructVersion* in_data);

struct mojo_bindings_types_StructVersion* mojo_bindings_types_StructVersion_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_StructVersion* in_data);

size_t mojo_bindings_types_StructVersion_ComputeSerializedSize(
  const struct mojo_bindings_types_StructVersion* in_data);

MojomValidationResult mojo_bindings_types_StructVersion_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_StructVersion_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_StructVersion_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_MojomStruct --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_MojomStruct {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  union MojomArrayPtr fields;  // offset,bit = 8,0
  union MojomArrayPtr version_info;  // offset,bit = 16,0
  
};

struct mojo_bindings_types_MojomStruct* mojo_bindings_types_MojomStruct_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_MojomStruct_Init(
  struct mojo_bindings_types_MojomStruct* in_data);

void mojo_bindings_types_MojomStruct_CloseAllHandles(
  struct mojo_bindings_types_MojomStruct* in_data);

struct mojo_bindings_types_MojomStruct* mojo_bindings_types_MojomStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_MojomStruct* in_data);

size_t mojo_bindings_types_MojomStruct_ComputeSerializedSize(
  const struct mojo_bindings_types_MojomStruct* in_data);

MojomValidationResult mojo_bindings_types_MojomStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_MojomStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_MojomStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_UnionField --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_UnionField {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  struct mojo_bindings_types_Type type;  // offset,bit = 8,0
  uint32_t tag;  // offset,bit = 24,0
  
};

struct mojo_bindings_types_UnionField* mojo_bindings_types_UnionField_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_UnionField_Init(
  struct mojo_bindings_types_UnionField* in_data);

void mojo_bindings_types_UnionField_CloseAllHandles(
  struct mojo_bindings_types_UnionField* in_data);

struct mojo_bindings_types_UnionField* mojo_bindings_types_UnionField_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_UnionField* in_data);

size_t mojo_bindings_types_UnionField_ComputeSerializedSize(
  const struct mojo_bindings_types_UnionField* in_data);

MojomValidationResult mojo_bindings_types_UnionField_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_UnionField_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_UnionField_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_MojomUnion --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_MojomUnion {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  union MojomArrayPtr fields;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_MojomUnion* mojo_bindings_types_MojomUnion_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_MojomUnion_Init(
  struct mojo_bindings_types_MojomUnion* in_data);

void mojo_bindings_types_MojomUnion_CloseAllHandles(
  struct mojo_bindings_types_MojomUnion* in_data);

struct mojo_bindings_types_MojomUnion* mojo_bindings_types_MojomUnion_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_MojomUnion* in_data);

size_t mojo_bindings_types_MojomUnion_ComputeSerializedSize(
  const struct mojo_bindings_types_MojomUnion* in_data);

MojomValidationResult mojo_bindings_types_MojomUnion_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_MojomUnion_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_MojomUnion_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_EnumValue --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_EnumValue {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  struct mojo_bindings_types_Value initializer_value;  // offset,bit = 8,0
  uint8_t pad1_[8];  // padding
  int32_t int_value;  // offset,bit = 24,0
  
};

struct mojo_bindings_types_EnumValue* mojo_bindings_types_EnumValue_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_EnumValue_Init(
  struct mojo_bindings_types_EnumValue* in_data);

void mojo_bindings_types_EnumValue_CloseAllHandles(
  struct mojo_bindings_types_EnumValue* in_data);

struct mojo_bindings_types_EnumValue* mojo_bindings_types_EnumValue_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_EnumValue* in_data);

size_t mojo_bindings_types_EnumValue_ComputeSerializedSize(
  const struct mojo_bindings_types_EnumValue* in_data);

MojomValidationResult mojo_bindings_types_EnumValue_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_EnumValue_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_EnumValue_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_MojomEnum --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_MojomEnum {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  union MojomArrayPtr values;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_MojomEnum* mojo_bindings_types_MojomEnum_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_MojomEnum_Init(
  struct mojo_bindings_types_MojomEnum* in_data);

void mojo_bindings_types_MojomEnum_CloseAllHandles(
  struct mojo_bindings_types_MojomEnum* in_data);

struct mojo_bindings_types_MojomEnum* mojo_bindings_types_MojomEnum_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_MojomEnum* in_data);

size_t mojo_bindings_types_MojomEnum_ComputeSerializedSize(
  const struct mojo_bindings_types_MojomEnum* in_data);

MojomValidationResult mojo_bindings_types_MojomEnum_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_MojomEnum_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_MojomEnum_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_MojomMethod --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_MojomMethod {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  union mojo_bindings_types_MojomStructPtr parameters;  // offset,bit = 8,0
  union mojo_bindings_types_MojomStructPtr response_params;  // offset,bit = 16,0
  uint32_t ordinal;  // offset,bit = 24,0
  uint32_t min_version;  // offset,bit = 28,0
  uint8_t pad4_[4];  // padding
  
};

struct mojo_bindings_types_MojomMethod* mojo_bindings_types_MojomMethod_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_MojomMethod_Init(
  struct mojo_bindings_types_MojomMethod* in_data);

void mojo_bindings_types_MojomMethod_CloseAllHandles(
  struct mojo_bindings_types_MojomMethod* in_data);

struct mojo_bindings_types_MojomMethod* mojo_bindings_types_MojomMethod_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_MojomMethod* in_data);

size_t mojo_bindings_types_MojomMethod_ComputeSerializedSize(
  const struct mojo_bindings_types_MojomMethod* in_data);

MojomValidationResult mojo_bindings_types_MojomMethod_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_MojomMethod_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_MojomMethod_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_MojomInterface --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_MojomInterface {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  union MojomStringPtr service_name;  // offset,bit = 8,0
  union MojomMapPtr methods;  // offset,bit = 16,0
  uint32_t current_version;  // offset,bit = 24,0
  
};

struct mojo_bindings_types_MojomInterface* mojo_bindings_types_MojomInterface_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_MojomInterface_Init(
  struct mojo_bindings_types_MojomInterface* in_data);

void mojo_bindings_types_MojomInterface_CloseAllHandles(
  struct mojo_bindings_types_MojomInterface* in_data);

struct mojo_bindings_types_MojomInterface* mojo_bindings_types_MojomInterface_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_MojomInterface* in_data);

size_t mojo_bindings_types_MojomInterface_ComputeSerializedSize(
  const struct mojo_bindings_types_MojomInterface* in_data);

MojomValidationResult mojo_bindings_types_MojomInterface_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_MojomInterface_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_MojomInterface_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_ConstantReference --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_ConstantReference {
  struct MojomStructHeader header_;
  union MojomStringPtr identifier;  // offset,bit = 0,0
  union MojomStringPtr constant_key;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_ConstantReference* mojo_bindings_types_ConstantReference_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_ConstantReference_Init(
  struct mojo_bindings_types_ConstantReference* in_data);

void mojo_bindings_types_ConstantReference_CloseAllHandles(
  struct mojo_bindings_types_ConstantReference* in_data);

struct mojo_bindings_types_ConstantReference* mojo_bindings_types_ConstantReference_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_ConstantReference* in_data);

size_t mojo_bindings_types_ConstantReference_ComputeSerializedSize(
  const struct mojo_bindings_types_ConstantReference* in_data);

MojomValidationResult mojo_bindings_types_ConstantReference_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_ConstantReference_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_ConstantReference_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_EnumValueReference --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_EnumValueReference {
  struct MojomStructHeader header_;
  union MojomStringPtr identifier;  // offset,bit = 0,0
  union MojomStringPtr enum_type_key;  // offset,bit = 8,0
  uint32_t enum_value_index;  // offset,bit = 16,0
  
};

struct mojo_bindings_types_EnumValueReference* mojo_bindings_types_EnumValueReference_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_EnumValueReference_Init(
  struct mojo_bindings_types_EnumValueReference* in_data);

void mojo_bindings_types_EnumValueReference_CloseAllHandles(
  struct mojo_bindings_types_EnumValueReference* in_data);

struct mojo_bindings_types_EnumValueReference* mojo_bindings_types_EnumValueReference_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_EnumValueReference* in_data);

size_t mojo_bindings_types_EnumValueReference_ComputeSerializedSize(
  const struct mojo_bindings_types_EnumValueReference* in_data);

MojomValidationResult mojo_bindings_types_EnumValueReference_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_EnumValueReference_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_EnumValueReference_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_DeclaredConstant --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_DeclaredConstant {
  struct MojomStructHeader header_;
  union mojo_bindings_types_DeclarationDataPtr decl_data;  // offset,bit = 0,0
  struct mojo_bindings_types_Type type;  // offset,bit = 8,0
  struct mojo_bindings_types_Value value;  // offset,bit = 24,0
  struct mojo_bindings_types_Value resolved_concrete_value;  // offset,bit = 40,0
  
};

struct mojo_bindings_types_DeclaredConstant* mojo_bindings_types_DeclaredConstant_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_DeclaredConstant_Init(
  struct mojo_bindings_types_DeclaredConstant* in_data);

void mojo_bindings_types_DeclaredConstant_CloseAllHandles(
  struct mojo_bindings_types_DeclaredConstant* in_data);

struct mojo_bindings_types_DeclaredConstant* mojo_bindings_types_DeclaredConstant_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_DeclaredConstant* in_data);

size_t mojo_bindings_types_DeclaredConstant_ComputeSerializedSize(
  const struct mojo_bindings_types_DeclaredConstant* in_data);

MojomValidationResult mojo_bindings_types_DeclaredConstant_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_DeclaredConstant_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_DeclaredConstant_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_Attribute --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_Attribute {
  struct MojomStructHeader header_;
  union MojomStringPtr key;  // offset,bit = 0,0
  struct mojo_bindings_types_LiteralValue value;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_Attribute* mojo_bindings_types_Attribute_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_Attribute_Init(
  struct mojo_bindings_types_Attribute* in_data);

void mojo_bindings_types_Attribute_CloseAllHandles(
  struct mojo_bindings_types_Attribute* in_data);

struct mojo_bindings_types_Attribute* mojo_bindings_types_Attribute_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_Attribute* in_data);

size_t mojo_bindings_types_Attribute_ComputeSerializedSize(
  const struct mojo_bindings_types_Attribute* in_data);

MojomValidationResult mojo_bindings_types_Attribute_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_Attribute_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_Attribute_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_DeclarationData --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_DeclarationData {
  struct MojomStructHeader header_;
  union MojomArrayPtr attributes;  // offset,bit = 0,0
  union MojomStringPtr short_name;  // offset,bit = 8,0
  union MojomStringPtr full_identifier;  // offset,bit = 16,0
  int32_t declared_ordinal;  // offset,bit = 24,0
  int32_t declaration_order;  // offset,bit = 28,0
  union mojo_bindings_types_SourceFileInfoPtr source_file_info;  // offset,bit = 32,0
  union mojo_bindings_types_ContainedDeclarationsPtr contained_declarations;  // offset,bit = 40,0
  union MojomStringPtr container_type_key;  // offset,bit = 48,0
  
};

struct mojo_bindings_types_DeclarationData* mojo_bindings_types_DeclarationData_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_DeclarationData_Init(
  struct mojo_bindings_types_DeclarationData* in_data);

void mojo_bindings_types_DeclarationData_CloseAllHandles(
  struct mojo_bindings_types_DeclarationData* in_data);

struct mojo_bindings_types_DeclarationData* mojo_bindings_types_DeclarationData_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_DeclarationData* in_data);

size_t mojo_bindings_types_DeclarationData_ComputeSerializedSize(
  const struct mojo_bindings_types_DeclarationData* in_data);

MojomValidationResult mojo_bindings_types_DeclarationData_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_DeclarationData_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_DeclarationData_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_SourceFileInfo --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_SourceFileInfo {
  struct MojomStructHeader header_;
  union MojomStringPtr file_name;  // offset,bit = 0,0
  uint32_t line_number;  // offset,bit = 8,0
  uint32_t column_number;  // offset,bit = 12,0
  uint8_t pad2_[4];  // padding
  
};

struct mojo_bindings_types_SourceFileInfo* mojo_bindings_types_SourceFileInfo_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_SourceFileInfo_Init(
  struct mojo_bindings_types_SourceFileInfo* in_data);

void mojo_bindings_types_SourceFileInfo_CloseAllHandles(
  struct mojo_bindings_types_SourceFileInfo* in_data);

struct mojo_bindings_types_SourceFileInfo* mojo_bindings_types_SourceFileInfo_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_SourceFileInfo* in_data);

size_t mojo_bindings_types_SourceFileInfo_ComputeSerializedSize(
  const struct mojo_bindings_types_SourceFileInfo* in_data);

MojomValidationResult mojo_bindings_types_SourceFileInfo_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_SourceFileInfo_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_SourceFileInfo_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_ContainedDeclarations --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_ContainedDeclarations {
  struct MojomStructHeader header_;
  union MojomArrayPtr enums;  // offset,bit = 0,0
  union MojomArrayPtr constants;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_ContainedDeclarations* mojo_bindings_types_ContainedDeclarations_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_ContainedDeclarations_Init(
  struct mojo_bindings_types_ContainedDeclarations* in_data);

void mojo_bindings_types_ContainedDeclarations_CloseAllHandles(
  struct mojo_bindings_types_ContainedDeclarations* in_data);

struct mojo_bindings_types_ContainedDeclarations* mojo_bindings_types_ContainedDeclarations_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_ContainedDeclarations* in_data);

size_t mojo_bindings_types_ContainedDeclarations_ComputeSerializedSize(
  const struct mojo_bindings_types_ContainedDeclarations* in_data);

MojomValidationResult mojo_bindings_types_ContainedDeclarations_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_ContainedDeclarations_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_ContainedDeclarations_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_bindings_types_RuntimeTypeInfo --
// Enums
// Constants
// Struct definition
struct mojo_bindings_types_RuntimeTypeInfo {
  struct MojomStructHeader header_;
  union MojomMapPtr services;  // offset,bit = 0,0
  union MojomMapPtr type_map;  // offset,bit = 8,0
  
};

struct mojo_bindings_types_RuntimeTypeInfo* mojo_bindings_types_RuntimeTypeInfo_New(struct MojomBuffer* in_buffer);

void mojo_bindings_types_RuntimeTypeInfo_Init(
  struct mojo_bindings_types_RuntimeTypeInfo* in_data);

void mojo_bindings_types_RuntimeTypeInfo_CloseAllHandles(
  struct mojo_bindings_types_RuntimeTypeInfo* in_data);

struct mojo_bindings_types_RuntimeTypeInfo* mojo_bindings_types_RuntimeTypeInfo_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_bindings_types_RuntimeTypeInfo* in_data);

size_t mojo_bindings_types_RuntimeTypeInfo_ComputeSerializedSize(
  const struct mojo_bindings_types_RuntimeTypeInfo* in_data);

MojomValidationResult mojo_bindings_types_RuntimeTypeInfo_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_bindings_types_RuntimeTypeInfo_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_bindings_types_RuntimeTypeInfo_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.


// Type tables declarations for structs and unions.

extern struct MojomPointerTableUnionEntry mojo_bindings_types_Type__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_bindings_types_UserDefinedType__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_bindings_types_DefaultFieldValue__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_bindings_types_Value__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_bindings_types_LiteralValue__PointerTable[];


extern struct MojomPointerTableStructEntry mojo_bindings_types_StringType__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_HandleType__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_ArrayType__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_MapType__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_TypeReference__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_StructField__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_DefaultKeyword__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_StructVersion__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_MojomStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_UnionField__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_MojomUnion__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_EnumValue__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_MojomEnum__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_MojomMethod__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_MojomInterface__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_ConstantReference__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_EnumValueReference__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_DeclaredConstant__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_Attribute__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_DeclarationData__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_SourceFileInfo__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_ContainedDeclarations__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_bindings_types_RuntimeTypeInfo__PointerTable[];


#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_MOJOM_TYPES_MOJOM_C_H_