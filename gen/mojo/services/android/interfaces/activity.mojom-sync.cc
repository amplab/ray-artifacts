// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/android/interfaces/activity.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/android/interfaces/activity.mojom-internal.h"
#include "mojo/services/android/interfaces/activity.mojom-common.h"
namespace activity {

// --- Interface definitions ---
Activity_SynchronousProxy::Activity_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool Activity_SynchronousProxy::GetUserFeedback(mojo::InterfaceRequest<UserFeedback> in_user_feedback) const  {
  size_t size = sizeof(internal::Activity_GetUserFeedback_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::GetUserFeedback);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Activity_GetUserFeedback_Params_Data* out_params =
      internal::Activity_GetUserFeedback_Params_Data::New(builder.buffer());
  out_params->user_feedback = in_user_feedback.PassMessagePipe().release();
  if (!out_params->user_feedback.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid user_feedback in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool Activity_SynchronousProxy::StartActivity(IntentPtr in_intent) const  {
  size_t size = sizeof(internal::Activity_StartActivity_Params_Data);
  size += in_intent.is_null()
              ? 0
              : GetSerializedSize_(*in_intent);

  auto msg_name = static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::StartActivity);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Activity_StartActivity_Params_Data* out_params =
      internal::Activity_StartActivity_Params_Data::New(builder.buffer());
  {Serialize_(in_intent.get(),
               builder.buffer(),
               &out_params->intent.ptr);
  }
  if (!out_params->intent.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null intent in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool Activity_SynchronousProxy::FinishCurrentActivity() const  {
  size_t size = sizeof(internal::Activity_FinishCurrentActivity_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::FinishCurrentActivity);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Activity_FinishCurrentActivity_Params_Data* out_params =
      internal::Activity_FinishCurrentActivity_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool Activity_SynchronousProxy::SetTaskDescription(TaskDescriptionPtr in_description) const  {
  size_t size = sizeof(internal::Activity_SetTaskDescription_Params_Data);
  size += in_description.is_null()
              ? 0
              : GetSerializedSize_(*in_description);

  auto msg_name = static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::SetTaskDescription);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Activity_SetTaskDescription_Params_Data* out_params =
      internal::Activity_SetTaskDescription_Params_Data::New(builder.buffer());
  {Serialize_(in_description.get(),
               builder.buffer(),
               &out_params->description.ptr);
  }
  if (!out_params->description.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null description in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool Activity_SynchronousProxy::SetSystemUIVisibility(SystemUIVisibility in_visibility) const  {
  size_t size = sizeof(internal::Activity_SetSystemUIVisibility_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::SetSystemUIVisibility);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Activity_SetSystemUIVisibility_Params_Data* out_params =
      internal::Activity_SetSystemUIVisibility_Params_Data::New(builder.buffer());
  out_params->visibility =
    static_cast<int32_t>(in_visibility);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool Activity_SynchronousProxy::SetRequestedOrientation(ScreenOrientation in_orientation) const  {
  size_t size = sizeof(internal::Activity_SetRequestedOrientation_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::SetRequestedOrientation);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Activity_SetRequestedOrientation_Params_Data* out_params =
      internal::Activity_SetRequestedOrientation_Params_Data::New(builder.buffer());
  out_params->orientation =
    static_cast<int32_t>(in_orientation);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}PathService_SynchronousProxy::PathService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool PathService_SynchronousProxy::GetAppDataDir(mojo::String* out_path) {
  size_t size = sizeof(internal::PathService_GetAppDataDir_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetAppDataDir);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::PathService_GetAppDataDir_Params_Data* out_params =
      internal::PathService_GetAppDataDir_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::PathService_GetAppDataDir_ResponseParams_Data*
      response_params = reinterpret_cast<internal::PathService_GetAppDataDir_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->path.ptr, &(*out_path));
  } while (false);
  return true;
}
bool PathService_SynchronousProxy::GetFilesDir(mojo::String* out_path) {
  size_t size = sizeof(internal::PathService_GetFilesDir_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetFilesDir);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::PathService_GetFilesDir_Params_Data* out_params =
      internal::PathService_GetFilesDir_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::PathService_GetFilesDir_ResponseParams_Data*
      response_params = reinterpret_cast<internal::PathService_GetFilesDir_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->path.ptr, &(*out_path));
  } while (false);
  return true;
}
bool PathService_SynchronousProxy::GetCacheDir(mojo::String* out_path) {
  size_t size = sizeof(internal::PathService_GetCacheDir_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetCacheDir);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::PathService_GetCacheDir_Params_Data* out_params =
      internal::PathService_GetCacheDir_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::PathService_GetCacheDir_ResponseParams_Data*
      response_params = reinterpret_cast<internal::PathService_GetCacheDir_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->path.ptr, &(*out_path));
  } while (false);
  return true;
}UserFeedback_SynchronousProxy::UserFeedback_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool UserFeedback_SynchronousProxy::PerformHapticFeedback(HapticFeedbackType in_type) const  {
  size_t size = sizeof(internal::UserFeedback_PerformHapticFeedback_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::UserFeedback_Base::MessageOrdinals::PerformHapticFeedback);
  mojo::MessageBuilder builder(msg_name, size);

  internal::UserFeedback_PerformHapticFeedback_Params_Data* out_params =
      internal::UserFeedback_PerformHapticFeedback_Params_Data::New(builder.buffer());
  out_params->type =
    static_cast<int32_t>(in_type);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool UserFeedback_SynchronousProxy::PerformAuralFeedback(AuralFeedbackType in_type) const  {
  size_t size = sizeof(internal::UserFeedback_PerformAuralFeedback_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::UserFeedback_Base::MessageOrdinals::PerformAuralFeedback);
  mojo::MessageBuilder builder(msg_name, size);

  internal::UserFeedback_PerformAuralFeedback_Params_Data* out_params =
      internal::UserFeedback_PerformAuralFeedback_Params_Data::New(builder.buffer());
  out_params->type =
    static_cast<int32_t>(in_type);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
}  // namespace activity

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
