// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/native_viewport/interfaces/native_viewport.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class NativeViewport_Create_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  NativeViewport_Create_ForwardToCallback(
      const NativeViewport::CreateCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  NativeViewport::CreateCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NativeViewport_Create_ForwardToCallback);
};
bool NativeViewport_Create_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::NativeViewport_Create_ResponseParams_Data* params =
      reinterpret_cast<internal::NativeViewport_Create_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  ViewportMetricsPtr p_metrics {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->metrics.ptr) {
      p_metrics = ViewportMetrics::New();
      Deserialize_(params->metrics.ptr, p_metrics.get());
    }
  } while (false);
  callback_.Run(p_metrics.Pass());
  return true;
}
class NativeViewport_RequestMetrics_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  NativeViewport_RequestMetrics_ForwardToCallback(
      const NativeViewport::RequestMetricsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  NativeViewport::RequestMetricsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NativeViewport_RequestMetrics_ForwardToCallback);
};
bool NativeViewport_RequestMetrics_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::NativeViewport_RequestMetrics_ResponseParams_Data* params =
      reinterpret_cast<internal::NativeViewport_RequestMetrics_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  ViewportMetricsPtr p_metrics {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->metrics.ptr) {
      p_metrics = ViewportMetrics::New();
      Deserialize_(params->metrics.ptr, p_metrics.get());
    }
  } while (false);
  callback_.Run(p_metrics.Pass());
  return true;
}

NativeViewportProxy::NativeViewportProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void NativeViewportProxy::Create(
    mojo::SizePtr in_size, SurfaceConfigurationPtr in_requested_configuration, const CreateCallback& callback) {
  size_t size = sizeof(internal::NativeViewport_Create_Params_Data);
  size += in_size.is_null()
              ? 0
              : GetSerializedSize_(*in_size);
  size += in_requested_configuration.is_null()
              ? 0
              : GetSerializedSize_(*in_requested_configuration);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::Create), size);

  internal::NativeViewport_Create_Params_Data* params =
      internal::NativeViewport_Create_Params_Data::New(builder.buffer());
  {Serialize_(in_size.get(),
               builder.buffer(),
               &params->size.ptr);
  }
  if (!params->size.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null size in NativeViewport.Create request");
  }
  {Serialize_(in_requested_configuration.get(),
               builder.buffer(),
               &params->requested_configuration.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new NativeViewport_Create_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void NativeViewportProxy::Show(
    ) {
  size_t size = sizeof(internal::NativeViewport_Show_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::Show), size);

  internal::NativeViewport_Show_Params_Data* params =
      internal::NativeViewport_Show_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NativeViewportProxy::Hide(
    ) {
  size_t size = sizeof(internal::NativeViewport_Hide_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::Hide), size);

  internal::NativeViewport_Hide_Params_Data* params =
      internal::NativeViewport_Hide_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NativeViewportProxy::Close(
    ) {
  size_t size = sizeof(internal::NativeViewport_Close_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::Close), size);

  internal::NativeViewport_Close_Params_Data* params =
      internal::NativeViewport_Close_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NativeViewportProxy::SetSize(
    mojo::SizePtr in_size) {
  size_t size = sizeof(internal::NativeViewport_SetSize_Params_Data);
  size += in_size.is_null()
              ? 0
              : GetSerializedSize_(*in_size);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::SetSize), size);

  internal::NativeViewport_SetSize_Params_Data* params =
      internal::NativeViewport_SetSize_Params_Data::New(builder.buffer());
  {Serialize_(in_size.get(),
               builder.buffer(),
               &params->size.ptr);
  }
  if (!params->size.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null size in NativeViewport.SetSize request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NativeViewportProxy::SetEventDispatcher(
    mojo::InterfaceHandle<mojo::NativeViewportEventDispatcher> in_dispatcher) {
  size_t size = sizeof(internal::NativeViewport_SetEventDispatcher_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::SetEventDispatcher), size);

  internal::NativeViewport_SetEventDispatcher_Params_Data* params =
      internal::NativeViewport_SetEventDispatcher_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_dispatcher.Pass(),
                                        &params->dispatcher);
  if (!params->dispatcher.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid dispatcher in NativeViewport.SetEventDispatcher request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NativeViewportProxy::GetContextProvider(
    mojo::InterfaceRequest<mojo::ContextProvider> in_provider) {
  size_t size = sizeof(internal::NativeViewport_GetContextProvider_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::GetContextProvider), size);

  internal::NativeViewport_GetContextProvider_Params_Data* params =
      internal::NativeViewport_GetContextProvider_Params_Data::New(builder.buffer());
  params->provider = in_provider.PassMessagePipe().release();
  if (!params->provider.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid provider in NativeViewport.GetContextProvider request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NativeViewportProxy::RequestMetrics(
    const RequestMetricsCallback& callback) {
  size_t size = sizeof(internal::NativeViewport_RequestMetrics_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::RequestMetrics), size);

  internal::NativeViewport_RequestMetrics_Params_Data* params =
      internal::NativeViewport_RequestMetrics_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new NativeViewport_RequestMetrics_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class NativeViewport_Create_ProxyToResponder
    : public NativeViewport::CreateCallback::Runnable {
 public:
  ~NativeViewport_Create_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "NativeViewport::Create(p_size.Pass(), p_requested_configuration.Pass(), callback) "
        "was never run.";
  }

  NativeViewport_Create_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(ViewportMetricsPtr in_metrics) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NativeViewport_Create_ProxyToResponder);
};

void NativeViewport_Create_ProxyToResponder::Run(
    ViewportMetricsPtr in_metrics) const {
  size_t size = sizeof(internal::NativeViewport_Create_ResponseParams_Data);
  size += in_metrics.is_null()
              ? 0
              : GetSerializedSize_(*in_metrics);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::Create), size, request_id_);
  internal::NativeViewport_Create_ResponseParams_Data* params =
      internal::NativeViewport_Create_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_metrics.get(),
               builder.buffer(),
               &params->metrics.ptr);
  }
  if (!params->metrics.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null metrics in NativeViewport.Create response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class NativeViewport_RequestMetrics_ProxyToResponder
    : public NativeViewport::RequestMetricsCallback::Runnable {
 public:
  ~NativeViewport_RequestMetrics_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "NativeViewport::RequestMetrics(callback) "
        "was never run.";
  }

  NativeViewport_RequestMetrics_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(ViewportMetricsPtr in_metrics) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(NativeViewport_RequestMetrics_ProxyToResponder);
};

void NativeViewport_RequestMetrics_ProxyToResponder::Run(
    ViewportMetricsPtr in_metrics) const {
  size_t size = sizeof(internal::NativeViewport_RequestMetrics_ResponseParams_Data);
  size += in_metrics.is_null()
              ? 0
              : GetSerializedSize_(*in_metrics);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::NativeViewport_Base::MessageOrdinals::RequestMetrics), size, request_id_);
  internal::NativeViewport_RequestMetrics_ResponseParams_Data* params =
      internal::NativeViewport_RequestMetrics_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_metrics.get(),
               builder.buffer(),
               &params->metrics.ptr);
  }
  if (!params->metrics.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null metrics in NativeViewport.RequestMetrics response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

NativeViewportStub::NativeViewportStub()
    : sink_(nullptr),
      control_message_handler_(NativeViewport::Version_) {
}

NativeViewportStub::~NativeViewportStub() {}

bool NativeViewportStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::NativeViewport_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NativeViewport_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NativeViewport_Base::MessageOrdinals::Create: {
      break;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Show: {
      internal::NativeViewport_Show_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_Show_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Show();
      return true;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Hide: {
      internal::NativeViewport_Hide_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_Hide_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Hide();
      return true;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Close: {
      internal::NativeViewport_Close_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_Close_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Close();
      return true;
    }
    case internal::NativeViewport_Base::MessageOrdinals::SetSize: {
      internal::NativeViewport_SetSize_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_SetSize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::SizePtr p_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->size.ptr) {
          p_size = mojo::Size::New();
          Deserialize_(params->size.ptr, p_size.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetSize(p_size.Pass());
      return true;
    }
    case internal::NativeViewport_Base::MessageOrdinals::SetEventDispatcher: {
      internal::NativeViewport_SetEventDispatcher_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_SetEventDispatcher_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<mojo::NativeViewportEventDispatcher> p_dispatcher {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->dispatcher, &p_dispatcher);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetEventDispatcher(p_dispatcher.Pass());
      return true;
    }
    case internal::NativeViewport_Base::MessageOrdinals::GetContextProvider: {
      internal::NativeViewport_GetContextProvider_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_GetContextProvider_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<mojo::ContextProvider> p_provider {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_provider.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->provider)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetContextProvider(p_provider.Pass());
      return true;
    }
    case internal::NativeViewport_Base::MessageOrdinals::RequestMetrics: {
      break;
    }
  }
  return false;
}

bool NativeViewportStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::NativeViewport_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NativeViewport_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NativeViewport_Base::MessageOrdinals::Create: {
      internal::NativeViewport_Create_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_Create_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      NativeViewport::CreateCallback::Runnable* runnable =
          new NativeViewport_Create_ProxyToResponder(
              message->request_id(), responder);
      NativeViewport::CreateCallback callback(runnable);
      
      mojo::SizePtr p_size {};
      SurfaceConfigurationPtr p_requested_configuration {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->size.ptr) {
          p_size = mojo::Size::New();
          Deserialize_(params->size.ptr, p_size.get());
        }
        if (params->requested_configuration.ptr) {
          p_requested_configuration = SurfaceConfiguration::New();
          Deserialize_(params->requested_configuration.ptr, p_requested_configuration.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Create(p_size.Pass(), p_requested_configuration.Pass(), callback);
      return true;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Show: {
      break;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Hide: {
      break;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Close: {
      break;
    }
    case internal::NativeViewport_Base::MessageOrdinals::SetSize: {
      break;
    }
    case internal::NativeViewport_Base::MessageOrdinals::SetEventDispatcher: {
      break;
    }
    case internal::NativeViewport_Base::MessageOrdinals::GetContextProvider: {
      break;
    }
    case internal::NativeViewport_Base::MessageOrdinals::RequestMetrics: {
      internal::NativeViewport_RequestMetrics_Params_Data* params =
          reinterpret_cast<internal::NativeViewport_RequestMetrics_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      NativeViewport::RequestMetricsCallback::Runnable* runnable =
          new NativeViewport_RequestMetrics_ProxyToResponder(
              message->request_id(), responder);
      NativeViewport::RequestMetricsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->RequestMetrics(callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
