// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_AUTHENTICATING_URL_LOADER_INTERCEPTOR_INTERFACES_AUTHENTICATING_URL_LOADER_INTERCEPTOR_META_FACTORY_MOJOM_SYNC_H_
#define MOJO_SERVICES_AUTHENTICATING_URL_LOADER_INTERCEPTOR_INTERFACES_AUTHENTICATING_URL_LOADER_INTERCEPTOR_META_FACTORY_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/authenticating_url_loader_interceptor/interfaces/authenticating_url_loader_interceptor_meta_factory.mojom-internal.h"
#include "mojo/services/authenticating_url_loader_interceptor/interfaces/authenticating_url_loader_interceptor_meta_factory.mojom-common.h"
#include "mojo/services/authentication/interfaces/authentication.mojom.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class AuthenticatingURLLoaderInterceptorMetaFactory_SynchronousProxy;
class AuthenticatingURLLoaderInterceptorMetaFactory_Synchronous
  : public internal::AuthenticatingURLLoaderInterceptorMetaFactory_Base {
 public:
  virtual ~AuthenticatingURLLoaderInterceptorMetaFactory_Synchronous() override {}
  
  using Proxy_ = AuthenticatingURLLoaderInterceptorMetaFactory_SynchronousProxy;
  virtual bool CreateURLLoaderInterceptorFactory(
      mojo::InterfaceRequest<mojo::URLLoaderInterceptorFactory> in_factory_request, mojo::InterfaceHandle<authentication::AuthenticationService> in_authentication_service)const= 0;
};

class AuthenticatingURLLoaderInterceptorMetaFactory_SynchronousProxy
    : public AuthenticatingURLLoaderInterceptorMetaFactory_Synchronous {
 public:
  explicit AuthenticatingURLLoaderInterceptorMetaFactory_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool CreateURLLoaderInterceptorFactory(mojo::InterfaceRequest<mojo::URLLoaderInterceptorFactory> in_factory_request, mojo::InterfaceHandle<authentication::AuthenticationService> in_authentication_service) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_AUTHENTICATING_URL_LOADER_INTERCEPTOR_INTERFACES_AUTHENTICATING_URL_LOADER_INTERCEPTOR_META_FACTORY_MOJOM_SYNC_H_
