// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/files/interfaces/file.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace files {

// --- Interface definitions ---
class File_Close_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Close_ForwardToCallback(
      const File::CloseCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::CloseCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Close_ForwardToCallback);
};
bool File_Close_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Close_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Close_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_err {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_err = static_cast<mojo::files::Error>(params->err);
  } while (false);
  callback_.Run(p_err);
  return true;
}
class File_Read_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Read_ForwardToCallback(
      const File::ReadCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::ReadCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Read_ForwardToCallback);
};
bool File_Read_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Read_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Read_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  mojo::Array<uint8_t> p_bytes_read {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    Deserialize_(params->bytes_read.ptr, &p_bytes_read);
  } while (false);
  callback_.Run(p_error, p_bytes_read.Pass());
  return true;
}
class File_Write_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Write_ForwardToCallback(
      const File::WriteCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::WriteCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Write_ForwardToCallback);
};
bool File_Write_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Write_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Write_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  uint32_t p_num_bytes_written {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    p_num_bytes_written = params->num_bytes_written;
  } while (false);
  callback_.Run(p_error, p_num_bytes_written);
  return true;
}
class File_ReadToStream_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_ReadToStream_ForwardToCallback(
      const File::ReadToStreamCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::ReadToStreamCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_ReadToStream_ForwardToCallback);
};
bool File_ReadToStream_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_ReadToStream_ResponseParams_Data* params =
      reinterpret_cast<internal::File_ReadToStream_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class File_WriteFromStream_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_WriteFromStream_ForwardToCallback(
      const File::WriteFromStreamCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::WriteFromStreamCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_WriteFromStream_ForwardToCallback);
};
bool File_WriteFromStream_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_WriteFromStream_ResponseParams_Data* params =
      reinterpret_cast<internal::File_WriteFromStream_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class File_Tell_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Tell_ForwardToCallback(
      const File::TellCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::TellCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Tell_ForwardToCallback);
};
bool File_Tell_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Tell_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Tell_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  int64_t p_position {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    p_position = params->position;
  } while (false);
  callback_.Run(p_error, p_position);
  return true;
}
class File_Seek_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Seek_ForwardToCallback(
      const File::SeekCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::SeekCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Seek_ForwardToCallback);
};
bool File_Seek_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Seek_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Seek_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  int64_t p_position {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    p_position = params->position;
  } while (false);
  callback_.Run(p_error, p_position);
  return true;
}
class File_Stat_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Stat_ForwardToCallback(
      const File::StatCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::StatCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Stat_ForwardToCallback);
};
bool File_Stat_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Stat_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Stat_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  mojo::files::FileInformationPtr p_file_information {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    if (params->file_information.ptr) {
      p_file_information = mojo::files::FileInformation::New();
      Deserialize_(params->file_information.ptr, p_file_information.get());
    }
  } while (false);
  callback_.Run(p_error, p_file_information.Pass());
  return true;
}
class File_Truncate_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Truncate_ForwardToCallback(
      const File::TruncateCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::TruncateCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Truncate_ForwardToCallback);
};
bool File_Truncate_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Truncate_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Truncate_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class File_Touch_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Touch_ForwardToCallback(
      const File::TouchCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::TouchCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Touch_ForwardToCallback);
};
bool File_Touch_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Touch_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Touch_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class File_Dup_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Dup_ForwardToCallback(
      const File::DupCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::DupCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Dup_ForwardToCallback);
};
bool File_Dup_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Dup_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Dup_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class File_Reopen_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Reopen_ForwardToCallback(
      const File::ReopenCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::ReopenCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Reopen_ForwardToCallback);
};
bool File_Reopen_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Reopen_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Reopen_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class File_AsBuffer_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_AsBuffer_ForwardToCallback(
      const File::AsBufferCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::AsBufferCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_AsBuffer_ForwardToCallback);
};
bool File_AsBuffer_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_AsBuffer_ResponseParams_Data* params =
      reinterpret_cast<internal::File_AsBuffer_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  mojo::ScopedSharedBufferHandle p_buffer {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    p_buffer.reset(mojo::internal::FetchAndReset(&params->buffer));
  } while (false);
  callback_.Run(p_error, p_buffer.Pass());
  return true;
}
class File_Ioctl_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  File_Ioctl_ForwardToCallback(
      const File::IoctlCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  File::IoctlCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Ioctl_ForwardToCallback);
};
bool File_Ioctl_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::File_Ioctl_ResponseParams_Data* params =
      reinterpret_cast<internal::File_Ioctl_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  mojo::Array<uint32_t> p_out_values {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    Deserialize_(params->out_values.ptr, &p_out_values);
  } while (false);
  callback_.Run(p_error, p_out_values.Pass());
  return true;
}

FileProxy::FileProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void FileProxy::Close(
    const CloseCallback& callback) {
  size_t size = sizeof(internal::File_Close_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Close), size);

  internal::File_Close_Params_Data* params =
      internal::File_Close_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Close_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Read(
    uint32_t in_num_bytes_to_read, int64_t in_offset, mojo::files::Whence in_whence, const ReadCallback& callback) {
  size_t size = sizeof(internal::File_Read_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Read), size);

  internal::File_Read_Params_Data* params =
      internal::File_Read_Params_Data::New(builder.buffer());
  params->num_bytes_to_read = in_num_bytes_to_read;
  params->offset = in_offset;
  params->whence =
    static_cast<int32_t>(in_whence);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Read_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Write(
    mojo::Array<uint8_t> in_bytes_to_write, int64_t in_offset, mojo::files::Whence in_whence, const WriteCallback& callback) {
  size_t size = sizeof(internal::File_Write_Params_Data);
  size += GetSerializedSize_(in_bytes_to_write);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Write), size);

  internal::File_Write_Params_Data* params =
      internal::File_Write_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams bytes_to_write_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_bytes_to_write, builder.buffer(), &params->bytes_to_write.ptr,
                          &bytes_to_write_validate_params);
  }
  if (!params->bytes_to_write.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null bytes_to_write in File.Write request");
  }
  params->offset = in_offset;
  params->whence =
    static_cast<int32_t>(in_whence);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Write_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::ReadToStream(
    mojo::ScopedDataPipeProducerHandle in_source, int64_t in_offset, mojo::files::Whence in_whence, int64_t in_num_bytes_to_read, const ReadToStreamCallback& callback) {
  size_t size = sizeof(internal::File_ReadToStream_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::ReadToStream), size);

  internal::File_ReadToStream_Params_Data* params =
      internal::File_ReadToStream_Params_Data::New(builder.buffer());
  params->source = in_source.release();
  if (!params->source.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid source in File.ReadToStream request");
  }
  params->offset = in_offset;
  params->whence =
    static_cast<int32_t>(in_whence);
  params->num_bytes_to_read = in_num_bytes_to_read;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_ReadToStream_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::WriteFromStream(
    mojo::ScopedDataPipeConsumerHandle in_sink, int64_t in_offset, mojo::files::Whence in_whence, const WriteFromStreamCallback& callback) {
  size_t size = sizeof(internal::File_WriteFromStream_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::WriteFromStream), size);

  internal::File_WriteFromStream_Params_Data* params =
      internal::File_WriteFromStream_Params_Data::New(builder.buffer());
  params->sink = in_sink.release();
  if (!params->sink.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid sink in File.WriteFromStream request");
  }
  params->offset = in_offset;
  params->whence =
    static_cast<int32_t>(in_whence);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_WriteFromStream_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Tell(
    const TellCallback& callback) {
  size_t size = sizeof(internal::File_Tell_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Tell), size);

  internal::File_Tell_Params_Data* params =
      internal::File_Tell_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Tell_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Seek(
    int64_t in_offset, mojo::files::Whence in_whence, const SeekCallback& callback) {
  size_t size = sizeof(internal::File_Seek_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Seek), size);

  internal::File_Seek_Params_Data* params =
      internal::File_Seek_Params_Data::New(builder.buffer());
  params->offset = in_offset;
  params->whence =
    static_cast<int32_t>(in_whence);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Seek_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Stat(
    const StatCallback& callback) {
  size_t size = sizeof(internal::File_Stat_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Stat), size);

  internal::File_Stat_Params_Data* params =
      internal::File_Stat_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Stat_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Truncate(
    int64_t in_size, const TruncateCallback& callback) {
  size_t size = sizeof(internal::File_Truncate_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Truncate), size);

  internal::File_Truncate_Params_Data* params =
      internal::File_Truncate_Params_Data::New(builder.buffer());
  params->size = in_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Truncate_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Touch(
    mojo::files::TimespecOrNowPtr in_atime, mojo::files::TimespecOrNowPtr in_mtime, const TouchCallback& callback) {
  size_t size = sizeof(internal::File_Touch_Params_Data);
  size += in_atime.is_null()
              ? 0
              : GetSerializedSize_(*in_atime);
  size += in_mtime.is_null()
              ? 0
              : GetSerializedSize_(*in_mtime);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Touch), size);

  internal::File_Touch_Params_Data* params =
      internal::File_Touch_Params_Data::New(builder.buffer());
  {Serialize_(in_atime.get(),
               builder.buffer(),
               &params->atime.ptr);
  }
  {Serialize_(in_mtime.get(),
               builder.buffer(),
               &params->mtime.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Touch_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Dup(
    mojo::InterfaceRequest<File> in_file, const DupCallback& callback) {
  size_t size = sizeof(internal::File_Dup_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Dup), size);

  internal::File_Dup_Params_Data* params =
      internal::File_Dup_Params_Data::New(builder.buffer());
  params->file = in_file.PassMessagePipe().release();
  if (!params->file.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid file in File.Dup request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Dup_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Reopen(
    mojo::InterfaceRequest<File> in_file, uint32_t in_open_flags, const ReopenCallback& callback) {
  size_t size = sizeof(internal::File_Reopen_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Reopen), size);

  internal::File_Reopen_Params_Data* params =
      internal::File_Reopen_Params_Data::New(builder.buffer());
  params->file = in_file.PassMessagePipe().release();
  if (!params->file.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid file in File.Reopen request");
  }
  params->open_flags = in_open_flags;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Reopen_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::AsBuffer(
    const AsBufferCallback& callback) {
  size_t size = sizeof(internal::File_AsBuffer_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::AsBuffer), size);

  internal::File_AsBuffer_Params_Data* params =
      internal::File_AsBuffer_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_AsBuffer_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FileProxy::Ioctl(
    uint32_t in_request, mojo::Array<uint32_t> in_in_values, const IoctlCallback& callback) {
  size_t size = sizeof(internal::File_Ioctl_Params_Data);
  size += GetSerializedSize_(in_in_values);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Ioctl), size);

  internal::File_Ioctl_Params_Data* params =
      internal::File_Ioctl_Params_Data::New(builder.buffer());
  params->request = in_request;
  {
    const mojo::internal::ArrayValidateParams in_values_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_in_values, builder.buffer(), &params->in_values.ptr,
                          &in_values_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new File_Ioctl_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Close_ProxyToResponder
    : public File::CloseCallback::Runnable {
 public:
  ~File_Close_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Close(callback) "
        "was never run.";
  }

  File_Close_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_err) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Close_ProxyToResponder);
};

void File_Close_ProxyToResponder::Run(
    mojo::files::Error in_err) const {
  size_t size = sizeof(internal::File_Close_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Close), size, request_id_);
  internal::File_Close_ResponseParams_Data* params =
      internal::File_Close_ResponseParams_Data::New(builder.buffer());
  params->err =
    static_cast<int32_t>(in_err);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Read_ProxyToResponder
    : public File::ReadCallback::Runnable {
 public:
  ~File_Read_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Read(p_num_bytes_to_read, p_offset, p_whence, callback) "
        "was never run.";
  }

  File_Read_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, mojo::Array<uint8_t> in_bytes_read) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Read_ProxyToResponder);
};

void File_Read_ProxyToResponder::Run(
    mojo::files::Error in_error, mojo::Array<uint8_t> in_bytes_read) const {
  size_t size = sizeof(internal::File_Read_ResponseParams_Data);
  size += GetSerializedSize_(in_bytes_read);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Read), size, request_id_);
  internal::File_Read_ResponseParams_Data* params =
      internal::File_Read_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  {
    const mojo::internal::ArrayValidateParams bytes_read_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_bytes_read, builder.buffer(), &params->bytes_read.ptr,
                          &bytes_read_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Write_ProxyToResponder
    : public File::WriteCallback::Runnable {
 public:
  ~File_Write_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Write(p_bytes_to_write.Pass(), p_offset, p_whence, callback) "
        "was never run.";
  }

  File_Write_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, uint32_t in_num_bytes_written) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Write_ProxyToResponder);
};

void File_Write_ProxyToResponder::Run(
    mojo::files::Error in_error, uint32_t in_num_bytes_written) const {
  size_t size = sizeof(internal::File_Write_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Write), size, request_id_);
  internal::File_Write_ResponseParams_Data* params =
      internal::File_Write_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->num_bytes_written = in_num_bytes_written;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_ReadToStream_ProxyToResponder
    : public File::ReadToStreamCallback::Runnable {
 public:
  ~File_ReadToStream_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::ReadToStream(p_source.Pass(), p_offset, p_whence, p_num_bytes_to_read, callback) "
        "was never run.";
  }

  File_ReadToStream_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_ReadToStream_ProxyToResponder);
};

void File_ReadToStream_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::File_ReadToStream_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::ReadToStream), size, request_id_);
  internal::File_ReadToStream_ResponseParams_Data* params =
      internal::File_ReadToStream_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_WriteFromStream_ProxyToResponder
    : public File::WriteFromStreamCallback::Runnable {
 public:
  ~File_WriteFromStream_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::WriteFromStream(p_sink.Pass(), p_offset, p_whence, callback) "
        "was never run.";
  }

  File_WriteFromStream_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_WriteFromStream_ProxyToResponder);
};

void File_WriteFromStream_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::File_WriteFromStream_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::WriteFromStream), size, request_id_);
  internal::File_WriteFromStream_ResponseParams_Data* params =
      internal::File_WriteFromStream_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Tell_ProxyToResponder
    : public File::TellCallback::Runnable {
 public:
  ~File_Tell_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Tell(callback) "
        "was never run.";
  }

  File_Tell_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, int64_t in_position) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Tell_ProxyToResponder);
};

void File_Tell_ProxyToResponder::Run(
    mojo::files::Error in_error, int64_t in_position) const {
  size_t size = sizeof(internal::File_Tell_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Tell), size, request_id_);
  internal::File_Tell_ResponseParams_Data* params =
      internal::File_Tell_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->position = in_position;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Seek_ProxyToResponder
    : public File::SeekCallback::Runnable {
 public:
  ~File_Seek_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Seek(p_offset, p_whence, callback) "
        "was never run.";
  }

  File_Seek_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, int64_t in_position) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Seek_ProxyToResponder);
};

void File_Seek_ProxyToResponder::Run(
    mojo::files::Error in_error, int64_t in_position) const {
  size_t size = sizeof(internal::File_Seek_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Seek), size, request_id_);
  internal::File_Seek_ResponseParams_Data* params =
      internal::File_Seek_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->position = in_position;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Stat_ProxyToResponder
    : public File::StatCallback::Runnable {
 public:
  ~File_Stat_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Stat(callback) "
        "was never run.";
  }

  File_Stat_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, mojo::files::FileInformationPtr in_file_information) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Stat_ProxyToResponder);
};

void File_Stat_ProxyToResponder::Run(
    mojo::files::Error in_error, mojo::files::FileInformationPtr in_file_information) const {
  size_t size = sizeof(internal::File_Stat_ResponseParams_Data);
  size += in_file_information.is_null()
              ? 0
              : GetSerializedSize_(*in_file_information);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Stat), size, request_id_);
  internal::File_Stat_ResponseParams_Data* params =
      internal::File_Stat_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  {Serialize_(in_file_information.get(),
               builder.buffer(),
               &params->file_information.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Truncate_ProxyToResponder
    : public File::TruncateCallback::Runnable {
 public:
  ~File_Truncate_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Truncate(p_size, callback) "
        "was never run.";
  }

  File_Truncate_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Truncate_ProxyToResponder);
};

void File_Truncate_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::File_Truncate_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Truncate), size, request_id_);
  internal::File_Truncate_ResponseParams_Data* params =
      internal::File_Truncate_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Touch_ProxyToResponder
    : public File::TouchCallback::Runnable {
 public:
  ~File_Touch_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Touch(p_atime.Pass(), p_mtime.Pass(), callback) "
        "was never run.";
  }

  File_Touch_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Touch_ProxyToResponder);
};

void File_Touch_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::File_Touch_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Touch), size, request_id_);
  internal::File_Touch_ResponseParams_Data* params =
      internal::File_Touch_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Dup_ProxyToResponder
    : public File::DupCallback::Runnable {
 public:
  ~File_Dup_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Dup(p_file.Pass(), callback) "
        "was never run.";
  }

  File_Dup_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Dup_ProxyToResponder);
};

void File_Dup_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::File_Dup_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Dup), size, request_id_);
  internal::File_Dup_ResponseParams_Data* params =
      internal::File_Dup_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Reopen_ProxyToResponder
    : public File::ReopenCallback::Runnable {
 public:
  ~File_Reopen_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Reopen(p_file.Pass(), p_open_flags, callback) "
        "was never run.";
  }

  File_Reopen_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Reopen_ProxyToResponder);
};

void File_Reopen_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::File_Reopen_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Reopen), size, request_id_);
  internal::File_Reopen_ResponseParams_Data* params =
      internal::File_Reopen_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_AsBuffer_ProxyToResponder
    : public File::AsBufferCallback::Runnable {
 public:
  ~File_AsBuffer_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::AsBuffer(callback) "
        "was never run.";
  }

  File_AsBuffer_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, mojo::ScopedSharedBufferHandle in_buffer) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_AsBuffer_ProxyToResponder);
};

void File_AsBuffer_ProxyToResponder::Run(
    mojo::files::Error in_error, mojo::ScopedSharedBufferHandle in_buffer) const {
  size_t size = sizeof(internal::File_AsBuffer_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::AsBuffer), size, request_id_);
  internal::File_AsBuffer_ResponseParams_Data* params =
      internal::File_AsBuffer_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->buffer = in_buffer.release();
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class File_Ioctl_ProxyToResponder
    : public File::IoctlCallback::Runnable {
 public:
  ~File_Ioctl_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "File::Ioctl(p_request, p_in_values.Pass(), callback) "
        "was never run.";
  }

  File_Ioctl_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, mojo::Array<uint32_t> in_out_values) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(File_Ioctl_ProxyToResponder);
};

void File_Ioctl_ProxyToResponder::Run(
    mojo::files::Error in_error, mojo::Array<uint32_t> in_out_values) const {
  size_t size = sizeof(internal::File_Ioctl_ResponseParams_Data);
  size += GetSerializedSize_(in_out_values);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::File_Base::MessageOrdinals::Ioctl), size, request_id_);
  internal::File_Ioctl_ResponseParams_Data* params =
      internal::File_Ioctl_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  {
    const mojo::internal::ArrayValidateParams out_values_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_out_values, builder.buffer(), &params->out_values.ptr,
                          &out_values_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

FileStub::FileStub()
    : sink_(nullptr),
      control_message_handler_(File::Version_) {
}

FileStub::~FileStub() {}

bool FileStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::File_Base::MessageOrdinals method_ordinal =
      static_cast<internal::File_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::File_Base::MessageOrdinals::Close: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Read: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Write: {
      break;
    }
    case internal::File_Base::MessageOrdinals::ReadToStream: {
      break;
    }
    case internal::File_Base::MessageOrdinals::WriteFromStream: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Tell: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Seek: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Stat: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Truncate: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Touch: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Dup: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Reopen: {
      break;
    }
    case internal::File_Base::MessageOrdinals::AsBuffer: {
      break;
    }
    case internal::File_Base::MessageOrdinals::Ioctl: {
      break;
    }
  }
  return false;
}

bool FileStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::File_Base::MessageOrdinals method_ordinal =
      static_cast<internal::File_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::File_Base::MessageOrdinals::Close: {
      internal::File_Close_Params_Data* params =
          reinterpret_cast<internal::File_Close_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::CloseCallback::Runnable* runnable =
          new File_Close_ProxyToResponder(
              message->request_id(), responder);
      File::CloseCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Close(callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Read: {
      internal::File_Read_Params_Data* params =
          reinterpret_cast<internal::File_Read_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::ReadCallback::Runnable* runnable =
          new File_Read_ProxyToResponder(
              message->request_id(), responder);
      File::ReadCallback callback(runnable);
      
      uint32_t p_num_bytes_to_read {};
      int64_t p_offset {};
      mojo::files::Whence p_whence {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_num_bytes_to_read = params->num_bytes_to_read;
        p_offset = params->offset;
        p_whence = static_cast<mojo::files::Whence>(params->whence);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Read(p_num_bytes_to_read, p_offset, p_whence, callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Write: {
      internal::File_Write_Params_Data* params =
          reinterpret_cast<internal::File_Write_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::WriteCallback::Runnable* runnable =
          new File_Write_ProxyToResponder(
              message->request_id(), responder);
      File::WriteCallback callback(runnable);
      
      mojo::Array<uint8_t> p_bytes_to_write {};
      int64_t p_offset {};
      mojo::files::Whence p_whence {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->bytes_to_write.ptr, &p_bytes_to_write);
        p_offset = params->offset;
        p_whence = static_cast<mojo::files::Whence>(params->whence);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Write(p_bytes_to_write.Pass(), p_offset, p_whence, callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::ReadToStream: {
      internal::File_ReadToStream_Params_Data* params =
          reinterpret_cast<internal::File_ReadToStream_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::ReadToStreamCallback::Runnable* runnable =
          new File_ReadToStream_ProxyToResponder(
              message->request_id(), responder);
      File::ReadToStreamCallback callback(runnable);
      
      mojo::ScopedDataPipeProducerHandle p_source {};
      int64_t p_offset {};
      mojo::files::Whence p_whence {};
      int64_t p_num_bytes_to_read {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_source.reset(mojo::internal::FetchAndReset(&params->source));
        p_offset = params->offset;
        p_whence = static_cast<mojo::files::Whence>(params->whence);
        p_num_bytes_to_read = params->num_bytes_to_read;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ReadToStream(p_source.Pass(), p_offset, p_whence, p_num_bytes_to_read, callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::WriteFromStream: {
      internal::File_WriteFromStream_Params_Data* params =
          reinterpret_cast<internal::File_WriteFromStream_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::WriteFromStreamCallback::Runnable* runnable =
          new File_WriteFromStream_ProxyToResponder(
              message->request_id(), responder);
      File::WriteFromStreamCallback callback(runnable);
      
      mojo::ScopedDataPipeConsumerHandle p_sink {};
      int64_t p_offset {};
      mojo::files::Whence p_whence {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_sink.reset(mojo::internal::FetchAndReset(&params->sink));
        p_offset = params->offset;
        p_whence = static_cast<mojo::files::Whence>(params->whence);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->WriteFromStream(p_sink.Pass(), p_offset, p_whence, callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Tell: {
      internal::File_Tell_Params_Data* params =
          reinterpret_cast<internal::File_Tell_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::TellCallback::Runnable* runnable =
          new File_Tell_ProxyToResponder(
              message->request_id(), responder);
      File::TellCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Tell(callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Seek: {
      internal::File_Seek_Params_Data* params =
          reinterpret_cast<internal::File_Seek_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::SeekCallback::Runnable* runnable =
          new File_Seek_ProxyToResponder(
              message->request_id(), responder);
      File::SeekCallback callback(runnable);
      
      int64_t p_offset {};
      mojo::files::Whence p_whence {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_offset = params->offset;
        p_whence = static_cast<mojo::files::Whence>(params->whence);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Seek(p_offset, p_whence, callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Stat: {
      internal::File_Stat_Params_Data* params =
          reinterpret_cast<internal::File_Stat_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::StatCallback::Runnable* runnable =
          new File_Stat_ProxyToResponder(
              message->request_id(), responder);
      File::StatCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Stat(callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Truncate: {
      internal::File_Truncate_Params_Data* params =
          reinterpret_cast<internal::File_Truncate_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::TruncateCallback::Runnable* runnable =
          new File_Truncate_ProxyToResponder(
              message->request_id(), responder);
      File::TruncateCallback callback(runnable);
      
      int64_t p_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_size = params->size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Truncate(p_size, callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Touch: {
      internal::File_Touch_Params_Data* params =
          reinterpret_cast<internal::File_Touch_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::TouchCallback::Runnable* runnable =
          new File_Touch_ProxyToResponder(
              message->request_id(), responder);
      File::TouchCallback callback(runnable);
      
      mojo::files::TimespecOrNowPtr p_atime {};
      mojo::files::TimespecOrNowPtr p_mtime {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->atime.ptr) {
          p_atime = mojo::files::TimespecOrNow::New();
          Deserialize_(params->atime.ptr, p_atime.get());
        }
        if (params->mtime.ptr) {
          p_mtime = mojo::files::TimespecOrNow::New();
          Deserialize_(params->mtime.ptr, p_mtime.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Touch(p_atime.Pass(), p_mtime.Pass(), callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Dup: {
      internal::File_Dup_Params_Data* params =
          reinterpret_cast<internal::File_Dup_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::DupCallback::Runnable* runnable =
          new File_Dup_ProxyToResponder(
              message->request_id(), responder);
      File::DupCallback callback(runnable);
      
      mojo::InterfaceRequest<File> p_file {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_file.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->file)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Dup(p_file.Pass(), callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Reopen: {
      internal::File_Reopen_Params_Data* params =
          reinterpret_cast<internal::File_Reopen_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::ReopenCallback::Runnable* runnable =
          new File_Reopen_ProxyToResponder(
              message->request_id(), responder);
      File::ReopenCallback callback(runnable);
      
      mojo::InterfaceRequest<File> p_file {};
      uint32_t p_open_flags {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_file.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->file)));
        p_open_flags = params->open_flags;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Reopen(p_file.Pass(), p_open_flags, callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::AsBuffer: {
      internal::File_AsBuffer_Params_Data* params =
          reinterpret_cast<internal::File_AsBuffer_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::AsBufferCallback::Runnable* runnable =
          new File_AsBuffer_ProxyToResponder(
              message->request_id(), responder);
      File::AsBufferCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AsBuffer(callback);
      return true;
    }
    case internal::File_Base::MessageOrdinals::Ioctl: {
      internal::File_Ioctl_Params_Data* params =
          reinterpret_cast<internal::File_Ioctl_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      File::IoctlCallback::Runnable* runnable =
          new File_Ioctl_ProxyToResponder(
              message->request_id(), responder);
      File::IoctlCallback callback(runnable);
      
      uint32_t p_request {};
      mojo::Array<uint32_t> p_in_values {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_request = params->request;
        Deserialize_(params->in_values.ptr, &p_in_values);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Ioctl(p_request, p_in_values.Pass(), callback);
      return true;
    }
  }
  return false;
}

}  // namespace files
}  // namespace mojo
