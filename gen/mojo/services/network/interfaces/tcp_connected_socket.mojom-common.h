// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_TCP_CONNECTED_SOCKET_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_TCP_CONNECTED_SOCKET_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/tcp_connected_socket.mojom-internal.h"
namespace mojo {

// --- Interface Forward Declarations ---
class TCPConnectedSocket;
class TCPConnectedSocketRequestValidator;
class TCPConnectedSocket_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class TCPConnectedSocket_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TCPConnectedSocketRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = TCPConnectedSocket_Synchronous;
  enum class MessageOrdinals : uint32_t {
  };


  virtual ~TCPConnectedSocket_Base() {}
};

}  // namespace internal

// Async interface declaration

class TCPConnectedSocketProxy;
class TCPConnectedSocketStub;
class TCPConnectedSocket_Synchronous;

class TCPConnectedSocketRequestValidator;

class TCPConnectedSocket : public internal::TCPConnectedSocket_Base {
 public:
  virtual ~TCPConnectedSocket() override {}

  using Proxy_ = TCPConnectedSocketProxy;
  using Stub_ = TCPConnectedSocketStub;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class TCPConnectedSocketRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      
}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_TCP_CONNECTED_SOCKET_MOJOM_COMMON_H_
