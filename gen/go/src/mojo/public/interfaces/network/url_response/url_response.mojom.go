// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/network/url_response.mojom
//

package url_response

import (
	sort "sort"
	network_error "mojo/public/interfaces/network/network_error"
	fmt "fmt"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	http_header "mojo/public/interfaces/network/http_header"
)


type UrlResponse struct {
	Error *network_error.NetworkError
	Body *system.ConsumerHandle
	Url *string
	StatusCode uint32
	StatusLine *string
	Headers *[]http_header.HttpHeader
	MimeType *string
	Charset *string
	RedirectMethod *string
	RedirectUrl *string
	RedirectReferrer *string
}


func (s *UrlResponse) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(80, 0)
	if s.Error == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.Error).Encode(encoder); err != nil {
			return err
		}
	}
	if s.Body == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.Body)); err != nil {
			return err
		}
	}
	if err := encoder.WriteUint32(s.StatusCode); err != nil {
		return err
	}
	if s.Url == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.Url)); err != nil {
			return err
		}
	}
	if s.StatusLine == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.StatusLine)); err != nil {
			return err
		}
	}
	if s.Headers == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.Headers))), 64)
		for _, elem0 := range (*s.Headers) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			if err := elem0.Encode(encoder); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if s.MimeType == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.MimeType)); err != nil {
			return err
		}
	}
	if s.Charset == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.Charset)); err != nil {
			return err
		}
	}
	if s.RedirectMethod == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.RedirectMethod)); err != nil {
			return err
		}
	}
	if s.RedirectUrl == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.RedirectUrl)); err != nil {
			return err
		}
	}
	if s.RedirectReferrer == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.RedirectReferrer)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLResponse_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{88, 0},
}

func (s *UrlResponse) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLResponse_Versions), func(i int) bool {
		return uRLResponse_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLResponse_Versions) {
		if uRLResponse_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLResponse_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Error = nil
		} else {
			s.Error = new(network_error.NetworkError)
			if err := (*s.Error).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.Body = &handle0
		} else {
			s.Body = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.StatusCode = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Url = nil
		} else {
			s.Url = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.Url) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.StatusLine = nil
		} else {
			s.StatusLine = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.StatusLine) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Headers = nil
		} else {
			s.Headers = new([]http_header.HttpHeader)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.Headers) = make([]http_header.HttpHeader, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := (*s.Headers)[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.MimeType = nil
		} else {
			s.MimeType = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.MimeType) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Charset = nil
		} else {
			s.Charset = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.Charset) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.RedirectMethod = nil
		} else {
			s.RedirectMethod = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.RedirectMethod) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.RedirectUrl = nil
		} else {
			s.RedirectUrl = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.RedirectUrl) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.RedirectReferrer = nil
		} else {
			s.RedirectReferrer = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.RedirectReferrer) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

