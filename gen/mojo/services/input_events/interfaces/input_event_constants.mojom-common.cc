// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/input_events/interfaces/input_event_constants.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---

}  // namespace internal

// --- Request and response validator definitions for interfaces --- 

// --- Enums ---
bool EventType_IsValidValue(EventType value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const EventType& val) {
  return (stream << static_cast<int32_t>(val));
}
bool EventFlags_IsValidValue(EventFlags value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const EventFlags& val) {
  return (stream << static_cast<int32_t>(val));
}
bool MouseEventFlags_IsValidValue(MouseEventFlags value) {
  switch (static_cast<int32_t>(value)) {
    case 65536:
    case 131072:
    case 262144:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const MouseEventFlags& val) {
  return (stream << static_cast<int32_t>(val));
}
bool PointerKind_IsValidValue(PointerKind value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
    case 1:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const PointerKind& val) {
  return (stream << static_cast<int32_t>(val));
}

// Base interface definitions (Name_, Version_, Constants, Enums)

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---
}  // namespace mojo
