// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_URL_RESPONSE_DISK_CACHE_INTERFACES_URL_RESPONSE_DISK_CACHE_MOJOM_SYNC_H_
#define MOJO_SERVICES_URL_RESPONSE_DISK_CACHE_INTERFACES_URL_RESPONSE_DISK_CACHE_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/url_response_disk_cache/interfaces/url_response_disk_cache.mojom-internal.h"
#include "mojo/services/url_response_disk_cache/interfaces/url_response_disk_cache.mojom-common.h"
#include "mojo/public/interfaces/network/url_response.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class URLResponseDiskCache_SynchronousProxy;
class URLResponseDiskCache_Synchronous
  : public internal::URLResponseDiskCache_Base {
 public:
  virtual ~URLResponseDiskCache_Synchronous() override {}
  
  using Proxy_ = URLResponseDiskCache_SynchronousProxy;
  virtual bool Get(
      const mojo::String& in_url, mojo::URLResponsePtr* out_response, mojo::Array<uint8_t>* out_file_path, mojo::Array<uint8_t>* out_cache_dir_path)= 0;
  virtual bool Validate(
      const mojo::String& in_url)const= 0;
  virtual bool Update(
      mojo::URLResponsePtr in_response)const= 0;
  virtual bool UpdateAndGet(
      mojo::URLResponsePtr in_response, mojo::Array<uint8_t>* out_file_path, mojo::Array<uint8_t>* out_cache_dir_path)= 0;
  virtual bool UpdateAndGetExtracted(
      mojo::URLResponsePtr in_response, mojo::Array<uint8_t>* out_extracted_dir_path, mojo::Array<uint8_t>* out_cache_dir_path)= 0;
};

class URLResponseDiskCache_SynchronousProxy
    : public URLResponseDiskCache_Synchronous {
 public:
  explicit URLResponseDiskCache_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Get(const mojo::String& in_url, mojo::URLResponsePtr* out_response, mojo::Array<uint8_t>* out_file_path, mojo::Array<uint8_t>* out_cache_dir_path) override;
  bool Validate(const mojo::String& in_url) const  override;
  bool Update(mojo::URLResponsePtr in_response) const  override;
  bool UpdateAndGet(mojo::URLResponsePtr in_response, mojo::Array<uint8_t>* out_file_path, mojo::Array<uint8_t>* out_cache_dir_path) override;
  bool UpdateAndGetExtracted(mojo::URLResponsePtr in_response, mojo::Array<uint8_t>* out_extracted_dir_path, mojo::Array<uint8_t>* out_cache_dir_path) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_URL_RESPONSE_DISK_CACHE_INTERFACES_URL_RESPONSE_DISK_CACHE_MOJOM_SYNC_H_
