// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SHELL_APPLICATION_MANAGER_TEST_MOJOM_INTERNAL_H_
#define SHELL_APPLICATION_MANAGER_TEST_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace shell {



namespace internal {




#pragma pack(push, 1)



class TestService_Test_Params_Data {
 public:
  static TestService_Test_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer test_string;

 private:
  TestService_Test_Params_Data();
  ~TestService_Test_Params_Data() = delete;
};
static_assert(sizeof(TestService_Test_Params_Data) == 16,
              "Bad sizeof(TestService_Test_Params_Data)");

class TestService_Test_ResponseParams_Data {
 public:
  static TestService_Test_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestService_Test_ResponseParams_Data();
  ~TestService_Test_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestService_Test_ResponseParams_Data) == 8,
              "Bad sizeof(TestService_Test_ResponseParams_Data)");


class TestA_CallB_Params_Data {
 public:
  static TestA_CallB_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestA_CallB_Params_Data();
  ~TestA_CallB_Params_Data() = delete;
};
static_assert(sizeof(TestA_CallB_Params_Data) == 8,
              "Bad sizeof(TestA_CallB_Params_Data)");


class TestB_B_Params_Data {
 public:
  static TestB_B_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestB_B_Params_Data();
  ~TestB_B_Params_Data() = delete;
};
static_assert(sizeof(TestB_B_Params_Data) == 8,
              "Bad sizeof(TestB_B_Params_Data)");

class TestB_B_ResponseParams_Data {
 public:
  static TestB_B_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestB_B_ResponseParams_Data();
  ~TestB_B_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestB_B_ResponseParams_Data) == 8,
              "Bad sizeof(TestB_B_ResponseParams_Data)");


class TestC_C_Params_Data {
 public:
  static TestC_C_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestC_C_Params_Data();
  ~TestC_C_Params_Data() = delete;
};
static_assert(sizeof(TestC_C_Params_Data) == 8,
              "Bad sizeof(TestC_C_Params_Data)");

class TestC_C_ResponseParams_Data {
 public:
  static TestC_C_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestC_C_ResponseParams_Data();
  ~TestC_C_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestC_C_ResponseParams_Data) == 8,
              "Bad sizeof(TestC_C_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace shell

#endif  // SHELL_APPLICATION_MANAGER_TEST_MOJOM_INTERNAL_H_
