// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/gpu/interfaces/gpu_capabilities.mojom
//

package gpu_capabilities

import (
	sort "sort"
	fmt "fmt"
	bindings "mojo/public/go/bindings"
)


type GpuShaderPrecision struct {
	MinRange int32
	MaxRange int32
	Precision int32
}


func (s *GpuShaderPrecision) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(s.MinRange); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxRange); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.Precision); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var gpuShaderPrecision_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *GpuShaderPrecision) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(gpuShaderPrecision_Versions), func(i int) bool {
		return gpuShaderPrecision_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(gpuShaderPrecision_Versions) {
		if gpuShaderPrecision_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := gpuShaderPrecision_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MinRange = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxRange = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Precision = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type GpuPerStagePrecisions struct {
	LowInt GpuShaderPrecision
	MediumInt GpuShaderPrecision
	HighInt GpuShaderPrecision
	LowFloat GpuShaderPrecision
	MediumFloat GpuShaderPrecision
	HighFloat GpuShaderPrecision
}


func (s *GpuPerStagePrecisions) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(48, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.LowInt.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.MediumInt.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.HighInt.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.LowFloat.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.MediumFloat.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.HighFloat.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var gpuPerStagePrecisions_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{56, 0},
}

func (s *GpuPerStagePrecisions) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(gpuPerStagePrecisions_Versions), func(i int) bool {
		return gpuPerStagePrecisions_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(gpuPerStagePrecisions_Versions) {
		if gpuPerStagePrecisions_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := gpuPerStagePrecisions_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.LowInt.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.MediumInt.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.HighInt.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.LowFloat.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.MediumFloat.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.HighFloat.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type GpuCapabilities struct {
	VertexShaderPrecisions GpuPerStagePrecisions
	FragmentShaderPrecisions GpuPerStagePrecisions
	MaxCombinedTextureImageUnits int32
	MaxCubeMapTextureSize int32
	MaxFragmentUniformVectors int32
	MaxRenderbufferSize int32
	MaxTextureImageUnits int32
	MaxTextureSize int32
	MaxVaryingVectors int32
	MaxVertexAttribs int32
	MaxVertexTextureImageUnits int32
	MaxVertexUniformVectors int32
	NumCompressedTextureFormats int32
	NumShaderBinaryFormats int32
	BindGeneratesResourceChromium int32
	PostSubBuffer bool
	EglImageExternal bool
	TextureFormatBgra8888 bool
	TextureFormatEtc1 bool
	TextureFormatEtc1Npot bool
	TextureRectangle bool
	Iosurface bool
	TextureUsage bool
	TextureStorage bool
	DiscardFramebuffer bool
	SyncQuery bool
	Image bool
	FutureSyncPoints bool
	BlendEquationAdvanced bool
	BlendEquationAdvancedCoherent bool
}


func (s *GpuCapabilities) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(72, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.VertexShaderPrecisions.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.FragmentShaderPrecisions.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxCombinedTextureImageUnits); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxCubeMapTextureSize); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxFragmentUniformVectors); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxRenderbufferSize); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxTextureImageUnits); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxTextureSize); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxVaryingVectors); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxVertexAttribs); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxVertexTextureImageUnits); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.MaxVertexUniformVectors); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.NumCompressedTextureFormats); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.NumShaderBinaryFormats); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.BindGeneratesResourceChromium); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.PostSubBuffer); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.EglImageExternal); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.TextureFormatBgra8888); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.TextureFormatEtc1); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.TextureFormatEtc1Npot); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.TextureRectangle); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.Iosurface); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.TextureUsage); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.TextureStorage); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.DiscardFramebuffer); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.SyncQuery); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.Image); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.FutureSyncPoints); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.BlendEquationAdvanced); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.BlendEquationAdvancedCoherent); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var gpuCapabilities_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{80, 0},
}

func (s *GpuCapabilities) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(gpuCapabilities_Versions), func(i int) bool {
		return gpuCapabilities_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(gpuCapabilities_Versions) {
		if gpuCapabilities_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := gpuCapabilities_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.VertexShaderPrecisions.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.FragmentShaderPrecisions.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxCombinedTextureImageUnits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxCubeMapTextureSize = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxFragmentUniformVectors = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxRenderbufferSize = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxTextureImageUnits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxTextureSize = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxVaryingVectors = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxVertexAttribs = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxVertexTextureImageUnits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.MaxVertexUniformVectors = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.NumCompressedTextureFormats = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.NumShaderBinaryFormats = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.BindGeneratesResourceChromium = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.PostSubBuffer = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.EglImageExternal = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.TextureFormatBgra8888 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.TextureFormatEtc1 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.TextureFormatEtc1Npot = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.TextureRectangle = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.Iosurface = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.TextureUsage = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.TextureStorage = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.DiscardFramebuffer = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.SyncQuery = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.Image = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.FutureSyncPoints = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.BlendEquationAdvanced = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.BlendEquationAdvancedCoherent = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

