// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/clipboard/interfaces/clipboard.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class Clipboard_GetSequenceNumber_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Clipboard_GetSequenceNumber_ForwardToCallback(
      const Clipboard::GetSequenceNumberCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Clipboard::GetSequenceNumberCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Clipboard_GetSequenceNumber_ForwardToCallback);
};
bool Clipboard_GetSequenceNumber_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Clipboard_GetSequenceNumber_ResponseParams_Data* params =
      reinterpret_cast<internal::Clipboard_GetSequenceNumber_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint64_t p_sequence {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_sequence = params->sequence;
  } while (false);
  callback_.Run(p_sequence);
  return true;
}
class Clipboard_GetAvailableMimeTypes_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Clipboard_GetAvailableMimeTypes_ForwardToCallback(
      const Clipboard::GetAvailableMimeTypesCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Clipboard::GetAvailableMimeTypesCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Clipboard_GetAvailableMimeTypes_ForwardToCallback);
};
bool Clipboard_GetAvailableMimeTypes_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data* params =
      reinterpret_cast<internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<mojo::String> p_types {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->types.ptr, &p_types);
  } while (false);
  callback_.Run(p_types.Pass());
  return true;
}
class Clipboard_ReadMimeType_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Clipboard_ReadMimeType_ForwardToCallback(
      const Clipboard::ReadMimeTypeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Clipboard::ReadMimeTypeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Clipboard_ReadMimeType_ForwardToCallback);
};
bool Clipboard_ReadMimeType_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Clipboard_ReadMimeType_ResponseParams_Data* params =
      reinterpret_cast<internal::Clipboard_ReadMimeType_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<uint8_t> p_data {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->data.ptr, &p_data);
  } while (false);
  callback_.Run(p_data.Pass());
  return true;
}

ClipboardProxy::ClipboardProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ClipboardProxy::GetSequenceNumber(
    Clipboard::Type in_clipboard_type, const GetSequenceNumberCallback& callback) {
  size_t size = sizeof(internal::Clipboard_GetSequenceNumber_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Clipboard_Base::MessageOrdinals::GetSequenceNumber), size);

  internal::Clipboard_GetSequenceNumber_Params_Data* params =
      internal::Clipboard_GetSequenceNumber_Params_Data::New(builder.buffer());
  params->clipboard_type =
    static_cast<int32_t>(in_clipboard_type);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Clipboard_GetSequenceNumber_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ClipboardProxy::GetAvailableMimeTypes(
    Clipboard::Type in_clipboard_types, const GetAvailableMimeTypesCallback& callback) {
  size_t size = sizeof(internal::Clipboard_GetAvailableMimeTypes_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Clipboard_Base::MessageOrdinals::GetAvailableMimeTypes), size);

  internal::Clipboard_GetAvailableMimeTypes_Params_Data* params =
      internal::Clipboard_GetAvailableMimeTypes_Params_Data::New(builder.buffer());
  params->clipboard_types =
    static_cast<int32_t>(in_clipboard_types);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Clipboard_GetAvailableMimeTypes_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ClipboardProxy::ReadMimeType(
    Clipboard::Type in_clipboard_type, const mojo::String& in_mime_type, const ReadMimeTypeCallback& callback) {
  size_t size = sizeof(internal::Clipboard_ReadMimeType_Params_Data);
  size += GetSerializedSize_(in_mime_type);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Clipboard_Base::MessageOrdinals::ReadMimeType), size);

  internal::Clipboard_ReadMimeType_Params_Data* params =
      internal::Clipboard_ReadMimeType_Params_Data::New(builder.buffer());
  params->clipboard_type =
    static_cast<int32_t>(in_clipboard_type);
  SerializeString_(in_mime_type, builder.buffer(), &params->mime_type.ptr);
  if (!params->mime_type.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null mime_type in Clipboard.ReadMimeType request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Clipboard_ReadMimeType_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ClipboardProxy::WriteClipboardData(
    Clipboard::Type in_clipboard_type, mojo::Map<mojo::String, mojo::Array<uint8_t> > in_data) {
  size_t size = sizeof(internal::Clipboard_WriteClipboardData_Params_Data);
  size += GetSerializedSize_(in_data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Clipboard_Base::MessageOrdinals::WriteClipboardData), size);

  internal::Clipboard_WriteClipboardData_Params_Data* params =
      internal::Clipboard_WriteClipboardData_Params_Data::New(builder.buffer());
  params->clipboard_type =
    static_cast<int32_t>(in_clipboard_type);
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeMap_(
        &in_data, builder.buffer(), &params->data.ptr,
        &data_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Clipboard_GetSequenceNumber_ProxyToResponder
    : public Clipboard::GetSequenceNumberCallback::Runnable {
 public:
  ~Clipboard_GetSequenceNumber_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Clipboard::GetSequenceNumber(p_clipboard_type, callback) "
        "was never run.";
  }

  Clipboard_GetSequenceNumber_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint64_t in_sequence) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Clipboard_GetSequenceNumber_ProxyToResponder);
};

void Clipboard_GetSequenceNumber_ProxyToResponder::Run(
    uint64_t in_sequence) const {
  size_t size = sizeof(internal::Clipboard_GetSequenceNumber_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Clipboard_Base::MessageOrdinals::GetSequenceNumber), size, request_id_);
  internal::Clipboard_GetSequenceNumber_ResponseParams_Data* params =
      internal::Clipboard_GetSequenceNumber_ResponseParams_Data::New(builder.buffer());
  params->sequence = in_sequence;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Clipboard_GetAvailableMimeTypes_ProxyToResponder
    : public Clipboard::GetAvailableMimeTypesCallback::Runnable {
 public:
  ~Clipboard_GetAvailableMimeTypes_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Clipboard::GetAvailableMimeTypes(p_clipboard_types, callback) "
        "was never run.";
  }

  Clipboard_GetAvailableMimeTypes_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<mojo::String> in_types) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Clipboard_GetAvailableMimeTypes_ProxyToResponder);
};

void Clipboard_GetAvailableMimeTypes_ProxyToResponder::Run(
    mojo::Array<mojo::String> in_types) const {
  size_t size = sizeof(internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data);
  size += GetSerializedSize_(in_types);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Clipboard_Base::MessageOrdinals::GetAvailableMimeTypes), size, request_id_);
  internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data* params =
      internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams types_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_types, builder.buffer(), &params->types.ptr,
                          &types_validate_params);
  }
  if (!params->types.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null types in Clipboard.GetAvailableMimeTypes response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Clipboard_ReadMimeType_ProxyToResponder
    : public Clipboard::ReadMimeTypeCallback::Runnable {
 public:
  ~Clipboard_ReadMimeType_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Clipboard::ReadMimeType(p_clipboard_type, p_mime_type, callback) "
        "was never run.";
  }

  Clipboard_ReadMimeType_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<uint8_t> in_data) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Clipboard_ReadMimeType_ProxyToResponder);
};

void Clipboard_ReadMimeType_ProxyToResponder::Run(
    mojo::Array<uint8_t> in_data) const {
  size_t size = sizeof(internal::Clipboard_ReadMimeType_ResponseParams_Data);
  size += GetSerializedSize_(in_data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Clipboard_Base::MessageOrdinals::ReadMimeType), size, request_id_);
  internal::Clipboard_ReadMimeType_ResponseParams_Data* params =
      internal::Clipboard_ReadMimeType_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_data, builder.buffer(), &params->data.ptr,
                          &data_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ClipboardStub::ClipboardStub()
    : sink_(nullptr),
      control_message_handler_(Clipboard::Version_) {
}

ClipboardStub::~ClipboardStub() {}

bool ClipboardStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Clipboard_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Clipboard_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Clipboard_Base::MessageOrdinals::GetSequenceNumber: {
      break;
    }
    case internal::Clipboard_Base::MessageOrdinals::GetAvailableMimeTypes: {
      break;
    }
    case internal::Clipboard_Base::MessageOrdinals::ReadMimeType: {
      break;
    }
    case internal::Clipboard_Base::MessageOrdinals::WriteClipboardData: {
      internal::Clipboard_WriteClipboardData_Params_Data* params =
          reinterpret_cast<internal::Clipboard_WriteClipboardData_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      Clipboard::Type p_clipboard_type {};
      mojo::Map<mojo::String, mojo::Array<uint8_t> > p_data {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_clipboard_type = static_cast<Clipboard::Type>(params->clipboard_type);
        Deserialize_(params->data.ptr, &p_data);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->WriteClipboardData(p_clipboard_type, p_data.Pass());
      return true;
    }
  }
  return false;
}

bool ClipboardStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Clipboard_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Clipboard_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Clipboard_Base::MessageOrdinals::GetSequenceNumber: {
      internal::Clipboard_GetSequenceNumber_Params_Data* params =
          reinterpret_cast<internal::Clipboard_GetSequenceNumber_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Clipboard::GetSequenceNumberCallback::Runnable* runnable =
          new Clipboard_GetSequenceNumber_ProxyToResponder(
              message->request_id(), responder);
      Clipboard::GetSequenceNumberCallback callback(runnable);
      
      Clipboard::Type p_clipboard_type {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_clipboard_type = static_cast<Clipboard::Type>(params->clipboard_type);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetSequenceNumber(p_clipboard_type, callback);
      return true;
    }
    case internal::Clipboard_Base::MessageOrdinals::GetAvailableMimeTypes: {
      internal::Clipboard_GetAvailableMimeTypes_Params_Data* params =
          reinterpret_cast<internal::Clipboard_GetAvailableMimeTypes_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Clipboard::GetAvailableMimeTypesCallback::Runnable* runnable =
          new Clipboard_GetAvailableMimeTypes_ProxyToResponder(
              message->request_id(), responder);
      Clipboard::GetAvailableMimeTypesCallback callback(runnable);
      
      Clipboard::Type p_clipboard_types {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_clipboard_types = static_cast<Clipboard::Type>(params->clipboard_types);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetAvailableMimeTypes(p_clipboard_types, callback);
      return true;
    }
    case internal::Clipboard_Base::MessageOrdinals::ReadMimeType: {
      internal::Clipboard_ReadMimeType_Params_Data* params =
          reinterpret_cast<internal::Clipboard_ReadMimeType_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Clipboard::ReadMimeTypeCallback::Runnable* runnable =
          new Clipboard_ReadMimeType_ProxyToResponder(
              message->request_id(), responder);
      Clipboard::ReadMimeTypeCallback callback(runnable);
      
      Clipboard::Type p_clipboard_type {};
      mojo::String p_mime_type {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_clipboard_type = static_cast<Clipboard::Type>(params->clipboard_type);
        Deserialize_(params->mime_type.ptr, &p_mime_type);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ReadMimeType(p_clipboard_type, p_mime_type, callback);
      return true;
    }
    case internal::Clipboard_Base::MessageOrdinals::WriteClipboardData: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
