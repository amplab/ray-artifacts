// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/tracing/interfaces/tracing.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace tracing {

// --- Interface definitions ---

TraceProviderProxy::TraceProviderProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TraceProviderProxy::StartTracing(
    const mojo::String& in_categories, mojo::InterfaceHandle<TraceRecorder> in_recorder) {
  size_t size = sizeof(internal::TraceProvider_StartTracing_Params_Data);
  size += GetSerializedSize_(in_categories);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TraceProvider_Base::MessageOrdinals::StartTracing), size);

  internal::TraceProvider_StartTracing_Params_Data* params =
      internal::TraceProvider_StartTracing_Params_Data::New(builder.buffer());
  SerializeString_(in_categories, builder.buffer(), &params->categories.ptr);
  if (!params->categories.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null categories in TraceProvider.StartTracing request");
  }
  mojo::internal::InterfaceHandleToData(in_recorder.Pass(),
                                        &params->recorder);
  if (!params->recorder.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid recorder in TraceProvider.StartTracing request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void TraceProviderProxy::StopTracing(
    ) {
  size_t size = sizeof(internal::TraceProvider_StopTracing_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TraceProvider_Base::MessageOrdinals::StopTracing), size);

  internal::TraceProvider_StopTracing_Params_Data* params =
      internal::TraceProvider_StopTracing_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

TraceProviderStub::TraceProviderStub()
    : sink_(nullptr),
      control_message_handler_(TraceProvider::Version_) {
}

TraceProviderStub::~TraceProviderStub() {}

bool TraceProviderStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TraceProvider_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceProvider_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceProvider_Base::MessageOrdinals::StartTracing: {
      internal::TraceProvider_StartTracing_Params_Data* params =
          reinterpret_cast<internal::TraceProvider_StartTracing_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_categories {};
      mojo::InterfaceHandle<TraceRecorder> p_recorder {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->categories.ptr, &p_categories);
        mojo::internal::InterfaceDataToHandle(&params->recorder, &p_recorder);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StartTracing(p_categories, p_recorder.Pass());
      return true;
    }
    case internal::TraceProvider_Base::MessageOrdinals::StopTracing: {
      internal::TraceProvider_StopTracing_Params_Data* params =
          reinterpret_cast<internal::TraceProvider_StopTracing_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StopTracing();
      return true;
    }
  }
  return false;
}

bool TraceProviderStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TraceProvider_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceProvider_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceProvider_Base::MessageOrdinals::StartTracing: {
      break;
    }
    case internal::TraceProvider_Base::MessageOrdinals::StopTracing: {
      break;
    }
  }
  return false;
}


TraceRecorderProxy::TraceRecorderProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TraceRecorderProxy::Record(
    const mojo::String& in_json) {
  size_t size = sizeof(internal::TraceRecorder_Record_Params_Data);
  size += GetSerializedSize_(in_json);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TraceRecorder_Base::MessageOrdinals::Record), size);

  internal::TraceRecorder_Record_Params_Data* params =
      internal::TraceRecorder_Record_Params_Data::New(builder.buffer());
  SerializeString_(in_json, builder.buffer(), &params->json.ptr);
  if (!params->json.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null json in TraceRecorder.Record request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

TraceRecorderStub::TraceRecorderStub()
    : sink_(nullptr),
      control_message_handler_(TraceRecorder::Version_) {
}

TraceRecorderStub::~TraceRecorderStub() {}

bool TraceRecorderStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TraceRecorder_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceRecorder_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceRecorder_Base::MessageOrdinals::Record: {
      internal::TraceRecorder_Record_Params_Data* params =
          reinterpret_cast<internal::TraceRecorder_Record_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_json {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->json.ptr, &p_json);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Record(p_json);
      return true;
    }
  }
  return false;
}

bool TraceRecorderStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TraceRecorder_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceRecorder_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceRecorder_Base::MessageOrdinals::Record: {
      break;
    }
  }
  return false;
}


TraceCollectorProxy::TraceCollectorProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TraceCollectorProxy::Start(
    mojo::ScopedDataPipeProducerHandle in_stream, const mojo::String& in_categories) {
  size_t size = sizeof(internal::TraceCollector_Start_Params_Data);
  size += GetSerializedSize_(in_categories);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TraceCollector_Base::MessageOrdinals::Start), size);

  internal::TraceCollector_Start_Params_Data* params =
      internal::TraceCollector_Start_Params_Data::New(builder.buffer());
  params->stream = in_stream.release();
  if (!params->stream.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid stream in TraceCollector.Start request");
  }
  SerializeString_(in_categories, builder.buffer(), &params->categories.ptr);
  if (!params->categories.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null categories in TraceCollector.Start request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void TraceCollectorProxy::StopAndFlush(
    ) {
  size_t size = sizeof(internal::TraceCollector_StopAndFlush_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TraceCollector_Base::MessageOrdinals::StopAndFlush), size);

  internal::TraceCollector_StopAndFlush_Params_Data* params =
      internal::TraceCollector_StopAndFlush_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

TraceCollectorStub::TraceCollectorStub()
    : sink_(nullptr),
      control_message_handler_(TraceCollector::Version_) {
}

TraceCollectorStub::~TraceCollectorStub() {}

bool TraceCollectorStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TraceCollector_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceCollector_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceCollector_Base::MessageOrdinals::Start: {
      internal::TraceCollector_Start_Params_Data* params =
          reinterpret_cast<internal::TraceCollector_Start_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::ScopedDataPipeProducerHandle p_stream {};
      mojo::String p_categories {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_stream.reset(mojo::internal::FetchAndReset(&params->stream));
        Deserialize_(params->categories.ptr, &p_categories);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Start(p_stream.Pass(), p_categories);
      return true;
    }
    case internal::TraceCollector_Base::MessageOrdinals::StopAndFlush: {
      internal::TraceCollector_StopAndFlush_Params_Data* params =
          reinterpret_cast<internal::TraceCollector_StopAndFlush_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StopAndFlush();
      return true;
    }
  }
  return false;
}

bool TraceCollectorStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TraceCollector_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceCollector_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceCollector_Base::MessageOrdinals::Start: {
      break;
    }
    case internal::TraceCollector_Base::MessageOrdinals::StopAndFlush: {
      break;
    }
  }
  return false;
}

}  // namespace tracing
