// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/network/network_error.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {



namespace internal {




#pragma pack(push, 1)



class WebSocket_Connect_Params_Data {
 public:
  static WebSocket_Connect_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer url;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> protocols;
  mojo::internal::StringPointer origin;
  mojo::DataPipeConsumerHandle send_stream;
  mojo::internal::Interface_Data client;
  uint8_t padfinal_[4];

 private:
  WebSocket_Connect_Params_Data();
  ~WebSocket_Connect_Params_Data() = delete;
};
static_assert(sizeof(WebSocket_Connect_Params_Data) == 48,
              "Bad sizeof(WebSocket_Connect_Params_Data)");


class WebSocket_Send_Params_Data {
 public:
  static WebSocket_Send_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t fin : 1;
  uint8_t pad0_[3];
  int32_t type;
  uint32_t num_bytes;
  uint8_t padfinal_[4];

 private:
  WebSocket_Send_Params_Data();
  ~WebSocket_Send_Params_Data() = delete;
};
static_assert(sizeof(WebSocket_Send_Params_Data) == 24,
              "Bad sizeof(WebSocket_Send_Params_Data)");


class WebSocket_FlowControl_Params_Data {
 public:
  static WebSocket_FlowControl_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t quota;

 private:
  WebSocket_FlowControl_Params_Data();
  ~WebSocket_FlowControl_Params_Data() = delete;
};
static_assert(sizeof(WebSocket_FlowControl_Params_Data) == 16,
              "Bad sizeof(WebSocket_FlowControl_Params_Data)");


class WebSocket_Close_Params_Data {
 public:
  static WebSocket_Close_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint16_t code;
  uint8_t pad0_[6];
  mojo::internal::StringPointer reason;

 private:
  WebSocket_Close_Params_Data();
  ~WebSocket_Close_Params_Data() = delete;
};
static_assert(sizeof(WebSocket_Close_Params_Data) == 24,
              "Bad sizeof(WebSocket_Close_Params_Data)");


class WebSocketClient_DidConnect_Params_Data {
 public:
  static WebSocketClient_DidConnect_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer selected_subprotocol;
  mojo::internal::StringPointer extensions;
  mojo::DataPipeConsumerHandle receive_stream;
  uint8_t padfinal_[4];

 private:
  WebSocketClient_DidConnect_Params_Data();
  ~WebSocketClient_DidConnect_Params_Data() = delete;
};
static_assert(sizeof(WebSocketClient_DidConnect_Params_Data) == 32,
              "Bad sizeof(WebSocketClient_DidConnect_Params_Data)");


class WebSocketClient_DidReceiveData_Params_Data {
 public:
  static WebSocketClient_DidReceiveData_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t fin : 1;
  uint8_t pad0_[3];
  int32_t type;
  uint32_t num_bytes;
  uint8_t padfinal_[4];

 private:
  WebSocketClient_DidReceiveData_Params_Data();
  ~WebSocketClient_DidReceiveData_Params_Data() = delete;
};
static_assert(sizeof(WebSocketClient_DidReceiveData_Params_Data) == 24,
              "Bad sizeof(WebSocketClient_DidReceiveData_Params_Data)");


class WebSocketClient_DidReceiveFlowControl_Params_Data {
 public:
  static WebSocketClient_DidReceiveFlowControl_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t quota;

 private:
  WebSocketClient_DidReceiveFlowControl_Params_Data();
  ~WebSocketClient_DidReceiveFlowControl_Params_Data() = delete;
};
static_assert(sizeof(WebSocketClient_DidReceiveFlowControl_Params_Data) == 16,
              "Bad sizeof(WebSocketClient_DidReceiveFlowControl_Params_Data)");


class WebSocketClient_DidFail_Params_Data {
 public:
  static WebSocketClient_DidFail_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer message;

 private:
  WebSocketClient_DidFail_Params_Data();
  ~WebSocketClient_DidFail_Params_Data() = delete;
};
static_assert(sizeof(WebSocketClient_DidFail_Params_Data) == 16,
              "Bad sizeof(WebSocketClient_DidFail_Params_Data)");


class WebSocketClient_DidClose_Params_Data {
 public:
  static WebSocketClient_DidClose_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t was_clean : 1;
  uint8_t pad0_[1];
  uint16_t code;
  uint8_t pad1_[4];
  mojo::internal::StringPointer reason;

 private:
  WebSocketClient_DidClose_Params_Data();
  ~WebSocketClient_DidClose_Params_Data() = delete;
};
static_assert(sizeof(WebSocketClient_DidClose_Params_Data) == 24,
              "Bad sizeof(WebSocketClient_DidClose_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_INTERNAL_H_
