// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/scoping.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace test {

// --- Interface definitions ---

AProxy::AProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void AProxy::GetB(
    mojo::InterfaceRequest<B> in_b) {
  size_t size = sizeof(internal::A_GetB_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::A_Base::MessageOrdinals::GetB), size);

  internal::A_GetB_Params_Data* params =
      internal::A_GetB_Params_Data::New(builder.buffer());
  params->b = in_b.PassMessagePipe().release();
  if (!params->b.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid b in A.GetB request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

AStub::AStub()
    : sink_(nullptr),
      control_message_handler_(A::Version_) {
}

AStub::~AStub() {}

bool AStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::A_Base::MessageOrdinals method_ordinal =
      static_cast<internal::A_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::A_Base::MessageOrdinals::GetB: {
      internal::A_GetB_Params_Data* params =
          reinterpret_cast<internal::A_GetB_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<B> p_b {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_b.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->b)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetB(p_b.Pass());
      return true;
    }
  }
  return false;
}

bool AStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::A_Base::MessageOrdinals method_ordinal =
      static_cast<internal::A_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::A_Base::MessageOrdinals::GetB: {
      break;
    }
  }
  return false;
}


BProxy::BProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void BProxy::GetC(
    mojo::InterfaceRequest<C> in_c) {
  size_t size = sizeof(internal::B_GetC_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::B_Base::MessageOrdinals::GetC), size);

  internal::B_GetC_Params_Data* params =
      internal::B_GetC_Params_Data::New(builder.buffer());
  params->c = in_c.PassMessagePipe().release();
  if (!params->c.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid c in B.GetC request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

BStub::BStub()
    : sink_(nullptr),
      control_message_handler_(B::Version_) {
}

BStub::~BStub() {}

bool BStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::B_Base::MessageOrdinals method_ordinal =
      static_cast<internal::B_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::B_Base::MessageOrdinals::GetC: {
      internal::B_GetC_Params_Data* params =
          reinterpret_cast<internal::B_GetC_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<C> p_c {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_c.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->c)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetC(p_c.Pass());
      return true;
    }
  }
  return false;
}

bool BStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::B_Base::MessageOrdinals method_ordinal =
      static_cast<internal::B_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::B_Base::MessageOrdinals::GetC: {
      break;
    }
  }
  return false;
}


CProxy::CProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CProxy::D(
    ) {
  size_t size = sizeof(internal::C_D_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::C_Base::MessageOrdinals::D), size);

  internal::C_D_Params_Data* params =
      internal::C_D_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

CStub::CStub()
    : sink_(nullptr),
      control_message_handler_(C::Version_) {
}

CStub::~CStub() {}

bool CStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::C_Base::MessageOrdinals method_ordinal =
      static_cast<internal::C_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::C_Base::MessageOrdinals::D: {
      internal::C_D_Params_Data* params =
          reinterpret_cast<internal::C_D_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->D();
      return true;
    }
  }
  return false;
}

bool CStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::C_Base::MessageOrdinals method_ordinal =
      static_cast<internal::C_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::C_Base::MessageOrdinals::D: {
      break;
    }
  }
  return false;
}

}  // namespace test
}  // namespace mojo
