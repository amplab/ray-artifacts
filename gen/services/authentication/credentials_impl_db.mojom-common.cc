// NOTE: This file was generated by the Mojo bindings generator.
#include "services/authentication/credentials_impl_db.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace authentication {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
Credentials_Data* Credentials_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Credentials_Data))) Credentials_Data();
}

// static
mojo::internal::ValidationError Credentials_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Credentials_Data* object = static_cast<const Credentials_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->token.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null token field in Credentials struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->token.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams token_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->token.offset),
          bounds_checker, &token_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->scopes.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null scopes field in Credentials struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->scopes.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams scopes_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->scopes.offset),
          bounds_checker, &scopes_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Credentials_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->token, handles);
  mojo::internal::Encode(&this->scopes, handles);
}

void Credentials_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->token, handles);
  mojo::internal::Decode(&this->scopes, handles);
}

Credentials_Data::Credentials_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
CredentialStore_Data* CredentialStore_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(CredentialStore_Data))) CredentialStore_Data();
}

// static
mojo::internal::ValidationError CredentialStore_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const CredentialStore_Data* object = static_cast<const CredentialStore_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->credentials.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null credentials field in CredentialStore struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->credentials.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams credentials_validate_params(
      0, false, nullptr);
  auto validate_retval = mojo::Map<mojo::String, CredentialsPtr>::Data_::Validate(
              mojo::internal::DecodePointerRaw(&object->credentials.offset),
              bounds_checker, &credentials_validate_params, err); 
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void CredentialStore_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->credentials, handles);
}

void CredentialStore_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->credentials, handles);
}

CredentialStore_Data::CredentialStore_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---

}  // namespace internal

// --- Request and response validator definitions for interfaces --- 

// --- Enums ---
bool CredentialType_IsValidValue(CredentialType value) {
  switch (static_cast<int32_t>(value)) {
    case 1:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const CredentialType& val) {
  return (stream << static_cast<int32_t>(val));
}
bool AuthProvider_IsValidValue(AuthProvider value) {
  switch (static_cast<int32_t>(value)) {
    case 1:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const AuthProvider& val) {
  return (stream << static_cast<int32_t>(val));
}

// Base interface definitions (Name_, Version_, Constants, Enums)

// Struct Constants

// --- Struct builder definitions ---

// static
CredentialsPtr Credentials::New() {
  CredentialsPtr rv;
  mojo::internal::StructHelper<Credentials>::Initialize(&rv);
  return rv;
}

Credentials::Credentials()
    : auth_provider(),
      token(),
      credential_type(),
      scopes() {
}

Credentials::~Credentials() {
}


CredentialsPtr Credentials::Clone() const {
  CredentialsPtr rv(New());
  rv->auth_provider = auth_provider;
  rv->token = token;
  rv->credential_type = credential_type;
  rv->scopes = scopes;
  return rv;
}


bool Credentials::Equals(const Credentials& other) const {
  if (!mojo::internal::ValueTraits<AuthProvider>::Equals(this->auth_provider, other.auth_provider))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->token, other.token))
    return false;
  if (!mojo::internal::ValueTraits<CredentialType>::Equals(this->credential_type, other.credential_type))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->scopes, other.scopes))
    return false;
  return true;
}


// static
CredentialStorePtr CredentialStore::New() {
  CredentialStorePtr rv;
  mojo::internal::StructHelper<CredentialStore>::Initialize(&rv);
  return rv;
}

CredentialStore::CredentialStore()
    : version(),
      credentials() {
}

CredentialStore::~CredentialStore() {
}


CredentialStorePtr CredentialStore::Clone() const {
  CredentialStorePtr rv(New());
  rv->version = version;
  rv->credentials = credentials.Clone();
  return rv;
}


bool CredentialStore::Equals(const CredentialStore& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->version, other.version))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Map<mojo::String, CredentialsPtr>>::Equals(this->credentials, other.credentials))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t Credentials::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Credentials::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Credentials_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Credentials::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Credentials_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Credentials::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Credentials_Data* input =
      static_cast<internal::Credentials_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Credentials& input) {
  size_t size = sizeof(internal::Credentials_Data);
  size += GetSerializedSize_(input.token);
  size += GetSerializedSize_(input.scopes);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Credentials* input,
    mojo::internal::Buffer* buf,
    internal::Credentials_Data** output) {
  if (input) {
    internal::Credentials_Data* result =
        internal::Credentials_Data::New(buf);
    result->auth_provider =
      static_cast<int32_t>(input->auth_provider);
    SerializeString_(input->token, buf, &result->token.ptr);
    if (!result->token.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null token in Credentials struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->credential_type =
      static_cast<int32_t>(input->credential_type);
    SerializeString_(input->scopes, buf, &result->scopes.ptr);
    if (!result->scopes.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null scopes in Credentials struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Credentials_Data* input,
                  Credentials* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->auth_provider = static_cast<AuthProvider>(input->auth_provider);
      Deserialize_(input->token.ptr, &result->token);
      result->credential_type = static_cast<CredentialType>(input->credential_type);
      Deserialize_(input->scopes.ptr, &result->scopes);
    } while (false);
  }
}


size_t CredentialStore::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool CredentialStore::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::CredentialStore_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool CredentialStore::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::CredentialStore_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void CredentialStore::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::CredentialStore_Data* input =
      static_cast<internal::CredentialStore_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const CredentialStore& input) {
  size_t size = sizeof(internal::CredentialStore_Data);
  size += GetSerializedSize_(input.credentials);
  return size;
}

mojo::internal::ValidationError Serialize_(
    CredentialStore* input,
    mojo::internal::Buffer* buf,
    internal::CredentialStore_Data** output) {
  if (input) {
    internal::CredentialStore_Data* result =
        internal::CredentialStore_Data::New(buf);
    result->version = input->version;
    {
      const mojo::internal::ArrayValidateParams credentials_validate_params(
          0, false, nullptr);auto retval =mojo::SerializeMap_(
          &input->credentials, buf, &result->credentials.ptr,
          &credentials_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->credentials.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null credentials in CredentialStore struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::CredentialStore_Data* input,
                  CredentialStore* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->version = input->version;
      Deserialize_(input->credentials.ptr, &result->credentials);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---
}  // namespace authentication
