// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library plasma_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class ObjectInfo extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(48, 0)
  ];
  String name = null;
  int size = 0;
  int createTime = 0;
  int constructDuration = 0;
  int creatorId = 0;

  ObjectInfo() : super(kVersions.last.size);

  ObjectInfo.init(
    String this.name, 
    int this.size, 
    int this.createTime, 
    int this.constructDuration, 
    int this.creatorId
  ) : super(kVersions.last.size);

  static ObjectInfo deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ObjectInfo decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ObjectInfo result = new ObjectInfo();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.name = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.size = decoder0.decodeUint64(16);
    }
    if (mainDataHeader.version >= 0) {
      
      result.createTime = decoder0.decodeInt64(24);
    }
    if (mainDataHeader.version >= 0) {
      
      result.constructDuration = decoder0.decodeInt64(32);
    }
    if (mainDataHeader.version >= 0) {
      
      result.creatorId = decoder0.decodeInt64(40);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ObjectInfo";
    String fieldName;
    try {
      fieldName = "name";
      encoder0.encodeString(name, 8, false);
      fieldName = "size";
      encoder0.encodeUint64(size, 16);
      fieldName = "createTime";
      encoder0.encodeInt64(createTime, 24);
      fieldName = "constructDuration";
      encoder0.encodeInt64(constructDuration, 32);
      fieldName = "creatorId";
      encoder0.encodeInt64(creatorId, 40);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ObjectInfo("
           "name: $name" ", "
           "size: $size" ", "
           "createTime: $createTime" ", "
           "constructDuration: $constructDuration" ", "
           "creatorId: $creatorId" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["name"] = name;
    map["size"] = size;
    map["createTime"] = createTime;
    map["constructDuration"] = constructDuration;
    map["creatorId"] = creatorId;
    return map;
  }
}


class _PlasmaCreateObjectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(40, 0)
  ];
  String objectId = null;
  int size = 0;
  String name = null;
  int creatorId = 0;

  _PlasmaCreateObjectParams() : super(kVersions.last.size);

  _PlasmaCreateObjectParams.init(
    String this.objectId, 
    int this.size, 
    String this.name, 
    int this.creatorId
  ) : super(kVersions.last.size);

  static _PlasmaCreateObjectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PlasmaCreateObjectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PlasmaCreateObjectParams result = new _PlasmaCreateObjectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.objectId = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.size = decoder0.decodeUint64(16);
    }
    if (mainDataHeader.version >= 0) {
      
      result.name = decoder0.decodeString(24, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.creatorId = decoder0.decodeInt64(32);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PlasmaCreateObjectParams";
    String fieldName;
    try {
      fieldName = "objectId";
      encoder0.encodeString(objectId, 8, false);
      fieldName = "size";
      encoder0.encodeUint64(size, 16);
      fieldName = "name";
      encoder0.encodeString(name, 24, false);
      fieldName = "creatorId";
      encoder0.encodeInt64(creatorId, 32);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PlasmaCreateObjectParams("
           "objectId: $objectId" ", "
           "size: $size" ", "
           "name: $name" ", "
           "creatorId: $creatorId" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["objectId"] = objectId;
    map["size"] = size;
    map["name"] = name;
    map["creatorId"] = creatorId;
    return map;
  }
}


class PlasmaCreateObjectResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  core.MojoSharedBuffer buffer = null;

  PlasmaCreateObjectResponseParams() : super(kVersions.last.size);

  PlasmaCreateObjectResponseParams.init(
    core.MojoSharedBuffer this.buffer
  ) : super(kVersions.last.size);

  static PlasmaCreateObjectResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PlasmaCreateObjectResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PlasmaCreateObjectResponseParams result = new PlasmaCreateObjectResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.buffer = decoder0.decodeSharedBufferHandle(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PlasmaCreateObjectResponseParams";
    String fieldName;
    try {
      fieldName = "buffer";
      encoder0.encodeSharedBufferHandle(buffer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PlasmaCreateObjectResponseParams("
           "buffer: $buffer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _PlasmaResizeObjectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String objectId = null;
  int newSize = 0;

  _PlasmaResizeObjectParams() : super(kVersions.last.size);

  _PlasmaResizeObjectParams.init(
    String this.objectId, 
    int this.newSize
  ) : super(kVersions.last.size);

  static _PlasmaResizeObjectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PlasmaResizeObjectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PlasmaResizeObjectParams result = new _PlasmaResizeObjectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.objectId = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.newSize = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PlasmaResizeObjectParams";
    String fieldName;
    try {
      fieldName = "objectId";
      encoder0.encodeString(objectId, 8, false);
      fieldName = "newSize";
      encoder0.encodeUint64(newSize, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PlasmaResizeObjectParams("
           "objectId: $objectId" ", "
           "newSize: $newSize" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["objectId"] = objectId;
    map["newSize"] = newSize;
    return map;
  }
}


class PlasmaResizeObjectResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  core.MojoSharedBuffer buffer = null;

  PlasmaResizeObjectResponseParams() : super(kVersions.last.size);

  PlasmaResizeObjectResponseParams.init(
    core.MojoSharedBuffer this.buffer
  ) : super(kVersions.last.size);

  static PlasmaResizeObjectResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PlasmaResizeObjectResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PlasmaResizeObjectResponseParams result = new PlasmaResizeObjectResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.buffer = decoder0.decodeSharedBufferHandle(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PlasmaResizeObjectResponseParams";
    String fieldName;
    try {
      fieldName = "buffer";
      encoder0.encodeSharedBufferHandle(buffer, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PlasmaResizeObjectResponseParams("
           "buffer: $buffer" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _PlasmaSealObjectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String objectId = null;

  _PlasmaSealObjectParams() : super(kVersions.last.size);

  _PlasmaSealObjectParams.init(
    String this.objectId
  ) : super(kVersions.last.size);

  static _PlasmaSealObjectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PlasmaSealObjectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PlasmaSealObjectParams result = new _PlasmaSealObjectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.objectId = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PlasmaSealObjectParams";
    String fieldName;
    try {
      fieldName = "objectId";
      encoder0.encodeString(objectId, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PlasmaSealObjectParams("
           "objectId: $objectId" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["objectId"] = objectId;
    return map;
  }
}


class _PlasmaGetObjectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String objectId = null;
  bool block = false;

  _PlasmaGetObjectParams() : super(kVersions.last.size);

  _PlasmaGetObjectParams.init(
    String this.objectId, 
    bool this.block
  ) : super(kVersions.last.size);

  static _PlasmaGetObjectParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PlasmaGetObjectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PlasmaGetObjectParams result = new _PlasmaGetObjectParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.objectId = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.block = decoder0.decodeBool(16, 0);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PlasmaGetObjectParams";
    String fieldName;
    try {
      fieldName = "objectId";
      encoder0.encodeString(objectId, 8, false);
      fieldName = "block";
      encoder0.encodeBool(block, 16, 0);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PlasmaGetObjectParams("
           "objectId: $objectId" ", "
           "block: $block" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["objectId"] = objectId;
    map["block"] = block;
    return map;
  }
}


class PlasmaGetObjectResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  core.MojoSharedBuffer buffer = null;
  int size = 0;

  PlasmaGetObjectResponseParams() : super(kVersions.last.size);

  PlasmaGetObjectResponseParams.init(
    core.MojoSharedBuffer this.buffer, 
    int this.size
  ) : super(kVersions.last.size);

  static PlasmaGetObjectResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PlasmaGetObjectResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PlasmaGetObjectResponseParams result = new PlasmaGetObjectResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.buffer = decoder0.decodeSharedBufferHandle(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.size = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PlasmaGetObjectResponseParams";
    String fieldName;
    try {
      fieldName = "buffer";
      encoder0.encodeSharedBufferHandle(buffer, 8, false);
      fieldName = "size";
      encoder0.encodeUint64(size, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PlasmaGetObjectResponseParams("
           "buffer: $buffer" ", "
           "size: $size" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _PlasmaListObjectsParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _PlasmaListObjectsParams() : super(kVersions.last.size);

  _PlasmaListObjectsParams.init(
  ) : super(kVersions.last.size);

  static _PlasmaListObjectsParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PlasmaListObjectsParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PlasmaListObjectsParams result = new _PlasmaListObjectsParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PlasmaListObjectsParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PlasmaListObjectsParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class PlasmaListObjectsResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<ObjectInfo> info = null;

  PlasmaListObjectsResponseParams() : super(kVersions.last.size);

  PlasmaListObjectsResponseParams.init(
    List<ObjectInfo> this.info
  ) : super(kVersions.last.size);

  static PlasmaListObjectsResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PlasmaListObjectsResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PlasmaListObjectsResponseParams result = new PlasmaListObjectsResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.info = new List<ObjectInfo>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.info[i1] = ObjectInfo.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PlasmaListObjectsResponseParams";
    String fieldName;
    try {
      fieldName = "info";
      if (info == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(info.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < info.length; ++i0) {
          encoder1.encodeStruct(info[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PlasmaListObjectsResponseParams("
           "info: $info" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["info"] = info;
    return map;
  }
}

const int _plasmaMethodCreateObjectName = 0;
const int _plasmaMethodResizeObjectName = 1;
const int _plasmaMethodSealObjectName = 2;
const int _plasmaMethodGetObjectName = 3;
const int _plasmaMethodListObjectsName = 4;

class _PlasmaServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Plasma {
  static const String serviceName = "plasma::service::Plasma";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _PlasmaServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static PlasmaProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    PlasmaProxy p = new PlasmaProxy.unbound();
    String name = serviceName ?? Plasma.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void createObject(String objectId,int size,String name,int creatorId,void callback(core.MojoSharedBuffer buffer));
  void resizeObject(String objectId,int newSize,void callback(core.MojoSharedBuffer buffer));
  void sealObject(String objectId);
  void getObject(String objectId,bool block,void callback(core.MojoSharedBuffer buffer, int size));
  void listObjects(void callback(List<ObjectInfo> info));
}

abstract class PlasmaInterface
    implements bindings.MojoInterface<Plasma>,
               Plasma {
  factory PlasmaInterface([Plasma impl]) =>
      new PlasmaStub.unbound(impl);

  factory PlasmaInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Plasma impl]) =>
      new PlasmaStub.fromEndpoint(endpoint, impl);

  factory PlasmaInterface.fromMock(
      Plasma mock) =>
      new PlasmaProxy.fromMock(mock);
}

abstract class PlasmaInterfaceRequest
    implements bindings.MojoInterface<Plasma>,
               Plasma {
  factory PlasmaInterfaceRequest() =>
      new PlasmaProxy.unbound();
}

class _PlasmaProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Plasma> {
  Plasma impl;

  _PlasmaProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _PlasmaProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _PlasmaProxyControl.unbound() : super.unbound();

  String get serviceName => Plasma.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _plasmaMethodCreateObjectName:
        var r = PlasmaCreateObjectResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.buffer );
        break;
      case _plasmaMethodResizeObjectName:
        var r = PlasmaResizeObjectResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.buffer );
        break;
      case _plasmaMethodGetObjectName:
        var r = PlasmaGetObjectResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.buffer , r.size );
        break;
      case _plasmaMethodListObjectsName:
        var r = PlasmaListObjectsResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.info );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PlasmaProxyControl($superString)";
  }
}

class PlasmaProxy
    extends bindings.Proxy<Plasma>
    implements Plasma,
               PlasmaInterface,
               PlasmaInterfaceRequest {
  PlasmaProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _PlasmaProxyControl.fromEndpoint(endpoint));

  PlasmaProxy.fromHandle(core.MojoHandle handle)
      : super(new _PlasmaProxyControl.fromHandle(handle));

  PlasmaProxy.unbound()
      : super(new _PlasmaProxyControl.unbound());

  factory PlasmaProxy.fromMock(Plasma mock) {
    PlasmaProxy newMockedProxy =
        new PlasmaProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static PlasmaProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PlasmaProxy"));
    return new PlasmaProxy.fromEndpoint(endpoint);
  }


  void createObject(String objectId,int size,String name,int creatorId,void callback(core.MojoSharedBuffer buffer)) {
    if (impl != null) {
      impl.createObject(objectId,size,name,creatorId,callback);
      return;
    }
    var params = new _PlasmaCreateObjectParams();
    params.objectId = objectId;
    params.size = size;
    params.name = name;
    params.creatorId = creatorId;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((core.MojoSharedBuffer buffer) {
        z.bindCallback(() {
          callback(buffer);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _plasmaMethodCreateObjectName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void resizeObject(String objectId,int newSize,void callback(core.MojoSharedBuffer buffer)) {
    if (impl != null) {
      impl.resizeObject(objectId,newSize,callback);
      return;
    }
    var params = new _PlasmaResizeObjectParams();
    params.objectId = objectId;
    params.newSize = newSize;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((core.MojoSharedBuffer buffer) {
        z.bindCallback(() {
          callback(buffer);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _plasmaMethodResizeObjectName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void sealObject(String objectId) {
    if (impl != null) {
      impl.sealObject(objectId);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PlasmaSealObjectParams();
    params.objectId = objectId;
    ctrl.sendMessage(params,
        _plasmaMethodSealObjectName);
  }
  void getObject(String objectId,bool block,void callback(core.MojoSharedBuffer buffer, int size)) {
    if (impl != null) {
      impl.getObject(objectId,block,callback);
      return;
    }
    var params = new _PlasmaGetObjectParams();
    params.objectId = objectId;
    params.block = block;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((core.MojoSharedBuffer buffer, int size) {
        z.bindCallback(() {
          callback(buffer, size);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _plasmaMethodGetObjectName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void listObjects(void callback(List<ObjectInfo> info)) {
    if (impl != null) {
      impl.listObjects(callback);
      return;
    }
    var params = new _PlasmaListObjectsParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((List<ObjectInfo> info) {
        z.bindCallback(() {
          callback(info);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _plasmaMethodListObjectsName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _PlasmaStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Plasma> {
  Plasma _impl;

  _PlasmaStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Plasma impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _PlasmaStubControl.fromHandle(
      core.MojoHandle handle, [Plasma impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _PlasmaStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Plasma.serviceName;


  Function _plasmaCreateObjectResponseParamsResponder(
      int requestId) {
  return (core.MojoSharedBuffer buffer) {
      var result = new PlasmaCreateObjectResponseParams();
      result.buffer = buffer;
      sendResponse(buildResponseWithId(
          result,
          _plasmaMethodCreateObjectName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _plasmaResizeObjectResponseParamsResponder(
      int requestId) {
  return (core.MojoSharedBuffer buffer) {
      var result = new PlasmaResizeObjectResponseParams();
      result.buffer = buffer;
      sendResponse(buildResponseWithId(
          result,
          _plasmaMethodResizeObjectName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _plasmaGetObjectResponseParamsResponder(
      int requestId) {
  return (core.MojoSharedBuffer buffer, int size) {
      var result = new PlasmaGetObjectResponseParams();
      result.buffer = buffer;
      result.size = size;
      sendResponse(buildResponseWithId(
          result,
          _plasmaMethodGetObjectName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _plasmaListObjectsResponseParamsResponder(
      int requestId) {
  return (List<ObjectInfo> info) {
      var result = new PlasmaListObjectsResponseParams();
      result.info = info;
      sendResponse(buildResponseWithId(
          result,
          _plasmaMethodListObjectsName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _plasmaMethodCreateObjectName:
        var params = _PlasmaCreateObjectParams.deserialize(
            message.payload);
        _impl.createObject(params.objectId, params.size, params.name, params.creatorId, _plasmaCreateObjectResponseParamsResponder(message.header.requestId));
        break;
      case _plasmaMethodResizeObjectName:
        var params = _PlasmaResizeObjectParams.deserialize(
            message.payload);
        _impl.resizeObject(params.objectId, params.newSize, _plasmaResizeObjectResponseParamsResponder(message.header.requestId));
        break;
      case _plasmaMethodSealObjectName:
        var params = _PlasmaSealObjectParams.deserialize(
            message.payload);
        _impl.sealObject(params.objectId);
        break;
      case _plasmaMethodGetObjectName:
        var params = _PlasmaGetObjectParams.deserialize(
            message.payload);
        _impl.getObject(params.objectId, params.block, _plasmaGetObjectResponseParamsResponder(message.header.requestId));
        break;
      case _plasmaMethodListObjectsName:
        _impl.listObjects(_plasmaListObjectsResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Plasma get impl => _impl;
  set impl(Plasma d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PlasmaStubControl($superString)";
  }

  int get version => 0;
}

class PlasmaStub
    extends bindings.Stub<Plasma>
    implements Plasma,
               PlasmaInterface,
               PlasmaInterfaceRequest {
  PlasmaStub.unbound([Plasma impl])
      : super(new _PlasmaStubControl.unbound(impl));

  PlasmaStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Plasma impl])
      : super(new _PlasmaStubControl.fromEndpoint(endpoint, impl));

  PlasmaStub.fromHandle(
      core.MojoHandle handle, [Plasma impl])
      : super(new _PlasmaStubControl.fromHandle(handle, impl));

  static PlasmaStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PlasmaStub"));
    return new PlasmaStub.fromEndpoint(endpoint);
  }


  void createObject(String objectId,int size,String name,int creatorId,void callback(core.MojoSharedBuffer buffer)) {
    return impl.createObject(objectId,size,name,creatorId,callback);
  }
  void resizeObject(String objectId,int newSize,void callback(core.MojoSharedBuffer buffer)) {
    return impl.resizeObject(objectId,newSize,callback);
  }
  void sealObject(String objectId) {
    return impl.sealObject(objectId);
  }
  void getObject(String objectId,bool block,void callback(core.MojoSharedBuffer buffer, int size)) {
    return impl.getObject(objectId,block,callback);
  }
  void listObjects(void callback(List<ObjectInfo> info)) {
    return impl.listObjects(callback);
  }
}



