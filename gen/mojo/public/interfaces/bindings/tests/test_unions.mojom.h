// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/test_unions.mojom-common.h"
#include "mojo/public/interfaces/bindings/tests/test_included_unions.mojom.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---

using SmallCachePtr = mojo::InterfacePtr<SmallCache>;

using UnionInterfacePtr = mojo::InterfacePtr<UnionInterface>;


// --- Interface Proxies ---


class SmallCacheProxy
    : public SmallCache,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit SmallCacheProxy(mojo::MessageReceiverWithResponder* receiver);
  void SetIntValue(
      int64_t int_value
  ) override;
  void GetIntValue(
      const GetIntValueCallback& callback
  ) override;
};


class UnionInterfaceProxy
    : public UnionInterface,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit UnionInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  void Echo(
      PodUnionPtr in_val, const EchoCallback& callback
  ) override;
};


// --- Interface Stubs ---

class SmallCacheStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  SmallCacheStub();
  ~SmallCacheStub() override;
  void set_sink(SmallCache* sink) { sink_ = sink; }
  SmallCache* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  SmallCache* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class UnionInterfaceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  UnionInterfaceStub();
  ~UnionInterfaceStub() override;
  void set_sink(UnionInterface* sink) { sink_ = sink; }
  UnionInterface* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  UnionInterface* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_H_
