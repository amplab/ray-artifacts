// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace regression_tests {

// --- Interface definitions ---
class CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ForwardToCallback(
      const CheckMethodWithEmptyResponse::WithoutParameterAndEmptyResponseCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CheckMethodWithEmptyResponse::WithoutParameterAndEmptyResponseCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ForwardToCallback);
};
bool CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data* params =
      reinterpret_cast<internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}
class CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ForwardToCallback(
      const CheckMethodWithEmptyResponse::WithParameterAndEmptyResponseCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CheckMethodWithEmptyResponse::WithParameterAndEmptyResponseCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ForwardToCallback);
};
bool CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data* params =
      reinterpret_cast<internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
  } while (false);
  callback_.Run();
  return true;
}

CheckMethodWithEmptyResponseProxy::CheckMethodWithEmptyResponseProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CheckMethodWithEmptyResponseProxy::WithoutParameterAndEmptyResponse(
    const WithoutParameterAndEmptyResponseCallback& callback) {
  size_t size = sizeof(internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithoutParameterAndEmptyResponse), size);

  internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data* params =
      internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void CheckMethodWithEmptyResponseProxy::WithParameterAndEmptyResponse(
    bool in_b, const WithParameterAndEmptyResponseCallback& callback) {
  size_t size = sizeof(internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithParameterAndEmptyResponse), size);

  internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data* params =
      internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data::New(builder.buffer());
  params->b = in_b;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ProxyToResponder
    : public CheckMethodWithEmptyResponse::WithoutParameterAndEmptyResponseCallback::Runnable {
 public:
  ~CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CheckMethodWithEmptyResponse::WithoutParameterAndEmptyResponse(callback) "
        "was never run.";
  }

  CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ProxyToResponder);
};

void CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithoutParameterAndEmptyResponse), size, request_id_);
  internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data* params =
      internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ProxyToResponder
    : public CheckMethodWithEmptyResponse::WithParameterAndEmptyResponseCallback::Runnable {
 public:
  ~CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CheckMethodWithEmptyResponse::WithParameterAndEmptyResponse(p_b, callback) "
        "was never run.";
  }

  CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run() const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ProxyToResponder);
};

void CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ProxyToResponder::Run(
    ) const {
  size_t size = sizeof(internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithParameterAndEmptyResponse), size, request_id_);
  internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data* params =
      internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

CheckMethodWithEmptyResponseStub::CheckMethodWithEmptyResponseStub()
    : sink_(nullptr),
      control_message_handler_(CheckMethodWithEmptyResponse::Version_) {
}

CheckMethodWithEmptyResponseStub::~CheckMethodWithEmptyResponseStub() {}

bool CheckMethodWithEmptyResponseStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithoutParameterAndEmptyResponse: {
      break;
    }
    case internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithParameterAndEmptyResponse: {
      break;
    }
  }
  return false;
}

bool CheckMethodWithEmptyResponseStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithoutParameterAndEmptyResponse: {
      internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data* params =
          reinterpret_cast<internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CheckMethodWithEmptyResponse::WithoutParameterAndEmptyResponseCallback::Runnable* runnable =
          new CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ProxyToResponder(
              message->request_id(), responder);
      CheckMethodWithEmptyResponse::WithoutParameterAndEmptyResponseCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->WithoutParameterAndEmptyResponse(callback);
      return true;
    }
    case internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithParameterAndEmptyResponse: {
      internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data* params =
          reinterpret_cast<internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CheckMethodWithEmptyResponse::WithParameterAndEmptyResponseCallback::Runnable* runnable =
          new CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ProxyToResponder(
              message->request_id(), responder);
      CheckMethodWithEmptyResponse::WithParameterAndEmptyResponseCallback callback(runnable);
      
      bool p_b {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_b = params->b;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->WithParameterAndEmptyResponse(p_b, callback);
      return true;
    }
  }
  return false;
}

class CheckNameCollision_WithNameCollision_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CheckNameCollision_WithNameCollision_ForwardToCallback(
      const CheckNameCollision::WithNameCollisionCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CheckNameCollision::WithNameCollisionCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CheckNameCollision_WithNameCollision_ForwardToCallback);
};
bool CheckNameCollision_WithNameCollision_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CheckNameCollision_WithNameCollision_ResponseParams_Data* params =
      reinterpret_cast<internal::CheckNameCollision_WithNameCollision_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  bool p_message {};
  bool p_response {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_message = params->message;
    p_response = params->response;
  } while (false);
  callback_.Run(p_message, p_response);
  return true;
}

CheckNameCollisionProxy::CheckNameCollisionProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CheckNameCollisionProxy::WithNameCollision(
    bool in_message, bool in_response, const WithNameCollisionCallback& callback) {
  size_t size = sizeof(internal::CheckNameCollision_WithNameCollision_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CheckNameCollision_Base::MessageOrdinals::WithNameCollision), size);

  internal::CheckNameCollision_WithNameCollision_Params_Data* params =
      internal::CheckNameCollision_WithNameCollision_Params_Data::New(builder.buffer());
  params->message = in_message;
  params->response = in_response;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CheckNameCollision_WithNameCollision_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CheckNameCollision_WithNameCollision_ProxyToResponder
    : public CheckNameCollision::WithNameCollisionCallback::Runnable {
 public:
  ~CheckNameCollision_WithNameCollision_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CheckNameCollision::WithNameCollision(p_message, p_response, callback) "
        "was never run.";
  }

  CheckNameCollision_WithNameCollision_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(bool in_message, bool in_response) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CheckNameCollision_WithNameCollision_ProxyToResponder);
};

void CheckNameCollision_WithNameCollision_ProxyToResponder::Run(
    bool in_message, bool in_response) const {
  size_t size = sizeof(internal::CheckNameCollision_WithNameCollision_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CheckNameCollision_Base::MessageOrdinals::WithNameCollision), size, request_id_);
  internal::CheckNameCollision_WithNameCollision_ResponseParams_Data* params =
      internal::CheckNameCollision_WithNameCollision_ResponseParams_Data::New(builder.buffer());
  params->message = in_message;
  params->response = in_response;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

CheckNameCollisionStub::CheckNameCollisionStub()
    : sink_(nullptr),
      control_message_handler_(CheckNameCollision::Version_) {
}

CheckNameCollisionStub::~CheckNameCollisionStub() {}

bool CheckNameCollisionStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::CheckNameCollision_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CheckNameCollision_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CheckNameCollision_Base::MessageOrdinals::WithNameCollision: {
      break;
    }
  }
  return false;
}

bool CheckNameCollisionStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::CheckNameCollision_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CheckNameCollision_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CheckNameCollision_Base::MessageOrdinals::WithNameCollision: {
      internal::CheckNameCollision_WithNameCollision_Params_Data* params =
          reinterpret_cast<internal::CheckNameCollision_WithNameCollision_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CheckNameCollision::WithNameCollisionCallback::Runnable* runnable =
          new CheckNameCollision_WithNameCollision_ProxyToResponder(
              message->request_id(), responder);
      CheckNameCollision::WithNameCollisionCallback callback(runnable);
      
      bool p_message {};
      bool p_response {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_message = params->message;
        p_response = params->response;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->WithNameCollision(p_message, p_response, callback);
      return true;
    }
  }
  return false;
}


CheckEnumCapsProxy::CheckEnumCapsProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CheckEnumCapsProxy::SetEnumWithINTERNALAllCaps(
    EnumWithINTERNALAllCaps in_e) {
  size_t size = sizeof(internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::CheckEnumCaps_Base::MessageOrdinals::SetEnumWithINTERNALAllCaps), size);

  internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data* params =
      internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data::New(builder.buffer());
  params->e =
    static_cast<int32_t>(in_e);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

CheckEnumCapsStub::CheckEnumCapsStub()
    : sink_(nullptr),
      control_message_handler_(CheckEnumCaps::Version_) {
}

CheckEnumCapsStub::~CheckEnumCapsStub() {}

bool CheckEnumCapsStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::CheckEnumCaps_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CheckEnumCaps_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CheckEnumCaps_Base::MessageOrdinals::SetEnumWithINTERNALAllCaps: {
      internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data* params =
          reinterpret_cast<internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      EnumWithINTERNALAllCaps p_e {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_e = static_cast<EnumWithINTERNALAllCaps>(params->e);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetEnumWithINTERNALAllCaps(p_e);
      return true;
    }
  }
  return false;
}

bool CheckEnumCapsStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::CheckEnumCaps_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CheckEnumCaps_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CheckEnumCaps_Base::MessageOrdinals::SetEnumWithINTERNALAllCaps: {
      break;
    }
  }
  return false;
}


TestInterfaceProxy::TestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestInterfaceProxy::SomeMessage(
    ) {
  size_t size = sizeof(internal::TestInterface_SomeMessage_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TestInterface_Base::MessageOrdinals::SomeMessage), size);

  internal::TestInterface_SomeMessage_Params_Data* params =
      internal::TestInterface_SomeMessage_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

TestInterfaceStub::TestInterfaceStub()
    : sink_(nullptr),
      control_message_handler_(TestInterface::Version_) {
}

TestInterfaceStub::~TestInterfaceStub() {}

bool TestInterfaceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestInterface_Base::MessageOrdinals::SomeMessage: {
      internal::TestInterface_SomeMessage_Params_Data* params =
          reinterpret_cast<internal::TestInterface_SomeMessage_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SomeMessage();
      return true;
    }
  }
  return false;
}

bool TestInterfaceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestInterface_Base::MessageOrdinals::SomeMessage: {
      break;
    }
  }
  return false;
}

class Regression551_Get_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Regression551_Get_ForwardToCallback(
      const Regression551::GetCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Regression551::GetCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Regression551_Get_ForwardToCallback);
};
bool Regression551_Get_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Regression551_Get_ResponseParams_Data* params =
      reinterpret_cast<internal::Regression551_Get_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  int32_t p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_result = params->result;
  } while (false);
  callback_.Run(p_result);
  return true;
}

Regression551Proxy::Regression551Proxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void Regression551Proxy::Get(
    mojo::Array<mojo::String> in_key_prefixes, const GetCallback& callback) {
  size_t size = sizeof(internal::Regression551_Get_Params_Data);
  size += GetSerializedSize_(in_key_prefixes);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Regression551_Base::MessageOrdinals::Get), size);

  internal::Regression551_Get_Params_Data* params =
      internal::Regression551_Get_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams key_prefixes_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_key_prefixes, builder.buffer(), &params->key_prefixes.ptr,
                          &key_prefixes_validate_params);
  }
  if (!params->key_prefixes.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null key_prefixes in Regression551.Get request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Regression551_Get_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Regression551_Get_ProxyToResponder
    : public Regression551::GetCallback::Runnable {
 public:
  ~Regression551_Get_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Regression551::Get(p_key_prefixes.Pass(), callback) "
        "was never run.";
  }

  Regression551_Get_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(int32_t in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Regression551_Get_ProxyToResponder);
};

void Regression551_Get_ProxyToResponder::Run(
    int32_t in_result) const {
  size_t size = sizeof(internal::Regression551_Get_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Regression551_Base::MessageOrdinals::Get), size, request_id_);
  internal::Regression551_Get_ResponseParams_Data* params =
      internal::Regression551_Get_ResponseParams_Data::New(builder.buffer());
  params->result = in_result;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

Regression551Stub::Regression551Stub()
    : sink_(nullptr),
      control_message_handler_(Regression551::Version_) {
}

Regression551Stub::~Regression551Stub() {}

bool Regression551Stub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Regression551_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Regression551_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Regression551_Base::MessageOrdinals::Get: {
      break;
    }
  }
  return false;
}

bool Regression551Stub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Regression551_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Regression551_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Regression551_Base::MessageOrdinals::Get: {
      internal::Regression551_Get_Params_Data* params =
          reinterpret_cast<internal::Regression551_Get_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Regression551::GetCallback::Runnable* runnable =
          new Regression551_Get_ProxyToResponder(
              message->request_id(), responder);
      Regression551::GetCallback callback(runnable);
      
      mojo::Array<mojo::String> p_key_prefixes {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->key_prefixes.ptr, &p_key_prefixes);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Get(p_key_prefixes.Pass(), callback);
      return true;
    }
  }
  return false;
}

class ServiceName_serviceName_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ServiceName_serviceName_ForwardToCallback(
      const ServiceName::serviceNameCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ServiceName::serviceNameCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceName_serviceName_ForwardToCallback);
};
bool ServiceName_serviceName_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ServiceName_serviceName_ResponseParams_Data* params =
      reinterpret_cast<internal::ServiceName_serviceName_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_serviceName {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->serviceName.ptr, &p_serviceName);
  } while (false);
  callback_.Run(p_serviceName);
  return true;
}

ServiceNameProxy::ServiceNameProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ServiceNameProxy::serviceName(
    const serviceNameCallback& callback) {
  size_t size = sizeof(internal::ServiceName_serviceName_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceName_Base::MessageOrdinals::serviceName), size);

  internal::ServiceName_serviceName_Params_Data* params =
      internal::ServiceName_serviceName_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ServiceName_serviceName_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ServiceName_serviceName_ProxyToResponder
    : public ServiceName::serviceNameCallback::Runnable {
 public:
  ~ServiceName_serviceName_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ServiceName::serviceName(callback) "
        "was never run.";
  }

  ServiceName_serviceName_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_serviceName) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ServiceName_serviceName_ProxyToResponder);
};

void ServiceName_serviceName_ProxyToResponder::Run(
    const mojo::String& in_serviceName) const {
  size_t size = sizeof(internal::ServiceName_serviceName_ResponseParams_Data);
  size += GetSerializedSize_(in_serviceName);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ServiceName_Base::MessageOrdinals::serviceName), size, request_id_);
  internal::ServiceName_serviceName_ResponseParams_Data* params =
      internal::ServiceName_serviceName_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_serviceName, builder.buffer(), &params->serviceName.ptr);
  if (!params->serviceName.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null serviceName in ServiceName.serviceName response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ServiceNameStub::ServiceNameStub()
    : sink_(nullptr),
      control_message_handler_(ServiceName::Version_) {
}

ServiceNameStub::~ServiceNameStub() {}

bool ServiceNameStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ServiceName_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceName_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceName_Base::MessageOrdinals::serviceName: {
      break;
    }
  }
  return false;
}

bool ServiceNameStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ServiceName_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceName_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceName_Base::MessageOrdinals::serviceName: {
      internal::ServiceName_serviceName_Params_Data* params =
          reinterpret_cast<internal::ServiceName_serviceName_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ServiceName::serviceNameCallback::Runnable* runnable =
          new ServiceName_serviceName_ProxyToResponder(
              message->request_id(), responder);
      ServiceName::serviceNameCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->serviceName(callback);
      return true;
    }
  }
  return false;
}

}  // namespace regression_tests
