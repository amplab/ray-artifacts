// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_PREDICTION_INTERFACES_PREDICTION_MOJOM_COMMON_H_
#define MOJO_SERVICES_PREDICTION_INTERFACES_PREDICTION_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/prediction/interfaces/prediction.mojom-internal.h"
namespace prediction {

// --- Interface Forward Declarations ---
class PredictionService;
class PredictionServiceRequestValidator;
class PredictionServiceResponseValidator;
class PredictionService_Synchronous;

// --- Struct Forward Declarations ---
class PrevWordInfo;

using PrevWordInfoPtr = mojo::InlinedStructPtr<PrevWordInfo>;


class PredictionInfo;

using PredictionInfoPtr = mojo::StructPtr<PredictionInfo>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class PredictionService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = PredictionServiceRequestValidator;
  using ResponseValidator_ = PredictionServiceResponseValidator;
  using Synchronous_ = PredictionService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetPredictionList = 0,
  };


  virtual ~PredictionService_Base() {}
};

}  // namespace internal

// Async interface declaration

class PredictionServiceProxy;
class PredictionServiceStub;
class PredictionService_Synchronous;

class PredictionServiceRequestValidator;
class PredictionServiceResponseValidator;

class PredictionService : public internal::PredictionService_Base {
 public:
  virtual ~PredictionService() override {}

  using Proxy_ = PredictionServiceProxy;
  using Stub_ = PredictionServiceStub;
  using GetPredictionListCallback = mojo::Callback<void(mojo::Array<mojo::String>)>;
  virtual void GetPredictionList(PredictionInfoPtr prediction_info, const GetPredictionListCallback& callback) = 0;
};

}  // namespace prediction

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<prediction::PrevWordInfoPtr, true, false> {
  using DataType = prediction::internal::PrevWordInfo_Data*;
};
template <>
struct WrapperTraits<prediction::PredictionInfoPtr, true, false> {
  using DataType = prediction::internal::PredictionInfo_Data*;
};

}  // internal
}  // mojo
namespace prediction {

// --- Interface Request Validators ---
class PredictionServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class PredictionServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class PrevWordInfo {
 public:
  using Data_ = internal::PrevWordInfo_Data;

  static PrevWordInfoPtr New();

  template <typename U>
  static PrevWordInfoPtr From(const U& u) {
    return mojo::TypeConverter<PrevWordInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrevWordInfo>::Convert(*this);
  }

  PrevWordInfo();
  ~PrevWordInfo();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrevWordInfoPtr Clone() const;
  bool Equals(const PrevWordInfo& other) const;

  mojo::String word;
  bool is_beginning_of_sentence;
};



// --- Non-inlined structs ---
class PredictionInfo {
 public:
  using Data_ = internal::PredictionInfo_Data;

  static PredictionInfoPtr New();

  template <typename U>
  static PredictionInfoPtr From(const U& u) {
    return mojo::TypeConverter<PredictionInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PredictionInfo>::Convert(*this);
  }

  PredictionInfo();
  ~PredictionInfo();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PredictionInfoPtr Clone() const;
  bool Equals(const PredictionInfo& other) const;

  mojo::Array<PrevWordInfoPtr> previous_words;
  mojo::String current_word;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const PrevWordInfo& input);
mojo::internal::ValidationError Serialize_(
    PrevWordInfo* input,
    mojo::internal::Buffer* buffer,
    internal::PrevWordInfo_Data** output);
void Deserialize_(internal::PrevWordInfo_Data* input,
                  PrevWordInfo* output);

size_t GetSerializedSize_(const PredictionInfo& input);
mojo::internal::ValidationError Serialize_(
    PredictionInfo* input,
    mojo::internal::Buffer* buffer,
    internal::PredictionInfo_Data** output);
void Deserialize_(internal::PredictionInfo_Data* input,
                  PredictionInfo* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class PredictionService_GetPredictionList_Params;

using PredictionService_GetPredictionList_ParamsPtr = mojo::StructPtr<PredictionService_GetPredictionList_Params>;


size_t GetSerializedSize_(const PredictionService_GetPredictionList_Params& input);
mojo::internal::ValidationError Serialize_(
    PredictionService_GetPredictionList_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PredictionService_GetPredictionList_Params_Data** output);
void Deserialize_(internal::PredictionService_GetPredictionList_Params_Data* input,
                  PredictionService_GetPredictionList_Params* output);

class PredictionService_GetPredictionList_Params {
 public:
  using Data_ = internal::PredictionService_GetPredictionList_Params_Data;

  static PredictionService_GetPredictionList_ParamsPtr New();

  template <typename U>
  static PredictionService_GetPredictionList_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PredictionService_GetPredictionList_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PredictionService_GetPredictionList_Params>::Convert(*this);
  }

  PredictionService_GetPredictionList_Params();
  ~PredictionService_GetPredictionList_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PredictionService_GetPredictionList_ParamsPtr Clone() const;
  bool Equals(const PredictionService_GetPredictionList_Params& other) const;

  PredictionInfoPtr prediction_info;
};



class PredictionService_GetPredictionList_ResponseParams;

using PredictionService_GetPredictionList_ResponseParamsPtr = mojo::StructPtr<PredictionService_GetPredictionList_ResponseParams>;


size_t GetSerializedSize_(const PredictionService_GetPredictionList_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    PredictionService_GetPredictionList_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::PredictionService_GetPredictionList_ResponseParams_Data** output);
void Deserialize_(internal::PredictionService_GetPredictionList_ResponseParams_Data* input,
                  PredictionService_GetPredictionList_ResponseParams* output);

class PredictionService_GetPredictionList_ResponseParams {
 public:
  using Data_ = internal::PredictionService_GetPredictionList_ResponseParams_Data;

  static PredictionService_GetPredictionList_ResponseParamsPtr New();

  template <typename U>
  static PredictionService_GetPredictionList_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<PredictionService_GetPredictionList_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PredictionService_GetPredictionList_ResponseParams>::Convert(*this);
  }

  PredictionService_GetPredictionList_ResponseParams();
  ~PredictionService_GetPredictionList_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PredictionService_GetPredictionList_ResponseParamsPtr Clone() const;
  bool Equals(const PredictionService_GetPredictionList_ResponseParams& other) const;

  mojo::Array<mojo::String> prediction_list;
};


}  // namespace prediction

#endif  // MOJO_SERVICES_PREDICTION_INTERFACES_PREDICTION_MOJOM_COMMON_H_
