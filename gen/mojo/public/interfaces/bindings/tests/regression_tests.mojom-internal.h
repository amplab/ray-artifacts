// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace regression_tests {

class Edge;
class Vertex;
class EmptyStruct;
class A;
class B;
class StructWithHandleCalledHandles;
class StructWithArrayOfHandlesCalledHandles;
class StructWithInterfaceCalledHandles;
class ContainsArrayOfEnum;


namespace internal {

class Edge_Data;
class Vertex_Data;
class EmptyStruct_Data;
class A_Data;
class B_Data;
class StructWithHandleCalledHandles_Data;
class StructWithArrayOfHandlesCalledHandles_Data;
class StructWithInterfaceCalledHandles_Data;
class ContainsArrayOfEnum_Data;



#pragma pack(push, 1)


class Edge_Data {
 public:
  static Edge_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::Vertex_Data> v;

 private:
  Edge_Data();
  ~Edge_Data() = delete;
};
static_assert(sizeof(Edge_Data) == 16,
              "Bad sizeof(Edge_Data)");

class Vertex_Data {
 public:
  static Vertex_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::EmptyStruct_Data> e;

 private:
  Vertex_Data();
  ~Vertex_Data() = delete;
};
static_assert(sizeof(Vertex_Data) == 16,
              "Bad sizeof(Vertex_Data)");

class EmptyStruct_Data {
 public:
  static EmptyStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  EmptyStruct_Data();
  ~EmptyStruct_Data() = delete;
};
static_assert(sizeof(EmptyStruct_Data) == 8,
              "Bad sizeof(EmptyStruct_Data)");

class A_Data {
 public:
  static A_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::B_Data> b;

 private:
  A_Data();
  ~A_Data() = delete;
};
static_assert(sizeof(A_Data) == 16,
              "Bad sizeof(A_Data)");

class B_Data {
 public:
  static B_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::A_Data> a;

 private:
  B_Data();
  ~B_Data() = delete;
};
static_assert(sizeof(B_Data) == 16,
              "Bad sizeof(B_Data)");

class StructWithHandleCalledHandles_Data {
 public:
  static StructWithHandleCalledHandles_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::Handle handles;
  uint8_t padfinal_[4];

 private:
  StructWithHandleCalledHandles_Data();
  ~StructWithHandleCalledHandles_Data() = delete;
};
static_assert(sizeof(StructWithHandleCalledHandles_Data) == 16,
              "Bad sizeof(StructWithHandleCalledHandles_Data)");

class StructWithArrayOfHandlesCalledHandles_Data {
 public:
  static StructWithArrayOfHandlesCalledHandles_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::Handle> handles;

 private:
  StructWithArrayOfHandlesCalledHandles_Data();
  ~StructWithArrayOfHandlesCalledHandles_Data() = delete;
};
static_assert(sizeof(StructWithArrayOfHandlesCalledHandles_Data) == 16,
              "Bad sizeof(StructWithArrayOfHandlesCalledHandles_Data)");

class StructWithInterfaceCalledHandles_Data {
 public:
  static StructWithInterfaceCalledHandles_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data handles;

 private:
  StructWithInterfaceCalledHandles_Data();
  ~StructWithInterfaceCalledHandles_Data() = delete;
};
static_assert(sizeof(StructWithInterfaceCalledHandles_Data) == 16,
              "Bad sizeof(StructWithInterfaceCalledHandles_Data)");

class ContainsArrayOfEnum_Data {
 public:
  static ContainsArrayOfEnum_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<int32_t> array_of_enums;

 private:
  ContainsArrayOfEnum_Data();
  ~ContainsArrayOfEnum_Data() = delete;
};
static_assert(sizeof(ContainsArrayOfEnum_Data) == 16,
              "Bad sizeof(ContainsArrayOfEnum_Data)");


class CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data {
 public:
  static CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data();
  ~CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data() = delete;
};
static_assert(sizeof(CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data) == 8,
              "Bad sizeof(CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data)");

class CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data {
 public:
  static CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data();
  ~CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data() = delete;
};
static_assert(sizeof(CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data) == 8,
              "Bad sizeof(CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data)");


class CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data {
 public:
  static CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t b : 1;
  uint8_t padfinal_[7];

 private:
  CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data();
  ~CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data() = delete;
};
static_assert(sizeof(CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data) == 16,
              "Bad sizeof(CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data)");

class CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data {
 public:
  static CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data();
  ~CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data() = delete;
};
static_assert(sizeof(CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data) == 8,
              "Bad sizeof(CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data)");


class CheckNameCollision_WithNameCollision_Params_Data {
 public:
  static CheckNameCollision_WithNameCollision_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t message : 1;
  uint8_t response : 1;
  uint8_t padfinal_[7];

 private:
  CheckNameCollision_WithNameCollision_Params_Data();
  ~CheckNameCollision_WithNameCollision_Params_Data() = delete;
};
static_assert(sizeof(CheckNameCollision_WithNameCollision_Params_Data) == 16,
              "Bad sizeof(CheckNameCollision_WithNameCollision_Params_Data)");

class CheckNameCollision_WithNameCollision_ResponseParams_Data {
 public:
  static CheckNameCollision_WithNameCollision_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t message : 1;
  uint8_t response : 1;
  uint8_t padfinal_[7];

 private:
  CheckNameCollision_WithNameCollision_ResponseParams_Data();
  ~CheckNameCollision_WithNameCollision_ResponseParams_Data() = delete;
};
static_assert(sizeof(CheckNameCollision_WithNameCollision_ResponseParams_Data) == 16,
              "Bad sizeof(CheckNameCollision_WithNameCollision_ResponseParams_Data)");


class CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data {
 public:
  static CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t e;
  uint8_t padfinal_[4];

 private:
  CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data();
  ~CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data() = delete;
};
static_assert(sizeof(CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data) == 16,
              "Bad sizeof(CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data)");


class TestInterface_SomeMessage_Params_Data {
 public:
  static TestInterface_SomeMessage_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestInterface_SomeMessage_Params_Data();
  ~TestInterface_SomeMessage_Params_Data() = delete;
};
static_assert(sizeof(TestInterface_SomeMessage_Params_Data) == 8,
              "Bad sizeof(TestInterface_SomeMessage_Params_Data)");


class Regression551_Get_Params_Data {
 public:
  static Regression551_Get_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> key_prefixes;

 private:
  Regression551_Get_Params_Data();
  ~Regression551_Get_Params_Data() = delete;
};
static_assert(sizeof(Regression551_Get_Params_Data) == 16,
              "Bad sizeof(Regression551_Get_Params_Data)");

class Regression551_Get_ResponseParams_Data {
 public:
  static Regression551_Get_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  Regression551_Get_ResponseParams_Data();
  ~Regression551_Get_ResponseParams_Data() = delete;
};
static_assert(sizeof(Regression551_Get_ResponseParams_Data) == 16,
              "Bad sizeof(Regression551_Get_ResponseParams_Data)");


class ServiceName_serviceName_Params_Data {
 public:
  static ServiceName_serviceName_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  ServiceName_serviceName_Params_Data();
  ~ServiceName_serviceName_Params_Data() = delete;
};
static_assert(sizeof(ServiceName_serviceName_Params_Data) == 8,
              "Bad sizeof(ServiceName_serviceName_Params_Data)");

class ServiceName_serviceName_ResponseParams_Data {
 public:
  static ServiceName_serviceName_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer serviceName;

 private:
  ServiceName_serviceName_ResponseParams_Data();
  ~ServiceName_serviceName_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceName_serviceName_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceName_serviceName_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace regression_tests

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_INTERNAL_H_
