// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SHELL_APPLICATION_MANAGER_TEST_MOJOM_SYNC_H_
#define SHELL_APPLICATION_MANAGER_TEST_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "shell/application_manager/test.mojom-internal.h"
#include "shell/application_manager/test.mojom-common.h"


namespace shell {

// --- Synchronous interface declaration ---

class TestService_SynchronousProxy;
class TestService_Synchronous
  : public internal::TestService_Base {
 public:
  virtual ~TestService_Synchronous() override {}
  
  using Proxy_ = TestService_SynchronousProxy;
  virtual bool Test(
      const mojo::String& in_test_string)= 0;
};

class TestService_SynchronousProxy
    : public TestService_Synchronous {
 public:
  explicit TestService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Test(const mojo::String& in_test_string) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class TestA_SynchronousProxy;
class TestA_Synchronous
  : public internal::TestA_Base {
 public:
  virtual ~TestA_Synchronous() override {}
  
  using Proxy_ = TestA_SynchronousProxy;
  virtual bool CallB(
      )const= 0;
};

class TestA_SynchronousProxy
    : public TestA_Synchronous {
 public:
  explicit TestA_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool CallB() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class TestB_SynchronousProxy;
class TestB_Synchronous
  : public internal::TestB_Base {
 public:
  virtual ~TestB_Synchronous() override {}
  
  using Proxy_ = TestB_SynchronousProxy;
  virtual bool B(
      )= 0;
};

class TestB_SynchronousProxy
    : public TestB_Synchronous {
 public:
  explicit TestB_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool B() override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class TestC_SynchronousProxy;
class TestC_Synchronous
  : public internal::TestC_Base {
 public:
  virtual ~TestC_Synchronous() override {}
  
  using Proxy_ = TestC_SynchronousProxy;
  virtual bool C(
      )= 0;
};

class TestC_SynchronousProxy
    : public TestC_Synchronous {
 public:
  explicit TestC_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool C() override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace shell

#endif  // SHELL_APPLICATION_MANAGER_TEST_MOJOM_SYNC_H_
