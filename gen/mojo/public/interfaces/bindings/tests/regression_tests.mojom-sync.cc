// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-common.h"
namespace regression_tests {

// --- Interface definitions ---
CheckMethodWithEmptyResponse_SynchronousProxy::CheckMethodWithEmptyResponse_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CheckMethodWithEmptyResponse_SynchronousProxy::WithoutParameterAndEmptyResponse() {
  size_t size = sizeof(internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithoutParameterAndEmptyResponse);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data* out_params =
      internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data*
      response_params = reinterpret_cast<internal::CheckMethodWithEmptyResponse_WithoutParameterAndEmptyResponse_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
  } while (false);
  return true;
}
bool CheckMethodWithEmptyResponse_SynchronousProxy::WithParameterAndEmptyResponse(bool in_b) {
  size_t size = sizeof(internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CheckMethodWithEmptyResponse_Base::MessageOrdinals::WithParameterAndEmptyResponse);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data* out_params =
      internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_Params_Data::New(builder.buffer());
  out_params->b = in_b;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data*
      response_params = reinterpret_cast<internal::CheckMethodWithEmptyResponse_WithParameterAndEmptyResponse_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
  } while (false);
  return true;
}CheckNameCollision_SynchronousProxy::CheckNameCollision_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CheckNameCollision_SynchronousProxy::WithNameCollision(bool in_message, bool in_response, bool* out_message, bool* out_response) {
  size_t size = sizeof(internal::CheckNameCollision_WithNameCollision_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CheckNameCollision_Base::MessageOrdinals::WithNameCollision);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::CheckNameCollision_WithNameCollision_Params_Data* out_params =
      internal::CheckNameCollision_WithNameCollision_Params_Data::New(builder.buffer());
  out_params->message = in_message;
  out_params->response = in_response;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::CheckNameCollision_WithNameCollision_ResponseParams_Data*
      response_params = reinterpret_cast<internal::CheckNameCollision_WithNameCollision_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_message) = response_params->message;
    (*out_response) = response_params->response;
  } while (false);
  return true;
}CheckEnumCaps_SynchronousProxy::CheckEnumCaps_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CheckEnumCaps_SynchronousProxy::SetEnumWithINTERNALAllCaps(EnumWithINTERNALAllCaps in_e) const  {
  size_t size = sizeof(internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CheckEnumCaps_Base::MessageOrdinals::SetEnumWithINTERNALAllCaps);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data* out_params =
      internal::CheckEnumCaps_SetEnumWithINTERNALAllCaps_Params_Data::New(builder.buffer());
  out_params->e =
    static_cast<int32_t>(in_e);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}TestInterface_SynchronousProxy::TestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool TestInterface_SynchronousProxy::SomeMessage() const  {
  size_t size = sizeof(internal::TestInterface_SomeMessage_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::TestInterface_Base::MessageOrdinals::SomeMessage);
  mojo::MessageBuilder builder(msg_name, size);

  internal::TestInterface_SomeMessage_Params_Data* out_params =
      internal::TestInterface_SomeMessage_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}Regression551_SynchronousProxy::Regression551_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool Regression551_SynchronousProxy::Get(mojo::Array<mojo::String> in_key_prefixes, int32_t* out_result) {
  size_t size = sizeof(internal::Regression551_Get_Params_Data);
  size += GetSerializedSize_(in_key_prefixes);

  auto msg_name = static_cast<uint32_t>(internal::Regression551_Base::MessageOrdinals::Get);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Regression551_Get_Params_Data* out_params =
      internal::Regression551_Get_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams key_prefixes_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_key_prefixes, builder.buffer(), &out_params->key_prefixes.ptr,
                          &key_prefixes_validate_params);
  }
  if (!out_params->key_prefixes.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null key_prefixes in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Regression551_Get_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Regression551_Get_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_result) = response_params->result;
  } while (false);
  return true;
}ServiceName_SynchronousProxy::ServiceName_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool ServiceName_SynchronousProxy::serviceName(mojo::String* out_serviceName) {
  size_t size = sizeof(internal::ServiceName_serviceName_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::ServiceName_Base::MessageOrdinals::serviceName);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::ServiceName_serviceName_Params_Data* out_params =
      internal::ServiceName_serviceName_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::ServiceName_serviceName_ResponseParams_Data*
      response_params = reinterpret_cast<internal::ServiceName_serviceName_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->serviceName.ptr, &(*out_serviceName));
  } while (false);
  return true;
}
}  // namespace regression_tests

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
