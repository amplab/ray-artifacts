// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/url_response_disk_cache/interfaces/url_response_disk_cache.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class URLResponseDiskCache_Get_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  URLResponseDiskCache_Get_ForwardToCallback(
      const URLResponseDiskCache::GetCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  URLResponseDiskCache::GetCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLResponseDiskCache_Get_ForwardToCallback);
};
bool URLResponseDiskCache_Get_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::URLResponseDiskCache_Get_ResponseParams_Data* params =
      reinterpret_cast<internal::URLResponseDiskCache_Get_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::URLResponsePtr p_response {};
  mojo::Array<uint8_t> p_file_path {};
  mojo::Array<uint8_t> p_cache_dir_path {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->response.ptr) {
      p_response = mojo::URLResponse::New();
      Deserialize_(params->response.ptr, p_response.get());
    }
    Deserialize_(params->file_path.ptr, &p_file_path);
    Deserialize_(params->cache_dir_path.ptr, &p_cache_dir_path);
  } while (false);
  callback_.Run(p_response.Pass(), p_file_path.Pass(), p_cache_dir_path.Pass());
  return true;
}
class URLResponseDiskCache_UpdateAndGet_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  URLResponseDiskCache_UpdateAndGet_ForwardToCallback(
      const URLResponseDiskCache::UpdateAndGetCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  URLResponseDiskCache::UpdateAndGetCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLResponseDiskCache_UpdateAndGet_ForwardToCallback);
};
bool URLResponseDiskCache_UpdateAndGet_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::URLResponseDiskCache_UpdateAndGet_ResponseParams_Data* params =
      reinterpret_cast<internal::URLResponseDiskCache_UpdateAndGet_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<uint8_t> p_file_path {};
  mojo::Array<uint8_t> p_cache_dir_path {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->file_path.ptr, &p_file_path);
    Deserialize_(params->cache_dir_path.ptr, &p_cache_dir_path);
  } while (false);
  callback_.Run(p_file_path.Pass(), p_cache_dir_path.Pass());
  return true;
}
class URLResponseDiskCache_UpdateAndGetExtracted_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  URLResponseDiskCache_UpdateAndGetExtracted_ForwardToCallback(
      const URLResponseDiskCache::UpdateAndGetExtractedCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  URLResponseDiskCache::UpdateAndGetExtractedCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLResponseDiskCache_UpdateAndGetExtracted_ForwardToCallback);
};
bool URLResponseDiskCache_UpdateAndGetExtracted_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::URLResponseDiskCache_UpdateAndGetExtracted_ResponseParams_Data* params =
      reinterpret_cast<internal::URLResponseDiskCache_UpdateAndGetExtracted_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<uint8_t> p_extracted_dir_path {};
  mojo::Array<uint8_t> p_cache_dir_path {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->extracted_dir_path.ptr, &p_extracted_dir_path);
    Deserialize_(params->cache_dir_path.ptr, &p_cache_dir_path);
  } while (false);
  callback_.Run(p_extracted_dir_path.Pass(), p_cache_dir_path.Pass());
  return true;
}

URLResponseDiskCacheProxy::URLResponseDiskCacheProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void URLResponseDiskCacheProxy::Get(
    const mojo::String& in_url, const GetCallback& callback) {
  size_t size = sizeof(internal::URLResponseDiskCache_Get_Params_Data);
  size += GetSerializedSize_(in_url);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::Get), size);

  internal::URLResponseDiskCache_Get_Params_Data* params =
      internal::URLResponseDiskCache_Get_Params_Data::New(builder.buffer());
  SerializeString_(in_url, builder.buffer(), &params->url.ptr);
  if (!params->url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in URLResponseDiskCache.Get request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new URLResponseDiskCache_Get_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void URLResponseDiskCacheProxy::Validate(
    const mojo::String& in_url) {
  size_t size = sizeof(internal::URLResponseDiskCache_Validate_Params_Data);
  size += GetSerializedSize_(in_url);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::Validate), size);

  internal::URLResponseDiskCache_Validate_Params_Data* params =
      internal::URLResponseDiskCache_Validate_Params_Data::New(builder.buffer());
  SerializeString_(in_url, builder.buffer(), &params->url.ptr);
  if (!params->url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in URLResponseDiskCache.Validate request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void URLResponseDiskCacheProxy::Update(
    mojo::URLResponsePtr in_response) {
  size_t size = sizeof(internal::URLResponseDiskCache_Update_Params_Data);
  size += in_response.is_null()
              ? 0
              : GetSerializedSize_(*in_response);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::Update), size);

  internal::URLResponseDiskCache_Update_Params_Data* params =
      internal::URLResponseDiskCache_Update_Params_Data::New(builder.buffer());
  {Serialize_(in_response.get(),
               builder.buffer(),
               &params->response.ptr);
  }
  if (!params->response.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in URLResponseDiskCache.Update request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void URLResponseDiskCacheProxy::UpdateAndGet(
    mojo::URLResponsePtr in_response, const UpdateAndGetCallback& callback) {
  size_t size = sizeof(internal::URLResponseDiskCache_UpdateAndGet_Params_Data);
  size += in_response.is_null()
              ? 0
              : GetSerializedSize_(*in_response);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGet), size);

  internal::URLResponseDiskCache_UpdateAndGet_Params_Data* params =
      internal::URLResponseDiskCache_UpdateAndGet_Params_Data::New(builder.buffer());
  {Serialize_(in_response.get(),
               builder.buffer(),
               &params->response.ptr);
  }
  if (!params->response.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in URLResponseDiskCache.UpdateAndGet request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new URLResponseDiskCache_UpdateAndGet_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void URLResponseDiskCacheProxy::UpdateAndGetExtracted(
    mojo::URLResponsePtr in_response, const UpdateAndGetExtractedCallback& callback) {
  size_t size = sizeof(internal::URLResponseDiskCache_UpdateAndGetExtracted_Params_Data);
  size += in_response.is_null()
              ? 0
              : GetSerializedSize_(*in_response);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGetExtracted), size);

  internal::URLResponseDiskCache_UpdateAndGetExtracted_Params_Data* params =
      internal::URLResponseDiskCache_UpdateAndGetExtracted_Params_Data::New(builder.buffer());
  {Serialize_(in_response.get(),
               builder.buffer(),
               &params->response.ptr);
  }
  if (!params->response.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in URLResponseDiskCache.UpdateAndGetExtracted request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new URLResponseDiskCache_UpdateAndGetExtracted_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class URLResponseDiskCache_Get_ProxyToResponder
    : public URLResponseDiskCache::GetCallback::Runnable {
 public:
  ~URLResponseDiskCache_Get_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "URLResponseDiskCache::Get(p_url, callback) "
        "was never run.";
  }

  URLResponseDiskCache_Get_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::URLResponsePtr in_response, mojo::Array<uint8_t> in_file_path, mojo::Array<uint8_t> in_cache_dir_path) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLResponseDiskCache_Get_ProxyToResponder);
};

void URLResponseDiskCache_Get_ProxyToResponder::Run(
    mojo::URLResponsePtr in_response, mojo::Array<uint8_t> in_file_path, mojo::Array<uint8_t> in_cache_dir_path) const {
  size_t size = sizeof(internal::URLResponseDiskCache_Get_ResponseParams_Data);
  size += in_response.is_null()
              ? 0
              : GetSerializedSize_(*in_response);
  size += GetSerializedSize_(in_file_path);
  size += GetSerializedSize_(in_cache_dir_path);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::Get), size, request_id_);
  internal::URLResponseDiskCache_Get_ResponseParams_Data* params =
      internal::URLResponseDiskCache_Get_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_response.get(),
               builder.buffer(),
               &params->response.ptr);
  }
  {
    const mojo::internal::ArrayValidateParams file_path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_file_path, builder.buffer(), &params->file_path.ptr,
                          &file_path_validate_params);
  }
  {
    const mojo::internal::ArrayValidateParams cache_dir_path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_cache_dir_path, builder.buffer(), &params->cache_dir_path.ptr,
                          &cache_dir_path_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class URLResponseDiskCache_UpdateAndGet_ProxyToResponder
    : public URLResponseDiskCache::UpdateAndGetCallback::Runnable {
 public:
  ~URLResponseDiskCache_UpdateAndGet_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "URLResponseDiskCache::UpdateAndGet(p_response.Pass(), callback) "
        "was never run.";
  }

  URLResponseDiskCache_UpdateAndGet_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<uint8_t> in_file_path, mojo::Array<uint8_t> in_cache_dir_path) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLResponseDiskCache_UpdateAndGet_ProxyToResponder);
};

void URLResponseDiskCache_UpdateAndGet_ProxyToResponder::Run(
    mojo::Array<uint8_t> in_file_path, mojo::Array<uint8_t> in_cache_dir_path) const {
  size_t size = sizeof(internal::URLResponseDiskCache_UpdateAndGet_ResponseParams_Data);
  size += GetSerializedSize_(in_file_path);
  size += GetSerializedSize_(in_cache_dir_path);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGet), size, request_id_);
  internal::URLResponseDiskCache_UpdateAndGet_ResponseParams_Data* params =
      internal::URLResponseDiskCache_UpdateAndGet_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams file_path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_file_path, builder.buffer(), &params->file_path.ptr,
                          &file_path_validate_params);
  }
  {
    const mojo::internal::ArrayValidateParams cache_dir_path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_cache_dir_path, builder.buffer(), &params->cache_dir_path.ptr,
                          &cache_dir_path_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class URLResponseDiskCache_UpdateAndGetExtracted_ProxyToResponder
    : public URLResponseDiskCache::UpdateAndGetExtractedCallback::Runnable {
 public:
  ~URLResponseDiskCache_UpdateAndGetExtracted_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "URLResponseDiskCache::UpdateAndGetExtracted(p_response.Pass(), callback) "
        "was never run.";
  }

  URLResponseDiskCache_UpdateAndGetExtracted_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<uint8_t> in_extracted_dir_path, mojo::Array<uint8_t> in_cache_dir_path) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLResponseDiskCache_UpdateAndGetExtracted_ProxyToResponder);
};

void URLResponseDiskCache_UpdateAndGetExtracted_ProxyToResponder::Run(
    mojo::Array<uint8_t> in_extracted_dir_path, mojo::Array<uint8_t> in_cache_dir_path) const {
  size_t size = sizeof(internal::URLResponseDiskCache_UpdateAndGetExtracted_ResponseParams_Data);
  size += GetSerializedSize_(in_extracted_dir_path);
  size += GetSerializedSize_(in_cache_dir_path);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGetExtracted), size, request_id_);
  internal::URLResponseDiskCache_UpdateAndGetExtracted_ResponseParams_Data* params =
      internal::URLResponseDiskCache_UpdateAndGetExtracted_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams extracted_dir_path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_extracted_dir_path, builder.buffer(), &params->extracted_dir_path.ptr,
                          &extracted_dir_path_validate_params);
  }
  {
    const mojo::internal::ArrayValidateParams cache_dir_path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_cache_dir_path, builder.buffer(), &params->cache_dir_path.ptr,
                          &cache_dir_path_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

URLResponseDiskCacheStub::URLResponseDiskCacheStub()
    : sink_(nullptr),
      control_message_handler_(URLResponseDiskCache::Version_) {
}

URLResponseDiskCacheStub::~URLResponseDiskCacheStub() {}

bool URLResponseDiskCacheStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::URLResponseDiskCache_Base::MessageOrdinals method_ordinal =
      static_cast<internal::URLResponseDiskCache_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::URLResponseDiskCache_Base::MessageOrdinals::Get: {
      break;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::Validate: {
      internal::URLResponseDiskCache_Validate_Params_Data* params =
          reinterpret_cast<internal::URLResponseDiskCache_Validate_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_url {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->url.ptr, &p_url);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Validate(p_url);
      return true;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::Update: {
      internal::URLResponseDiskCache_Update_Params_Data* params =
          reinterpret_cast<internal::URLResponseDiskCache_Update_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::URLResponsePtr p_response {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->response.ptr) {
          p_response = mojo::URLResponse::New();
          Deserialize_(params->response.ptr, p_response.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Update(p_response.Pass());
      return true;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGet: {
      break;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGetExtracted: {
      break;
    }
  }
  return false;
}

bool URLResponseDiskCacheStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::URLResponseDiskCache_Base::MessageOrdinals method_ordinal =
      static_cast<internal::URLResponseDiskCache_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::URLResponseDiskCache_Base::MessageOrdinals::Get: {
      internal::URLResponseDiskCache_Get_Params_Data* params =
          reinterpret_cast<internal::URLResponseDiskCache_Get_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      URLResponseDiskCache::GetCallback::Runnable* runnable =
          new URLResponseDiskCache_Get_ProxyToResponder(
              message->request_id(), responder);
      URLResponseDiskCache::GetCallback callback(runnable);
      
      mojo::String p_url {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->url.ptr, &p_url);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Get(p_url, callback);
      return true;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::Validate: {
      break;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::Update: {
      break;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGet: {
      internal::URLResponseDiskCache_UpdateAndGet_Params_Data* params =
          reinterpret_cast<internal::URLResponseDiskCache_UpdateAndGet_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      URLResponseDiskCache::UpdateAndGetCallback::Runnable* runnable =
          new URLResponseDiskCache_UpdateAndGet_ProxyToResponder(
              message->request_id(), responder);
      URLResponseDiskCache::UpdateAndGetCallback callback(runnable);
      
      mojo::URLResponsePtr p_response {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->response.ptr) {
          p_response = mojo::URLResponse::New();
          Deserialize_(params->response.ptr, p_response.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->UpdateAndGet(p_response.Pass(), callback);
      return true;
    }
    case internal::URLResponseDiskCache_Base::MessageOrdinals::UpdateAndGetExtracted: {
      internal::URLResponseDiskCache_UpdateAndGetExtracted_Params_Data* params =
          reinterpret_cast<internal::URLResponseDiskCache_UpdateAndGetExtracted_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      URLResponseDiskCache::UpdateAndGetExtractedCallback::Runnable* runnable =
          new URLResponseDiskCache_UpdateAndGetExtracted_ProxyToResponder(
              message->request_id(), responder);
      URLResponseDiskCache::UpdateAndGetExtractedCallback callback(runnable);
      
      mojo::URLResponsePtr p_response {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->response.ptr) {
          p_response = mojo::URLResponse::New();
          Deserialize_(params->response.ptr, p_response.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->UpdateAndGetExtracted(p_response.Pass(), callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
