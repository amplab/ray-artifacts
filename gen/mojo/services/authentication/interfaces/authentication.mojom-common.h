// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_MOJOM_COMMON_H_
#define MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/authentication/interfaces/authentication.mojom-internal.h"
namespace authentication {

// --- Interface Forward Declarations ---
class AuthenticationService;
class AuthenticationServiceRequestValidator;
class AuthenticationServiceResponseValidator;
class AuthenticationService_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class AuthenticationService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = AuthenticationServiceRequestValidator;
  using ResponseValidator_ = AuthenticationServiceResponseValidator;
  using Synchronous_ = AuthenticationService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    SelectAccount = 0,
    GetOAuth2Token = 1,
    ClearOAuth2Token = 2,
  };


  virtual ~AuthenticationService_Base() {}
};

}  // namespace internal

// Async interface declaration

class AuthenticationServiceProxy;
class AuthenticationServiceStub;
class AuthenticationService_Synchronous;

class AuthenticationServiceRequestValidator;
class AuthenticationServiceResponseValidator;

class AuthenticationService : public internal::AuthenticationService_Base {
 public:
  virtual ~AuthenticationService() override {}

  using Proxy_ = AuthenticationServiceProxy;
  using Stub_ = AuthenticationServiceStub;
  using SelectAccountCallback = mojo::Callback<void(mojo::String, mojo::String)>;
  virtual void SelectAccount(bool return_last_selected, const SelectAccountCallback& callback) = 0;
  using GetOAuth2TokenCallback = mojo::Callback<void(mojo::String, mojo::String)>;
  virtual void GetOAuth2Token(const mojo::String& username, mojo::Array<mojo::String> scopes, const GetOAuth2TokenCallback& callback) = 0;
  virtual void ClearOAuth2Token(const mojo::String& token) = 0;
};

}  // namespace authentication

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace authentication {

// --- Interface Request Validators ---
class AuthenticationServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class AuthenticationServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class AuthenticationService_SelectAccount_Params;

using AuthenticationService_SelectAccount_ParamsPtr = mojo::InlinedStructPtr<AuthenticationService_SelectAccount_Params>;


size_t GetSerializedSize_(const AuthenticationService_SelectAccount_Params& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationService_SelectAccount_Params* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationService_SelectAccount_Params_Data** output);
void Deserialize_(internal::AuthenticationService_SelectAccount_Params_Data* input,
                  AuthenticationService_SelectAccount_Params* output);

class AuthenticationService_SelectAccount_Params {
 public:
  using Data_ = internal::AuthenticationService_SelectAccount_Params_Data;

  static AuthenticationService_SelectAccount_ParamsPtr New();

  template <typename U>
  static AuthenticationService_SelectAccount_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationService_SelectAccount_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationService_SelectAccount_Params>::Convert(*this);
  }

  AuthenticationService_SelectAccount_Params();
  ~AuthenticationService_SelectAccount_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationService_SelectAccount_ParamsPtr Clone() const;
  bool Equals(const AuthenticationService_SelectAccount_Params& other) const;

  bool return_last_selected;
};



class AuthenticationService_SelectAccount_ResponseParams;

using AuthenticationService_SelectAccount_ResponseParamsPtr = mojo::InlinedStructPtr<AuthenticationService_SelectAccount_ResponseParams>;


size_t GetSerializedSize_(const AuthenticationService_SelectAccount_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationService_SelectAccount_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationService_SelectAccount_ResponseParams_Data** output);
void Deserialize_(internal::AuthenticationService_SelectAccount_ResponseParams_Data* input,
                  AuthenticationService_SelectAccount_ResponseParams* output);

class AuthenticationService_SelectAccount_ResponseParams {
 public:
  using Data_ = internal::AuthenticationService_SelectAccount_ResponseParams_Data;

  static AuthenticationService_SelectAccount_ResponseParamsPtr New();

  template <typename U>
  static AuthenticationService_SelectAccount_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationService_SelectAccount_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationService_SelectAccount_ResponseParams>::Convert(*this);
  }

  AuthenticationService_SelectAccount_ResponseParams();
  ~AuthenticationService_SelectAccount_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationService_SelectAccount_ResponseParamsPtr Clone() const;
  bool Equals(const AuthenticationService_SelectAccount_ResponseParams& other) const;

  mojo::String username;
  mojo::String error;
};



class AuthenticationService_GetOAuth2Token_Params;

using AuthenticationService_GetOAuth2Token_ParamsPtr = mojo::StructPtr<AuthenticationService_GetOAuth2Token_Params>;


size_t GetSerializedSize_(const AuthenticationService_GetOAuth2Token_Params& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationService_GetOAuth2Token_Params* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationService_GetOAuth2Token_Params_Data** output);
void Deserialize_(internal::AuthenticationService_GetOAuth2Token_Params_Data* input,
                  AuthenticationService_GetOAuth2Token_Params* output);

class AuthenticationService_GetOAuth2Token_Params {
 public:
  using Data_ = internal::AuthenticationService_GetOAuth2Token_Params_Data;

  static AuthenticationService_GetOAuth2Token_ParamsPtr New();

  template <typename U>
  static AuthenticationService_GetOAuth2Token_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationService_GetOAuth2Token_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationService_GetOAuth2Token_Params>::Convert(*this);
  }

  AuthenticationService_GetOAuth2Token_Params();
  ~AuthenticationService_GetOAuth2Token_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationService_GetOAuth2Token_ParamsPtr Clone() const;
  bool Equals(const AuthenticationService_GetOAuth2Token_Params& other) const;

  mojo::String username;
  mojo::Array<mojo::String> scopes;
};



class AuthenticationService_GetOAuth2Token_ResponseParams;

using AuthenticationService_GetOAuth2Token_ResponseParamsPtr = mojo::InlinedStructPtr<AuthenticationService_GetOAuth2Token_ResponseParams>;


size_t GetSerializedSize_(const AuthenticationService_GetOAuth2Token_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationService_GetOAuth2Token_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data** output);
void Deserialize_(internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data* input,
                  AuthenticationService_GetOAuth2Token_ResponseParams* output);

class AuthenticationService_GetOAuth2Token_ResponseParams {
 public:
  using Data_ = internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data;

  static AuthenticationService_GetOAuth2Token_ResponseParamsPtr New();

  template <typename U>
  static AuthenticationService_GetOAuth2Token_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationService_GetOAuth2Token_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationService_GetOAuth2Token_ResponseParams>::Convert(*this);
  }

  AuthenticationService_GetOAuth2Token_ResponseParams();
  ~AuthenticationService_GetOAuth2Token_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationService_GetOAuth2Token_ResponseParamsPtr Clone() const;
  bool Equals(const AuthenticationService_GetOAuth2Token_ResponseParams& other) const;

  mojo::String token;
  mojo::String error;
};



class AuthenticationService_ClearOAuth2Token_Params;

using AuthenticationService_ClearOAuth2Token_ParamsPtr = mojo::InlinedStructPtr<AuthenticationService_ClearOAuth2Token_Params>;


size_t GetSerializedSize_(const AuthenticationService_ClearOAuth2Token_Params& input);
mojo::internal::ValidationError Serialize_(
    AuthenticationService_ClearOAuth2Token_Params* input,
    mojo::internal::Buffer* buffer,
    internal::AuthenticationService_ClearOAuth2Token_Params_Data** output);
void Deserialize_(internal::AuthenticationService_ClearOAuth2Token_Params_Data* input,
                  AuthenticationService_ClearOAuth2Token_Params* output);

class AuthenticationService_ClearOAuth2Token_Params {
 public:
  using Data_ = internal::AuthenticationService_ClearOAuth2Token_Params_Data;

  static AuthenticationService_ClearOAuth2Token_ParamsPtr New();

  template <typename U>
  static AuthenticationService_ClearOAuth2Token_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<AuthenticationService_ClearOAuth2Token_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AuthenticationService_ClearOAuth2Token_Params>::Convert(*this);
  }

  AuthenticationService_ClearOAuth2Token_Params();
  ~AuthenticationService_ClearOAuth2Token_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AuthenticationService_ClearOAuth2Token_ParamsPtr Clone() const;
  bool Equals(const AuthenticationService_ClearOAuth2Token_Params& other) const;

  mojo::String token;
};



}  // namespace authentication

#endif  // MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_MOJOM_COMMON_H_
