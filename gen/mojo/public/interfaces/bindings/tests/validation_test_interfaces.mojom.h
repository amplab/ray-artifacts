// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-common.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---

using InterfaceAPtr = mojo::InterfacePtr<InterfaceA>;

using BoundsCheckTestInterfacePtr = mojo::InterfacePtr<BoundsCheckTestInterface>;

using ConformanceTestInterfacePtr = mojo::InterfacePtr<ConformanceTestInterface>;

using IntegrationTestInterfacePtr = mojo::InterfacePtr<IntegrationTestInterface>;


// --- Interface Proxies ---


class InterfaceAProxy
    : public InterfaceA,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit InterfaceAProxy(mojo::MessageReceiverWithResponder* receiver);
};


class BoundsCheckTestInterfaceProxy
    : public BoundsCheckTestInterface,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit BoundsCheckTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  void Method0(
      uint8_t param0, const Method0Callback& callback
  ) override;
  void Method1(
      uint8_t param0
  ) override;
};


class ConformanceTestInterfaceProxy
    : public ConformanceTestInterface,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit ConformanceTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  void Method0(
      float param0
  ) override;
  void Method1(
      StructAPtr param0
  ) override;
  void Method2(
      StructBPtr param0, StructAPtr param1
  ) override;
  void Method3(
      mojo::Array<bool> param0
  ) override;
  void Method4(
      StructCPtr param0, mojo::Array<uint8_t> param1
  ) override;
  void Method5(
      StructEPtr param0, mojo::ScopedDataPipeProducerHandle param1
  ) override;
  void Method6(
      mojo::Array<mojo::Array<uint8_t> > param0
  ) override;
  void Method7(
      StructFPtr param0, mojo::Array<mojo::Array<uint8_t> > param1
  ) override;
  void Method8(
      mojo::Array<mojo::Array<mojo::String> > param0
  ) override;
  void Method9(
      mojo::Array<mojo::Array<mojo::ScopedHandle> > param0
  ) override;
  void Method10(
      mojo::Map<mojo::String, uint8_t> param0
  ) override;
  void Method11(
      StructGPtr param0
  ) override;
  void Method12(
      float param0, const Method12Callback& callback
  ) override;
  void Method13(
      mojo::InterfaceHandle<InterfaceA> param0, uint32_t param1, mojo::InterfaceHandle<InterfaceA> param2
  ) override;
  void Method14(
      UnionAPtr param0
  ) override;
  void Method15(
      StructHPtr param0
  ) override;
};


class IntegrationTestInterfaceProxy
    : public IntegrationTestInterface,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit IntegrationTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver);
  void Method0(
      BasicStructPtr param0, const Method0Callback& callback
  ) override;
};


// --- Interface Stubs ---

class InterfaceAStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  InterfaceAStub();
  ~InterfaceAStub() override;
  void set_sink(InterfaceA* sink) { sink_ = sink; }
  InterfaceA* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  InterfaceA* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class BoundsCheckTestInterfaceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  BoundsCheckTestInterfaceStub();
  ~BoundsCheckTestInterfaceStub() override;
  void set_sink(BoundsCheckTestInterface* sink) { sink_ = sink; }
  BoundsCheckTestInterface* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  BoundsCheckTestInterface* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class ConformanceTestInterfaceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  ConformanceTestInterfaceStub();
  ~ConformanceTestInterfaceStub() override;
  void set_sink(ConformanceTestInterface* sink) { sink_ = sink; }
  ConformanceTestInterface* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  ConformanceTestInterface* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class IntegrationTestInterfaceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  IntegrationTestInterfaceStub();
  ~IntegrationTestInterfaceStub() override;
  void set_sink(IntegrationTestInterface* sink) { sink_ = sink; }
  IntegrationTestInterface* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  IntegrationTestInterface* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_H_
