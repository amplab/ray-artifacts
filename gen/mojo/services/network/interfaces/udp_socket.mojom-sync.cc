// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/network/interfaces/udp_socket.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/network/interfaces/udp_socket.mojom-internal.h"
#include "mojo/services/network/interfaces/udp_socket.mojom-common.h"
namespace mojo {

// --- Interface definitions ---
UDPSocket_SynchronousProxy::UDPSocket_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool UDPSocket_SynchronousProxy::AllowAddressReuse(mojo::NetworkErrorPtr* out_result) {
  size_t size = sizeof(internal::UDPSocket_AllowAddressReuse_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::AllowAddressReuse);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::UDPSocket_AllowAddressReuse_Params_Data* out_params =
      internal::UDPSocket_AllowAddressReuse_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::UDPSocket_AllowAddressReuse_ResponseParams_Data*
      response_params = reinterpret_cast<internal::UDPSocket_AllowAddressReuse_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->result.ptr) {
      (*out_result) = mojo::NetworkError::New();
      Deserialize_(response_params->result.ptr, (*out_result).get());
    }
  } while (false);
  return true;
}
bool UDPSocket_SynchronousProxy::Bind(mojo::NetAddressPtr in_addr, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_bound_addr, mojo::InterfaceRequest<UDPSocketReceiver>* out_receiver) {
  size_t size = sizeof(internal::UDPSocket_Bind_Params_Data);
  size += in_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_addr);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::Bind);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::UDPSocket_Bind_Params_Data* out_params =
      internal::UDPSocket_Bind_Params_Data::New(builder.buffer());
  {Serialize_(in_addr.get(),
               builder.buffer(),
               &out_params->addr.ptr);
  }
  if (!out_params->addr.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null addr in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::UDPSocket_Bind_ResponseParams_Data*
      response_params = reinterpret_cast<internal::UDPSocket_Bind_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->result.ptr) {
      (*out_result) = mojo::NetworkError::New();
      Deserialize_(response_params->result.ptr, (*out_result).get());
    }
    if (response_params->bound_addr.ptr) {
      (*out_bound_addr) = mojo::NetAddress::New();
      Deserialize_(response_params->bound_addr.ptr, (*out_bound_addr).get());
    }
    (*out_receiver).Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&response_params->receiver)));
  } while (false);
  return true;
}
bool UDPSocket_SynchronousProxy::Connect(mojo::NetAddressPtr in_remote_addr, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_local_addr, mojo::InterfaceRequest<UDPSocketReceiver>* out_receiver) {
  size_t size = sizeof(internal::UDPSocket_Connect_Params_Data);
  size += in_remote_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_remote_addr);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::Connect);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::UDPSocket_Connect_Params_Data* out_params =
      internal::UDPSocket_Connect_Params_Data::New(builder.buffer());
  {Serialize_(in_remote_addr.get(),
               builder.buffer(),
               &out_params->remote_addr.ptr);
  }
  if (!out_params->remote_addr.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null remote_addr in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::UDPSocket_Connect_ResponseParams_Data*
      response_params = reinterpret_cast<internal::UDPSocket_Connect_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->result.ptr) {
      (*out_result) = mojo::NetworkError::New();
      Deserialize_(response_params->result.ptr, (*out_result).get());
    }
    if (response_params->local_addr.ptr) {
      (*out_local_addr) = mojo::NetAddress::New();
      Deserialize_(response_params->local_addr.ptr, (*out_local_addr).get());
    }
    (*out_receiver).Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&response_params->receiver)));
  } while (false);
  return true;
}
bool UDPSocket_SynchronousProxy::SetSendBufferSize(uint32_t in_size, mojo::NetworkErrorPtr* out_result) {
  size_t size = sizeof(internal::UDPSocket_SetSendBufferSize_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SetSendBufferSize);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::UDPSocket_SetSendBufferSize_Params_Data* out_params =
      internal::UDPSocket_SetSendBufferSize_Params_Data::New(builder.buffer());
  out_params->size = in_size;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::UDPSocket_SetSendBufferSize_ResponseParams_Data*
      response_params = reinterpret_cast<internal::UDPSocket_SetSendBufferSize_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->result.ptr) {
      (*out_result) = mojo::NetworkError::New();
      Deserialize_(response_params->result.ptr, (*out_result).get());
    }
  } while (false);
  return true;
}
bool UDPSocket_SynchronousProxy::SetReceiveBufferSize(uint32_t in_size, mojo::NetworkErrorPtr* out_result) {
  size_t size = sizeof(internal::UDPSocket_SetReceiveBufferSize_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SetReceiveBufferSize);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::UDPSocket_SetReceiveBufferSize_Params_Data* out_params =
      internal::UDPSocket_SetReceiveBufferSize_Params_Data::New(builder.buffer());
  out_params->size = in_size;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data*
      response_params = reinterpret_cast<internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->result.ptr) {
      (*out_result) = mojo::NetworkError::New();
      Deserialize_(response_params->result.ptr, (*out_result).get());
    }
  } while (false);
  return true;
}
bool UDPSocket_SynchronousProxy::NegotiateMaxPendingSendRequests(uint32_t in_requested_size, uint32_t* out_actual_size) {
  size_t size = sizeof(internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::NegotiateMaxPendingSendRequests);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* out_params =
      internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::New(builder.buffer());
  out_params->requested_size = in_requested_size;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data*
      response_params = reinterpret_cast<internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_actual_size) = response_params->actual_size;
  } while (false);
  return true;
}
bool UDPSocket_SynchronousProxy::ReceiveMore(uint32_t in_datagram_number) const  {
  size_t size = sizeof(internal::UDPSocket_ReceiveMore_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::ReceiveMore);
  mojo::MessageBuilder builder(msg_name, size);

  internal::UDPSocket_ReceiveMore_Params_Data* out_params =
      internal::UDPSocket_ReceiveMore_Params_Data::New(builder.buffer());
  out_params->datagram_number = in_datagram_number;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool UDPSocket_SynchronousProxy::SendTo(mojo::NetAddressPtr in_dest_addr, mojo::Array<uint8_t> in_data, mojo::NetworkErrorPtr* out_result) {
  size_t size = sizeof(internal::UDPSocket_SendTo_Params_Data);
  size += in_dest_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_dest_addr);
  size += GetSerializedSize_(in_data);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SendTo);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::UDPSocket_SendTo_Params_Data* out_params =
      internal::UDPSocket_SendTo_Params_Data::New(builder.buffer());
  {Serialize_(in_dest_addr.get(),
               builder.buffer(),
               &out_params->dest_addr.ptr);
  }
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_data, builder.buffer(), &out_params->data.ptr,
                          &data_validate_params);
  }
  if (!out_params->data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null data in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::UDPSocket_SendTo_ResponseParams_Data*
      response_params = reinterpret_cast<internal::UDPSocket_SendTo_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->result.ptr) {
      (*out_result) = mojo::NetworkError::New();
      Deserialize_(response_params->result.ptr, (*out_result).get());
    }
  } while (false);
  return true;
}UDPSocketReceiver_SynchronousProxy::UDPSocketReceiver_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool UDPSocketReceiver_SynchronousProxy::OnReceived(mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_src_addr, mojo::Array<uint8_t> in_data) const  {
  size_t size = sizeof(internal::UDPSocketReceiver_OnReceived_Params_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += in_src_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_src_addr);
  size += GetSerializedSize_(in_data);

  auto msg_name = static_cast<uint32_t>(internal::UDPSocketReceiver_Base::MessageOrdinals::OnReceived);
  mojo::MessageBuilder builder(msg_name, size);

  internal::UDPSocketReceiver_OnReceived_Params_Data* out_params =
      internal::UDPSocketReceiver_OnReceived_Params_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &out_params->result.ptr);
  }
  if (!out_params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in {{interface.name}}::{{method.name}}");
  }
  {Serialize_(in_src_addr.get(),
               builder.buffer(),
               &out_params->src_addr.ptr);
  }
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_data, builder.buffer(), &out_params->data.ptr,
                          &data_validate_params);
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
