// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_MOJOM_H_
#define MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/authentication/interfaces/authentication.mojom-common.h"
namespace authentication {

// --- Interface Forward Declarations ---

using AuthenticationServicePtr = mojo::InterfacePtr<AuthenticationService>;


// --- Interface Proxies ---


class AuthenticationServiceProxy
    : public AuthenticationService,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit AuthenticationServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  void SelectAccount(
      bool return_last_selected, const SelectAccountCallback& callback
  ) override;
  void GetOAuth2Token(
      const mojo::String& username, mojo::Array<mojo::String> scopes, const GetOAuth2TokenCallback& callback
  ) override;
  void ClearOAuth2Token(
      const mojo::String& token
  ) override;
};


// --- Interface Stubs ---

class AuthenticationServiceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  AuthenticationServiceStub();
  ~AuthenticationServiceStub() override;
  void set_sink(AuthenticationService* sink) { sink_ = sink; }
  AuthenticationService* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  AuthenticationService* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace authentication

#endif  // MOJO_SERVICES_AUTHENTICATION_INTERFACES_AUTHENTICATION_MOJOM_H_
