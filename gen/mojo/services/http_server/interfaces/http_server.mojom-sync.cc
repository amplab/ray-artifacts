// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/http_server/interfaces/http_server.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/http_server/interfaces/http_server.mojom-internal.h"
#include "mojo/services/http_server/interfaces/http_server.mojom-common.h"
namespace http_server {

// --- Interface definitions ---
HttpServer_SynchronousProxy::HttpServer_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool HttpServer_SynchronousProxy::SetHandler(const mojo::String& in_pattern, mojo::InterfaceHandle<HttpHandler> in_handler, bool* out_success) {
  size_t size = sizeof(internal::HttpServer_SetHandler_Params_Data);
  size += GetSerializedSize_(in_pattern);

  auto msg_name = static_cast<uint32_t>(internal::HttpServer_Base::MessageOrdinals::SetHandler);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::HttpServer_SetHandler_Params_Data* out_params =
      internal::HttpServer_SetHandler_Params_Data::New(builder.buffer());
  SerializeString_(in_pattern, builder.buffer(), &out_params->pattern.ptr);
  if (!out_params->pattern.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null pattern in {{interface.name}}::{{method.name}}");
  }
  mojo::internal::InterfaceHandleToData(in_handler.Pass(),
                                        &out_params->handler);
  if (!out_params->handler.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid handler in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::HttpServer_SetHandler_ResponseParams_Data*
      response_params = reinterpret_cast<internal::HttpServer_SetHandler_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_success) = response_params->success;
  } while (false);
  return true;
}
bool HttpServer_SynchronousProxy::GetPort(uint16_t* out_port) {
  size_t size = sizeof(internal::HttpServer_GetPort_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::HttpServer_Base::MessageOrdinals::GetPort);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::HttpServer_GetPort_Params_Data* out_params =
      internal::HttpServer_GetPort_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::HttpServer_GetPort_ResponseParams_Data*
      response_params = reinterpret_cast<internal::HttpServer_GetPort_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_port) = response_params->port;
  } while (false);
  return true;
}HttpHandler_SynchronousProxy::HttpHandler_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool HttpHandler_SynchronousProxy::HandleRequest(http_server::HttpRequestPtr in_request, http_server::HttpResponsePtr* out_response) {
  size_t size = sizeof(internal::HttpHandler_HandleRequest_Params_Data);
  size += in_request.is_null()
              ? 0
              : GetSerializedSize_(*in_request);

  auto msg_name = static_cast<uint32_t>(internal::HttpHandler_Base::MessageOrdinals::HandleRequest);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::HttpHandler_HandleRequest_Params_Data* out_params =
      internal::HttpHandler_HandleRequest_Params_Data::New(builder.buffer());
  {Serialize_(in_request.get(),
               builder.buffer(),
               &out_params->request.ptr);
  }
  if (!out_params->request.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null request in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::HttpHandler_HandleRequest_ResponseParams_Data*
      response_params = reinterpret_cast<internal::HttpHandler_HandleRequest_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->response.ptr) {
      (*out_response) = http_server::HttpResponse::New();
      Deserialize_(response_params->response.ptr, (*out_response).get());
    }
  } while (false);
  return true;
}
}  // namespace http_server

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
