// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_INTERNAL_H_
#define SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace js_to_cpp {

class EchoArgs;
class EchoArgsList;


namespace internal {

class EchoArgs_Data;
class EchoArgsList_Data;



#pragma pack(push, 1)


class EchoArgs_Data {
 public:
  static EchoArgs_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t si64;
  int32_t si32;
  int16_t si16;
  int8_t si8;
  uint8_t ui8;
  uint64_t ui64;
  uint32_t ui32;
  uint16_t ui16;
  uint8_t pad7_[2];
  float float_val;
  float float_inf;
  float float_nan;
  mojo::MessagePipeHandle message_handle;
  double double_val;
  double double_inf;
  double double_nan;
  mojo::internal::StringPointer name;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> string_array;
  mojo::DataPipeConsumerHandle data_handle;
  uint8_t padfinal_[4];

 private:
  EchoArgs_Data();
  ~EchoArgs_Data() = delete;
};
static_assert(sizeof(EchoArgs_Data) == 104,
              "Bad sizeof(EchoArgs_Data)");

class EchoArgsList_Data {
 public:
  static EchoArgsList_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::EchoArgsList_Data> next;
  mojo::internal::StructPointer<internal::EchoArgs_Data> item;

 private:
  EchoArgsList_Data();
  ~EchoArgsList_Data() = delete;
};
static_assert(sizeof(EchoArgsList_Data) == 24,
              "Bad sizeof(EchoArgsList_Data)");


class CppSide_StartTest_Params_Data {
 public:
  static CppSide_StartTest_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CppSide_StartTest_Params_Data();
  ~CppSide_StartTest_Params_Data() = delete;
};
static_assert(sizeof(CppSide_StartTest_Params_Data) == 8,
              "Bad sizeof(CppSide_StartTest_Params_Data)");


class CppSide_TestFinished_Params_Data {
 public:
  static CppSide_TestFinished_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CppSide_TestFinished_Params_Data();
  ~CppSide_TestFinished_Params_Data() = delete;
};
static_assert(sizeof(CppSide_TestFinished_Params_Data) == 8,
              "Bad sizeof(CppSide_TestFinished_Params_Data)");


class CppSide_PingResponse_Params_Data {
 public:
  static CppSide_PingResponse_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  CppSide_PingResponse_Params_Data();
  ~CppSide_PingResponse_Params_Data() = delete;
};
static_assert(sizeof(CppSide_PingResponse_Params_Data) == 8,
              "Bad sizeof(CppSide_PingResponse_Params_Data)");


class CppSide_EchoResponse_Params_Data {
 public:
  static CppSide_EchoResponse_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::EchoArgsList_Data> list;

 private:
  CppSide_EchoResponse_Params_Data();
  ~CppSide_EchoResponse_Params_Data() = delete;
};
static_assert(sizeof(CppSide_EchoResponse_Params_Data) == 16,
              "Bad sizeof(CppSide_EchoResponse_Params_Data)");


class CppSide_BitFlipResponse_Params_Data {
 public:
  static CppSide_BitFlipResponse_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::EchoArgsList_Data> arg;

 private:
  CppSide_BitFlipResponse_Params_Data();
  ~CppSide_BitFlipResponse_Params_Data() = delete;
};
static_assert(sizeof(CppSide_BitFlipResponse_Params_Data) == 16,
              "Bad sizeof(CppSide_BitFlipResponse_Params_Data)");


class CppSide_BackPointerResponse_Params_Data {
 public:
  static CppSide_BackPointerResponse_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::EchoArgsList_Data> arg;

 private:
  CppSide_BackPointerResponse_Params_Data();
  ~CppSide_BackPointerResponse_Params_Data() = delete;
};
static_assert(sizeof(CppSide_BackPointerResponse_Params_Data) == 16,
              "Bad sizeof(CppSide_BackPointerResponse_Params_Data)");


class JsSide_SetCppSide_Params_Data {
 public:
  static JsSide_SetCppSide_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data cpp;

 private:
  JsSide_SetCppSide_Params_Data();
  ~JsSide_SetCppSide_Params_Data() = delete;
};
static_assert(sizeof(JsSide_SetCppSide_Params_Data) == 16,
              "Bad sizeof(JsSide_SetCppSide_Params_Data)");


class JsSide_Ping_Params_Data {
 public:
  static JsSide_Ping_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  JsSide_Ping_Params_Data();
  ~JsSide_Ping_Params_Data() = delete;
};
static_assert(sizeof(JsSide_Ping_Params_Data) == 8,
              "Bad sizeof(JsSide_Ping_Params_Data)");


class JsSide_Echo_Params_Data {
 public:
  static JsSide_Echo_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t numIterations;
  uint8_t pad0_[4];
  mojo::internal::StructPointer<internal::EchoArgs_Data> arg;

 private:
  JsSide_Echo_Params_Data();
  ~JsSide_Echo_Params_Data() = delete;
};
static_assert(sizeof(JsSide_Echo_Params_Data) == 24,
              "Bad sizeof(JsSide_Echo_Params_Data)");


class JsSide_BitFlip_Params_Data {
 public:
  static JsSide_BitFlip_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::EchoArgs_Data> arg;

 private:
  JsSide_BitFlip_Params_Data();
  ~JsSide_BitFlip_Params_Data() = delete;
};
static_assert(sizeof(JsSide_BitFlip_Params_Data) == 16,
              "Bad sizeof(JsSide_BitFlip_Params_Data)");


class JsSide_BackPointer_Params_Data {
 public:
  static JsSide_BackPointer_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::EchoArgs_Data> arg;

 private:
  JsSide_BackPointer_Params_Data();
  ~JsSide_BackPointer_Params_Data() = delete;
};
static_assert(sizeof(JsSide_BackPointer_Params_Data) == 16,
              "Bad sizeof(JsSide_BackPointer_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace js_to_cpp

#endif  // SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_INTERNAL_H_
