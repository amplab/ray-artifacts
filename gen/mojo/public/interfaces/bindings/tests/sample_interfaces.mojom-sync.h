// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_INTERFACES_MOJOM_SYNC_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_INTERFACES_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/interfaces/bindings/tests/sample_interfaces.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/sample_interfaces.mojom-common.h"


namespace sample {

// --- Synchronous interface declaration ---

class Provider_SynchronousProxy;
class Provider_Synchronous
  : public internal::Provider_Base {
 public:
  virtual ~Provider_Synchronous() override {}
  
  using Proxy_ = Provider_SynchronousProxy;
  virtual bool EchoString(
      const mojo::String& in_a, mojo::String* out_a)= 0;
  virtual bool EchoStrings(
      const mojo::String& in_a, const mojo::String& in_b, mojo::String* out_a, mojo::String* out_b)= 0;
  virtual bool EchoMessagePipeHandle(
      mojo::ScopedMessagePipeHandle in_a, mojo::ScopedMessagePipeHandle* out_a)= 0;
  virtual bool EchoEnum(
      Enum in_a, Enum* out_a)= 0;
  virtual bool EchoInt(
      int32_t in_a, int32_t* out_a)= 0;
};

class Provider_SynchronousProxy
    : public Provider_Synchronous {
 public:
  explicit Provider_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool EchoString(const mojo::String& in_a, mojo::String* out_a) override;
  bool EchoStrings(const mojo::String& in_a, const mojo::String& in_b, mojo::String* out_a, mojo::String* out_b) override;
  bool EchoMessagePipeHandle(mojo::ScopedMessagePipeHandle in_a, mojo::ScopedMessagePipeHandle* out_a) override;
  bool EchoEnum(Enum in_a, Enum* out_a) override;
  bool EchoInt(int32_t in_a, int32_t* out_a) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class IntegerAccessor_SynchronousProxy;
class IntegerAccessor_Synchronous
  : public internal::IntegerAccessor_Base {
 public:
  virtual ~IntegerAccessor_Synchronous() override {}
  
  using Proxy_ = IntegerAccessor_SynchronousProxy;
  virtual bool GetInteger(
      int64_t* out_data, Enum* out_type)= 0;
  virtual bool SetInteger(
      int64_t in_data, Enum in_type)const= 0;
};

class IntegerAccessor_SynchronousProxy
    : public IntegerAccessor_Synchronous {
 public:
  explicit IntegerAccessor_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool GetInteger(int64_t* out_data, Enum* out_type) override;
  bool SetInteger(int64_t in_data, Enum in_type) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class SampleInterface_SynchronousProxy;
class SampleInterface_Synchronous
  : public internal::SampleInterface_Base {
 public:
  virtual ~SampleInterface_Synchronous() override {}
  
  using Proxy_ = SampleInterface_SynchronousProxy;
  virtual bool SampleMethod1(
      int32_t in_in1, const mojo::String& in_in2, mojo::String* out_out1, Enum* out_out2)= 0;
  virtual bool SampleMethod0(
      )const= 0;
  virtual bool SampleMethod2(
      )const= 0;
};

class SampleInterface_SynchronousProxy
    : public SampleInterface_Synchronous {
 public:
  explicit SampleInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool SampleMethod1(int32_t in_in1, const mojo::String& in_in2, mojo::String* out_out1, Enum* out_out2) override;
  bool SampleMethod0() const  override;
  bool SampleMethod2() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace sample

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_INTERFACES_MOJOM_SYNC_H_
