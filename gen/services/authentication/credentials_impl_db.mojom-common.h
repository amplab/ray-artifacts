// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_AUTHENTICATION_CREDENTIALS_IMPL_DB_MOJOM_COMMON_H_
#define SERVICES_AUTHENTICATION_CREDENTIALS_IMPL_DB_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "services/authentication/credentials_impl_db.mojom-internal.h"
namespace authentication {

// --- Interface Forward Declarations ---

// --- Struct Forward Declarations ---
class Credentials;

using CredentialsPtr = mojo::InlinedStructPtr<Credentials>;


class CredentialStore;

using CredentialStorePtr = mojo::StructPtr<CredentialStore>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---
  
enum class CredentialType : int32_t {
  DOWNSCOPED_OAUTH_REFRESH_TOKEN = 1,
};

bool CredentialType_IsValidValue(CredentialType value);
  
std::ostream& operator<<(std::ostream& stream, const CredentialType& val);
  
enum class AuthProvider : int32_t {
  GOOGLE = 1,
};

bool AuthProvider_IsValidValue(AuthProvider value);
  
std::ostream& operator<<(std::ostream& stream, const AuthProvider& val);

// --- Constants ---

// --- Interface declarations ---
}  // namespace authentication

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<authentication::CredentialsPtr, true, false> {
  using DataType = authentication::internal::Credentials_Data*;
};
template <>
struct WrapperTraits<authentication::CredentialStorePtr, true, false> {
  using DataType = authentication::internal::CredentialStore_Data*;
};

}  // internal
}  // mojo
namespace authentication {

// --- Interface Request Validators ---

// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class Credentials {
 public:
  using Data_ = internal::Credentials_Data;

  static CredentialsPtr New();

  template <typename U>
  static CredentialsPtr From(const U& u) {
    return mojo::TypeConverter<CredentialsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Credentials>::Convert(*this);
  }

  Credentials();
  ~Credentials();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  CredentialsPtr Clone() const;
  bool Equals(const Credentials& other) const;

  AuthProvider auth_provider;
  mojo::String token;
  CredentialType credential_type;
  mojo::String scopes;
};



// --- Non-inlined structs ---
class CredentialStore {
 public:
  using Data_ = internal::CredentialStore_Data;

  static CredentialStorePtr New();

  template <typename U>
  static CredentialStorePtr From(const U& u) {
    return mojo::TypeConverter<CredentialStorePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CredentialStore>::Convert(*this);
  }

  CredentialStore();
  ~CredentialStore();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  CredentialStorePtr Clone() const;
  bool Equals(const CredentialStore& other) const;

  uint32_t version;
  mojo::Map<mojo::String, CredentialsPtr> credentials;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const Credentials& input);
mojo::internal::ValidationError Serialize_(
    Credentials* input,
    mojo::internal::Buffer* buffer,
    internal::Credentials_Data** output);
void Deserialize_(internal::Credentials_Data* input,
                  Credentials* output);

size_t GetSerializedSize_(const CredentialStore& input);
mojo::internal::ValidationError Serialize_(
    CredentialStore* input,
    mojo::internal::Buffer* buffer,
    internal::CredentialStore_Data** output);
void Deserialize_(internal::CredentialStore_Data* input,
                  CredentialStore* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
}  // namespace authentication

#endif  // SERVICES_AUTHENTICATION_CREDENTIALS_IMPL_DB_MOJOM_COMMON_H_
