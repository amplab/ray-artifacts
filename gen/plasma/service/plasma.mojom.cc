// NOTE: This file was generated by the Mojo bindings generator.
#include "plasma/service/plasma.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace plasma {
namespace service {

// --- Interface definitions ---
class Plasma_CreateObject_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Plasma_CreateObject_ForwardToCallback(
      const Plasma::CreateObjectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Plasma::CreateObjectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_CreateObject_ForwardToCallback);
};
bool Plasma_CreateObject_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Plasma_CreateObject_ResponseParams_Data* params =
      reinterpret_cast<internal::Plasma_CreateObject_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::ScopedSharedBufferHandle p_buffer {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_buffer.reset(mojo::internal::FetchAndReset(&params->buffer));
  } while (false);
  callback_.Run(p_buffer.Pass());
  return true;
}
class Plasma_ResizeObject_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Plasma_ResizeObject_ForwardToCallback(
      const Plasma::ResizeObjectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Plasma::ResizeObjectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_ResizeObject_ForwardToCallback);
};
bool Plasma_ResizeObject_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Plasma_ResizeObject_ResponseParams_Data* params =
      reinterpret_cast<internal::Plasma_ResizeObject_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::ScopedSharedBufferHandle p_buffer {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_buffer.reset(mojo::internal::FetchAndReset(&params->buffer));
  } while (false);
  callback_.Run(p_buffer.Pass());
  return true;
}
class Plasma_GetObject_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Plasma_GetObject_ForwardToCallback(
      const Plasma::GetObjectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Plasma::GetObjectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_GetObject_ForwardToCallback);
};
bool Plasma_GetObject_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Plasma_GetObject_ResponseParams_Data* params =
      reinterpret_cast<internal::Plasma_GetObject_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::ScopedSharedBufferHandle p_buffer {};
  uint64_t p_size {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_buffer.reset(mojo::internal::FetchAndReset(&params->buffer));
    p_size = params->size;
  } while (false);
  callback_.Run(p_buffer.Pass(), p_size);
  return true;
}
class Plasma_ListObjects_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Plasma_ListObjects_ForwardToCallback(
      const Plasma::ListObjectsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Plasma::ListObjectsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_ListObjects_ForwardToCallback);
};
bool Plasma_ListObjects_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Plasma_ListObjects_ResponseParams_Data* params =
      reinterpret_cast<internal::Plasma_ListObjects_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<ObjectInfoPtr> p_info {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->info.ptr, &p_info);
  } while (false);
  callback_.Run(p_info.Pass());
  return true;
}

PlasmaProxy::PlasmaProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void PlasmaProxy::CreateObject(
    const mojo::String& in_object_id, uint64_t in_size, const mojo::String& in_name, int64_t in_creator_id, const CreateObjectCallback& callback) {
  size_t size = sizeof(internal::Plasma_CreateObject_Params_Data);
  size += GetSerializedSize_(in_object_id);
  size += GetSerializedSize_(in_name);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::CreateObject), size);

  internal::Plasma_CreateObject_Params_Data* params =
      internal::Plasma_CreateObject_Params_Data::New(builder.buffer());
  SerializeString_(in_object_id, builder.buffer(), &params->object_id.ptr);
  if (!params->object_id.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null object_id in Plasma.CreateObject request");
  }
  params->size = in_size;
  SerializeString_(in_name, builder.buffer(), &params->name.ptr);
  if (!params->name.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null name in Plasma.CreateObject request");
  }
  params->creator_id = in_creator_id;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Plasma_CreateObject_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PlasmaProxy::ResizeObject(
    const mojo::String& in_object_id, uint64_t in_new_size, const ResizeObjectCallback& callback) {
  size_t size = sizeof(internal::Plasma_ResizeObject_Params_Data);
  size += GetSerializedSize_(in_object_id);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::ResizeObject), size);

  internal::Plasma_ResizeObject_Params_Data* params =
      internal::Plasma_ResizeObject_Params_Data::New(builder.buffer());
  SerializeString_(in_object_id, builder.buffer(), &params->object_id.ptr);
  if (!params->object_id.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null object_id in Plasma.ResizeObject request");
  }
  params->new_size = in_new_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Plasma_ResizeObject_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PlasmaProxy::SealObject(
    const mojo::String& in_object_id) {
  size_t size = sizeof(internal::Plasma_SealObject_Params_Data);
  size += GetSerializedSize_(in_object_id);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::SealObject), size);

  internal::Plasma_SealObject_Params_Data* params =
      internal::Plasma_SealObject_Params_Data::New(builder.buffer());
  SerializeString_(in_object_id, builder.buffer(), &params->object_id.ptr);
  if (!params->object_id.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null object_id in Plasma.SealObject request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void PlasmaProxy::GetObject(
    const mojo::String& in_object_id, bool in_block, const GetObjectCallback& callback) {
  size_t size = sizeof(internal::Plasma_GetObject_Params_Data);
  size += GetSerializedSize_(in_object_id);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::GetObject), size);

  internal::Plasma_GetObject_Params_Data* params =
      internal::Plasma_GetObject_Params_Data::New(builder.buffer());
  SerializeString_(in_object_id, builder.buffer(), &params->object_id.ptr);
  if (!params->object_id.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null object_id in Plasma.GetObject request");
  }
  params->block = in_block;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Plasma_GetObject_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PlasmaProxy::ListObjects(
    const ListObjectsCallback& callback) {
  size_t size = sizeof(internal::Plasma_ListObjects_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::ListObjects), size);

  internal::Plasma_ListObjects_Params_Data* params =
      internal::Plasma_ListObjects_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Plasma_ListObjects_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Plasma_CreateObject_ProxyToResponder
    : public Plasma::CreateObjectCallback::Runnable {
 public:
  ~Plasma_CreateObject_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Plasma::CreateObject(p_object_id, p_size, p_name, p_creator_id, callback) "
        "was never run.";
  }

  Plasma_CreateObject_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::ScopedSharedBufferHandle in_buffer) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_CreateObject_ProxyToResponder);
};

void Plasma_CreateObject_ProxyToResponder::Run(
    mojo::ScopedSharedBufferHandle in_buffer) const {
  size_t size = sizeof(internal::Plasma_CreateObject_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::CreateObject), size, request_id_);
  internal::Plasma_CreateObject_ResponseParams_Data* params =
      internal::Plasma_CreateObject_ResponseParams_Data::New(builder.buffer());
  params->buffer = in_buffer.release();
  if (!params->buffer.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid buffer in Plasma.CreateObject response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Plasma_ResizeObject_ProxyToResponder
    : public Plasma::ResizeObjectCallback::Runnable {
 public:
  ~Plasma_ResizeObject_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Plasma::ResizeObject(p_object_id, p_new_size, callback) "
        "was never run.";
  }

  Plasma_ResizeObject_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::ScopedSharedBufferHandle in_buffer) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_ResizeObject_ProxyToResponder);
};

void Plasma_ResizeObject_ProxyToResponder::Run(
    mojo::ScopedSharedBufferHandle in_buffer) const {
  size_t size = sizeof(internal::Plasma_ResizeObject_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::ResizeObject), size, request_id_);
  internal::Plasma_ResizeObject_ResponseParams_Data* params =
      internal::Plasma_ResizeObject_ResponseParams_Data::New(builder.buffer());
  params->buffer = in_buffer.release();
  if (!params->buffer.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid buffer in Plasma.ResizeObject response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Plasma_GetObject_ProxyToResponder
    : public Plasma::GetObjectCallback::Runnable {
 public:
  ~Plasma_GetObject_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Plasma::GetObject(p_object_id, p_block, callback) "
        "was never run.";
  }

  Plasma_GetObject_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::ScopedSharedBufferHandle in_buffer, uint64_t in_size) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_GetObject_ProxyToResponder);
};

void Plasma_GetObject_ProxyToResponder::Run(
    mojo::ScopedSharedBufferHandle in_buffer, uint64_t in_size) const {
  size_t size = sizeof(internal::Plasma_GetObject_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::GetObject), size, request_id_);
  internal::Plasma_GetObject_ResponseParams_Data* params =
      internal::Plasma_GetObject_ResponseParams_Data::New(builder.buffer());
  params->buffer = in_buffer.release();
  if (!params->buffer.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid buffer in Plasma.GetObject response");
  }
  params->size = in_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Plasma_ListObjects_ProxyToResponder
    : public Plasma::ListObjectsCallback::Runnable {
 public:
  ~Plasma_ListObjects_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Plasma::ListObjects(callback) "
        "was never run.";
  }

  Plasma_ListObjects_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<ObjectInfoPtr> in_info) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Plasma_ListObjects_ProxyToResponder);
};

void Plasma_ListObjects_ProxyToResponder::Run(
    mojo::Array<ObjectInfoPtr> in_info) const {
  size_t size = sizeof(internal::Plasma_ListObjects_ResponseParams_Data);
  size += GetSerializedSize_(in_info);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Plasma_Base::MessageOrdinals::ListObjects), size, request_id_);
  internal::Plasma_ListObjects_ResponseParams_Data* params =
      internal::Plasma_ListObjects_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams info_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_info, builder.buffer(), &params->info.ptr,
                          &info_validate_params);
  }
  if (!params->info.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null info in Plasma.ListObjects response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

PlasmaStub::PlasmaStub()
    : sink_(nullptr),
      control_message_handler_(Plasma::Version_) {
}

PlasmaStub::~PlasmaStub() {}

bool PlasmaStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Plasma_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Plasma_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Plasma_Base::MessageOrdinals::CreateObject: {
      break;
    }
    case internal::Plasma_Base::MessageOrdinals::ResizeObject: {
      break;
    }
    case internal::Plasma_Base::MessageOrdinals::SealObject: {
      internal::Plasma_SealObject_Params_Data* params =
          reinterpret_cast<internal::Plasma_SealObject_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_object_id {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->object_id.ptr, &p_object_id);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SealObject(p_object_id);
      return true;
    }
    case internal::Plasma_Base::MessageOrdinals::GetObject: {
      break;
    }
    case internal::Plasma_Base::MessageOrdinals::ListObjects: {
      break;
    }
  }
  return false;
}

bool PlasmaStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Plasma_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Plasma_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Plasma_Base::MessageOrdinals::CreateObject: {
      internal::Plasma_CreateObject_Params_Data* params =
          reinterpret_cast<internal::Plasma_CreateObject_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Plasma::CreateObjectCallback::Runnable* runnable =
          new Plasma_CreateObject_ProxyToResponder(
              message->request_id(), responder);
      Plasma::CreateObjectCallback callback(runnable);
      
      mojo::String p_object_id {};
      uint64_t p_size {};
      mojo::String p_name {};
      int64_t p_creator_id {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->object_id.ptr, &p_object_id);
        p_size = params->size;
        Deserialize_(params->name.ptr, &p_name);
        p_creator_id = params->creator_id;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateObject(p_object_id, p_size, p_name, p_creator_id, callback);
      return true;
    }
    case internal::Plasma_Base::MessageOrdinals::ResizeObject: {
      internal::Plasma_ResizeObject_Params_Data* params =
          reinterpret_cast<internal::Plasma_ResizeObject_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Plasma::ResizeObjectCallback::Runnable* runnable =
          new Plasma_ResizeObject_ProxyToResponder(
              message->request_id(), responder);
      Plasma::ResizeObjectCallback callback(runnable);
      
      mojo::String p_object_id {};
      uint64_t p_new_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->object_id.ptr, &p_object_id);
        p_new_size = params->new_size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ResizeObject(p_object_id, p_new_size, callback);
      return true;
    }
    case internal::Plasma_Base::MessageOrdinals::SealObject: {
      break;
    }
    case internal::Plasma_Base::MessageOrdinals::GetObject: {
      internal::Plasma_GetObject_Params_Data* params =
          reinterpret_cast<internal::Plasma_GetObject_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Plasma::GetObjectCallback::Runnable* runnable =
          new Plasma_GetObject_ProxyToResponder(
              message->request_id(), responder);
      Plasma::GetObjectCallback callback(runnable);
      
      mojo::String p_object_id {};
      bool p_block {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->object_id.ptr, &p_object_id);
        p_block = params->block;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetObject(p_object_id, p_block, callback);
      return true;
    }
    case internal::Plasma_Base::MessageOrdinals::ListObjects: {
      internal::Plasma_ListObjects_Params_Data* params =
          reinterpret_cast<internal::Plasma_ListObjects_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Plasma::ListObjectsCallback::Runnable* runnable =
          new Plasma_ListObjects_ProxyToResponder(
              message->request_id(), responder);
      Plasma::ListObjectsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ListObjects(callback);
      return true;
    }
  }
  return false;
}

}  // namespace service
}  // namespace plasma
