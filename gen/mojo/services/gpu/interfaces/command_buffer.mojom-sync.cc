// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/gpu/interfaces/command_buffer.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/gpu/interfaces/command_buffer.mojom-internal.h"
#include "mojo/services/gpu/interfaces/command_buffer.mojom-common.h"
namespace mojo {

// --- Interface definitions ---
CommandBufferSyncClient_SynchronousProxy::CommandBufferSyncClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CommandBufferSyncClient_SynchronousProxy::DidInitialize(bool in_success, mojo::GpuCapabilitiesPtr in_capabilities) const  {
  size_t size = sizeof(internal::CommandBufferSyncClient_DidInitialize_Params_Data);
  size += in_capabilities.is_null()
              ? 0
              : GetSerializedSize_(*in_capabilities);

  auto msg_name = static_cast<uint32_t>(internal::CommandBufferSyncClient_Base::MessageOrdinals::DidInitialize);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBufferSyncClient_DidInitialize_Params_Data* out_params =
      internal::CommandBufferSyncClient_DidInitialize_Params_Data::New(builder.buffer());
  out_params->success = in_success;
  {Serialize_(in_capabilities.get(),
               builder.buffer(),
               &out_params->capabilities.ptr);
  }
  if (!out_params->capabilities.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null capabilities in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBufferSyncClient_SynchronousProxy::DidMakeProgress(CommandBufferStatePtr in_state) const  {
  size_t size = sizeof(internal::CommandBufferSyncClient_DidMakeProgress_Params_Data);
  size += in_state.is_null()
              ? 0
              : GetSerializedSize_(*in_state);

  auto msg_name = static_cast<uint32_t>(internal::CommandBufferSyncClient_Base::MessageOrdinals::DidMakeProgress);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBufferSyncClient_DidMakeProgress_Params_Data* out_params =
      internal::CommandBufferSyncClient_DidMakeProgress_Params_Data::New(builder.buffer());
  {Serialize_(in_state.get(),
               builder.buffer(),
               &out_params->state.ptr);
  }
  if (!out_params->state.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null state in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}CommandBufferSyncPointClient_SynchronousProxy::CommandBufferSyncPointClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CommandBufferSyncPointClient_SynchronousProxy::DidInsertSyncPoint(uint32_t in_sync_point) const  {
  size_t size = sizeof(internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBufferSyncPointClient_Base::MessageOrdinals::DidInsertSyncPoint);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data* out_params =
      internal::CommandBufferSyncPointClient_DidInsertSyncPoint_Params_Data::New(builder.buffer());
  out_params->sync_point = in_sync_point;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}CommandBufferLostContextObserver_SynchronousProxy::CommandBufferLostContextObserver_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CommandBufferLostContextObserver_SynchronousProxy::DidLoseContext(int32_t in_context_lost_reason) const  {
  size_t size = sizeof(internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBufferLostContextObserver_Base::MessageOrdinals::DidLoseContext);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data* out_params =
      internal::CommandBufferLostContextObserver_DidLoseContext_Params_Data::New(builder.buffer());
  out_params->context_lost_reason = in_context_lost_reason;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}CommandBuffer_SynchronousProxy::CommandBuffer_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CommandBuffer_SynchronousProxy::Initialize(mojo::InterfaceHandle<CommandBufferSyncClient> in_sync_client, mojo::InterfaceHandle<CommandBufferSyncPointClient> in_sync_point_client, mojo::InterfaceHandle<CommandBufferLostContextObserver> in_lost_observer, mojo::ScopedSharedBufferHandle in_shared_state) const  {
  size_t size = sizeof(internal::CommandBuffer_Initialize_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::Initialize);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_Initialize_Params_Data* out_params =
      internal::CommandBuffer_Initialize_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_sync_client.Pass(),
                                        &out_params->sync_client);
  if (!out_params->sync_client.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid sync_client in {{interface.name}}::{{method.name}}");
  }
  mojo::internal::InterfaceHandleToData(in_sync_point_client.Pass(),
                                        &out_params->sync_point_client);
  if (!out_params->sync_point_client.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid sync_point_client in {{interface.name}}::{{method.name}}");
  }
  mojo::internal::InterfaceHandleToData(in_lost_observer.Pass(),
                                        &out_params->lost_observer);
  if (!out_params->lost_observer.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid lost_observer in {{interface.name}}::{{method.name}}");
  }
  out_params->shared_state = in_shared_state.release();
  if (!out_params->shared_state.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid shared_state in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::SetGetBuffer(int32_t in_buffer) const  {
  size_t size = sizeof(internal::CommandBuffer_SetGetBuffer_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::SetGetBuffer);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_SetGetBuffer_Params_Data* out_params =
      internal::CommandBuffer_SetGetBuffer_Params_Data::New(builder.buffer());
  out_params->buffer = in_buffer;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::Flush(int32_t in_put_offset) const  {
  size_t size = sizeof(internal::CommandBuffer_Flush_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::Flush);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_Flush_Params_Data* out_params =
      internal::CommandBuffer_Flush_Params_Data::New(builder.buffer());
  out_params->put_offset = in_put_offset;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::MakeProgress(int32_t in_last_get_offset) const  {
  size_t size = sizeof(internal::CommandBuffer_MakeProgress_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::MakeProgress);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_MakeProgress_Params_Data* out_params =
      internal::CommandBuffer_MakeProgress_Params_Data::New(builder.buffer());
  out_params->last_get_offset = in_last_get_offset;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::RegisterTransferBuffer(int32_t in_id, mojo::ScopedSharedBufferHandle in_transfer_buffer, uint32_t in_size) const  {
  size_t size = sizeof(internal::CommandBuffer_RegisterTransferBuffer_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::RegisterTransferBuffer);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_RegisterTransferBuffer_Params_Data* out_params =
      internal::CommandBuffer_RegisterTransferBuffer_Params_Data::New(builder.buffer());
  out_params->id = in_id;
  out_params->transfer_buffer = in_transfer_buffer.release();
  if (!out_params->transfer_buffer.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid transfer_buffer in {{interface.name}}::{{method.name}}");
  }
  out_params->size = in_size;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::DestroyTransferBuffer(int32_t in_id) const  {
  size_t size = sizeof(internal::CommandBuffer_DestroyTransferBuffer_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::DestroyTransferBuffer);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_DestroyTransferBuffer_Params_Data* out_params =
      internal::CommandBuffer_DestroyTransferBuffer_Params_Data::New(builder.buffer());
  out_params->id = in_id;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::InsertSyncPoint(bool in_retire) const  {
  size_t size = sizeof(internal::CommandBuffer_InsertSyncPoint_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::InsertSyncPoint);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_InsertSyncPoint_Params_Data* out_params =
      internal::CommandBuffer_InsertSyncPoint_Params_Data::New(builder.buffer());
  out_params->retire = in_retire;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::RetireSyncPoint(uint32_t in_sync_point) const  {
  size_t size = sizeof(internal::CommandBuffer_RetireSyncPoint_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::RetireSyncPoint);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CommandBuffer_RetireSyncPoint_Params_Data* out_params =
      internal::CommandBuffer_RetireSyncPoint_Params_Data::New(builder.buffer());
  out_params->sync_point = in_sync_point;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CommandBuffer_SynchronousProxy::Echo() {
  size_t size = sizeof(internal::CommandBuffer_Echo_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CommandBuffer_Base::MessageOrdinals::Echo);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::CommandBuffer_Echo_Params_Data* out_params =
      internal::CommandBuffer_Echo_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::CommandBuffer_Echo_ResponseParams_Data*
      response_params = reinterpret_cast<internal::CommandBuffer_Echo_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
  } while (false);
  return true;
}
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
