// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_CLIPBOARD_INTERFACES_CLIPBOARD_MOJOM_COMMON_H_
#define MOJO_SERVICES_CLIPBOARD_INTERFACES_CLIPBOARD_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/clipboard/interfaces/clipboard.mojom-internal.h"
namespace mojo {

// --- Interface Forward Declarations ---
class Clipboard;
class ClipboardRequestValidator;
class ClipboardResponseValidator;
class Clipboard_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Clipboard_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ClipboardRequestValidator;
  using ResponseValidator_ = ClipboardResponseValidator;
  using Synchronous_ = Clipboard_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetSequenceNumber = 0,
    GetAvailableMimeTypes = 1,
    ReadMimeType = 2,
    WriteClipboardData = 3,
  };

  
  enum class Type : int32_t {
    COPY_PASTE = 0,
    SELECTION = 1,
    DRAG = 2,
  };
  
  static bool Type_IsValidValue(Type value);
  static const char* MIME_TYPE_TEXT;
  static const char* MIME_TYPE_HTML;
  static const char* MIME_TYPE_URL;

  virtual ~Clipboard_Base() {}
};

}  // namespace internal

// Async interface declaration

class ClipboardProxy;
class ClipboardStub;
class Clipboard_Synchronous;

class ClipboardRequestValidator;
class ClipboardResponseValidator;

class Clipboard : public internal::Clipboard_Base {
 public:
  virtual ~Clipboard() override {}

  using Proxy_ = ClipboardProxy;
  using Stub_ = ClipboardStub;
  using GetSequenceNumberCallback = mojo::Callback<void(uint64_t)>;
  virtual void GetSequenceNumber(Clipboard::Type clipboard_type, const GetSequenceNumberCallback& callback) = 0;
  using GetAvailableMimeTypesCallback = mojo::Callback<void(mojo::Array<mojo::String>)>;
  virtual void GetAvailableMimeTypes(Clipboard::Type clipboard_types, const GetAvailableMimeTypesCallback& callback) = 0;
  using ReadMimeTypeCallback = mojo::Callback<void(mojo::Array<uint8_t>)>;
  virtual void ReadMimeType(Clipboard::Type clipboard_type, const mojo::String& mime_type, const ReadMimeTypeCallback& callback) = 0;
  virtual void WriteClipboardData(Clipboard::Type clipboard_type, mojo::Map<mojo::String, mojo::Array<uint8_t> > data) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class ClipboardRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class ClipboardResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---
  
std::ostream& operator<<(std::ostream& stream,
                         const internal::Clipboard_Base::Type& val);

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Clipboard_GetSequenceNumber_Params;

using Clipboard_GetSequenceNumber_ParamsPtr = mojo::InlinedStructPtr<Clipboard_GetSequenceNumber_Params>;


size_t GetSerializedSize_(const Clipboard_GetSequenceNumber_Params& input);
mojo::internal::ValidationError Serialize_(
    Clipboard_GetSequenceNumber_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Clipboard_GetSequenceNumber_Params_Data** output);
void Deserialize_(internal::Clipboard_GetSequenceNumber_Params_Data* input,
                  Clipboard_GetSequenceNumber_Params* output);

class Clipboard_GetSequenceNumber_Params {
 public:
  using Data_ = internal::Clipboard_GetSequenceNumber_Params_Data;

  static Clipboard_GetSequenceNumber_ParamsPtr New();

  template <typename U>
  static Clipboard_GetSequenceNumber_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Clipboard_GetSequenceNumber_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Clipboard_GetSequenceNumber_Params>::Convert(*this);
  }

  Clipboard_GetSequenceNumber_Params();
  ~Clipboard_GetSequenceNumber_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Clipboard_GetSequenceNumber_ParamsPtr Clone() const;
  bool Equals(const Clipboard_GetSequenceNumber_Params& other) const;

  Clipboard::Type clipboard_type;
};



class Clipboard_GetSequenceNumber_ResponseParams;

using Clipboard_GetSequenceNumber_ResponseParamsPtr = mojo::InlinedStructPtr<Clipboard_GetSequenceNumber_ResponseParams>;


size_t GetSerializedSize_(const Clipboard_GetSequenceNumber_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Clipboard_GetSequenceNumber_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Clipboard_GetSequenceNumber_ResponseParams_Data** output);
void Deserialize_(internal::Clipboard_GetSequenceNumber_ResponseParams_Data* input,
                  Clipboard_GetSequenceNumber_ResponseParams* output);

class Clipboard_GetSequenceNumber_ResponseParams {
 public:
  using Data_ = internal::Clipboard_GetSequenceNumber_ResponseParams_Data;

  static Clipboard_GetSequenceNumber_ResponseParamsPtr New();

  template <typename U>
  static Clipboard_GetSequenceNumber_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Clipboard_GetSequenceNumber_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Clipboard_GetSequenceNumber_ResponseParams>::Convert(*this);
  }

  Clipboard_GetSequenceNumber_ResponseParams();
  ~Clipboard_GetSequenceNumber_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Clipboard_GetSequenceNumber_ResponseParamsPtr Clone() const;
  bool Equals(const Clipboard_GetSequenceNumber_ResponseParams& other) const;

  uint64_t sequence;
};



class Clipboard_GetAvailableMimeTypes_Params;

using Clipboard_GetAvailableMimeTypes_ParamsPtr = mojo::InlinedStructPtr<Clipboard_GetAvailableMimeTypes_Params>;


size_t GetSerializedSize_(const Clipboard_GetAvailableMimeTypes_Params& input);
mojo::internal::ValidationError Serialize_(
    Clipboard_GetAvailableMimeTypes_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Clipboard_GetAvailableMimeTypes_Params_Data** output);
void Deserialize_(internal::Clipboard_GetAvailableMimeTypes_Params_Data* input,
                  Clipboard_GetAvailableMimeTypes_Params* output);

class Clipboard_GetAvailableMimeTypes_Params {
 public:
  using Data_ = internal::Clipboard_GetAvailableMimeTypes_Params_Data;

  static Clipboard_GetAvailableMimeTypes_ParamsPtr New();

  template <typename U>
  static Clipboard_GetAvailableMimeTypes_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Clipboard_GetAvailableMimeTypes_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Clipboard_GetAvailableMimeTypes_Params>::Convert(*this);
  }

  Clipboard_GetAvailableMimeTypes_Params();
  ~Clipboard_GetAvailableMimeTypes_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Clipboard_GetAvailableMimeTypes_ParamsPtr Clone() const;
  bool Equals(const Clipboard_GetAvailableMimeTypes_Params& other) const;

  Clipboard::Type clipboard_types;
};



class Clipboard_GetAvailableMimeTypes_ResponseParams;

using Clipboard_GetAvailableMimeTypes_ResponseParamsPtr = mojo::StructPtr<Clipboard_GetAvailableMimeTypes_ResponseParams>;


size_t GetSerializedSize_(const Clipboard_GetAvailableMimeTypes_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Clipboard_GetAvailableMimeTypes_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data** output);
void Deserialize_(internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data* input,
                  Clipboard_GetAvailableMimeTypes_ResponseParams* output);

class Clipboard_GetAvailableMimeTypes_ResponseParams {
 public:
  using Data_ = internal::Clipboard_GetAvailableMimeTypes_ResponseParams_Data;

  static Clipboard_GetAvailableMimeTypes_ResponseParamsPtr New();

  template <typename U>
  static Clipboard_GetAvailableMimeTypes_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Clipboard_GetAvailableMimeTypes_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Clipboard_GetAvailableMimeTypes_ResponseParams>::Convert(*this);
  }

  Clipboard_GetAvailableMimeTypes_ResponseParams();
  ~Clipboard_GetAvailableMimeTypes_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Clipboard_GetAvailableMimeTypes_ResponseParamsPtr Clone() const;
  bool Equals(const Clipboard_GetAvailableMimeTypes_ResponseParams& other) const;

  mojo::Array<mojo::String> types;
};



class Clipboard_ReadMimeType_Params;

using Clipboard_ReadMimeType_ParamsPtr = mojo::InlinedStructPtr<Clipboard_ReadMimeType_Params>;


size_t GetSerializedSize_(const Clipboard_ReadMimeType_Params& input);
mojo::internal::ValidationError Serialize_(
    Clipboard_ReadMimeType_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Clipboard_ReadMimeType_Params_Data** output);
void Deserialize_(internal::Clipboard_ReadMimeType_Params_Data* input,
                  Clipboard_ReadMimeType_Params* output);

class Clipboard_ReadMimeType_Params {
 public:
  using Data_ = internal::Clipboard_ReadMimeType_Params_Data;

  static Clipboard_ReadMimeType_ParamsPtr New();

  template <typename U>
  static Clipboard_ReadMimeType_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Clipboard_ReadMimeType_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Clipboard_ReadMimeType_Params>::Convert(*this);
  }

  Clipboard_ReadMimeType_Params();
  ~Clipboard_ReadMimeType_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Clipboard_ReadMimeType_ParamsPtr Clone() const;
  bool Equals(const Clipboard_ReadMimeType_Params& other) const;

  Clipboard::Type clipboard_type;
  mojo::String mime_type;
};



class Clipboard_ReadMimeType_ResponseParams;

using Clipboard_ReadMimeType_ResponseParamsPtr = mojo::StructPtr<Clipboard_ReadMimeType_ResponseParams>;


size_t GetSerializedSize_(const Clipboard_ReadMimeType_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Clipboard_ReadMimeType_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Clipboard_ReadMimeType_ResponseParams_Data** output);
void Deserialize_(internal::Clipboard_ReadMimeType_ResponseParams_Data* input,
                  Clipboard_ReadMimeType_ResponseParams* output);

class Clipboard_ReadMimeType_ResponseParams {
 public:
  using Data_ = internal::Clipboard_ReadMimeType_ResponseParams_Data;

  static Clipboard_ReadMimeType_ResponseParamsPtr New();

  template <typename U>
  static Clipboard_ReadMimeType_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Clipboard_ReadMimeType_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Clipboard_ReadMimeType_ResponseParams>::Convert(*this);
  }

  Clipboard_ReadMimeType_ResponseParams();
  ~Clipboard_ReadMimeType_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Clipboard_ReadMimeType_ResponseParamsPtr Clone() const;
  bool Equals(const Clipboard_ReadMimeType_ResponseParams& other) const;

  mojo::Array<uint8_t> data;
};



class Clipboard_WriteClipboardData_Params;

using Clipboard_WriteClipboardData_ParamsPtr = mojo::StructPtr<Clipboard_WriteClipboardData_Params>;


size_t GetSerializedSize_(const Clipboard_WriteClipboardData_Params& input);
mojo::internal::ValidationError Serialize_(
    Clipboard_WriteClipboardData_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Clipboard_WriteClipboardData_Params_Data** output);
void Deserialize_(internal::Clipboard_WriteClipboardData_Params_Data* input,
                  Clipboard_WriteClipboardData_Params* output);

class Clipboard_WriteClipboardData_Params {
 public:
  using Data_ = internal::Clipboard_WriteClipboardData_Params_Data;

  static Clipboard_WriteClipboardData_ParamsPtr New();

  template <typename U>
  static Clipboard_WriteClipboardData_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Clipboard_WriteClipboardData_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Clipboard_WriteClipboardData_Params>::Convert(*this);
  }

  Clipboard_WriteClipboardData_Params();
  ~Clipboard_WriteClipboardData_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Clipboard_WriteClipboardData_ParamsPtr Clone() const;
  bool Equals(const Clipboard_WriteClipboardData_Params& other) const;

  Clipboard::Type clipboard_type;
  mojo::Map<mojo::String, mojo::Array<uint8_t> > data;
};



}  // namespace mojo

#endif  // MOJO_SERVICES_CLIPBOARD_INTERFACES_CLIPBOARD_MOJOM_COMMON_H_
