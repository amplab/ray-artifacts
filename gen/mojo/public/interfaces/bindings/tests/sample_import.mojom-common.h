// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_IMPORT_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_IMPORT_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom-internal.h"
namespace imported {

// --- Interface Forward Declarations ---
class ImportedInterface;
class ImportedInterfaceRequestValidator;
class ImportedInterface_Synchronous;

// --- Struct Forward Declarations ---
class Point;

using PointPtr = mojo::InlinedStructPtr<Point>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---
  
enum class Shape : int32_t {
  RECTANGLE = 1,
  CIRCLE,
  TRIANGLE,
  LAST = Shape::TRIANGLE,
};

bool Shape_IsValidValue(Shape value);
  
std::ostream& operator<<(std::ostream& stream, const Shape& val);
  
enum class AnotherShape : int32_t {
  RECTANGLE = 10,
  CIRCLE,
  TRIANGLE,
};

bool AnotherShape_IsValidValue(AnotherShape value);
  
std::ostream& operator<<(std::ostream& stream, const AnotherShape& val);
  
enum class YetAnotherShape : int32_t {
  RECTANGLE = 20,
  CIRCLE,
  TRIANGLE,
};

bool YetAnotherShape_IsValidValue(YetAnotherShape value);
  
std::ostream& operator<<(std::ostream& stream, const YetAnotherShape& val);

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class ImportedInterface_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ImportedInterfaceRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = ImportedInterface_Synchronous;
  enum class MessageOrdinals : uint32_t {
    DoSomething = 0,
  };


  virtual ~ImportedInterface_Base() {}
};

}  // namespace internal

// Async interface declaration

class ImportedInterfaceProxy;
class ImportedInterfaceStub;
class ImportedInterface_Synchronous;

class ImportedInterfaceRequestValidator;

class ImportedInterface : public internal::ImportedInterface_Base {
 public:
  virtual ~ImportedInterface() override {}

  using Proxy_ = ImportedInterfaceProxy;
  using Stub_ = ImportedInterfaceStub;
  virtual void DoSomething() = 0;
};

}  // namespace imported

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<imported::PointPtr, true, false> {
  using DataType = imported::internal::Point_Data*;
};

}  // internal
}  // mojo
namespace imported {

// --- Interface Request Validators ---
class ImportedInterfaceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class Point {
 public:
  using Data_ = internal::Point_Data;

  static PointPtr New();

  template <typename U>
  static PointPtr From(const U& u) {
    return mojo::TypeConverter<PointPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Point>::Convert(*this);
  }

  Point();
  ~Point();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PointPtr Clone() const;
  bool Equals(const Point& other) const;

  int32_t x;
  int32_t y;
};



// --- Non-inlined structs ---

// --- Struct serialization helpers ---
size_t GetSerializedSize_(const Point& input);
mojo::internal::ValidationError Serialize_(
    Point* input,
    mojo::internal::Buffer* buffer,
    internal::Point_Data** output);
void Deserialize_(internal::Point_Data* input,
                  Point* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class ImportedInterface_DoSomething_Params;

using ImportedInterface_DoSomething_ParamsPtr = mojo::InlinedStructPtr<ImportedInterface_DoSomething_Params>;


size_t GetSerializedSize_(const ImportedInterface_DoSomething_Params& input);
mojo::internal::ValidationError Serialize_(
    ImportedInterface_DoSomething_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ImportedInterface_DoSomething_Params_Data** output);
void Deserialize_(internal::ImportedInterface_DoSomething_Params_Data* input,
                  ImportedInterface_DoSomething_Params* output);

class ImportedInterface_DoSomething_Params {
 public:
  using Data_ = internal::ImportedInterface_DoSomething_Params_Data;

  static ImportedInterface_DoSomething_ParamsPtr New();

  template <typename U>
  static ImportedInterface_DoSomething_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ImportedInterface_DoSomething_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ImportedInterface_DoSomething_Params>::Convert(*this);
  }

  ImportedInterface_DoSomething_Params();
  ~ImportedInterface_DoSomething_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ImportedInterface_DoSomething_ParamsPtr Clone() const;
  bool Equals(const ImportedInterface_DoSomething_Params& other) const;

};



}  // namespace imported

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_IMPORT_MOJOM_COMMON_H_
