// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SHELL_APPLICATION_MANAGER_TEST_MOJOM_COMMON_H_
#define SHELL_APPLICATION_MANAGER_TEST_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "shell/application_manager/test.mojom-internal.h"
namespace shell {

// --- Interface Forward Declarations ---
class TestService;
class TestServiceRequestValidator;
class TestServiceResponseValidator;
class TestService_Synchronous;
class TestA;
class TestARequestValidator;
class TestA_Synchronous;
class TestB;
class TestBRequestValidator;
class TestBResponseValidator;
class TestB_Synchronous;
class TestC;
class TestCRequestValidator;
class TestCResponseValidator;
class TestC_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class TestService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestServiceRequestValidator;
  using ResponseValidator_ = TestServiceResponseValidator;
  using Synchronous_ = TestService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Test = 0,
  };


  virtual ~TestService_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestServiceProxy;
class TestServiceStub;
class TestService_Synchronous;

class TestServiceRequestValidator;
class TestServiceResponseValidator;

class TestService : public internal::TestService_Base {
 public:
  virtual ~TestService() override {}

  using Proxy_ = TestServiceProxy;
  using Stub_ = TestServiceStub;
  using TestCallback = mojo::Callback<void()>;
  virtual void Test(const mojo::String& test_string, const TestCallback& callback) = 0;
};

namespace internal {
class TestA_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestARequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = TestA_Synchronous;
  enum class MessageOrdinals : uint32_t {
    CallB = 0,
  };


  virtual ~TestA_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestAProxy;
class TestAStub;
class TestA_Synchronous;

class TestARequestValidator;

class TestA : public internal::TestA_Base {
 public:
  virtual ~TestA() override {}

  using Proxy_ = TestAProxy;
  using Stub_ = TestAStub;
  virtual void CallB() = 0;
};

namespace internal {
class TestB_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestBRequestValidator;
  using ResponseValidator_ = TestBResponseValidator;
  using Synchronous_ = TestB_Synchronous;
  enum class MessageOrdinals : uint32_t {
    B = 0,
  };


  virtual ~TestB_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestBProxy;
class TestBStub;
class TestB_Synchronous;

class TestBRequestValidator;
class TestBResponseValidator;

class TestB : public internal::TestB_Base {
 public:
  virtual ~TestB() override {}

  using Proxy_ = TestBProxy;
  using Stub_ = TestBStub;
  using BCallback = mojo::Callback<void()>;
  virtual void B(const BCallback& callback) = 0;
};

namespace internal {
class TestC_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestCRequestValidator;
  using ResponseValidator_ = TestCResponseValidator;
  using Synchronous_ = TestC_Synchronous;
  enum class MessageOrdinals : uint32_t {
    C = 0,
  };


  virtual ~TestC_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestCProxy;
class TestCStub;
class TestC_Synchronous;

class TestCRequestValidator;
class TestCResponseValidator;

class TestC : public internal::TestC_Base {
 public:
  virtual ~TestC() override {}

  using Proxy_ = TestCProxy;
  using Stub_ = TestCStub;
  using CCallback = mojo::Callback<void()>;
  virtual void C(const CCallback& callback) = 0;
};

}  // namespace shell

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace shell {

// --- Interface Request Validators ---
class TestServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestARequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestBRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestCRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class TestServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestBResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestCResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class TestService_Test_Params;

using TestService_Test_ParamsPtr = mojo::InlinedStructPtr<TestService_Test_Params>;


size_t GetSerializedSize_(const TestService_Test_Params& input);
mojo::internal::ValidationError Serialize_(
    TestService_Test_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_Test_Params_Data** output);
void Deserialize_(internal::TestService_Test_Params_Data* input,
                  TestService_Test_Params* output);

class TestService_Test_Params {
 public:
  using Data_ = internal::TestService_Test_Params_Data;

  static TestService_Test_ParamsPtr New();

  template <typename U>
  static TestService_Test_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_Test_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_Test_Params>::Convert(*this);
  }

  TestService_Test_Params();
  ~TestService_Test_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_Test_ParamsPtr Clone() const;
  bool Equals(const TestService_Test_Params& other) const;

  mojo::String test_string;
};



class TestService_Test_ResponseParams;

using TestService_Test_ResponseParamsPtr = mojo::InlinedStructPtr<TestService_Test_ResponseParams>;


size_t GetSerializedSize_(const TestService_Test_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestService_Test_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_Test_ResponseParams_Data** output);
void Deserialize_(internal::TestService_Test_ResponseParams_Data* input,
                  TestService_Test_ResponseParams* output);

class TestService_Test_ResponseParams {
 public:
  using Data_ = internal::TestService_Test_ResponseParams_Data;

  static TestService_Test_ResponseParamsPtr New();

  template <typename U>
  static TestService_Test_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_Test_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_Test_ResponseParams>::Convert(*this);
  }

  TestService_Test_ResponseParams();
  ~TestService_Test_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_Test_ResponseParamsPtr Clone() const;
  bool Equals(const TestService_Test_ResponseParams& other) const;

};


      

class TestA_CallB_Params;

using TestA_CallB_ParamsPtr = mojo::InlinedStructPtr<TestA_CallB_Params>;


size_t GetSerializedSize_(const TestA_CallB_Params& input);
mojo::internal::ValidationError Serialize_(
    TestA_CallB_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestA_CallB_Params_Data** output);
void Deserialize_(internal::TestA_CallB_Params_Data* input,
                  TestA_CallB_Params* output);

class TestA_CallB_Params {
 public:
  using Data_ = internal::TestA_CallB_Params_Data;

  static TestA_CallB_ParamsPtr New();

  template <typename U>
  static TestA_CallB_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestA_CallB_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestA_CallB_Params>::Convert(*this);
  }

  TestA_CallB_Params();
  ~TestA_CallB_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestA_CallB_ParamsPtr Clone() const;
  bool Equals(const TestA_CallB_Params& other) const;

};



      

class TestB_B_Params;

using TestB_B_ParamsPtr = mojo::InlinedStructPtr<TestB_B_Params>;


size_t GetSerializedSize_(const TestB_B_Params& input);
mojo::internal::ValidationError Serialize_(
    TestB_B_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestB_B_Params_Data** output);
void Deserialize_(internal::TestB_B_Params_Data* input,
                  TestB_B_Params* output);

class TestB_B_Params {
 public:
  using Data_ = internal::TestB_B_Params_Data;

  static TestB_B_ParamsPtr New();

  template <typename U>
  static TestB_B_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestB_B_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestB_B_Params>::Convert(*this);
  }

  TestB_B_Params();
  ~TestB_B_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestB_B_ParamsPtr Clone() const;
  bool Equals(const TestB_B_Params& other) const;

};



class TestB_B_ResponseParams;

using TestB_B_ResponseParamsPtr = mojo::InlinedStructPtr<TestB_B_ResponseParams>;


size_t GetSerializedSize_(const TestB_B_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestB_B_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestB_B_ResponseParams_Data** output);
void Deserialize_(internal::TestB_B_ResponseParams_Data* input,
                  TestB_B_ResponseParams* output);

class TestB_B_ResponseParams {
 public:
  using Data_ = internal::TestB_B_ResponseParams_Data;

  static TestB_B_ResponseParamsPtr New();

  template <typename U>
  static TestB_B_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestB_B_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestB_B_ResponseParams>::Convert(*this);
  }

  TestB_B_ResponseParams();
  ~TestB_B_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestB_B_ResponseParamsPtr Clone() const;
  bool Equals(const TestB_B_ResponseParams& other) const;

};


      

class TestC_C_Params;

using TestC_C_ParamsPtr = mojo::InlinedStructPtr<TestC_C_Params>;


size_t GetSerializedSize_(const TestC_C_Params& input);
mojo::internal::ValidationError Serialize_(
    TestC_C_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestC_C_Params_Data** output);
void Deserialize_(internal::TestC_C_Params_Data* input,
                  TestC_C_Params* output);

class TestC_C_Params {
 public:
  using Data_ = internal::TestC_C_Params_Data;

  static TestC_C_ParamsPtr New();

  template <typename U>
  static TestC_C_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestC_C_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestC_C_Params>::Convert(*this);
  }

  TestC_C_Params();
  ~TestC_C_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestC_C_ParamsPtr Clone() const;
  bool Equals(const TestC_C_Params& other) const;

};



class TestC_C_ResponseParams;

using TestC_C_ResponseParamsPtr = mojo::InlinedStructPtr<TestC_C_ResponseParams>;


size_t GetSerializedSize_(const TestC_C_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestC_C_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestC_C_ResponseParams_Data** output);
void Deserialize_(internal::TestC_C_ResponseParams_Data* input,
                  TestC_C_ResponseParams* output);

class TestC_C_ResponseParams {
 public:
  using Data_ = internal::TestC_C_ResponseParams_Data;

  static TestC_C_ResponseParamsPtr New();

  template <typename U>
  static TestC_C_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestC_C_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestC_C_ResponseParams>::Convert(*this);
  }

  TestC_C_ResponseParams();
  ~TestC_C_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestC_C_ResponseParamsPtr Clone() const;
  bool Equals(const TestC_C_ResponseParams& other) const;

};


}  // namespace shell

#endif  // SHELL_APPLICATION_MANAGER_TEST_MOJOM_COMMON_H_
