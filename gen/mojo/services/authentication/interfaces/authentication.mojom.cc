// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/authentication/interfaces/authentication.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace authentication {

// --- Interface definitions ---
class AuthenticationService_SelectAccount_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AuthenticationService_SelectAccount_ForwardToCallback(
      const AuthenticationService::SelectAccountCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  AuthenticationService::SelectAccountCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationService_SelectAccount_ForwardToCallback);
};
bool AuthenticationService_SelectAccount_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::AuthenticationService_SelectAccount_ResponseParams_Data* params =
      reinterpret_cast<internal::AuthenticationService_SelectAccount_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_username {};
  mojo::String p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->username.ptr, &p_username);
    Deserialize_(params->error.ptr, &p_error);
  } while (false);
  callback_.Run(p_username, p_error);
  return true;
}
class AuthenticationService_GetOAuth2Token_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AuthenticationService_GetOAuth2Token_ForwardToCallback(
      const AuthenticationService::GetOAuth2TokenCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  AuthenticationService::GetOAuth2TokenCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationService_GetOAuth2Token_ForwardToCallback);
};
bool AuthenticationService_GetOAuth2Token_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data* params =
      reinterpret_cast<internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_token {};
  mojo::String p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->token.ptr, &p_token);
    Deserialize_(params->error.ptr, &p_error);
  } while (false);
  callback_.Run(p_token, p_error);
  return true;
}

AuthenticationServiceProxy::AuthenticationServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void AuthenticationServiceProxy::SelectAccount(
    bool in_return_last_selected, const SelectAccountCallback& callback) {
  size_t size = sizeof(internal::AuthenticationService_SelectAccount_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationService_Base::MessageOrdinals::SelectAccount), size);

  internal::AuthenticationService_SelectAccount_Params_Data* params =
      internal::AuthenticationService_SelectAccount_Params_Data::New(builder.buffer());
  params->return_last_selected = in_return_last_selected;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new AuthenticationService_SelectAccount_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void AuthenticationServiceProxy::GetOAuth2Token(
    const mojo::String& in_username, mojo::Array<mojo::String> in_scopes, const GetOAuth2TokenCallback& callback) {
  size_t size = sizeof(internal::AuthenticationService_GetOAuth2Token_Params_Data);
  size += GetSerializedSize_(in_username);
  size += GetSerializedSize_(in_scopes);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationService_Base::MessageOrdinals::GetOAuth2Token), size);

  internal::AuthenticationService_GetOAuth2Token_Params_Data* params =
      internal::AuthenticationService_GetOAuth2Token_Params_Data::New(builder.buffer());
  SerializeString_(in_username, builder.buffer(), &params->username.ptr);
  if (!params->username.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null username in AuthenticationService.GetOAuth2Token request");
  }
  {
    const mojo::internal::ArrayValidateParams scopes_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_scopes, builder.buffer(), &params->scopes.ptr,
                          &scopes_validate_params);
  }
  if (!params->scopes.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null scopes in AuthenticationService.GetOAuth2Token request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new AuthenticationService_GetOAuth2Token_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void AuthenticationServiceProxy::ClearOAuth2Token(
    const mojo::String& in_token) {
  size_t size = sizeof(internal::AuthenticationService_ClearOAuth2Token_Params_Data);
  size += GetSerializedSize_(in_token);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::AuthenticationService_Base::MessageOrdinals::ClearOAuth2Token), size);

  internal::AuthenticationService_ClearOAuth2Token_Params_Data* params =
      internal::AuthenticationService_ClearOAuth2Token_Params_Data::New(builder.buffer());
  SerializeString_(in_token, builder.buffer(), &params->token.ptr);
  if (!params->token.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null token in AuthenticationService.ClearOAuth2Token request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class AuthenticationService_SelectAccount_ProxyToResponder
    : public AuthenticationService::SelectAccountCallback::Runnable {
 public:
  ~AuthenticationService_SelectAccount_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "AuthenticationService::SelectAccount(p_return_last_selected, callback) "
        "was never run.";
  }

  AuthenticationService_SelectAccount_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_username, const mojo::String& in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationService_SelectAccount_ProxyToResponder);
};

void AuthenticationService_SelectAccount_ProxyToResponder::Run(
    const mojo::String& in_username, const mojo::String& in_error) const {
  size_t size = sizeof(internal::AuthenticationService_SelectAccount_ResponseParams_Data);
  size += GetSerializedSize_(in_username);
  size += GetSerializedSize_(in_error);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationService_Base::MessageOrdinals::SelectAccount), size, request_id_);
  internal::AuthenticationService_SelectAccount_ResponseParams_Data* params =
      internal::AuthenticationService_SelectAccount_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_username, builder.buffer(), &params->username.ptr);
  SerializeString_(in_error, builder.buffer(), &params->error.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class AuthenticationService_GetOAuth2Token_ProxyToResponder
    : public AuthenticationService::GetOAuth2TokenCallback::Runnable {
 public:
  ~AuthenticationService_GetOAuth2Token_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "AuthenticationService::GetOAuth2Token(p_username, p_scopes.Pass(), callback) "
        "was never run.";
  }

  AuthenticationService_GetOAuth2Token_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_token, const mojo::String& in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(AuthenticationService_GetOAuth2Token_ProxyToResponder);
};

void AuthenticationService_GetOAuth2Token_ProxyToResponder::Run(
    const mojo::String& in_token, const mojo::String& in_error) const {
  size_t size = sizeof(internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data);
  size += GetSerializedSize_(in_token);
  size += GetSerializedSize_(in_error);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::AuthenticationService_Base::MessageOrdinals::GetOAuth2Token), size, request_id_);
  internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data* params =
      internal::AuthenticationService_GetOAuth2Token_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_token, builder.buffer(), &params->token.ptr);
  SerializeString_(in_error, builder.buffer(), &params->error.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

AuthenticationServiceStub::AuthenticationServiceStub()
    : sink_(nullptr),
      control_message_handler_(AuthenticationService::Version_) {
}

AuthenticationServiceStub::~AuthenticationServiceStub() {}

bool AuthenticationServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::AuthenticationService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::AuthenticationService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::AuthenticationService_Base::MessageOrdinals::SelectAccount: {
      break;
    }
    case internal::AuthenticationService_Base::MessageOrdinals::GetOAuth2Token: {
      break;
    }
    case internal::AuthenticationService_Base::MessageOrdinals::ClearOAuth2Token: {
      internal::AuthenticationService_ClearOAuth2Token_Params_Data* params =
          reinterpret_cast<internal::AuthenticationService_ClearOAuth2Token_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_token {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->token.ptr, &p_token);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ClearOAuth2Token(p_token);
      return true;
    }
  }
  return false;
}

bool AuthenticationServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::AuthenticationService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::AuthenticationService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::AuthenticationService_Base::MessageOrdinals::SelectAccount: {
      internal::AuthenticationService_SelectAccount_Params_Data* params =
          reinterpret_cast<internal::AuthenticationService_SelectAccount_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      AuthenticationService::SelectAccountCallback::Runnable* runnable =
          new AuthenticationService_SelectAccount_ProxyToResponder(
              message->request_id(), responder);
      AuthenticationService::SelectAccountCallback callback(runnable);
      
      bool p_return_last_selected {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_return_last_selected = params->return_last_selected;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SelectAccount(p_return_last_selected, callback);
      return true;
    }
    case internal::AuthenticationService_Base::MessageOrdinals::GetOAuth2Token: {
      internal::AuthenticationService_GetOAuth2Token_Params_Data* params =
          reinterpret_cast<internal::AuthenticationService_GetOAuth2Token_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      AuthenticationService::GetOAuth2TokenCallback::Runnable* runnable =
          new AuthenticationService_GetOAuth2Token_ProxyToResponder(
              message->request_id(), responder);
      AuthenticationService::GetOAuth2TokenCallback callback(runnable);
      
      mojo::String p_username {};
      mojo::Array<mojo::String> p_scopes {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->username.ptr, &p_username);
        Deserialize_(params->scopes.ptr, &p_scopes);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetOAuth2Token(p_username, p_scopes.Pass(), callback);
      return true;
    }
    case internal::AuthenticationService_Base::MessageOrdinals::ClearOAuth2Token: {
      break;
    }
  }
  return false;
}

}  // namespace authentication
