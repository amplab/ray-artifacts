// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library child_controller_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo/mojo/application.mojom.dart' as application_mojom;



class _ChildControllerStartAppParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String appPath = null;
  application_mojom.ApplicationInterfaceRequest applicationRequest = null;

  _ChildControllerStartAppParams() : super(kVersions.last.size);

  _ChildControllerStartAppParams.init(
    String this.appPath, 
    application_mojom.ApplicationInterfaceRequest this.applicationRequest
  ) : super(kVersions.last.size);

  static _ChildControllerStartAppParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ChildControllerStartAppParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ChildControllerStartAppParams result = new _ChildControllerStartAppParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.appPath = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.applicationRequest = decoder0.decodeInterfaceRequest(16, false, application_mojom.ApplicationStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ChildControllerStartAppParams";
    String fieldName;
    try {
      fieldName = "appPath";
      encoder0.encodeString(appPath, 8, false);
      fieldName = "applicationRequest";
      encoder0.encodeInterfaceRequest(applicationRequest, 16, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ChildControllerStartAppParams("
           "appPath: $appPath" ", "
           "applicationRequest: $applicationRequest" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class ChildControllerStartAppResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int result = 0;

  ChildControllerStartAppResponseParams() : super(kVersions.last.size);

  ChildControllerStartAppResponseParams.init(
    int this.result
  ) : super(kVersions.last.size);

  static ChildControllerStartAppResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static ChildControllerStartAppResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    ChildControllerStartAppResponseParams result = new ChildControllerStartAppResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.result = decoder0.decodeInt32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "ChildControllerStartAppResponseParams";
    String fieldName;
    try {
      fieldName = "result";
      encoder0.encodeInt32(result, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "ChildControllerStartAppResponseParams("
           "result: $result" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    return map;
  }
}


class _ChildControllerExitNowParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int exitCode = 0;

  _ChildControllerExitNowParams() : super(kVersions.last.size);

  _ChildControllerExitNowParams.init(
    int this.exitCode
  ) : super(kVersions.last.size);

  static _ChildControllerExitNowParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _ChildControllerExitNowParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _ChildControllerExitNowParams result = new _ChildControllerExitNowParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.exitCode = decoder0.decodeInt32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_ChildControllerExitNowParams";
    String fieldName;
    try {
      fieldName = "exitCode";
      encoder0.encodeInt32(exitCode, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_ChildControllerExitNowParams("
           "exitCode: $exitCode" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["exitCode"] = exitCode;
    return map;
  }
}

const int _childControllerMethodStartAppName = 0;
const int _childControllerMethodExitNowName = 1;

class _ChildControllerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class ChildController {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _ChildControllerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static ChildControllerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    ChildControllerProxy p = new ChildControllerProxy.unbound();
    String name = serviceName ?? ChildController.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void startApp(String appPath,application_mojom.ApplicationInterfaceRequest applicationRequest,void callback(int result));
  void exitNow(int exitCode);
}

abstract class ChildControllerInterface
    implements bindings.MojoInterface<ChildController>,
               ChildController {
  factory ChildControllerInterface([ChildController impl]) =>
      new ChildControllerStub.unbound(impl);

  factory ChildControllerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [ChildController impl]) =>
      new ChildControllerStub.fromEndpoint(endpoint, impl);

  factory ChildControllerInterface.fromMock(
      ChildController mock) =>
      new ChildControllerProxy.fromMock(mock);
}

abstract class ChildControllerInterfaceRequest
    implements bindings.MojoInterface<ChildController>,
               ChildController {
  factory ChildControllerInterfaceRequest() =>
      new ChildControllerProxy.unbound();
}

class _ChildControllerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<ChildController> {
  ChildController impl;

  _ChildControllerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _ChildControllerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _ChildControllerProxyControl.unbound() : super.unbound();

  String get serviceName => ChildController.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _childControllerMethodStartAppName:
        var r = ChildControllerStartAppResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.result );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ChildControllerProxyControl($superString)";
  }
}

class ChildControllerProxy
    extends bindings.Proxy<ChildController>
    implements ChildController,
               ChildControllerInterface,
               ChildControllerInterfaceRequest {
  ChildControllerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _ChildControllerProxyControl.fromEndpoint(endpoint));

  ChildControllerProxy.fromHandle(core.MojoHandle handle)
      : super(new _ChildControllerProxyControl.fromHandle(handle));

  ChildControllerProxy.unbound()
      : super(new _ChildControllerProxyControl.unbound());

  factory ChildControllerProxy.fromMock(ChildController mock) {
    ChildControllerProxy newMockedProxy =
        new ChildControllerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static ChildControllerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ChildControllerProxy"));
    return new ChildControllerProxy.fromEndpoint(endpoint);
  }


  void startApp(String appPath,application_mojom.ApplicationInterfaceRequest applicationRequest,void callback(int result)) {
    if (impl != null) {
      impl.startApp(appPath,applicationRequest,callback);
      return;
    }
    var params = new _ChildControllerStartAppParams();
    params.appPath = appPath;
    params.applicationRequest = applicationRequest;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int result) {
        z.bindCallback(() {
          callback(result);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _childControllerMethodStartAppName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void exitNow(int exitCode) {
    if (impl != null) {
      impl.exitNow(exitCode);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _ChildControllerExitNowParams();
    params.exitCode = exitCode;
    ctrl.sendMessage(params,
        _childControllerMethodExitNowName);
  }
}

class _ChildControllerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<ChildController> {
  ChildController _impl;

  _ChildControllerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ChildController impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _ChildControllerStubControl.fromHandle(
      core.MojoHandle handle, [ChildController impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _ChildControllerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => ChildController.serviceName;


  Function _childControllerStartAppResponseParamsResponder(
      int requestId) {
  return (int result) {
      var result = new ChildControllerStartAppResponseParams();
      result.result = result;
      sendResponse(buildResponseWithId(
          result,
          _childControllerMethodStartAppName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _childControllerMethodStartAppName:
        var params = _ChildControllerStartAppParams.deserialize(
            message.payload);
        _impl.startApp(params.appPath, params.applicationRequest, _childControllerStartAppResponseParamsResponder(message.header.requestId));
        break;
      case _childControllerMethodExitNowName:
        var params = _ChildControllerExitNowParams.deserialize(
            message.payload);
        _impl.exitNow(params.exitCode);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  ChildController get impl => _impl;
  set impl(ChildController d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_ChildControllerStubControl($superString)";
  }

  int get version => 0;
}

class ChildControllerStub
    extends bindings.Stub<ChildController>
    implements ChildController,
               ChildControllerInterface,
               ChildControllerInterfaceRequest {
  ChildControllerStub.unbound([ChildController impl])
      : super(new _ChildControllerStubControl.unbound(impl));

  ChildControllerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [ChildController impl])
      : super(new _ChildControllerStubControl.fromEndpoint(endpoint, impl));

  ChildControllerStub.fromHandle(
      core.MojoHandle handle, [ChildController impl])
      : super(new _ChildControllerStubControl.fromHandle(handle, impl));

  static ChildControllerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For ChildControllerStub"));
    return new ChildControllerStub.fromEndpoint(endpoint);
  }


  void startApp(String appPath,application_mojom.ApplicationInterfaceRequest applicationRequest,void callback(int result)) {
    return impl.startApp(appPath,applicationRequest,callback);
  }
  void exitNow(int exitCode) {
    return impl.exitNow(exitCode);
  }
}



