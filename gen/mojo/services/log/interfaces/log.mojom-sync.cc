// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/log/interfaces/log.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/log/interfaces/log.mojom-internal.h"
#include "mojo/services/log/interfaces/log.mojom-common.h"
namespace mojo {
namespace log {

// --- Interface definitions ---
Log_SynchronousProxy::Log_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool Log_SynchronousProxy::AddEntry(mojo::log::EntryPtr in_entry) const  {
  size_t size = sizeof(internal::Log_AddEntry_Params_Data);
  size += in_entry.is_null()
              ? 0
              : GetSerializedSize_(*in_entry);

  auto msg_name = static_cast<uint32_t>(internal::Log_Base::MessageOrdinals::AddEntry);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Log_AddEntry_Params_Data* out_params =
      internal::Log_AddEntry_Params_Data::New(builder.buffer());
  {Serialize_(in_entry.get(),
               builder.buffer(),
               &out_params->entry.ptr);
  }
  if (!out_params->entry.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null entry in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
}  // namespace log
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
