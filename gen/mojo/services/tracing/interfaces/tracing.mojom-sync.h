// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_SYNC_H_
#define MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/tracing/interfaces/tracing.mojom-internal.h"
#include "mojo/services/tracing/interfaces/tracing.mojom-common.h"


namespace tracing {

// --- Synchronous interface declaration ---

class TraceProvider_SynchronousProxy;
class TraceProvider_Synchronous
  : public internal::TraceProvider_Base {
 public:
  virtual ~TraceProvider_Synchronous() override {}
  
  using Proxy_ = TraceProvider_SynchronousProxy;
  virtual bool StartTracing(
      const mojo::String& in_categories, mojo::InterfaceHandle<TraceRecorder> in_recorder)const= 0;
  virtual bool StopTracing(
      )const= 0;
};

class TraceProvider_SynchronousProxy
    : public TraceProvider_Synchronous {
 public:
  explicit TraceProvider_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool StartTracing(const mojo::String& in_categories, mojo::InterfaceHandle<TraceRecorder> in_recorder) const  override;
  bool StopTracing() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class TraceRecorder_SynchronousProxy;
class TraceRecorder_Synchronous
  : public internal::TraceRecorder_Base {
 public:
  virtual ~TraceRecorder_Synchronous() override {}
  
  using Proxy_ = TraceRecorder_SynchronousProxy;
  virtual bool Record(
      const mojo::String& in_json)const= 0;
};

class TraceRecorder_SynchronousProxy
    : public TraceRecorder_Synchronous {
 public:
  explicit TraceRecorder_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Record(const mojo::String& in_json) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class TraceCollector_SynchronousProxy;
class TraceCollector_Synchronous
  : public internal::TraceCollector_Base {
 public:
  virtual ~TraceCollector_Synchronous() override {}
  
  using Proxy_ = TraceCollector_SynchronousProxy;
  virtual bool Start(
      mojo::ScopedDataPipeProducerHandle in_stream, const mojo::String& in_categories)const= 0;
  virtual bool StopAndFlush(
      )const= 0;
};

class TraceCollector_SynchronousProxy
    : public TraceCollector_Synchronous {
 public:
  explicit TraceCollector_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Start(mojo::ScopedDataPipeProducerHandle in_stream, const mojo::String& in_categories) const  override;
  bool StopAndFlush() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace tracing

#endif  // MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_SYNC_H_
