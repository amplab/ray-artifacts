// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_SYNC_H_
#define MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/surfaces/interfaces/surfaces.mojom-internal.h"
#include "mojo/services/surfaces/interfaces/surfaces.mojom-common.h"
#include "mojo/services/geometry/interfaces/geometry.mojom.h"
#include "mojo/services/surfaces/interfaces/quads.mojom.h"
#include "mojo/services/surfaces/interfaces/surface_id.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class ResourceReturner_SynchronousProxy;
class ResourceReturner_Synchronous
  : public internal::ResourceReturner_Base {
 public:
  virtual ~ResourceReturner_Synchronous() override {}
  
  using Proxy_ = ResourceReturner_SynchronousProxy;
  virtual bool ReturnResources(
      mojo::Array<ReturnedResourcePtr> in_resources)const= 0;
};

class ResourceReturner_SynchronousProxy
    : public ResourceReturner_Synchronous {
 public:
  explicit ResourceReturner_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool ReturnResources(mojo::Array<ReturnedResourcePtr> in_resources) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class Surface_SynchronousProxy;
class Surface_Synchronous
  : public internal::Surface_Base {
 public:
  virtual ~Surface_Synchronous() override {}
  
  using Proxy_ = Surface_SynchronousProxy;
  virtual bool GetIdNamespace(
      uint32_t* out_id_namespace)= 0;
  virtual bool SetResourceReturner(
      mojo::InterfaceHandle<ResourceReturner> in_returner)const= 0;
  virtual bool CreateSurface(
      uint32_t in_id_local)const= 0;
  virtual bool SubmitFrame(
      uint32_t in_id_local, FramePtr in_frame)= 0;
  virtual bool DestroySurface(
      uint32_t in_id_local)const= 0;
};

class Surface_SynchronousProxy
    : public Surface_Synchronous {
 public:
  explicit Surface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool GetIdNamespace(uint32_t* out_id_namespace) override;
  bool SetResourceReturner(mojo::InterfaceHandle<ResourceReturner> in_returner) const  override;
  bool CreateSurface(uint32_t in_id_local) const  override;
  bool SubmitFrame(uint32_t in_id_local, FramePtr in_frame) override;
  bool DestroySurface(uint32_t in_id_local) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_SYNC_H_
