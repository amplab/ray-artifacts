// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/file.mojom-internal.h"
#include "mojo/services/files/interfaces/types.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace files {



namespace internal {




#pragma pack(push, 1)



class Directory_Read_Params_Data {
 public:
  static Directory_Read_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  Directory_Read_Params_Data();
  ~Directory_Read_Params_Data() = delete;
};
static_assert(sizeof(Directory_Read_Params_Data) == 8,
              "Bad sizeof(Directory_Read_Params_Data)");

class Directory_Read_ResponseParams_Data {
 public:
  static Directory_Read_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::ArrayPointer<mojo::files::internal::DirectoryEntry_Data*> directory_contents;

 private:
  Directory_Read_ResponseParams_Data();
  ~Directory_Read_ResponseParams_Data() = delete;
};
static_assert(sizeof(Directory_Read_ResponseParams_Data) == 24,
              "Bad sizeof(Directory_Read_ResponseParams_Data)");


class Directory_Stat_Params_Data {
 public:
  static Directory_Stat_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  Directory_Stat_Params_Data();
  ~Directory_Stat_Params_Data() = delete;
};
static_assert(sizeof(Directory_Stat_Params_Data) == 8,
              "Bad sizeof(Directory_Stat_Params_Data)");

class Directory_Stat_ResponseParams_Data {
 public:
  static Directory_Stat_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::StructPointer<mojo::files::internal::FileInformation_Data> file_information;

 private:
  Directory_Stat_ResponseParams_Data();
  ~Directory_Stat_ResponseParams_Data() = delete;
};
static_assert(sizeof(Directory_Stat_ResponseParams_Data) == 24,
              "Bad sizeof(Directory_Stat_ResponseParams_Data)");


class Directory_Touch_Params_Data {
 public:
  static Directory_Touch_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::files::internal::TimespecOrNow_Data> atime;
  mojo::internal::StructPointer<mojo::files::internal::TimespecOrNow_Data> mtime;

 private:
  Directory_Touch_Params_Data();
  ~Directory_Touch_Params_Data() = delete;
};
static_assert(sizeof(Directory_Touch_Params_Data) == 24,
              "Bad sizeof(Directory_Touch_Params_Data)");

class Directory_Touch_ResponseParams_Data {
 public:
  static Directory_Touch_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Directory_Touch_ResponseParams_Data();
  ~Directory_Touch_ResponseParams_Data() = delete;
};
static_assert(sizeof(Directory_Touch_ResponseParams_Data) == 16,
              "Bad sizeof(Directory_Touch_ResponseParams_Data)");


class Directory_OpenFile_Params_Data {
 public:
  static Directory_OpenFile_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer path;
  mojo::MessagePipeHandle file;
  uint32_t open_flags;

 private:
  Directory_OpenFile_Params_Data();
  ~Directory_OpenFile_Params_Data() = delete;
};
static_assert(sizeof(Directory_OpenFile_Params_Data) == 24,
              "Bad sizeof(Directory_OpenFile_Params_Data)");

class Directory_OpenFile_ResponseParams_Data {
 public:
  static Directory_OpenFile_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Directory_OpenFile_ResponseParams_Data();
  ~Directory_OpenFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(Directory_OpenFile_ResponseParams_Data) == 16,
              "Bad sizeof(Directory_OpenFile_ResponseParams_Data)");


class Directory_OpenDirectory_Params_Data {
 public:
  static Directory_OpenDirectory_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer path;
  mojo::MessagePipeHandle directory;
  uint32_t open_flags;

 private:
  Directory_OpenDirectory_Params_Data();
  ~Directory_OpenDirectory_Params_Data() = delete;
};
static_assert(sizeof(Directory_OpenDirectory_Params_Data) == 24,
              "Bad sizeof(Directory_OpenDirectory_Params_Data)");

class Directory_OpenDirectory_ResponseParams_Data {
 public:
  static Directory_OpenDirectory_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Directory_OpenDirectory_ResponseParams_Data();
  ~Directory_OpenDirectory_ResponseParams_Data() = delete;
};
static_assert(sizeof(Directory_OpenDirectory_ResponseParams_Data) == 16,
              "Bad sizeof(Directory_OpenDirectory_ResponseParams_Data)");


class Directory_Rename_Params_Data {
 public:
  static Directory_Rename_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer path;
  mojo::internal::StringPointer new_path;

 private:
  Directory_Rename_Params_Data();
  ~Directory_Rename_Params_Data() = delete;
};
static_assert(sizeof(Directory_Rename_Params_Data) == 24,
              "Bad sizeof(Directory_Rename_Params_Data)");

class Directory_Rename_ResponseParams_Data {
 public:
  static Directory_Rename_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Directory_Rename_ResponseParams_Data();
  ~Directory_Rename_ResponseParams_Data() = delete;
};
static_assert(sizeof(Directory_Rename_ResponseParams_Data) == 16,
              "Bad sizeof(Directory_Rename_ResponseParams_Data)");


class Directory_Delete_Params_Data {
 public:
  static Directory_Delete_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer path;
  uint32_t delete_flags;
  uint8_t padfinal_[4];

 private:
  Directory_Delete_Params_Data();
  ~Directory_Delete_Params_Data() = delete;
};
static_assert(sizeof(Directory_Delete_Params_Data) == 24,
              "Bad sizeof(Directory_Delete_Params_Data)");

class Directory_Delete_ResponseParams_Data {
 public:
  static Directory_Delete_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Directory_Delete_ResponseParams_Data();
  ~Directory_Delete_ResponseParams_Data() = delete;
};
static_assert(sizeof(Directory_Delete_ResponseParams_Data) == 16,
              "Bad sizeof(Directory_Delete_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_DIRECTORY_MOJOM_INTERNAL_H_
