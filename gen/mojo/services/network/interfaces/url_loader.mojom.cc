// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/url_loader.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class URLLoader_Start_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  URLLoader_Start_ForwardToCallback(
      const URLLoader::StartCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  URLLoader::StartCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLLoader_Start_ForwardToCallback);
};
bool URLLoader_Start_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::URLLoader_Start_ResponseParams_Data* params =
      reinterpret_cast<internal::URLLoader_Start_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::URLResponsePtr p_response {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->response.ptr) {
      p_response = mojo::URLResponse::New();
      Deserialize_(params->response.ptr, p_response.get());
    }
  } while (false);
  callback_.Run(p_response.Pass());
  return true;
}
class URLLoader_FollowRedirect_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  URLLoader_FollowRedirect_ForwardToCallback(
      const URLLoader::FollowRedirectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  URLLoader::FollowRedirectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLLoader_FollowRedirect_ForwardToCallback);
};
bool URLLoader_FollowRedirect_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::URLLoader_FollowRedirect_ResponseParams_Data* params =
      reinterpret_cast<internal::URLLoader_FollowRedirect_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::URLResponsePtr p_response {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->response.ptr) {
      p_response = mojo::URLResponse::New();
      Deserialize_(params->response.ptr, p_response.get());
    }
  } while (false);
  callback_.Run(p_response.Pass());
  return true;
}
class URLLoader_QueryStatus_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  URLLoader_QueryStatus_ForwardToCallback(
      const URLLoader::QueryStatusCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  URLLoader::QueryStatusCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLLoader_QueryStatus_ForwardToCallback);
};
bool URLLoader_QueryStatus_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::URLLoader_QueryStatus_ResponseParams_Data* params =
      reinterpret_cast<internal::URLLoader_QueryStatus_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  URLLoaderStatusPtr p_status {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->status.ptr) {
      p_status = URLLoaderStatus::New();
      Deserialize_(params->status.ptr, p_status.get());
    }
  } while (false);
  callback_.Run(p_status.Pass());
  return true;
}

URLLoaderProxy::URLLoaderProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void URLLoaderProxy::Start(
    mojo::URLRequestPtr in_request, const StartCallback& callback) {
  size_t size = sizeof(internal::URLLoader_Start_Params_Data);
  size += in_request.is_null()
              ? 0
              : GetSerializedSize_(*in_request);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::URLLoader_Base::MessageOrdinals::Start), size);

  internal::URLLoader_Start_Params_Data* params =
      internal::URLLoader_Start_Params_Data::New(builder.buffer());
  {Serialize_(in_request.get(),
               builder.buffer(),
               &params->request.ptr);
  }
  if (!params->request.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null request in URLLoader.Start request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new URLLoader_Start_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void URLLoaderProxy::FollowRedirect(
    const FollowRedirectCallback& callback) {
  size_t size = sizeof(internal::URLLoader_FollowRedirect_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::URLLoader_Base::MessageOrdinals::FollowRedirect), size);

  internal::URLLoader_FollowRedirect_Params_Data* params =
      internal::URLLoader_FollowRedirect_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new URLLoader_FollowRedirect_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void URLLoaderProxy::QueryStatus(
    const QueryStatusCallback& callback) {
  size_t size = sizeof(internal::URLLoader_QueryStatus_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::URLLoader_Base::MessageOrdinals::QueryStatus), size);

  internal::URLLoader_QueryStatus_Params_Data* params =
      internal::URLLoader_QueryStatus_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new URLLoader_QueryStatus_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class URLLoader_Start_ProxyToResponder
    : public URLLoader::StartCallback::Runnable {
 public:
  ~URLLoader_Start_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "URLLoader::Start(p_request.Pass(), callback) "
        "was never run.";
  }

  URLLoader_Start_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::URLResponsePtr in_response) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLLoader_Start_ProxyToResponder);
};

void URLLoader_Start_ProxyToResponder::Run(
    mojo::URLResponsePtr in_response) const {
  size_t size = sizeof(internal::URLLoader_Start_ResponseParams_Data);
  size += in_response.is_null()
              ? 0
              : GetSerializedSize_(*in_response);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::URLLoader_Base::MessageOrdinals::Start), size, request_id_);
  internal::URLLoader_Start_ResponseParams_Data* params =
      internal::URLLoader_Start_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_response.get(),
               builder.buffer(),
               &params->response.ptr);
  }
  if (!params->response.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in URLLoader.Start response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class URLLoader_FollowRedirect_ProxyToResponder
    : public URLLoader::FollowRedirectCallback::Runnable {
 public:
  ~URLLoader_FollowRedirect_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "URLLoader::FollowRedirect(callback) "
        "was never run.";
  }

  URLLoader_FollowRedirect_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::URLResponsePtr in_response) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLLoader_FollowRedirect_ProxyToResponder);
};

void URLLoader_FollowRedirect_ProxyToResponder::Run(
    mojo::URLResponsePtr in_response) const {
  size_t size = sizeof(internal::URLLoader_FollowRedirect_ResponseParams_Data);
  size += in_response.is_null()
              ? 0
              : GetSerializedSize_(*in_response);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::URLLoader_Base::MessageOrdinals::FollowRedirect), size, request_id_);
  internal::URLLoader_FollowRedirect_ResponseParams_Data* params =
      internal::URLLoader_FollowRedirect_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_response.get(),
               builder.buffer(),
               &params->response.ptr);
  }
  if (!params->response.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in URLLoader.FollowRedirect response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class URLLoader_QueryStatus_ProxyToResponder
    : public URLLoader::QueryStatusCallback::Runnable {
 public:
  ~URLLoader_QueryStatus_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "URLLoader::QueryStatus(callback) "
        "was never run.";
  }

  URLLoader_QueryStatus_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(URLLoaderStatusPtr in_status) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(URLLoader_QueryStatus_ProxyToResponder);
};

void URLLoader_QueryStatus_ProxyToResponder::Run(
    URLLoaderStatusPtr in_status) const {
  size_t size = sizeof(internal::URLLoader_QueryStatus_ResponseParams_Data);
  size += in_status.is_null()
              ? 0
              : GetSerializedSize_(*in_status);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::URLLoader_Base::MessageOrdinals::QueryStatus), size, request_id_);
  internal::URLLoader_QueryStatus_ResponseParams_Data* params =
      internal::URLLoader_QueryStatus_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_status.get(),
               builder.buffer(),
               &params->status.ptr);
  }
  if (!params->status.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null status in URLLoader.QueryStatus response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

URLLoaderStub::URLLoaderStub()
    : sink_(nullptr),
      control_message_handler_(URLLoader::Version_) {
}

URLLoaderStub::~URLLoaderStub() {}

bool URLLoaderStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::URLLoader_Base::MessageOrdinals method_ordinal =
      static_cast<internal::URLLoader_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::URLLoader_Base::MessageOrdinals::Start: {
      break;
    }
    case internal::URLLoader_Base::MessageOrdinals::FollowRedirect: {
      break;
    }
    case internal::URLLoader_Base::MessageOrdinals::QueryStatus: {
      break;
    }
  }
  return false;
}

bool URLLoaderStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::URLLoader_Base::MessageOrdinals method_ordinal =
      static_cast<internal::URLLoader_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::URLLoader_Base::MessageOrdinals::Start: {
      internal::URLLoader_Start_Params_Data* params =
          reinterpret_cast<internal::URLLoader_Start_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      URLLoader::StartCallback::Runnable* runnable =
          new URLLoader_Start_ProxyToResponder(
              message->request_id(), responder);
      URLLoader::StartCallback callback(runnable);
      
      mojo::URLRequestPtr p_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->request.ptr) {
          p_request = mojo::URLRequest::New();
          Deserialize_(params->request.ptr, p_request.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Start(p_request.Pass(), callback);
      return true;
    }
    case internal::URLLoader_Base::MessageOrdinals::FollowRedirect: {
      internal::URLLoader_FollowRedirect_Params_Data* params =
          reinterpret_cast<internal::URLLoader_FollowRedirect_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      URLLoader::FollowRedirectCallback::Runnable* runnable =
          new URLLoader_FollowRedirect_ProxyToResponder(
              message->request_id(), responder);
      URLLoader::FollowRedirectCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->FollowRedirect(callback);
      return true;
    }
    case internal::URLLoader_Base::MessageOrdinals::QueryStatus: {
      internal::URLLoader_QueryStatus_Params_Data* params =
          reinterpret_cast<internal::URLLoader_QueryStatus_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      URLLoader::QueryStatusCallback::Runnable* runnable =
          new URLLoader_QueryStatus_ProxyToResponder(
              message->request_id(), responder);
      URLLoader::QueryStatusCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->QueryStatus(callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
