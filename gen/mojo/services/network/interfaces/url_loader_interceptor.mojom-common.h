// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom-internal.h"
#include "mojo/public/interfaces/network/url_request.mojom-common.h"
#include "mojo/public/interfaces/network/url_response.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class URLLoaderInterceptorFactory;
class URLLoaderInterceptorFactoryRequestValidator;
class URLLoaderInterceptorFactory_Synchronous;
class URLLoaderInterceptor;
class URLLoaderInterceptorRequestValidator;
class URLLoaderInterceptorResponseValidator;
class URLLoaderInterceptor_Synchronous;

// --- Struct Forward Declarations ---
class URLLoaderInterceptorResponse;

using URLLoaderInterceptorResponsePtr = mojo::StructPtr<URLLoaderInterceptorResponse>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class URLLoaderInterceptorFactory_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = URLLoaderInterceptorFactoryRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = URLLoaderInterceptorFactory_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Create = 0,
  };


  virtual ~URLLoaderInterceptorFactory_Base() {}
};

}  // namespace internal

// Async interface declaration

class URLLoaderInterceptorFactoryProxy;
class URLLoaderInterceptorFactoryStub;
class URLLoaderInterceptorFactory_Synchronous;

class URLLoaderInterceptorFactoryRequestValidator;

class URLLoaderInterceptorFactory : public internal::URLLoaderInterceptorFactory_Base {
 public:
  virtual ~URLLoaderInterceptorFactory() override {}

  using Proxy_ = URLLoaderInterceptorFactoryProxy;
  using Stub_ = URLLoaderInterceptorFactoryStub;
  virtual void Create(mojo::InterfaceRequest<URLLoaderInterceptor> interceptor) = 0;
};

namespace internal {
class URLLoaderInterceptor_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = URLLoaderInterceptorRequestValidator;
  using ResponseValidator_ = URLLoaderInterceptorResponseValidator;
  using Synchronous_ = URLLoaderInterceptor_Synchronous;
  enum class MessageOrdinals : uint32_t {
    InterceptRequest = 0,
    InterceptFollowRedirect = 1,
    InterceptResponse = 2,
  };


  virtual ~URLLoaderInterceptor_Base() {}
};

}  // namespace internal

// Async interface declaration

class URLLoaderInterceptorProxy;
class URLLoaderInterceptorStub;
class URLLoaderInterceptor_Synchronous;

class URLLoaderInterceptorRequestValidator;
class URLLoaderInterceptorResponseValidator;

class URLLoaderInterceptor : public internal::URLLoaderInterceptor_Base {
 public:
  virtual ~URLLoaderInterceptor() override {}

  using Proxy_ = URLLoaderInterceptorProxy;
  using Stub_ = URLLoaderInterceptorStub;
  using InterceptRequestCallback = mojo::Callback<void(URLLoaderInterceptorResponsePtr)>;
  virtual void InterceptRequest(mojo::URLRequestPtr request, const InterceptRequestCallback& callback) = 0;
  using InterceptFollowRedirectCallback = mojo::Callback<void(URLLoaderInterceptorResponsePtr)>;
  virtual void InterceptFollowRedirect(const InterceptFollowRedirectCallback& callback) = 0;
  using InterceptResponseCallback = mojo::Callback<void(URLLoaderInterceptorResponsePtr)>;
  virtual void InterceptResponse(mojo::URLResponsePtr response, const InterceptResponseCallback& callback) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::URLLoaderInterceptorResponsePtr, true, false> {
  using DataType = mojo::internal::URLLoaderInterceptorResponse_Data*;
};

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class URLLoaderInterceptorFactoryRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class URLLoaderInterceptorRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class URLLoaderInterceptorResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class URLLoaderInterceptorResponse {
 public:
  using Data_ = internal::URLLoaderInterceptorResponse_Data;

  static URLLoaderInterceptorResponsePtr New();

  template <typename U>
  static URLLoaderInterceptorResponsePtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptorResponsePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptorResponse>::Convert(*this);
  }

  URLLoaderInterceptorResponse();
  ~URLLoaderInterceptorResponse();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoaderInterceptorResponse& other) const;

  mojo::URLRequestPtr request;
  mojo::URLResponsePtr response;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const URLLoaderInterceptorResponse& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptorResponse* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptorResponse_Data** output);
void Deserialize_(internal::URLLoaderInterceptorResponse_Data* input,
                  URLLoaderInterceptorResponse* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class URLLoaderInterceptorFactory_Create_Params;

using URLLoaderInterceptorFactory_Create_ParamsPtr = mojo::StructPtr<URLLoaderInterceptorFactory_Create_Params>;


size_t GetSerializedSize_(const URLLoaderInterceptorFactory_Create_Params& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptorFactory_Create_Params* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptorFactory_Create_Params_Data** output);
void Deserialize_(internal::URLLoaderInterceptorFactory_Create_Params_Data* input,
                  URLLoaderInterceptorFactory_Create_Params* output);

class URLLoaderInterceptorFactory_Create_Params {
 public:
  using Data_ = internal::URLLoaderInterceptorFactory_Create_Params_Data;

  static URLLoaderInterceptorFactory_Create_ParamsPtr New();

  template <typename U>
  static URLLoaderInterceptorFactory_Create_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptorFactory_Create_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptorFactory_Create_Params>::Convert(*this);
  }

  URLLoaderInterceptorFactory_Create_Params();
  ~URLLoaderInterceptorFactory_Create_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoaderInterceptorFactory_Create_Params& other) const;

  mojo::InterfaceRequest<URLLoaderInterceptor> interceptor;
};



      

class URLLoaderInterceptor_InterceptRequest_Params;

using URLLoaderInterceptor_InterceptRequest_ParamsPtr = mojo::StructPtr<URLLoaderInterceptor_InterceptRequest_Params>;


size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptRequest_Params& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptRequest_Params* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptor_InterceptRequest_Params_Data** output);
void Deserialize_(internal::URLLoaderInterceptor_InterceptRequest_Params_Data* input,
                  URLLoaderInterceptor_InterceptRequest_Params* output);

class URLLoaderInterceptor_InterceptRequest_Params {
 public:
  using Data_ = internal::URLLoaderInterceptor_InterceptRequest_Params_Data;

  static URLLoaderInterceptor_InterceptRequest_ParamsPtr New();

  template <typename U>
  static URLLoaderInterceptor_InterceptRequest_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptor_InterceptRequest_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptor_InterceptRequest_Params>::Convert(*this);
  }

  URLLoaderInterceptor_InterceptRequest_Params();
  ~URLLoaderInterceptor_InterceptRequest_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoaderInterceptor_InterceptRequest_Params& other) const;

  mojo::URLRequestPtr request;
};



class URLLoaderInterceptor_InterceptRequest_ResponseParams;

using URLLoaderInterceptor_InterceptRequest_ResponseParamsPtr = mojo::StructPtr<URLLoaderInterceptor_InterceptRequest_ResponseParams>;


size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptRequest_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptRequest_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data** output);
void Deserialize_(internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data* input,
                  URLLoaderInterceptor_InterceptRequest_ResponseParams* output);

class URLLoaderInterceptor_InterceptRequest_ResponseParams {
 public:
  using Data_ = internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data;

  static URLLoaderInterceptor_InterceptRequest_ResponseParamsPtr New();

  template <typename U>
  static URLLoaderInterceptor_InterceptRequest_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptor_InterceptRequest_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptor_InterceptRequest_ResponseParams>::Convert(*this);
  }

  URLLoaderInterceptor_InterceptRequest_ResponseParams();
  ~URLLoaderInterceptor_InterceptRequest_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoaderInterceptor_InterceptRequest_ResponseParams& other) const;

  URLLoaderInterceptorResponsePtr response;
};



class URLLoaderInterceptor_InterceptFollowRedirect_Params;

using URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr = mojo::InlinedStructPtr<URLLoaderInterceptor_InterceptFollowRedirect_Params>;


size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptFollowRedirect_Params& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptFollowRedirect_Params* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data** output);
void Deserialize_(internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data* input,
                  URLLoaderInterceptor_InterceptFollowRedirect_Params* output);

class URLLoaderInterceptor_InterceptFollowRedirect_Params {
 public:
  using Data_ = internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data;

  static URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr New();

  template <typename U>
  static URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptor_InterceptFollowRedirect_Params>::Convert(*this);
  }

  URLLoaderInterceptor_InterceptFollowRedirect_Params();
  ~URLLoaderInterceptor_InterceptFollowRedirect_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr Clone() const;
  bool Equals(const URLLoaderInterceptor_InterceptFollowRedirect_Params& other) const;

};



class URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams;

using URLLoaderInterceptor_InterceptFollowRedirect_ResponseParamsPtr = mojo::StructPtr<URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams>;


size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data** output);
void Deserialize_(internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data* input,
                  URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams* output);

class URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams {
 public:
  using Data_ = internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data;

  static URLLoaderInterceptor_InterceptFollowRedirect_ResponseParamsPtr New();

  template <typename U>
  static URLLoaderInterceptor_InterceptFollowRedirect_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptor_InterceptFollowRedirect_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams>::Convert(*this);
  }

  URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams();
  ~URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams& other) const;

  URLLoaderInterceptorResponsePtr response;
};



class URLLoaderInterceptor_InterceptResponse_Params;

using URLLoaderInterceptor_InterceptResponse_ParamsPtr = mojo::StructPtr<URLLoaderInterceptor_InterceptResponse_Params>;


size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptResponse_Params& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptResponse_Params* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptor_InterceptResponse_Params_Data** output);
void Deserialize_(internal::URLLoaderInterceptor_InterceptResponse_Params_Data* input,
                  URLLoaderInterceptor_InterceptResponse_Params* output);

class URLLoaderInterceptor_InterceptResponse_Params {
 public:
  using Data_ = internal::URLLoaderInterceptor_InterceptResponse_Params_Data;

  static URLLoaderInterceptor_InterceptResponse_ParamsPtr New();

  template <typename U>
  static URLLoaderInterceptor_InterceptResponse_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptor_InterceptResponse_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptor_InterceptResponse_Params>::Convert(*this);
  }

  URLLoaderInterceptor_InterceptResponse_Params();
  ~URLLoaderInterceptor_InterceptResponse_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoaderInterceptor_InterceptResponse_Params& other) const;

  mojo::URLResponsePtr response;
};



class URLLoaderInterceptor_InterceptResponse_ResponseParams;

using URLLoaderInterceptor_InterceptResponse_ResponseParamsPtr = mojo::StructPtr<URLLoaderInterceptor_InterceptResponse_ResponseParams>;


size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptResponse_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptResponse_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data** output);
void Deserialize_(internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data* input,
                  URLLoaderInterceptor_InterceptResponse_ResponseParams* output);

class URLLoaderInterceptor_InterceptResponse_ResponseParams {
 public:
  using Data_ = internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data;

  static URLLoaderInterceptor_InterceptResponse_ResponseParamsPtr New();

  template <typename U>
  static URLLoaderInterceptor_InterceptResponse_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<URLLoaderInterceptor_InterceptResponse_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLLoaderInterceptor_InterceptResponse_ResponseParams>::Convert(*this);
  }

  URLLoaderInterceptor_InterceptResponse_ResponseParams();
  ~URLLoaderInterceptor_InterceptResponse_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const URLLoaderInterceptor_InterceptResponse_ResponseParams& other) const;

  URLLoaderInterceptorResponsePtr response;
};


}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_COMMON_H_
