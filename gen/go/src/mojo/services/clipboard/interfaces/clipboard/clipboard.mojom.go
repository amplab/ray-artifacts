// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/clipboard/interfaces/clipboard.mojom
//

package clipboard

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type Clipboard_Type int32

const (
	Clipboard_Type_CopyPaste Clipboard_Type = 0
	Clipboard_Type_Selection = 1
	Clipboard_Type_Drag = 2
)


type Clipboard interface {
	GetSequenceNumber(inClipboardType Clipboard_Type) (outSequence uint64, err error)
	GetAvailableMimeTypes(inClipboardTypes Clipboard_Type) (outTypes []string, err error)
	ReadMimeType(inClipboardType Clipboard_Type, inMimeType string) (outData *[]uint8, err error)
	WriteClipboardData(inClipboardType Clipboard_Type, inData *map[string][]uint8) (err error)
}



var clipboard_Name = "mojo::Clipboard"

type Clipboard_Request bindings.InterfaceRequest

func (r *Clipboard_Request) Name() string {
	return clipboard_Name
}


type Clipboard_Pointer bindings.InterfacePointer

func (p *Clipboard_Pointer) Name() string {
	return clipboard_Name
}

type Clipboard_ServiceFactory struct{
	Delegate Clipboard_Factory
}

type Clipboard_Factory interface {
	Create(request Clipboard_Request)
}

func (f *Clipboard_ServiceFactory) Name() string {
	return clipboard_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Clipboard_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Clipboard_ServiceDescription{}
}

func (f *Clipboard_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Clipboard_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForClipboard creates a message pipe for use with the
// Clipboard interface with a Clipboard_Request on one end and a Clipboard_Pointer on the other.
func CreateMessagePipeForClipboard() (Clipboard_Request, Clipboard_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Clipboard_Request(r), Clipboard_Pointer(p)
}

const clipboard_GetSequenceNumber_Name uint32 = 0
const clipboard_GetAvailableMimeTypes_Name uint32 = 1
const clipboard_ReadMimeType_Name uint32 = 2
const clipboard_WriteClipboardData_Name uint32 = 3

type Clipboard_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewClipboardProxy(p Clipboard_Pointer, waiter bindings.AsyncWaiter) *Clipboard_Proxy {
	return &Clipboard_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Clipboard_Proxy) Close_Proxy() {
	p.router.Close()
}

type clipboard_GetSequenceNumber_Params struct {
	inClipboardType Clipboard_Type
}


func (s *clipboard_GetSequenceNumber_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.inClipboardType)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var clipboard_GetSequenceNumber_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *clipboard_GetSequenceNumber_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(clipboard_GetSequenceNumber_Params_Versions), func(i int) bool {
		return clipboard_GetSequenceNumber_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(clipboard_GetSequenceNumber_Params_Versions) {
		if clipboard_GetSequenceNumber_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := clipboard_GetSequenceNumber_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inClipboardType = Clipboard_Type(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type clipboard_GetSequenceNumber_ResponseParams struct {
	outSequence uint64
}


func (s *clipboard_GetSequenceNumber_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint64(s.outSequence); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var clipboard_GetSequenceNumber_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *clipboard_GetSequenceNumber_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(clipboard_GetSequenceNumber_ResponseParams_Versions), func(i int) bool {
		return clipboard_GetSequenceNumber_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(clipboard_GetSequenceNumber_ResponseParams_Versions) {
		if clipboard_GetSequenceNumber_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := clipboard_GetSequenceNumber_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint64()
		if err != nil {
			return err
		}
		s.outSequence = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Clipboard_Proxy) GetSequenceNumber(inClipboardType Clipboard_Type) (outSequence uint64, err error) {
	payload := &clipboard_GetSequenceNumber_Params{
		inClipboardType,
	}
	header := bindings.MessageHeader{
		Type: clipboard_GetSequenceNumber_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, clipboard_GetSequenceNumber_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response clipboard_GetSequenceNumber_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outSequence = response.outSequence
	return
}

type clipboard_GetAvailableMimeTypes_Params struct {
	inClipboardTypes Clipboard_Type
}


func (s *clipboard_GetAvailableMimeTypes_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.inClipboardTypes)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var clipboard_GetAvailableMimeTypes_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *clipboard_GetAvailableMimeTypes_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(clipboard_GetAvailableMimeTypes_Params_Versions), func(i int) bool {
		return clipboard_GetAvailableMimeTypes_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(clipboard_GetAvailableMimeTypes_Params_Versions) {
		if clipboard_GetAvailableMimeTypes_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := clipboard_GetAvailableMimeTypes_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inClipboardTypes = Clipboard_Type(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type clipboard_GetAvailableMimeTypes_ResponseParams struct {
	outTypes []string
}


func (s *clipboard_GetAvailableMimeTypes_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.outTypes)), 64)
	for _, elem0 := range s.outTypes {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var clipboard_GetAvailableMimeTypes_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *clipboard_GetAvailableMimeTypes_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(clipboard_GetAvailableMimeTypes_ResponseParams_Versions), func(i int) bool {
		return clipboard_GetAvailableMimeTypes_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(clipboard_GetAvailableMimeTypes_ResponseParams_Versions) {
		if clipboard_GetAvailableMimeTypes_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := clipboard_GetAvailableMimeTypes_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.outTypes = make([]string, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					value1, err := decoder.ReadString()
					if err != nil {
						return err
					}
					s.outTypes[i0] = value1
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Clipboard_Proxy) GetAvailableMimeTypes(inClipboardTypes Clipboard_Type) (outTypes []string, err error) {
	payload := &clipboard_GetAvailableMimeTypes_Params{
		inClipboardTypes,
	}
	header := bindings.MessageHeader{
		Type: clipboard_GetAvailableMimeTypes_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, clipboard_GetAvailableMimeTypes_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response clipboard_GetAvailableMimeTypes_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outTypes = response.outTypes
	return
}

type clipboard_ReadMimeType_Params struct {
	inClipboardType Clipboard_Type
	inMimeType string
}


func (s *clipboard_ReadMimeType_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(int32(s.inClipboardType)); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inMimeType); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var clipboard_ReadMimeType_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *clipboard_ReadMimeType_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(clipboard_ReadMimeType_Params_Versions), func(i int) bool {
		return clipboard_ReadMimeType_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(clipboard_ReadMimeType_Params_Versions) {
		if clipboard_ReadMimeType_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := clipboard_ReadMimeType_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inClipboardType = Clipboard_Type(value0)
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inMimeType = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type clipboard_ReadMimeType_ResponseParams struct {
	outData *[]uint8
}


func (s *clipboard_ReadMimeType_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.outData == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.outData))), 8)
		for _, elem0 := range (*s.outData) {
			if err := encoder.WriteUint8(elem0); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var clipboard_ReadMimeType_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *clipboard_ReadMimeType_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(clipboard_ReadMimeType_ResponseParams_Versions), func(i int) bool {
		return clipboard_ReadMimeType_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(clipboard_ReadMimeType_ResponseParams_Versions) {
		if clipboard_ReadMimeType_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := clipboard_ReadMimeType_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outData = nil
		} else {
			s.outData = new([]uint8)
			len0, err := decoder.StartArray(8)
			if err != nil {
				return err
			}
			(*s.outData) = make([]uint8, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadUint8()
				if err != nil {
					return err
				}
				(*s.outData)[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Clipboard_Proxy) ReadMimeType(inClipboardType Clipboard_Type, inMimeType string) (outData *[]uint8, err error) {
	payload := &clipboard_ReadMimeType_Params{
		inClipboardType,
		inMimeType,
	}
	header := bindings.MessageHeader{
		Type: clipboard_ReadMimeType_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, clipboard_ReadMimeType_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response clipboard_ReadMimeType_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outData = response.outData
	return
}

type clipboard_WriteClipboardData_Params struct {
	inClipboardType Clipboard_Type
	inData *map[string][]uint8
}


func (s *clipboard_WriteClipboardData_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(int32(s.inClipboardType)); err != nil {
		return err
	}
	if s.inData == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartMap()
		{
			var keys0 []string
			var values0 [][]uint8
			if encoder.Deterministic() {
			  for key0, _ := range (*s.inData) {
				keys0 = append(keys0, key0)
			  }
			  bindings.SortMapKeys(&keys0)
			  values0 = make([][]uint8, len(keys0))
			  for i, key := range keys0 {
			    values0[i] = (*s.inData)[key]
			  }
			} else {
			  for key0, value0 := range (*s.inData) {
				keys0 = append(keys0, key0)
				values0 = append(values0, value0)
			  }
			}
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(keys0)), 64)
			for _, elem1 := range keys0 {
				if err := encoder.WritePointer(); err != nil {
					return err
				}
				if err := encoder.WriteString(elem1); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(values0)), 64)
			for _, elem1 := range values0 {
				if err := encoder.WritePointer(); err != nil {
					return err
				}
				encoder.StartArray(uint32(len(elem1)), 8)
				for _, elem2 := range elem1 {
					if err := encoder.WriteUint8(elem2); err != nil {
						return err
					}
				}
				if err := encoder.Finish(); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var clipboard_WriteClipboardData_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *clipboard_WriteClipboardData_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(clipboard_WriteClipboardData_Params_Versions), func(i int) bool {
		return clipboard_WriteClipboardData_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(clipboard_WriteClipboardData_Params_Versions) {
		if clipboard_WriteClipboardData_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := clipboard_WriteClipboardData_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inClipboardType = Clipboard_Type(value0)
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inData = nil
		} else {
			s.inData = new(map[string][]uint8)
			if err := decoder.StartMap(); err != nil {
				return err
			}
			var keys0 []string
			{
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(64)
					if err != nil {
						return err
					}
					keys0 = make([]string, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						pointer2, err := decoder.ReadPointer()
						if err != nil {
							return err
						}
						if pointer2 == 0 {
							return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
						} else {
							value2, err := decoder.ReadString()
							if err != nil {
								return err
							}
							keys0[i1] = value2
						}
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			var values0 [][]uint8
			{
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(64)
					if err != nil {
						return err
					}
					values0 = make([][]uint8, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						pointer2, err := decoder.ReadPointer()
						if err != nil {
							return err
						}
						if pointer2 == 0 {
							return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
						} else {
							len2, err := decoder.StartArray(8)
							if err != nil {
								return err
							}
							values0[i1] = make([]uint8, len2)
							for i2 := uint32(0); i2 < len2; i2++ {
								value3, err := decoder.ReadUint8()
								if err != nil {
									return err
								}
								values0[i1][i2] = value3
							}
							if err := decoder.Finish(); err != nil {
								return err
							}
						}
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			if len(keys0) != len(values0) {
				return &bindings.ValidationError{bindings.DifferentSizedArraysInMap,
					fmt.Sprintf("Number of keys %d is different from number of values %d", len(keys0), len(values0)),
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
			len0 := len(keys0)
			map0 := make(map[string][]uint8)
			for i0 := 0; i0 < len0; i0++ {
				map0[keys0[i0]] = values0[i0]
			}
			(*s.inData) = map0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Clipboard_Proxy) WriteClipboardData(inClipboardType Clipboard_Type, inData *map[string][]uint8) (err error) {
	payload := &clipboard_WriteClipboardData_Params{
		inClipboardType,
		inData,
	}
	header := bindings.MessageHeader{
		Type: clipboard_WriteClipboardData_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type clipboard_Stub struct {
	connector *bindings.Connector
	impl Clipboard
}

func NewClipboardStub(r Clipboard_Request, impl Clipboard, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &clipboard_Stub{connector, impl})
}


func (f *Clipboard_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Clipboard_ServiceDescription{}
}


type Clipboard_ServiceDescription struct{}

func (sd *Clipboard_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Clipboard_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Clipboard_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Clipboard_ServiceDescription)(nil)


func (s *clipboard_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case clipboard_GetSequenceNumber_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request clipboard_GetSequenceNumber_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response clipboard_GetSequenceNumber_ResponseParams
		response.outSequence, err = s.impl.GetSequenceNumber(request.inClipboardType)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: clipboard_GetSequenceNumber_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case clipboard_GetAvailableMimeTypes_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request clipboard_GetAvailableMimeTypes_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response clipboard_GetAvailableMimeTypes_ResponseParams
		response.outTypes, err = s.impl.GetAvailableMimeTypes(request.inClipboardTypes)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: clipboard_GetAvailableMimeTypes_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case clipboard_ReadMimeType_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request clipboard_ReadMimeType_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response clipboard_ReadMimeType_ResponseParams
		response.outData, err = s.impl.ReadMimeType(request.inClipboardType, request.inMimeType)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: clipboard_ReadMimeType_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case clipboard_WriteClipboardData_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request clipboard_WriteClipboardData_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.WriteClipboardData(request.inClipboardType, request.inData)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

