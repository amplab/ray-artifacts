// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_SYNC_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/network/interfaces/http_connection.mojom-internal.h"
#include "mojo/services/network/interfaces/http_connection.mojom-common.h"
#include "mojo/public/interfaces/network/network_error.mojom.h"
#include "mojo/services/network/interfaces/http_message.mojom.h"
#include "mojo/services/network/interfaces/web_socket.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class HttpConnection_SynchronousProxy;
class HttpConnection_Synchronous
  : public internal::HttpConnection_Base {
 public:
  virtual ~HttpConnection_Synchronous() override {}
  
  using Proxy_ = HttpConnection_SynchronousProxy;
  virtual bool SetSendBufferSize(
      uint32_t in_size, mojo::NetworkErrorPtr* out_result)= 0;
  virtual bool SetReceiveBufferSize(
      uint32_t in_size, mojo::NetworkErrorPtr* out_result)= 0;
};

class HttpConnection_SynchronousProxy
    : public HttpConnection_Synchronous {
 public:
  explicit HttpConnection_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool SetSendBufferSize(uint32_t in_size, mojo::NetworkErrorPtr* out_result) override;
  bool SetReceiveBufferSize(uint32_t in_size, mojo::NetworkErrorPtr* out_result) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class HttpConnectionDelegate_SynchronousProxy;
class HttpConnectionDelegate_Synchronous
  : public internal::HttpConnectionDelegate_Base {
 public:
  virtual ~HttpConnectionDelegate_Synchronous() override {}
  
  using Proxy_ = HttpConnectionDelegate_SynchronousProxy;
  virtual bool OnReceivedRequest(
      mojo::HttpRequestPtr in_request, mojo::HttpResponsePtr* out_response)= 0;
  virtual bool OnReceivedWebSocketRequest(
      mojo::HttpRequestPtr in_request, mojo::InterfaceRequest<mojo::WebSocket>* out_web_socket, mojo::ScopedDataPipeConsumerHandle* out_send_stream, mojo::InterfaceHandle<mojo::WebSocketClient>* out_client)= 0;
};

class HttpConnectionDelegate_SynchronousProxy
    : public HttpConnectionDelegate_Synchronous {
 public:
  explicit HttpConnectionDelegate_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool OnReceivedRequest(mojo::HttpRequestPtr in_request, mojo::HttpResponsePtr* out_response) override;
  bool OnReceivedWebSocketRequest(mojo::HttpRequestPtr in_request, mojo::InterfaceRequest<mojo::WebSocket>* out_web_socket, mojo::ScopedDataPipeConsumerHandle* out_send_stream, mojo::InterfaceHandle<mojo::WebSocketClient>* out_client) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_SYNC_H_
