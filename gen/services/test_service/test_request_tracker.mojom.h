// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_H_
#define SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "services/test_service/test_request_tracker.mojom-common.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---

using TestTrackedRequestServicePtr = mojo::InterfacePtr<TestTrackedRequestService>;

using TestRequestTrackerPtr = mojo::InterfacePtr<TestRequestTracker>;


// --- Interface Proxies ---


class TestTrackedRequestServiceProxy
    : public TestTrackedRequestService,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TestTrackedRequestServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  void GetReport(
      const GetReportCallback& callback
  ) override;
};


class TestRequestTrackerProxy
    : public TestRequestTracker,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TestRequestTrackerProxy(mojo::MessageReceiverWithResponder* receiver);
  void SetNameAndReturnId(
      const mojo::String& service_name, const SetNameAndReturnIdCallback& callback
  ) override;
  void RecordStats(
      uint64_t client_id, ServiceStatsPtr stats
  ) override;
};


// --- Interface Stubs ---

class TestTrackedRequestServiceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TestTrackedRequestServiceStub();
  ~TestTrackedRequestServiceStub() override;
  void set_sink(TestTrackedRequestService* sink) { sink_ = sink; }
  TestTrackedRequestService* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TestTrackedRequestService* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class TestRequestTrackerStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TestRequestTrackerStub();
  ~TestRequestTrackerStub() override;
  void set_sink(TestRequestTracker* sink) { sink_ = sink; }
  TestRequestTracker* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TestRequestTracker* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace test
}  // namespace mojo

#endif  // SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_H_
