// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_SYNC_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-common.h"


namespace mojo {
namespace test {

// --- Synchronous interface declaration ---

class InterfaceA_SynchronousProxy;
class InterfaceA_Synchronous
  : public internal::InterfaceA_Base {
 public:
  virtual ~InterfaceA_Synchronous() override {}
  
  using Proxy_ = InterfaceA_SynchronousProxy;
};

class InterfaceA_SynchronousProxy
    : public InterfaceA_Synchronous {
 public:
  explicit InterfaceA_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class BoundsCheckTestInterface_SynchronousProxy;
class BoundsCheckTestInterface_Synchronous
  : public internal::BoundsCheckTestInterface_Base {
 public:
  virtual ~BoundsCheckTestInterface_Synchronous() override {}
  
  using Proxy_ = BoundsCheckTestInterface_SynchronousProxy;
  virtual bool Method0(
      uint8_t in_param0, uint8_t* out_param0)= 0;
  virtual bool Method1(
      uint8_t in_param0)const= 0;
};

class BoundsCheckTestInterface_SynchronousProxy
    : public BoundsCheckTestInterface_Synchronous {
 public:
  explicit BoundsCheckTestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Method0(uint8_t in_param0, uint8_t* out_param0) override;
  bool Method1(uint8_t in_param0) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class ConformanceTestInterface_SynchronousProxy;
class ConformanceTestInterface_Synchronous
  : public internal::ConformanceTestInterface_Base {
 public:
  virtual ~ConformanceTestInterface_Synchronous() override {}
  
  using Proxy_ = ConformanceTestInterface_SynchronousProxy;
  virtual bool Method0(
      float in_param0)const= 0;
  virtual bool Method1(
      StructAPtr in_param0)const= 0;
  virtual bool Method2(
      StructBPtr in_param0, StructAPtr in_param1)const= 0;
  virtual bool Method3(
      mojo::Array<bool> in_param0)const= 0;
  virtual bool Method4(
      StructCPtr in_param0, mojo::Array<uint8_t> in_param1)const= 0;
  virtual bool Method5(
      StructEPtr in_param0, mojo::ScopedDataPipeProducerHandle in_param1)const= 0;
  virtual bool Method6(
      mojo::Array<mojo::Array<uint8_t> > in_param0)const= 0;
  virtual bool Method7(
      StructFPtr in_param0, mojo::Array<mojo::Array<uint8_t> > in_param1)const= 0;
  virtual bool Method8(
      mojo::Array<mojo::Array<mojo::String> > in_param0)const= 0;
  virtual bool Method9(
      mojo::Array<mojo::Array<mojo::ScopedHandle> > in_param0)const= 0;
  virtual bool Method10(
      mojo::Map<mojo::String, uint8_t> in_param0)const= 0;
  virtual bool Method11(
      StructGPtr in_param0)const= 0;
  virtual bool Method12(
      float in_param0, float* out_param0)= 0;
  virtual bool Method13(
      mojo::InterfaceHandle<InterfaceA> in_param0, uint32_t in_param1, mojo::InterfaceHandle<InterfaceA> in_param2)const= 0;
  virtual bool Method14(
      UnionAPtr in_param0)const= 0;
  virtual bool Method15(
      StructHPtr in_param0)const= 0;
};

class ConformanceTestInterface_SynchronousProxy
    : public ConformanceTestInterface_Synchronous {
 public:
  explicit ConformanceTestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Method0(float in_param0) const  override;
  bool Method1(StructAPtr in_param0) const  override;
  bool Method2(StructBPtr in_param0, StructAPtr in_param1) const  override;
  bool Method3(mojo::Array<bool> in_param0) const  override;
  bool Method4(StructCPtr in_param0, mojo::Array<uint8_t> in_param1) const  override;
  bool Method5(StructEPtr in_param0, mojo::ScopedDataPipeProducerHandle in_param1) const  override;
  bool Method6(mojo::Array<mojo::Array<uint8_t> > in_param0) const  override;
  bool Method7(StructFPtr in_param0, mojo::Array<mojo::Array<uint8_t> > in_param1) const  override;
  bool Method8(mojo::Array<mojo::Array<mojo::String> > in_param0) const  override;
  bool Method9(mojo::Array<mojo::Array<mojo::ScopedHandle> > in_param0) const  override;
  bool Method10(mojo::Map<mojo::String, uint8_t> in_param0) const  override;
  bool Method11(StructGPtr in_param0) const  override;
  bool Method12(float in_param0, float* out_param0) override;
  bool Method13(mojo::InterfaceHandle<InterfaceA> in_param0, uint32_t in_param1, mojo::InterfaceHandle<InterfaceA> in_param2) const  override;
  bool Method14(UnionAPtr in_param0) const  override;
  bool Method15(StructHPtr in_param0) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class IntegrationTestInterface_SynchronousProxy;
class IntegrationTestInterface_Synchronous
  : public internal::IntegrationTestInterface_Base {
 public:
  virtual ~IntegrationTestInterface_Synchronous() override {}
  
  using Proxy_ = IntegrationTestInterface_SynchronousProxy;
  virtual bool Method0(
      BasicStructPtr in_param0, mojo::Array<uint8_t>* out_param0)= 0;
};

class IntegrationTestInterface_SynchronousProxy
    : public IntegrationTestInterface_Synchronous {
 public:
  explicit IntegrationTestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Method0(BasicStructPtr in_param0, mojo::Array<uint8_t>* out_param0) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_VALIDATION_TEST_INTERFACES_MOJOM_SYNC_H_
