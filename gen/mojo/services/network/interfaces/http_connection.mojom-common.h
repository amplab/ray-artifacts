// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/http_connection.mojom-internal.h"
#include "mojo/public/interfaces/network/network_error.mojom-common.h"
#include "mojo/services/network/interfaces/http_message.mojom-common.h"
#include "mojo/services/network/interfaces/web_socket.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class HttpConnection;
class HttpConnectionRequestValidator;
class HttpConnectionResponseValidator;
class HttpConnection_Synchronous;
class HttpConnectionDelegate;
class HttpConnectionDelegateRequestValidator;
class HttpConnectionDelegateResponseValidator;
class HttpConnectionDelegate_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class HttpConnection_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = HttpConnectionRequestValidator;
  using ResponseValidator_ = HttpConnectionResponseValidator;
  using Synchronous_ = HttpConnection_Synchronous;
  enum class MessageOrdinals : uint32_t {
    SetSendBufferSize = 0,
    SetReceiveBufferSize = 1,
  };


  virtual ~HttpConnection_Base() {}
};

}  // namespace internal

// Async interface declaration

class HttpConnectionProxy;
class HttpConnectionStub;
class HttpConnection_Synchronous;

class HttpConnectionRequestValidator;
class HttpConnectionResponseValidator;

class HttpConnection : public internal::HttpConnection_Base {
 public:
  virtual ~HttpConnection() override {}

  using Proxy_ = HttpConnectionProxy;
  using Stub_ = HttpConnectionStub;
  using SetSendBufferSizeCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void SetSendBufferSize(uint32_t size, const SetSendBufferSizeCallback& callback) = 0;
  using SetReceiveBufferSizeCallback = mojo::Callback<void(mojo::NetworkErrorPtr)>;
  virtual void SetReceiveBufferSize(uint32_t size, const SetReceiveBufferSizeCallback& callback) = 0;
};

namespace internal {
class HttpConnectionDelegate_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = HttpConnectionDelegateRequestValidator;
  using ResponseValidator_ = HttpConnectionDelegateResponseValidator;
  using Synchronous_ = HttpConnectionDelegate_Synchronous;
  enum class MessageOrdinals : uint32_t {
    OnReceivedRequest = 0,
    OnReceivedWebSocketRequest = 1,
  };


  virtual ~HttpConnectionDelegate_Base() {}
};

}  // namespace internal

// Async interface declaration

class HttpConnectionDelegateProxy;
class HttpConnectionDelegateStub;
class HttpConnectionDelegate_Synchronous;

class HttpConnectionDelegateRequestValidator;
class HttpConnectionDelegateResponseValidator;

class HttpConnectionDelegate : public internal::HttpConnectionDelegate_Base {
 public:
  virtual ~HttpConnectionDelegate() override {}

  using Proxy_ = HttpConnectionDelegateProxy;
  using Stub_ = HttpConnectionDelegateStub;
  using OnReceivedRequestCallback = mojo::Callback<void(mojo::HttpResponsePtr)>;
  virtual void OnReceivedRequest(mojo::HttpRequestPtr request, const OnReceivedRequestCallback& callback) = 0;
  using OnReceivedWebSocketRequestCallback = mojo::Callback<void(mojo::InterfaceRequest<mojo::WebSocket>, mojo::ScopedDataPipeConsumerHandle, mojo::InterfaceHandle<mojo::WebSocketClient>)>;
  virtual void OnReceivedWebSocketRequest(mojo::HttpRequestPtr request, const OnReceivedWebSocketRequestCallback& callback) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class HttpConnectionRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class HttpConnectionDelegateRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class HttpConnectionResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class HttpConnectionDelegateResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class HttpConnection_SetSendBufferSize_Params;

using HttpConnection_SetSendBufferSize_ParamsPtr = mojo::InlinedStructPtr<HttpConnection_SetSendBufferSize_Params>;


size_t GetSerializedSize_(const HttpConnection_SetSendBufferSize_Params& input);
mojo::internal::ValidationError Serialize_(
    HttpConnection_SetSendBufferSize_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnection_SetSendBufferSize_Params_Data** output);
void Deserialize_(internal::HttpConnection_SetSendBufferSize_Params_Data* input,
                  HttpConnection_SetSendBufferSize_Params* output);

class HttpConnection_SetSendBufferSize_Params {
 public:
  using Data_ = internal::HttpConnection_SetSendBufferSize_Params_Data;

  static HttpConnection_SetSendBufferSize_ParamsPtr New();

  template <typename U>
  static HttpConnection_SetSendBufferSize_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnection_SetSendBufferSize_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnection_SetSendBufferSize_Params>::Convert(*this);
  }

  HttpConnection_SetSendBufferSize_Params();
  ~HttpConnection_SetSendBufferSize_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HttpConnection_SetSendBufferSize_ParamsPtr Clone() const;
  bool Equals(const HttpConnection_SetSendBufferSize_Params& other) const;

  uint32_t size;
};



class HttpConnection_SetSendBufferSize_ResponseParams;

using HttpConnection_SetSendBufferSize_ResponseParamsPtr = mojo::StructPtr<HttpConnection_SetSendBufferSize_ResponseParams>;


size_t GetSerializedSize_(const HttpConnection_SetSendBufferSize_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HttpConnection_SetSendBufferSize_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnection_SetSendBufferSize_ResponseParams_Data** output);
void Deserialize_(internal::HttpConnection_SetSendBufferSize_ResponseParams_Data* input,
                  HttpConnection_SetSendBufferSize_ResponseParams* output);

class HttpConnection_SetSendBufferSize_ResponseParams {
 public:
  using Data_ = internal::HttpConnection_SetSendBufferSize_ResponseParams_Data;

  static HttpConnection_SetSendBufferSize_ResponseParamsPtr New();

  template <typename U>
  static HttpConnection_SetSendBufferSize_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnection_SetSendBufferSize_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnection_SetSendBufferSize_ResponseParams>::Convert(*this);
  }

  HttpConnection_SetSendBufferSize_ResponseParams();
  ~HttpConnection_SetSendBufferSize_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HttpConnection_SetSendBufferSize_ResponseParamsPtr Clone() const;
  bool Equals(const HttpConnection_SetSendBufferSize_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};



class HttpConnection_SetReceiveBufferSize_Params;

using HttpConnection_SetReceiveBufferSize_ParamsPtr = mojo::InlinedStructPtr<HttpConnection_SetReceiveBufferSize_Params>;


size_t GetSerializedSize_(const HttpConnection_SetReceiveBufferSize_Params& input);
mojo::internal::ValidationError Serialize_(
    HttpConnection_SetReceiveBufferSize_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnection_SetReceiveBufferSize_Params_Data** output);
void Deserialize_(internal::HttpConnection_SetReceiveBufferSize_Params_Data* input,
                  HttpConnection_SetReceiveBufferSize_Params* output);

class HttpConnection_SetReceiveBufferSize_Params {
 public:
  using Data_ = internal::HttpConnection_SetReceiveBufferSize_Params_Data;

  static HttpConnection_SetReceiveBufferSize_ParamsPtr New();

  template <typename U>
  static HttpConnection_SetReceiveBufferSize_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnection_SetReceiveBufferSize_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnection_SetReceiveBufferSize_Params>::Convert(*this);
  }

  HttpConnection_SetReceiveBufferSize_Params();
  ~HttpConnection_SetReceiveBufferSize_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HttpConnection_SetReceiveBufferSize_ParamsPtr Clone() const;
  bool Equals(const HttpConnection_SetReceiveBufferSize_Params& other) const;

  uint32_t size;
};



class HttpConnection_SetReceiveBufferSize_ResponseParams;

using HttpConnection_SetReceiveBufferSize_ResponseParamsPtr = mojo::StructPtr<HttpConnection_SetReceiveBufferSize_ResponseParams>;


size_t GetSerializedSize_(const HttpConnection_SetReceiveBufferSize_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HttpConnection_SetReceiveBufferSize_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data** output);
void Deserialize_(internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data* input,
                  HttpConnection_SetReceiveBufferSize_ResponseParams* output);

class HttpConnection_SetReceiveBufferSize_ResponseParams {
 public:
  using Data_ = internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data;

  static HttpConnection_SetReceiveBufferSize_ResponseParamsPtr New();

  template <typename U>
  static HttpConnection_SetReceiveBufferSize_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnection_SetReceiveBufferSize_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnection_SetReceiveBufferSize_ResponseParams>::Convert(*this);
  }

  HttpConnection_SetReceiveBufferSize_ResponseParams();
  ~HttpConnection_SetReceiveBufferSize_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HttpConnection_SetReceiveBufferSize_ResponseParamsPtr Clone() const;
  bool Equals(const HttpConnection_SetReceiveBufferSize_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
};


      

class HttpConnectionDelegate_OnReceivedRequest_Params;

using HttpConnectionDelegate_OnReceivedRequest_ParamsPtr = mojo::StructPtr<HttpConnectionDelegate_OnReceivedRequest_Params>;


size_t GetSerializedSize_(const HttpConnectionDelegate_OnReceivedRequest_Params& input);
mojo::internal::ValidationError Serialize_(
    HttpConnectionDelegate_OnReceivedRequest_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data** output);
void Deserialize_(internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data* input,
                  HttpConnectionDelegate_OnReceivedRequest_Params* output);

class HttpConnectionDelegate_OnReceivedRequest_Params {
 public:
  using Data_ = internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data;

  static HttpConnectionDelegate_OnReceivedRequest_ParamsPtr New();

  template <typename U>
  static HttpConnectionDelegate_OnReceivedRequest_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnectionDelegate_OnReceivedRequest_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnectionDelegate_OnReceivedRequest_Params>::Convert(*this);
  }

  HttpConnectionDelegate_OnReceivedRequest_Params();
  ~HttpConnectionDelegate_OnReceivedRequest_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const HttpConnectionDelegate_OnReceivedRequest_Params& other) const;

  mojo::HttpRequestPtr request;
};



class HttpConnectionDelegate_OnReceivedRequest_ResponseParams;

using HttpConnectionDelegate_OnReceivedRequest_ResponseParamsPtr = mojo::StructPtr<HttpConnectionDelegate_OnReceivedRequest_ResponseParams>;


size_t GetSerializedSize_(const HttpConnectionDelegate_OnReceivedRequest_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HttpConnectionDelegate_OnReceivedRequest_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data** output);
void Deserialize_(internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data* input,
                  HttpConnectionDelegate_OnReceivedRequest_ResponseParams* output);

class HttpConnectionDelegate_OnReceivedRequest_ResponseParams {
 public:
  using Data_ = internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data;

  static HttpConnectionDelegate_OnReceivedRequest_ResponseParamsPtr New();

  template <typename U>
  static HttpConnectionDelegate_OnReceivedRequest_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnectionDelegate_OnReceivedRequest_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnectionDelegate_OnReceivedRequest_ResponseParams>::Convert(*this);
  }

  HttpConnectionDelegate_OnReceivedRequest_ResponseParams();
  ~HttpConnectionDelegate_OnReceivedRequest_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const HttpConnectionDelegate_OnReceivedRequest_ResponseParams& other) const;

  mojo::HttpResponsePtr response;
};



class HttpConnectionDelegate_OnReceivedWebSocketRequest_Params;

using HttpConnectionDelegate_OnReceivedWebSocketRequest_ParamsPtr = mojo::StructPtr<HttpConnectionDelegate_OnReceivedWebSocketRequest_Params>;


size_t GetSerializedSize_(const HttpConnectionDelegate_OnReceivedWebSocketRequest_Params& input);
mojo::internal::ValidationError Serialize_(
    HttpConnectionDelegate_OnReceivedWebSocketRequest_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data** output);
void Deserialize_(internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data* input,
                  HttpConnectionDelegate_OnReceivedWebSocketRequest_Params* output);

class HttpConnectionDelegate_OnReceivedWebSocketRequest_Params {
 public:
  using Data_ = internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data;

  static HttpConnectionDelegate_OnReceivedWebSocketRequest_ParamsPtr New();

  template <typename U>
  static HttpConnectionDelegate_OnReceivedWebSocketRequest_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnectionDelegate_OnReceivedWebSocketRequest_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnectionDelegate_OnReceivedWebSocketRequest_Params>::Convert(*this);
  }

  HttpConnectionDelegate_OnReceivedWebSocketRequest_Params();
  ~HttpConnectionDelegate_OnReceivedWebSocketRequest_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const HttpConnectionDelegate_OnReceivedWebSocketRequest_Params& other) const;

  mojo::HttpRequestPtr request;
};



class HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams;

using HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParamsPtr = mojo::StructPtr<HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams>;


size_t GetSerializedSize_(const HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data** output);
void Deserialize_(internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data* input,
                  HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams* output);

class HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams {
 public:
  using Data_ = internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data;

  static HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParamsPtr New();

  template <typename U>
  static HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams>::Convert(*this);
  }

  HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams();
  ~HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams& other) const;

  mojo::InterfaceRequest<mojo::WebSocket> web_socket;
  mojo::ScopedDataPipeConsumerHandle send_stream;
  mojo::InterfaceHandle<mojo::WebSocketClient> client;
};


}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_COMMON_H_
