// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/geometry/interfaces/geometry.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
Point_Data* Point_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Point_Data))) Point_Data();
}

// static
mojo::internal::ValidationError Point_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Point_Data* object = static_cast<const Point_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Point_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Point_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Point_Data::Point_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PointF_Data* PointF_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PointF_Data))) PointF_Data();
}

// static
mojo::internal::ValidationError PointF_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PointF_Data* object = static_cast<const PointF_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PointF_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PointF_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PointF_Data::PointF_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Size_Data* Size_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Size_Data))) Size_Data();
}

// static
mojo::internal::ValidationError Size_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Size_Data* object = static_cast<const Size_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Size_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Size_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Size_Data::Size_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Rect_Data* Rect_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Rect_Data))) Rect_Data();
}

// static
mojo::internal::ValidationError Rect_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Rect_Data* object = static_cast<const Rect_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Rect_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Rect_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Rect_Data::Rect_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
RectF_Data* RectF_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(RectF_Data))) RectF_Data();
}

// static
mojo::internal::ValidationError RectF_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RectF_Data* object = static_cast<const RectF_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void RectF_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void RectF_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

RectF_Data::RectF_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
RRectF_Data* RRectF_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(RRectF_Data))) RRectF_Data();
}

// static
mojo::internal::ValidationError RRectF_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RRectF_Data* object = static_cast<const RRectF_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 56 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void RRectF_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void RRectF_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

RRectF_Data::RRectF_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Transform_Data* Transform_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Transform_Data))) Transform_Data();
}

// static
mojo::internal::ValidationError Transform_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Transform_Data* object = static_cast<const Transform_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->matrix.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null matrix field in Transform struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->matrix.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams matrix_validate_params(
      16, false, nullptr);
  auto validate_retval =
      mojo::Array<float>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->matrix.offset),
          bounds_checker, &matrix_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Transform_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->matrix, handles);
}

void Transform_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->matrix, handles);
}

Transform_Data::Transform_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---

}  // namespace internal

// --- Request and response validator definitions for interfaces --- 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)

// Struct Constants

// --- Struct builder definitions ---

// static
PointPtr Point::New() {
  PointPtr rv;
  mojo::internal::StructHelper<Point>::Initialize(&rv);
  return rv;
}

Point::Point()
    : x(),
      y() {
}

Point::~Point() {
}


PointPtr Point::Clone() const {
  PointPtr rv(New());
  rv->x = x;
  rv->y = y;
  return rv;
}


bool Point::Equals(const Point& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->x, other.x))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->y, other.y))
    return false;
  return true;
}


// static
PointFPtr PointF::New() {
  PointFPtr rv;
  mojo::internal::StructHelper<PointF>::Initialize(&rv);
  return rv;
}

PointF::PointF()
    : x(),
      y() {
}

PointF::~PointF() {
}


PointFPtr PointF::Clone() const {
  PointFPtr rv(New());
  rv->x = x;
  rv->y = y;
  return rv;
}


bool PointF::Equals(const PointF& other) const {
  if (!mojo::internal::ValueTraits<float>::Equals(this->x, other.x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->y, other.y))
    return false;
  return true;
}


// static
SizePtr Size::New() {
  SizePtr rv;
  mojo::internal::StructHelper<Size>::Initialize(&rv);
  return rv;
}

Size::Size()
    : width(),
      height() {
}

Size::~Size() {
}


SizePtr Size::Clone() const {
  SizePtr rv(New());
  rv->width = width;
  rv->height = height;
  return rv;
}


bool Size::Equals(const Size& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->width, other.width))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->height, other.height))
    return false;
  return true;
}


// static
RectPtr Rect::New() {
  RectPtr rv;
  mojo::internal::StructHelper<Rect>::Initialize(&rv);
  return rv;
}

Rect::Rect()
    : x(),
      y(),
      width(),
      height() {
}

Rect::~Rect() {
}


RectPtr Rect::Clone() const {
  RectPtr rv(New());
  rv->x = x;
  rv->y = y;
  rv->width = width;
  rv->height = height;
  return rv;
}


bool Rect::Equals(const Rect& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->x, other.x))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->y, other.y))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->width, other.width))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->height, other.height))
    return false;
  return true;
}


// static
RectFPtr RectF::New() {
  RectFPtr rv;
  mojo::internal::StructHelper<RectF>::Initialize(&rv);
  return rv;
}

RectF::RectF()
    : x(),
      y(),
      width(),
      height() {
}

RectF::~RectF() {
}


RectFPtr RectF::Clone() const {
  RectFPtr rv(New());
  rv->x = x;
  rv->y = y;
  rv->width = width;
  rv->height = height;
  return rv;
}


bool RectF::Equals(const RectF& other) const {
  if (!mojo::internal::ValueTraits<float>::Equals(this->x, other.x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->y, other.y))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->width, other.width))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->height, other.height))
    return false;
  return true;
}


// static
RRectFPtr RRectF::New() {
  RRectFPtr rv;
  mojo::internal::StructHelper<RRectF>::Initialize(&rv);
  return rv;
}

RRectF::RRectF()
    : x(),
      y(),
      width(),
      height(),
      top_left_radius_x(),
      top_left_radius_y(),
      top_right_radius_x(),
      top_right_radius_y(),
      bottom_left_radius_x(),
      bottom_left_radius_y(),
      bottom_right_radius_x(),
      bottom_right_radius_y() {
}

RRectF::~RRectF() {
}


RRectFPtr RRectF::Clone() const {
  RRectFPtr rv(New());
  rv->x = x;
  rv->y = y;
  rv->width = width;
  rv->height = height;
  rv->top_left_radius_x = top_left_radius_x;
  rv->top_left_radius_y = top_left_radius_y;
  rv->top_right_radius_x = top_right_radius_x;
  rv->top_right_radius_y = top_right_radius_y;
  rv->bottom_left_radius_x = bottom_left_radius_x;
  rv->bottom_left_radius_y = bottom_left_radius_y;
  rv->bottom_right_radius_x = bottom_right_radius_x;
  rv->bottom_right_radius_y = bottom_right_radius_y;
  return rv;
}


bool RRectF::Equals(const RRectF& other) const {
  if (!mojo::internal::ValueTraits<float>::Equals(this->x, other.x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->y, other.y))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->width, other.width))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->height, other.height))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->top_left_radius_x, other.top_left_radius_x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->top_left_radius_y, other.top_left_radius_y))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->top_right_radius_x, other.top_right_radius_x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->top_right_radius_y, other.top_right_radius_y))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->bottom_left_radius_x, other.bottom_left_radius_x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->bottom_left_radius_y, other.bottom_left_radius_y))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->bottom_right_radius_x, other.bottom_right_radius_x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->bottom_right_radius_y, other.bottom_right_radius_y))
    return false;
  return true;
}


// static
TransformPtr Transform::New() {
  TransformPtr rv;
  mojo::internal::StructHelper<Transform>::Initialize(&rv);
  return rv;
}

Transform::Transform()
    : matrix() {
}

Transform::~Transform() {
}


TransformPtr Transform::Clone() const {
  TransformPtr rv(New());
  rv->matrix = matrix.Clone();
  return rv;
}


bool Transform::Equals(const Transform& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<float>>::Equals(this->matrix, other.matrix))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t Point::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Point::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Point_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Point::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Point_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Point::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Point_Data* input =
      static_cast<internal::Point_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Point& input) {
  size_t size = sizeof(internal::Point_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Point* input,
    mojo::internal::Buffer* buf,
    internal::Point_Data** output) {
  if (input) {
    internal::Point_Data* result =
        internal::Point_Data::New(buf);
    result->x = input->x;
    result->y = input->y;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Point_Data* input,
                  Point* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->x = input->x;
      result->y = input->y;
    } while (false);
  }
}


size_t PointF::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PointF::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PointF_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PointF::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PointF_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PointF::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PointF_Data* input =
      static_cast<internal::PointF_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PointF& input) {
  size_t size = sizeof(internal::PointF_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PointF* input,
    mojo::internal::Buffer* buf,
    internal::PointF_Data** output) {
  if (input) {
    internal::PointF_Data* result =
        internal::PointF_Data::New(buf);
    result->x = input->x;
    result->y = input->y;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PointF_Data* input,
                  PointF* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->x = input->x;
      result->y = input->y;
    } while (false);
  }
}


size_t Size::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Size::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Size_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Size::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Size_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Size::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Size_Data* input =
      static_cast<internal::Size_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Size& input) {
  size_t size = sizeof(internal::Size_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Size* input,
    mojo::internal::Buffer* buf,
    internal::Size_Data** output) {
  if (input) {
    internal::Size_Data* result =
        internal::Size_Data::New(buf);
    result->width = input->width;
    result->height = input->height;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Size_Data* input,
                  Size* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->width = input->width;
      result->height = input->height;
    } while (false);
  }
}


size_t Rect::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Rect::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Rect_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Rect::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Rect_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Rect::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Rect_Data* input =
      static_cast<internal::Rect_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Rect& input) {
  size_t size = sizeof(internal::Rect_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Rect* input,
    mojo::internal::Buffer* buf,
    internal::Rect_Data** output) {
  if (input) {
    internal::Rect_Data* result =
        internal::Rect_Data::New(buf);
    result->x = input->x;
    result->y = input->y;
    result->width = input->width;
    result->height = input->height;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Rect_Data* input,
                  Rect* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->x = input->x;
      result->y = input->y;
      result->width = input->width;
      result->height = input->height;
    } while (false);
  }
}


size_t RectF::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool RectF::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::RectF_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool RectF::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::RectF_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void RectF::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::RectF_Data* input =
      static_cast<internal::RectF_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const RectF& input) {
  size_t size = sizeof(internal::RectF_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    RectF* input,
    mojo::internal::Buffer* buf,
    internal::RectF_Data** output) {
  if (input) {
    internal::RectF_Data* result =
        internal::RectF_Data::New(buf);
    result->x = input->x;
    result->y = input->y;
    result->width = input->width;
    result->height = input->height;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::RectF_Data* input,
                  RectF* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->x = input->x;
      result->y = input->y;
      result->width = input->width;
      result->height = input->height;
    } while (false);
  }
}


size_t RRectF::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool RRectF::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::RRectF_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool RRectF::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::RRectF_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void RRectF::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::RRectF_Data* input =
      static_cast<internal::RRectF_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const RRectF& input) {
  size_t size = sizeof(internal::RRectF_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    RRectF* input,
    mojo::internal::Buffer* buf,
    internal::RRectF_Data** output) {
  if (input) {
    internal::RRectF_Data* result =
        internal::RRectF_Data::New(buf);
    result->x = input->x;
    result->y = input->y;
    result->width = input->width;
    result->height = input->height;
    result->top_left_radius_x = input->top_left_radius_x;
    result->top_left_radius_y = input->top_left_radius_y;
    result->top_right_radius_x = input->top_right_radius_x;
    result->top_right_radius_y = input->top_right_radius_y;
    result->bottom_left_radius_x = input->bottom_left_radius_x;
    result->bottom_left_radius_y = input->bottom_left_radius_y;
    result->bottom_right_radius_x = input->bottom_right_radius_x;
    result->bottom_right_radius_y = input->bottom_right_radius_y;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::RRectF_Data* input,
                  RRectF* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->x = input->x;
      result->y = input->y;
      result->width = input->width;
      result->height = input->height;
      result->top_left_radius_x = input->top_left_radius_x;
      result->top_left_radius_y = input->top_left_radius_y;
      result->top_right_radius_x = input->top_right_radius_x;
      result->top_right_radius_y = input->top_right_radius_y;
      result->bottom_left_radius_x = input->bottom_left_radius_x;
      result->bottom_left_radius_y = input->bottom_left_radius_y;
      result->bottom_right_radius_x = input->bottom_right_radius_x;
      result->bottom_right_radius_y = input->bottom_right_radius_y;
    } while (false);
  }
}


size_t Transform::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Transform::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Transform_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Transform::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Transform_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Transform::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Transform_Data* input =
      static_cast<internal::Transform_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Transform& input) {
  size_t size = sizeof(internal::Transform_Data);
  size += GetSerializedSize_(input.matrix);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Transform* input,
    mojo::internal::Buffer* buf,
    internal::Transform_Data** output) {
  if (input) {
    internal::Transform_Data* result =
        internal::Transform_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams matrix_validate_params(
        16, false, nullptr);auto retval =mojo::SerializeArray_(&input->matrix, buf, &result->matrix.ptr,
                            &matrix_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->matrix.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null matrix in Transform struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Transform_Data* input,
                  Transform* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->matrix.ptr, &result->matrix);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---
}  // namespace mojo
