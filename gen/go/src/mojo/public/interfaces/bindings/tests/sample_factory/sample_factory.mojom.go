// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/bindings/tests/sample_factory.mojom
//

package sample_factory

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	ioutil "io/ioutil"
	base64 "encoding/base64"
	fmt "fmt"
	bytes "bytes"
	sample_import "mojo/public/interfaces/bindings/tests/sample_import"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	gzip "compress/gzip"
)

// This global variable contains a mojom_types.RuntimeTypeInfo struct
// describing the types defined in this file and all of its imports as
// well as the top-level interfaces defined in this file.
var runtimeTypeInfo__ = mojom_types.RuntimeTypeInfo{}

func getRuntimeTypeInfo() mojom_types.RuntimeTypeInfo {
  if runtimeTypeInfo__.TypeMap == nil {
    initRuntimeTypeInfo()
  }
  return runtimeTypeInfo__
}

func initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this file.
  // The string contains the base64 encoding of the gzip-compressed bytes.
  serializedRuntimeTypeInfo := "H4sIAAAJbogC/+xaTXPbRBjWhzM1H22dZqhFaROHtqEZppEpBzw5dQZK22EGOoRh6IXEVtZUobaEpDAuJ479CRw58hN65Nif0SPHHnuDlfWuvV7t6sOVV3KxZnY2UiTvvs8+z/u++2Eo0dWA+inU7PMOda/iUof7D3DZwMXvDtzHaH//6+4AHX/TO0FWwH3/Knzz3cMHdw6/uvNwP/pwj/2Obf8Z1DdwqeHSYvr1A9Qu1Fu4NDntfNm1Asd7krkfot/5Fv1yivxg3A+D+3/fdYY+ugf9De3QGRzD++dbs7gau7P3HXNqt0LZTa6XzP1t5r7N4PQvXOx75DqPyxlcCE4X8d/nJuM7gS82Ptu4vI3Lj7h8j4v5yBkg07UGjmcHv5le98lNy/GQ6XuWOXBOHNM97T22LdMeBsjrdy3kmz17eGwPf/LNAAPrm1GLh/2oxb3wo0G8XYLLZVzW4O8QNw3wrVE4rFHvPwBC/n0W+LMe1c+bfLxfQD2qZcNbofCmf0+E9xfOQXDa78fs+xBsWTSuLUb3xN4jPbud4dUW2NkEW8HOmx7oh7WXXDJ4pFHtHqmzdtI6XePoTHQVxQcRPiEfLkjkg8K0bzD9JH4wzU/ycK0l4FqfA1c1Add3oT3XdhEvvoS4fiIB1wblo1ROfDSoPmvU/aL1aUBfpvqM4tdKn3Ed1Mf65ONzFfKhsvVJ+knykLQ85bYgz5OtzwCNAp4+Q1yvSdSnIsh3RfoU5QuGPtV7ETiRcQWd3mJxulZyvjBuvHh/dIskDGX5I5YHeeNZ0X4oLZ6FPNiRrBctRS8q1T+WP/8Qv5KTPx0BPu/jsj7Ln8jRCea3VeKRWgKPRH435NFnFfO7Kmf+1xLMh7UcOGnUOIj49LmHugFiVwniuF0vyQ8T+49y6ki0HrANtsfsnszgqq8nmfnhO7Du4PROhLzYlsgLjWmfPN+AvrJMzrou9rr6/BPyIj0H7nqCPkl+C/PN+wPX8QJ0fJ/Axo7DTsn6HBWkzxtgu8juZcibqqTPHUnxTqTPNrUecQkXGwZ0Lzay0Xsfg2Ynek35YN787BXUv+fk7T3BOOyCH0zg7dLka1Xi70eS8v6q8zct7tRyjEctIe5cweW9sP/dnxGvx7z9ijch7lwH27l2U7nhSrfZdBt+92mJ64ZVjTtF8zb0jZsJvCVBZ8XbbLzdBV/wf+ctG29cWPB9qvLHg4znH1D/xfD3WcL6L92fFic/OsOZ5x0g71fbGk/gM53bEM0PL8H+o2BaGOPHZUnnAtLsMRL2STRqPNl9p46evL6/qP3fAxSMx4rt95U3ZH2fnAcAO0s/D1DVddkhCJbHg/UlWpcl/HmlFrsfRvRyV6CXzZL18kIpVi93K6KXegY+KAlxalH7hVN8yj2/sGz+ZBM4VlV/IpoXvFxLxifvuUdyXok590gex3A7C98tGjf23GsLHGgb9PNIF/NMUaZnIxfNs7dg3EaCdbtzMNaLxivv/nxN8nmz8/BM9nkzHi4atb5bxDkfjfOcXBdgPoDtRIchOD6fJ2G9JTFuq9B3wpM6J26oc8zHG3Pgp7/GfHwDfLlM3KoyH5/xj4J40dKLiRfs+TqSnzHH6mLjc1FSvGDnsQ11OeJDcxUfJriUER/SzjuS9/8LAAD//07hOLY4NAAA"

  // Deserialize RuntimeTypeInfo
  compressedBytes, err := base64.StdEncoding.DecodeString(serializedRuntimeTypeInfo)
  if err != nil {
    panic(fmt.Sprintf("Error while base64Decoding runtimeTypeInfo: %s", err.Error()))
  }
  reader, err := gzip.NewReader(bytes.NewBuffer(compressedBytes))
  if err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  uncompressedBytes, err := ioutil.ReadAll(reader)
  if err != nil {
     panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  if err = reader.Close(); err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  decoder := bindings.NewDecoder(uncompressedBytes, nil)
  runtimeTypeInfo__.Decode(decoder)

  for s, udt := range sample_import.GetAllMojomTypeDefinitions() {
    runtimeTypeInfo__.TypeMap[s] = udt
  }


}
func GetAllMojomTypeDefinitions() map[string]mojom_types.UserDefinedType {
  return getRuntimeTypeInfo().TypeMap
}

type NamedObject interface {
	SetName(inName string) (err error)
	GetName() (outName string, err error)
}


// NamedObjectMojomType returns the UserDefinedType that describes the Mojom
// type of NamedObject. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func NamedObjectMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:sample.NamedObject"]
}



var namedObject_Name = "sample::NamedObject"

type NamedObject_Request bindings.InterfaceRequest

func (r *NamedObject_Request) Name() string {
	return namedObject_Name
}

// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*NamedObject_Request) MojomType() mojom_types.UserDefinedType {
	return NamedObjectMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*NamedObject_Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


type NamedObject_Pointer bindings.InterfacePointer

func (p *NamedObject_Pointer) Name() string {
	return namedObject_Name
}

type NamedObject_ServiceFactory struct{
	Delegate NamedObject_Factory
}

type NamedObject_Factory interface {
	Create(request NamedObject_Request)
}

func (f *NamedObject_ServiceFactory) Name() string {
	return namedObject_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *NamedObject_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &NamedObject_ServiceDescription{}
}

func (f *NamedObject_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := NamedObject_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForNamedObject creates a message pipe for use with the
// NamedObject interface with a NamedObject_Request on one end and a NamedObject_Pointer on the other.
func CreateMessagePipeForNamedObject() (NamedObject_Request, NamedObject_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return NamedObject_Request(r), NamedObject_Pointer(p)
}

const namedObject_SetName_Name uint32 = 0
const namedObject_GetName_Name uint32 = 1

type NamedObject_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewNamedObjectProxy(p NamedObject_Pointer, waiter bindings.AsyncWaiter) *NamedObject_Proxy {
	return &NamedObject_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *NamedObject_Proxy) Close_Proxy() {
	p.router.Close()
}

type namedObject_SetName_Params struct {
	inName string
}


func (s *namedObject_SetName_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inName); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var namedObject_SetName_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *namedObject_SetName_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(namedObject_SetName_Params_Versions), func(i int) bool {
		return namedObject_SetName_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(namedObject_SetName_Params_Versions) {
		if namedObject_SetName_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := namedObject_SetName_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inName = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NamedObject_Proxy) SetName(inName string) (err error) {
	payload := &namedObject_SetName_Params{
		inName,
	}
	header := bindings.MessageHeader{
		Type: namedObject_SetName_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type namedObject_GetName_Params struct {
}


func (s *namedObject_GetName_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var namedObject_GetName_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *namedObject_GetName_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(namedObject_GetName_Params_Versions), func(i int) bool {
		return namedObject_GetName_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(namedObject_GetName_Params_Versions) {
		if namedObject_GetName_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := namedObject_GetName_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type namedObject_GetName_ResponseParams struct {
	outName string
}


func (s *namedObject_GetName_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.outName); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var namedObject_GetName_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *namedObject_GetName_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(namedObject_GetName_ResponseParams_Versions), func(i int) bool {
		return namedObject_GetName_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(namedObject_GetName_ResponseParams_Versions) {
		if namedObject_GetName_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := namedObject_GetName_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.outName = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NamedObject_Proxy) GetName() (outName string, err error) {
	payload := &namedObject_GetName_Params{
	}
	header := bindings.MessageHeader{
		Type: namedObject_GetName_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, namedObject_GetName_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response namedObject_GetName_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outName = response.outName
	return
}

type namedObject_Stub struct {
	connector *bindings.Connector
	impl NamedObject
}

func NewNamedObjectStub(r NamedObject_Request, impl NamedObject, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &namedObject_Stub{connector, impl})
}


func (f *NamedObject_Request) ServiceDescription() service_describer.ServiceDescription {
	return &NamedObject_ServiceDescription{}
}


type NamedObject_ServiceDescription struct{}

func (sd *NamedObject_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	interfaceTypeKey := getRuntimeTypeInfo().Services["sample::NamedObject"]
	userDefinedType := getRuntimeTypeInfo().TypeMap[interfaceTypeKey].(*mojom_types.UserDefinedTypeInterfaceType)
	return userDefinedType.Value, nil
}

func (sd *NamedObject_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	if udt, ok := GetAllMojomTypeDefinitions()[inTypeKey]; ok {
		return udt, nil
	}
	return nil, fmt.Errorf("%s_ServiceDescription does not recognize %s", "NamedObject", inTypeKey)
}

func (sd *NamedObject_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	o := GetAllMojomTypeDefinitions()
	return &o, nil
}
var _ service_describer.ServiceDescription = (*NamedObject_ServiceDescription)(nil)


func (s *namedObject_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case namedObject_SetName_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request namedObject_SetName_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.SetName(request.inName)
		if err != nil {
			return
		}
	case namedObject_GetName_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request namedObject_GetName_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response namedObject_GetName_ResponseParams
		response.outName, err = s.impl.GetName()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: namedObject_GetName_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type Factory interface {
	DoStuff(inRequest Request, inPipe *system.MessagePipeHandle) (outResponse Response, outText string, err error)
	DoStuff2(inPipe system.ConsumerHandle) (outText string, err error)
	CreateNamedObject(inObj NamedObject_Request) (err error)
	RequestImportedInterface(inObj sample_import.ImportedInterface_Request) (outObj sample_import.ImportedInterface_Request, err error)
	TakeImportedInterface(inObj sample_import.ImportedInterface_Pointer) (outObj sample_import.ImportedInterface_Pointer, err error)
}


// FactoryMojomType returns the UserDefinedType that describes the Mojom
// type of Factory. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func FactoryMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:sample.Factory"]
}




type Factory_Request bindings.InterfaceRequest


// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*Factory_Request) MojomType() mojom_types.UserDefinedType {
	return FactoryMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*Factory_Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


type Factory_Pointer bindings.InterfacePointer


type Factory_ServiceFactory struct{
	Delegate Factory_Factory
}

type Factory_Factory interface {
	Create(request Factory_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Factory_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Factory_ServiceDescription{}
}

func (f *Factory_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Factory_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForFactory creates a message pipe for use with the
// Factory interface with a Factory_Request on one end and a Factory_Pointer on the other.
func CreateMessagePipeForFactory() (Factory_Request, Factory_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Factory_Request(r), Factory_Pointer(p)
}

const factory_DoStuff_Name uint32 = 0
const factory_DoStuff2_Name uint32 = 1
const factory_CreateNamedObject_Name uint32 = 2
const factory_RequestImportedInterface_Name uint32 = 3
const factory_TakeImportedInterface_Name uint32 = 4

type Factory_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewFactoryProxy(p Factory_Pointer, waiter bindings.AsyncWaiter) *Factory_Proxy {
	return &Factory_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Factory_Proxy) Close_Proxy() {
	p.router.Close()
}

type factory_DoStuff_Params struct {
	inRequest Request
	inPipe *system.MessagePipeHandle
}


func (s *factory_DoStuff_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inRequest.Encode(encoder); err != nil {
		return err
	}
	if s.inPipe == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.inPipe)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_DoStuff_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *factory_DoStuff_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_DoStuff_Params_Versions), func(i int) bool {
		return factory_DoStuff_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_DoStuff_Params_Versions) {
		if factory_DoStuff_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_DoStuff_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inRequest.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.inPipe = &handle0
		} else {
			s.inPipe = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type factory_DoStuff_ResponseParams struct {
	outResponse Response
	outText string
}


func (s *factory_DoStuff_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResponse.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.outText); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_DoStuff_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *factory_DoStuff_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_DoStuff_ResponseParams_Versions), func(i int) bool {
		return factory_DoStuff_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_DoStuff_ResponseParams_Versions) {
		if factory_DoStuff_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_DoStuff_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResponse.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.outText = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Factory_Proxy) DoStuff(inRequest Request, inPipe *system.MessagePipeHandle) (outResponse Response, outText string, err error) {
	payload := &factory_DoStuff_Params{
		inRequest,
		inPipe,
	}
	header := bindings.MessageHeader{
		Type: factory_DoStuff_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, factory_DoStuff_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response factory_DoStuff_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResponse = response.outResponse
	outText = response.outText
	return
}

type factory_DoStuff2_Params struct {
	inPipe system.ConsumerHandle
}


func (s *factory_DoStuff2_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inPipe); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_DoStuff2_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *factory_DoStuff2_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_DoStuff2_Params_Versions), func(i int) bool {
		return factory_DoStuff2_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_DoStuff2_Params_Versions) {
		if factory_DoStuff2_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_DoStuff2_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.inPipe = handle0
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type factory_DoStuff2_ResponseParams struct {
	outText string
}


func (s *factory_DoStuff2_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.outText); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_DoStuff2_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *factory_DoStuff2_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_DoStuff2_ResponseParams_Versions), func(i int) bool {
		return factory_DoStuff2_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_DoStuff2_ResponseParams_Versions) {
		if factory_DoStuff2_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_DoStuff2_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.outText = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Factory_Proxy) DoStuff2(inPipe system.ConsumerHandle) (outText string, err error) {
	payload := &factory_DoStuff2_Params{
		inPipe,
	}
	header := bindings.MessageHeader{
		Type: factory_DoStuff2_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, factory_DoStuff2_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response factory_DoStuff2_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outText = response.outText
	return
}

type factory_CreateNamedObject_Params struct {
	inObj NamedObject_Request
}


func (s *factory_CreateNamedObject_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inObj.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_CreateNamedObject_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *factory_CreateNamedObject_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_CreateNamedObject_Params_Versions), func(i int) bool {
		return factory_CreateNamedObject_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_CreateNamedObject_Params_Versions) {
		if factory_CreateNamedObject_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_CreateNamedObject_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inObj = NamedObject_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Factory_Proxy) CreateNamedObject(inObj NamedObject_Request) (err error) {
	payload := &factory_CreateNamedObject_Params{
		inObj,
	}
	header := bindings.MessageHeader{
		Type: factory_CreateNamedObject_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type factory_RequestImportedInterface_Params struct {
	inObj sample_import.ImportedInterface_Request
}


func (s *factory_RequestImportedInterface_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inObj.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_RequestImportedInterface_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *factory_RequestImportedInterface_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_RequestImportedInterface_Params_Versions), func(i int) bool {
		return factory_RequestImportedInterface_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_RequestImportedInterface_Params_Versions) {
		if factory_RequestImportedInterface_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_RequestImportedInterface_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inObj = sample_import.ImportedInterface_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type factory_RequestImportedInterface_ResponseParams struct {
	outObj sample_import.ImportedInterface_Request
}


func (s *factory_RequestImportedInterface_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.outObj.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_RequestImportedInterface_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *factory_RequestImportedInterface_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_RequestImportedInterface_ResponseParams_Versions), func(i int) bool {
		return factory_RequestImportedInterface_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_RequestImportedInterface_ResponseParams_Versions) {
		if factory_RequestImportedInterface_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_RequestImportedInterface_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.outObj = sample_import.ImportedInterface_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Factory_Proxy) RequestImportedInterface(inObj sample_import.ImportedInterface_Request) (outObj sample_import.ImportedInterface_Request, err error) {
	payload := &factory_RequestImportedInterface_Params{
		inObj,
	}
	header := bindings.MessageHeader{
		Type: factory_RequestImportedInterface_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, factory_RequestImportedInterface_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response factory_RequestImportedInterface_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outObj = response.outObj
	return
}

type factory_TakeImportedInterface_Params struct {
	inObj sample_import.ImportedInterface_Pointer
}


func (s *factory_TakeImportedInterface_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInterface(s.inObj.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_TakeImportedInterface_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *factory_TakeImportedInterface_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_TakeImportedInterface_Params_Versions), func(i int) bool {
		return factory_TakeImportedInterface_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_TakeImportedInterface_Params_Versions) {
		if factory_TakeImportedInterface_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_TakeImportedInterface_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inObj = sample_import.ImportedInterface_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type factory_TakeImportedInterface_ResponseParams struct {
	outObj sample_import.ImportedInterface_Pointer
}


func (s *factory_TakeImportedInterface_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInterface(s.outObj.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var factory_TakeImportedInterface_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *factory_TakeImportedInterface_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(factory_TakeImportedInterface_ResponseParams_Versions), func(i int) bool {
		return factory_TakeImportedInterface_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(factory_TakeImportedInterface_ResponseParams_Versions) {
		if factory_TakeImportedInterface_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := factory_TakeImportedInterface_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.outObj = sample_import.ImportedInterface_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Factory_Proxy) TakeImportedInterface(inObj sample_import.ImportedInterface_Pointer) (outObj sample_import.ImportedInterface_Pointer, err error) {
	payload := &factory_TakeImportedInterface_Params{
		inObj,
	}
	header := bindings.MessageHeader{
		Type: factory_TakeImportedInterface_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, factory_TakeImportedInterface_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response factory_TakeImportedInterface_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outObj = response.outObj
	return
}

type factory_Stub struct {
	connector *bindings.Connector
	impl Factory
}

func NewFactoryStub(r Factory_Request, impl Factory, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &factory_Stub{connector, impl})
}


func (f *Factory_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Factory_ServiceDescription{}
}


type Factory_ServiceDescription struct{}

func (sd *Factory_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Factory_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Factory_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Factory_ServiceDescription)(nil)


func (s *factory_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case factory_DoStuff_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request factory_DoStuff_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response factory_DoStuff_ResponseParams
		response.outResponse, 		response.outText, err = s.impl.DoStuff(request.inRequest, request.inPipe)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: factory_DoStuff_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case factory_DoStuff2_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request factory_DoStuff2_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response factory_DoStuff2_ResponseParams
		response.outText, err = s.impl.DoStuff2(request.inPipe)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: factory_DoStuff2_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case factory_CreateNamedObject_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request factory_CreateNamedObject_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateNamedObject(request.inObj)
		if err != nil {
			return
		}
	case factory_RequestImportedInterface_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request factory_RequestImportedInterface_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response factory_RequestImportedInterface_ResponseParams
		response.outObj, err = s.impl.RequestImportedInterface(request.inObj)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: factory_RequestImportedInterface_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case factory_TakeImportedInterface_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request factory_TakeImportedInterface_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response factory_TakeImportedInterface_ResponseParams
		response.outObj, err = s.impl.TakeImportedInterface(request.inObj)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: factory_TakeImportedInterface_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type Request struct {
	X int32
	Pipe *system.MessagePipeHandle
	MorePipes *[]system.MessagePipeHandle
	Obj *sample_import.ImportedInterface_Pointer
}
// RequestMojomType returns the UserDefinedType that describes the Mojom
// type of Request. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func RequestMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:sample.Request"]
}



// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*Request) MojomType() mojom_types.UserDefinedType {
	return RequestMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


func (s *Request) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WriteInt32(s.X); err != nil {
		return err
	}
	if s.Pipe == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.Pipe)); err != nil {
			return err
		}
	}
	if s.MorePipes == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.MorePipes))), 32)
		for _, elem0 := range (*s.MorePipes) {
			if err := encoder.WriteHandle(elem0); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if s.Obj == nil {
		encoder.WriteInvalidInterface()
	} else {
		if err := encoder.WriteInterface((*s.Obj).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var request_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *Request) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(request_Versions), func(i int) bool {
		return request_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(request_Versions) {
		if request_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := request_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.X = value0
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.Pipe = &handle0
		} else {
			s.Pipe = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.MorePipes = nil
		} else {
			s.MorePipes = new([]system.MessagePipeHandle)
			len0, err := decoder.StartArray(32)
			if err != nil {
				return err
			}
			(*s.MorePipes) = make([]system.MessagePipeHandle, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				handle1, err := decoder.ReadMessagePipeHandle()
				if err != nil {
					return err
				}
				if handle1.IsValid() {
					(*s.MorePipes)[i0] = handle1
				} else {
					return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.Obj = &sample_import.ImportedInterface_Pointer{handleOwner}
		} else {
			s.Obj = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type Response struct {
	X int32
	Pipe *system.MessagePipeHandle
}
// ResponseMojomType returns the UserDefinedType that describes the Mojom
// type of Response. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func ResponseMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:sample.Response"]
}



// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*Response) MojomType() mojom_types.UserDefinedType {
	return ResponseMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*Response) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


func (s *Response) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(s.X); err != nil {
		return err
	}
	if s.Pipe == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.Pipe)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var response_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *Response) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(response_Versions), func(i int) bool {
		return response_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(response_Versions) {
		if response_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := response_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.X = value0
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.Pipe = &handle0
		} else {
			s.Pipe = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

