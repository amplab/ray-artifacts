// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/native_viewport/interfaces/native_viewport.mojom
//

package native_viewport

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	geometry "mojo/services/geometry/interfaces/geometry"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	context_provider "mojo/services/gpu/interfaces/context_provider"
	native_viewport_event_dispatcher "mojo/services/native_viewport/interfaces/native_viewport_event_dispatcher"
)


type NativeViewport interface {
	Create(inSize geometry.Size, inRequestedConfiguration *SurfaceConfiguration) (outMetrics ViewportMetrics, err error)
	Show() (err error)
	Hide() (err error)
	Close() (err error)
	SetSize(inSize geometry.Size) (err error)
	SetEventDispatcher(inDispatcher native_viewport_event_dispatcher.NativeViewportEventDispatcher_Pointer) (err error)
	GetContextProvider(inProvider context_provider.ContextProvider_Request) (err error)
	RequestMetrics() (outMetrics ViewportMetrics, err error)
}



var nativeViewport_Name = "mojo::NativeViewport"

type NativeViewport_Request bindings.InterfaceRequest

func (r *NativeViewport_Request) Name() string {
	return nativeViewport_Name
}


type NativeViewport_Pointer bindings.InterfacePointer

func (p *NativeViewport_Pointer) Name() string {
	return nativeViewport_Name
}

type NativeViewport_ServiceFactory struct{
	Delegate NativeViewport_Factory
}

type NativeViewport_Factory interface {
	Create(request NativeViewport_Request)
}

func (f *NativeViewport_ServiceFactory) Name() string {
	return nativeViewport_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *NativeViewport_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &NativeViewport_ServiceDescription{}
}

func (f *NativeViewport_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := NativeViewport_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForNativeViewport creates a message pipe for use with the
// NativeViewport interface with a NativeViewport_Request on one end and a NativeViewport_Pointer on the other.
func CreateMessagePipeForNativeViewport() (NativeViewport_Request, NativeViewport_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return NativeViewport_Request(r), NativeViewport_Pointer(p)
}

const nativeViewport_Create_Name uint32 = 0
const nativeViewport_Show_Name uint32 = 1
const nativeViewport_Hide_Name uint32 = 2
const nativeViewport_Close_Name uint32 = 3
const nativeViewport_SetSize_Name uint32 = 4
const nativeViewport_SetEventDispatcher_Name uint32 = 5
const nativeViewport_GetContextProvider_Name uint32 = 6
const nativeViewport_RequestMetrics_Name uint32 = 7

type NativeViewport_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewNativeViewportProxy(p NativeViewport_Pointer, waiter bindings.AsyncWaiter) *NativeViewport_Proxy {
	return &NativeViewport_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *NativeViewport_Proxy) Close_Proxy() {
	p.router.Close()
}

type nativeViewport_Create_Params struct {
	inSize geometry.Size
	inRequestedConfiguration *SurfaceConfiguration
}


func (s *nativeViewport_Create_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inSize.Encode(encoder); err != nil {
		return err
	}
	if s.inRequestedConfiguration == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.inRequestedConfiguration).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_Create_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *nativeViewport_Create_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_Create_Params_Versions), func(i int) bool {
		return nativeViewport_Create_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_Create_Params_Versions) {
		if nativeViewport_Create_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_Create_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inSize.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inRequestedConfiguration = nil
		} else {
			s.inRequestedConfiguration = new(SurfaceConfiguration)
			if err := (*s.inRequestedConfiguration).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type nativeViewport_Create_ResponseParams struct {
	outMetrics ViewportMetrics
}


func (s *nativeViewport_Create_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outMetrics.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_Create_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *nativeViewport_Create_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_Create_ResponseParams_Versions), func(i int) bool {
		return nativeViewport_Create_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_Create_ResponseParams_Versions) {
		if nativeViewport_Create_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_Create_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outMetrics.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) Create(inSize geometry.Size, inRequestedConfiguration *SurfaceConfiguration) (outMetrics ViewportMetrics, err error) {
	payload := &nativeViewport_Create_Params{
		inSize,
		inRequestedConfiguration,
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_Create_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, nativeViewport_Create_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response nativeViewport_Create_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outMetrics = response.outMetrics
	return
}

type nativeViewport_Show_Params struct {
}


func (s *nativeViewport_Show_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_Show_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *nativeViewport_Show_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_Show_Params_Versions), func(i int) bool {
		return nativeViewport_Show_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_Show_Params_Versions) {
		if nativeViewport_Show_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_Show_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) Show() (err error) {
	payload := &nativeViewport_Show_Params{
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_Show_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type nativeViewport_Hide_Params struct {
}


func (s *nativeViewport_Hide_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_Hide_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *nativeViewport_Hide_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_Hide_Params_Versions), func(i int) bool {
		return nativeViewport_Hide_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_Hide_Params_Versions) {
		if nativeViewport_Hide_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_Hide_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) Hide() (err error) {
	payload := &nativeViewport_Hide_Params{
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_Hide_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type nativeViewport_Close_Params struct {
}


func (s *nativeViewport_Close_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_Close_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *nativeViewport_Close_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_Close_Params_Versions), func(i int) bool {
		return nativeViewport_Close_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_Close_Params_Versions) {
		if nativeViewport_Close_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_Close_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) Close() (err error) {
	payload := &nativeViewport_Close_Params{
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_Close_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type nativeViewport_SetSize_Params struct {
	inSize geometry.Size
}


func (s *nativeViewport_SetSize_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inSize.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_SetSize_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *nativeViewport_SetSize_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_SetSize_Params_Versions), func(i int) bool {
		return nativeViewport_SetSize_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_SetSize_Params_Versions) {
		if nativeViewport_SetSize_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_SetSize_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inSize.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) SetSize(inSize geometry.Size) (err error) {
	payload := &nativeViewport_SetSize_Params{
		inSize,
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_SetSize_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type nativeViewport_SetEventDispatcher_Params struct {
	inDispatcher native_viewport_event_dispatcher.NativeViewportEventDispatcher_Pointer
}


func (s *nativeViewport_SetEventDispatcher_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInterface(s.inDispatcher.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_SetEventDispatcher_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *nativeViewport_SetEventDispatcher_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_SetEventDispatcher_Params_Versions), func(i int) bool {
		return nativeViewport_SetEventDispatcher_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_SetEventDispatcher_Params_Versions) {
		if nativeViewport_SetEventDispatcher_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_SetEventDispatcher_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inDispatcher = native_viewport_event_dispatcher.NativeViewportEventDispatcher_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) SetEventDispatcher(inDispatcher native_viewport_event_dispatcher.NativeViewportEventDispatcher_Pointer) (err error) {
	payload := &nativeViewport_SetEventDispatcher_Params{
		inDispatcher,
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_SetEventDispatcher_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type nativeViewport_GetContextProvider_Params struct {
	inProvider context_provider.ContextProvider_Request
}


func (s *nativeViewport_GetContextProvider_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inProvider.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_GetContextProvider_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *nativeViewport_GetContextProvider_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_GetContextProvider_Params_Versions), func(i int) bool {
		return nativeViewport_GetContextProvider_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_GetContextProvider_Params_Versions) {
		if nativeViewport_GetContextProvider_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_GetContextProvider_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inProvider = context_provider.ContextProvider_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) GetContextProvider(inProvider context_provider.ContextProvider_Request) (err error) {
	payload := &nativeViewport_GetContextProvider_Params{
		inProvider,
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_GetContextProvider_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type nativeViewport_RequestMetrics_Params struct {
}


func (s *nativeViewport_RequestMetrics_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_RequestMetrics_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *nativeViewport_RequestMetrics_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_RequestMetrics_Params_Versions), func(i int) bool {
		return nativeViewport_RequestMetrics_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_RequestMetrics_Params_Versions) {
		if nativeViewport_RequestMetrics_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_RequestMetrics_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type nativeViewport_RequestMetrics_ResponseParams struct {
	outMetrics ViewportMetrics
}


func (s *nativeViewport_RequestMetrics_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outMetrics.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewport_RequestMetrics_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *nativeViewport_RequestMetrics_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewport_RequestMetrics_ResponseParams_Versions), func(i int) bool {
		return nativeViewport_RequestMetrics_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewport_RequestMetrics_ResponseParams_Versions) {
		if nativeViewport_RequestMetrics_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewport_RequestMetrics_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outMetrics.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewport_Proxy) RequestMetrics() (outMetrics ViewportMetrics, err error) {
	payload := &nativeViewport_RequestMetrics_Params{
	}
	header := bindings.MessageHeader{
		Type: nativeViewport_RequestMetrics_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, nativeViewport_RequestMetrics_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response nativeViewport_RequestMetrics_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outMetrics = response.outMetrics
	return
}

type nativeViewport_Stub struct {
	connector *bindings.Connector
	impl NativeViewport
}

func NewNativeViewportStub(r NativeViewport_Request, impl NativeViewport, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &nativeViewport_Stub{connector, impl})
}


func (f *NativeViewport_Request) ServiceDescription() service_describer.ServiceDescription {
	return &NativeViewport_ServiceDescription{}
}


type NativeViewport_ServiceDescription struct{}

func (sd *NativeViewport_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *NativeViewport_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *NativeViewport_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*NativeViewport_ServiceDescription)(nil)


func (s *nativeViewport_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case nativeViewport_Create_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_Create_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response nativeViewport_Create_ResponseParams
		response.outMetrics, err = s.impl.Create(request.inSize, request.inRequestedConfiguration)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: nativeViewport_Create_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case nativeViewport_Show_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_Show_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Show()
		if err != nil {
			return
		}
	case nativeViewport_Hide_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_Hide_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Hide()
		if err != nil {
			return
		}
	case nativeViewport_Close_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_Close_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Close()
		if err != nil {
			return
		}
	case nativeViewport_SetSize_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_SetSize_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.SetSize(request.inSize)
		if err != nil {
			return
		}
	case nativeViewport_SetEventDispatcher_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_SetEventDispatcher_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.SetEventDispatcher(request.inDispatcher)
		if err != nil {
			return
		}
	case nativeViewport_GetContextProvider_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_GetContextProvider_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.GetContextProvider(request.inProvider)
		if err != nil {
			return
		}
	case nativeViewport_RequestMetrics_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewport_RequestMetrics_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response nativeViewport_RequestMetrics_ResponseParams
		response.outMetrics, err = s.impl.RequestMetrics()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: nativeViewport_RequestMetrics_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type ViewportMetrics struct {
	Size geometry.Size
	DevicePixelRatio float32
}


func (s *ViewportMetrics) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.Size.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.DevicePixelRatio); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var viewportMetrics_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *ViewportMetrics) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(viewportMetrics_Versions), func(i int) bool {
		return viewportMetrics_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(viewportMetrics_Versions) {
		if viewportMetrics_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := viewportMetrics_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.Size.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.DevicePixelRatio = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type SurfaceConfiguration struct {
	RedBits uint8
	GreenBits uint8
	BlueBits uint8
	AlphaBits uint8
	DepthBits uint8
	StencilBits uint8
}


func (s *SurfaceConfiguration) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint8(s.RedBits); err != nil {
		return err
	}
	if err := encoder.WriteUint8(s.GreenBits); err != nil {
		return err
	}
	if err := encoder.WriteUint8(s.BlueBits); err != nil {
		return err
	}
	if err := encoder.WriteUint8(s.AlphaBits); err != nil {
		return err
	}
	if err := encoder.WriteUint8(s.DepthBits); err != nil {
		return err
	}
	if err := encoder.WriteUint8(s.StencilBits); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surfaceConfiguration_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *SurfaceConfiguration) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surfaceConfiguration_Versions), func(i int) bool {
		return surfaceConfiguration_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surfaceConfiguration_Versions) {
		if surfaceConfiguration_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surfaceConfiguration_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint8()
		if err != nil {
			return err
		}
		s.RedBits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint8()
		if err != nil {
			return err
		}
		s.GreenBits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint8()
		if err != nil {
			return err
		}
		s.BlueBits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint8()
		if err != nil {
			return err
		}
		s.AlphaBits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint8()
		if err != nil {
			return err
		}
		s.DepthBits = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint8()
		if err != nil {
			return err
		}
		s.StencilBits = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

