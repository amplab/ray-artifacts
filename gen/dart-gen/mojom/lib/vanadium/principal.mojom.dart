// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library principal_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class AppInstanceName extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String url = null;
  String qualifier = null;

  AppInstanceName() : super(kVersions.last.size);

  AppInstanceName.init(
    String this.url, 
    String this.qualifier
  ) : super(kVersions.last.size);

  static AppInstanceName deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static AppInstanceName decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    AppInstanceName result = new AppInstanceName();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.url = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.qualifier = decoder0.decodeString(16, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "AppInstanceName";
    String fieldName;
    try {
      fieldName = "url";
      encoder0.encodeString(url, 8, false);
      fieldName = "qualifier";
      encoder0.encodeString(qualifier, 16, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "AppInstanceName("
           "url: $url" ", "
           "qualifier: $qualifier" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["url"] = url;
    map["qualifier"] = qualifier;
    return map;
  }
}


class User extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String email = null;
  List<int> blessing = null;

  User() : super(kVersions.last.size);

  User.init(
    String this.email, 
    List<int> this.blessing
  ) : super(kVersions.last.size);

  static User deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static User decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    User result = new User();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.email = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.blessing = decoder0.decodeUint8Array(16, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "User";
    String fieldName;
    try {
      fieldName = "email";
      encoder0.encodeString(email, 8, false);
      fieldName = "blessing";
      encoder0.encodeUint8Array(blessing, 16, bindings.kNothingNullable, bindings.kUnspecifiedArrayLength);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "User("
           "email: $email" ", "
           "blessing: $blessing" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["email"] = email;
    map["blessing"] = blessing;
    return map;
  }
}


class _PrincipalServiceLoginParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _PrincipalServiceLoginParams() : super(kVersions.last.size);

  _PrincipalServiceLoginParams.init(
  ) : super(kVersions.last.size);

  static _PrincipalServiceLoginParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PrincipalServiceLoginParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PrincipalServiceLoginParams result = new _PrincipalServiceLoginParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PrincipalServiceLoginParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PrincipalServiceLoginParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class PrincipalServiceLoginResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  User user = null;

  PrincipalServiceLoginResponseParams() : super(kVersions.last.size);

  PrincipalServiceLoginResponseParams.init(
    User this.user
  ) : super(kVersions.last.size);

  static PrincipalServiceLoginResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PrincipalServiceLoginResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PrincipalServiceLoginResponseParams result = new PrincipalServiceLoginResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.user = User.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PrincipalServiceLoginResponseParams";
    String fieldName;
    try {
      fieldName = "user";
      encoder0.encodeStruct(user, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PrincipalServiceLoginResponseParams("
           "user: $user" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["user"] = user;
    return map;
  }
}


class _PrincipalServiceLogoutParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _PrincipalServiceLogoutParams() : super(kVersions.last.size);

  _PrincipalServiceLogoutParams.init(
  ) : super(kVersions.last.size);

  static _PrincipalServiceLogoutParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PrincipalServiceLogoutParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PrincipalServiceLogoutParams result = new _PrincipalServiceLogoutParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PrincipalServiceLogoutParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PrincipalServiceLogoutParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _PrincipalServiceGetUserParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  AppInstanceName app = null;

  _PrincipalServiceGetUserParams() : super(kVersions.last.size);

  _PrincipalServiceGetUserParams.init(
    AppInstanceName this.app
  ) : super(kVersions.last.size);

  static _PrincipalServiceGetUserParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PrincipalServiceGetUserParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PrincipalServiceGetUserParams result = new _PrincipalServiceGetUserParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.app = AppInstanceName.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PrincipalServiceGetUserParams";
    String fieldName;
    try {
      fieldName = "app";
      encoder0.encodeStruct(app, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PrincipalServiceGetUserParams("
           "app: $app" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["app"] = app;
    return map;
  }
}


class PrincipalServiceGetUserResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  User user = null;

  PrincipalServiceGetUserResponseParams() : super(kVersions.last.size);

  PrincipalServiceGetUserResponseParams.init(
    User this.user
  ) : super(kVersions.last.size);

  static PrincipalServiceGetUserResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PrincipalServiceGetUserResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PrincipalServiceGetUserResponseParams result = new PrincipalServiceGetUserResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.user = User.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PrincipalServiceGetUserResponseParams";
    String fieldName;
    try {
      fieldName = "user";
      encoder0.encodeStruct(user, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PrincipalServiceGetUserResponseParams("
           "user: $user" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["user"] = user;
    return map;
  }
}


class _PrincipalServiceSetUserParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  User user = null;

  _PrincipalServiceSetUserParams() : super(kVersions.last.size);

  _PrincipalServiceSetUserParams.init(
    User this.user
  ) : super(kVersions.last.size);

  static _PrincipalServiceSetUserParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PrincipalServiceSetUserParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PrincipalServiceSetUserParams result = new _PrincipalServiceSetUserParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.user = User.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PrincipalServiceSetUserParams";
    String fieldName;
    try {
      fieldName = "user";
      encoder0.encodeStruct(user, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PrincipalServiceSetUserParams("
           "user: $user" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["user"] = user;
    return map;
  }
}


class PrincipalServiceSetUserResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String error = null;

  PrincipalServiceSetUserResponseParams() : super(kVersions.last.size);

  PrincipalServiceSetUserResponseParams.init(
    String this.error
  ) : super(kVersions.last.size);

  static PrincipalServiceSetUserResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PrincipalServiceSetUserResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PrincipalServiceSetUserResponseParams result = new PrincipalServiceSetUserResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.error = decoder0.decodeString(8, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PrincipalServiceSetUserResponseParams";
    String fieldName;
    try {
      fieldName = "error";
      encoder0.encodeString(error, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PrincipalServiceSetUserResponseParams("
           "error: $error" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["error"] = error;
    return map;
  }
}


class _PrincipalServiceGetLoggedInUsersParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _PrincipalServiceGetLoggedInUsersParams() : super(kVersions.last.size);

  _PrincipalServiceGetLoggedInUsersParams.init(
  ) : super(kVersions.last.size);

  static _PrincipalServiceGetLoggedInUsersParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PrincipalServiceGetLoggedInUsersParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PrincipalServiceGetLoggedInUsersParams result = new _PrincipalServiceGetLoggedInUsersParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PrincipalServiceGetLoggedInUsersParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PrincipalServiceGetLoggedInUsersParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class PrincipalServiceGetLoggedInUsersResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<User> ids = null;

  PrincipalServiceGetLoggedInUsersResponseParams() : super(kVersions.last.size);

  PrincipalServiceGetLoggedInUsersResponseParams.init(
    List<User> this.ids
  ) : super(kVersions.last.size);

  static PrincipalServiceGetLoggedInUsersResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PrincipalServiceGetLoggedInUsersResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PrincipalServiceGetLoggedInUsersResponseParams result = new PrincipalServiceGetLoggedInUsersResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.ids = new List<User>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          var decoder2 = decoder1.decodePointer(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
          result.ids[i1] = User.decode(decoder2);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PrincipalServiceGetLoggedInUsersResponseParams";
    String fieldName;
    try {
      fieldName = "ids";
      if (ids == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(ids.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < ids.length; ++i0) {
          encoder1.encodeStruct(ids[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PrincipalServiceGetLoggedInUsersResponseParams("
           "ids: $ids" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["ids"] = ids;
    return map;
  }
}

const int _principalServiceMethodLoginName = 0;
const int _principalServiceMethodLogoutName = 1;
const int _principalServiceMethodGetUserName = 2;
const int _principalServiceMethodSetUserName = 3;
const int _principalServiceMethodGetLoggedInUsersName = 4;

class _PrincipalServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class PrincipalService {
  static const String serviceName = "vanadium::PrincipalService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _PrincipalServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static PrincipalServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    PrincipalServiceProxy p = new PrincipalServiceProxy.unbound();
    String name = serviceName ?? PrincipalService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void login(void callback(User user));
  void logout();
  void getUser(AppInstanceName app,void callback(User user));
  void setUser(User user,void callback(String error));
  void getLoggedInUsers(void callback(List<User> ids));
}

abstract class PrincipalServiceInterface
    implements bindings.MojoInterface<PrincipalService>,
               PrincipalService {
  factory PrincipalServiceInterface([PrincipalService impl]) =>
      new PrincipalServiceStub.unbound(impl);

  factory PrincipalServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [PrincipalService impl]) =>
      new PrincipalServiceStub.fromEndpoint(endpoint, impl);

  factory PrincipalServiceInterface.fromMock(
      PrincipalService mock) =>
      new PrincipalServiceProxy.fromMock(mock);
}

abstract class PrincipalServiceInterfaceRequest
    implements bindings.MojoInterface<PrincipalService>,
               PrincipalService {
  factory PrincipalServiceInterfaceRequest() =>
      new PrincipalServiceProxy.unbound();
}

class _PrincipalServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<PrincipalService> {
  PrincipalService impl;

  _PrincipalServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _PrincipalServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _PrincipalServiceProxyControl.unbound() : super.unbound();

  String get serviceName => PrincipalService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _principalServiceMethodLoginName:
        var r = PrincipalServiceLoginResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.user );
        break;
      case _principalServiceMethodGetUserName:
        var r = PrincipalServiceGetUserResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.user );
        break;
      case _principalServiceMethodSetUserName:
        var r = PrincipalServiceSetUserResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.error );
        break;
      case _principalServiceMethodGetLoggedInUsersName:
        var r = PrincipalServiceGetLoggedInUsersResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.ids );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PrincipalServiceProxyControl($superString)";
  }
}

class PrincipalServiceProxy
    extends bindings.Proxy<PrincipalService>
    implements PrincipalService,
               PrincipalServiceInterface,
               PrincipalServiceInterfaceRequest {
  PrincipalServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _PrincipalServiceProxyControl.fromEndpoint(endpoint));

  PrincipalServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _PrincipalServiceProxyControl.fromHandle(handle));

  PrincipalServiceProxy.unbound()
      : super(new _PrincipalServiceProxyControl.unbound());

  factory PrincipalServiceProxy.fromMock(PrincipalService mock) {
    PrincipalServiceProxy newMockedProxy =
        new PrincipalServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static PrincipalServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PrincipalServiceProxy"));
    return new PrincipalServiceProxy.fromEndpoint(endpoint);
  }


  void login(void callback(User user)) {
    if (impl != null) {
      impl.login(callback);
      return;
    }
    var params = new _PrincipalServiceLoginParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((User user) {
        z.bindCallback(() {
          callback(user);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _principalServiceMethodLoginName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void logout() {
    if (impl != null) {
      impl.logout();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _PrincipalServiceLogoutParams();
    ctrl.sendMessage(params,
        _principalServiceMethodLogoutName);
  }
  void getUser(AppInstanceName app,void callback(User user)) {
    if (impl != null) {
      impl.getUser(app,callback);
      return;
    }
    var params = new _PrincipalServiceGetUserParams();
    params.app = app;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((User user) {
        z.bindCallback(() {
          callback(user);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _principalServiceMethodGetUserName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void setUser(User user,void callback(String error)) {
    if (impl != null) {
      impl.setUser(user,callback);
      return;
    }
    var params = new _PrincipalServiceSetUserParams();
    params.user = user;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((String error) {
        z.bindCallback(() {
          callback(error);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _principalServiceMethodSetUserName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void getLoggedInUsers(void callback(List<User> ids)) {
    if (impl != null) {
      impl.getLoggedInUsers(callback);
      return;
    }
    var params = new _PrincipalServiceGetLoggedInUsersParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((List<User> ids) {
        z.bindCallback(() {
          callback(ids);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _principalServiceMethodGetLoggedInUsersName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _PrincipalServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<PrincipalService> {
  PrincipalService _impl;

  _PrincipalServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PrincipalService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _PrincipalServiceStubControl.fromHandle(
      core.MojoHandle handle, [PrincipalService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _PrincipalServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => PrincipalService.serviceName;


  Function _principalServiceLoginResponseParamsResponder(
      int requestId) {
  return (User user) {
      var result = new PrincipalServiceLoginResponseParams();
      result.user = user;
      sendResponse(buildResponseWithId(
          result,
          _principalServiceMethodLoginName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _principalServiceGetUserResponseParamsResponder(
      int requestId) {
  return (User user) {
      var result = new PrincipalServiceGetUserResponseParams();
      result.user = user;
      sendResponse(buildResponseWithId(
          result,
          _principalServiceMethodGetUserName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _principalServiceSetUserResponseParamsResponder(
      int requestId) {
  return (String error) {
      var result = new PrincipalServiceSetUserResponseParams();
      result.error = error;
      sendResponse(buildResponseWithId(
          result,
          _principalServiceMethodSetUserName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }
  Function _principalServiceGetLoggedInUsersResponseParamsResponder(
      int requestId) {
  return (List<User> ids) {
      var result = new PrincipalServiceGetLoggedInUsersResponseParams();
      result.ids = ids;
      sendResponse(buildResponseWithId(
          result,
          _principalServiceMethodGetLoggedInUsersName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _principalServiceMethodLoginName:
        _impl.login(_principalServiceLoginResponseParamsResponder(message.header.requestId));
        break;
      case _principalServiceMethodLogoutName:
        _impl.logout();
        break;
      case _principalServiceMethodGetUserName:
        var params = _PrincipalServiceGetUserParams.deserialize(
            message.payload);
        _impl.getUser(params.app, _principalServiceGetUserResponseParamsResponder(message.header.requestId));
        break;
      case _principalServiceMethodSetUserName:
        var params = _PrincipalServiceSetUserParams.deserialize(
            message.payload);
        _impl.setUser(params.user, _principalServiceSetUserResponseParamsResponder(message.header.requestId));
        break;
      case _principalServiceMethodGetLoggedInUsersName:
        _impl.getLoggedInUsers(_principalServiceGetLoggedInUsersResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  PrincipalService get impl => _impl;
  set impl(PrincipalService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PrincipalServiceStubControl($superString)";
  }

  int get version => 0;
}

class PrincipalServiceStub
    extends bindings.Stub<PrincipalService>
    implements PrincipalService,
               PrincipalServiceInterface,
               PrincipalServiceInterfaceRequest {
  PrincipalServiceStub.unbound([PrincipalService impl])
      : super(new _PrincipalServiceStubControl.unbound(impl));

  PrincipalServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [PrincipalService impl])
      : super(new _PrincipalServiceStubControl.fromEndpoint(endpoint, impl));

  PrincipalServiceStub.fromHandle(
      core.MojoHandle handle, [PrincipalService impl])
      : super(new _PrincipalServiceStubControl.fromHandle(handle, impl));

  static PrincipalServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PrincipalServiceStub"));
    return new PrincipalServiceStub.fromEndpoint(endpoint);
  }


  void login(void callback(User user)) {
    return impl.login(callback);
  }
  void logout() {
    return impl.logout();
  }
  void getUser(AppInstanceName app,void callback(User user)) {
    return impl.getUser(app,callback);
  }
  void setUser(User user,void callback(String error)) {
    return impl.setUser(user,callback);
  }
  void getLoggedInUsers(void callback(List<User> ids)) {
    return impl.getLoggedInUsers(callback);
  }
}



