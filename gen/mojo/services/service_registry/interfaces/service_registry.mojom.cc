// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/service_registry/interfaces/service_registry.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---

ServiceRegistryProxy::ServiceRegistryProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ServiceRegistryProxy::AddServices(
    mojo::Array<mojo::String> in_interface_names, mojo::InterfaceHandle<mojo::ServiceProvider> in_service_provider) {
  size_t size = sizeof(internal::ServiceRegistry_AddServices_Params_Data);
  size += GetSerializedSize_(in_interface_names);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ServiceRegistry_Base::MessageOrdinals::AddServices), size);

  internal::ServiceRegistry_AddServices_Params_Data* params =
      internal::ServiceRegistry_AddServices_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams interface_names_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_interface_names, builder.buffer(), &params->interface_names.ptr,
                          &interface_names_validate_params);
  }
  if (!params->interface_names.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null interface_names in ServiceRegistry.AddServices request");
  }
  mojo::internal::InterfaceHandleToData(in_service_provider.Pass(),
                                        &params->service_provider);
  if (!params->service_provider.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid service_provider in ServiceRegistry.AddServices request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ServiceRegistryStub::ServiceRegistryStub()
    : sink_(nullptr),
      control_message_handler_(ServiceRegistry::Version_) {
}

ServiceRegistryStub::~ServiceRegistryStub() {}

bool ServiceRegistryStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ServiceRegistry_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceRegistry_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceRegistry_Base::MessageOrdinals::AddServices: {
      internal::ServiceRegistry_AddServices_Params_Data* params =
          reinterpret_cast<internal::ServiceRegistry_AddServices_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::Array<mojo::String> p_interface_names {};
      mojo::InterfaceHandle<mojo::ServiceProvider> p_service_provider {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->interface_names.ptr, &p_interface_names);
        mojo::internal::InterfaceDataToHandle(&params->service_provider, &p_service_provider);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AddServices(p_interface_names.Pass(), p_service_provider.Pass());
      return true;
    }
  }
  return false;
}

bool ServiceRegistryStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ServiceRegistry_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ServiceRegistry_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ServiceRegistry_Base::MessageOrdinals::AddServices: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
