// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/input_events/interfaces/input_events.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
KeyData_Data* KeyData_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(KeyData_Data))) KeyData_Data();
}

// static
mojo::internal::ValidationError KeyData_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const KeyData_Data* object = static_cast<const KeyData_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void KeyData_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void KeyData_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

KeyData_Data::KeyData_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PointerData_Data* PointerData_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PointerData_Data))) PointerData_Data();
}

// static
mojo::internal::ValidationError PointerData_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PointerData_Data* object = static_cast<const PointerData_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 56 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PointerData_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PointerData_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PointerData_Data::PointerData_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Event_Data* Event_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Event_Data))) Event_Data();
}

// static
mojo::internal::ValidationError Event_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Event_Data* object = static_cast<const Event_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->key_data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = KeyData::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->key_data.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->pointer_data.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = PointerData::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->pointer_data.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Event_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->key_data, handles);
  mojo::internal::Encode(&this->pointer_data, handles);
}

void Event_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->key_data, handles);
  mojo::internal::Decode(&this->pointer_data, handles);
}

Event_Data::Event_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---

}  // namespace internal

// --- Request and response validator definitions for interfaces --- 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)

// Struct Constants

// --- Struct builder definitions ---

// static
KeyDataPtr KeyData::New() {
  KeyDataPtr rv;
  mojo::internal::StructHelper<KeyData>::Initialize(&rv);
  return rv;
}

KeyData::KeyData()
    : key_code(),
      is_char(),
      character(),
      windows_key_code(),
      native_key_code(),
      text(),
      unmodified_text() {
}

KeyData::~KeyData() {
}


KeyDataPtr KeyData::Clone() const {
  KeyDataPtr rv(New());
  rv->key_code = key_code;
  rv->is_char = is_char;
  rv->character = character;
  rv->windows_key_code = windows_key_code;
  rv->native_key_code = native_key_code;
  rv->text = text;
  rv->unmodified_text = unmodified_text;
  return rv;
}


bool KeyData::Equals(const KeyData& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->key_code, other.key_code))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->is_char, other.is_char))
    return false;
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->character, other.character))
    return false;
  if (!mojo::internal::ValueTraits<mojo::KeyboardCode>::Equals(this->windows_key_code, other.windows_key_code))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->native_key_code, other.native_key_code))
    return false;
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->text, other.text))
    return false;
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->unmodified_text, other.unmodified_text))
    return false;
  return true;
}


// static
PointerDataPtr PointerData::New() {
  PointerDataPtr rv;
  mojo::internal::StructHelper<PointerData>::Initialize(&rv);
  return rv;
}

PointerData::PointerData()
    : pointer_id(),
      kind(),
      x(),
      y(),
      screen_x(),
      screen_y(),
      pressure(),
      radius_major(),
      radius_minor(),
      orientation(),
      horizontal_wheel(),
      vertical_wheel() {
}

PointerData::~PointerData() {
}


PointerDataPtr PointerData::Clone() const {
  PointerDataPtr rv(New());
  rv->pointer_id = pointer_id;
  rv->kind = kind;
  rv->x = x;
  rv->y = y;
  rv->screen_x = screen_x;
  rv->screen_y = screen_y;
  rv->pressure = pressure;
  rv->radius_major = radius_major;
  rv->radius_minor = radius_minor;
  rv->orientation = orientation;
  rv->horizontal_wheel = horizontal_wheel;
  rv->vertical_wheel = vertical_wheel;
  return rv;
}


bool PointerData::Equals(const PointerData& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->pointer_id, other.pointer_id))
    return false;
  if (!mojo::internal::ValueTraits<mojo::PointerKind>::Equals(this->kind, other.kind))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->x, other.x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->y, other.y))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->screen_x, other.screen_x))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->screen_y, other.screen_y))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->pressure, other.pressure))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->radius_major, other.radius_major))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->radius_minor, other.radius_minor))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->orientation, other.orientation))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->horizontal_wheel, other.horizontal_wheel))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->vertical_wheel, other.vertical_wheel))
    return false;
  return true;
}


// static
EventPtr Event::New() {
  EventPtr rv;
  mojo::internal::StructHelper<Event>::Initialize(&rv);
  return rv;
}

Event::Event()
    : action(),
      flags(),
      time_stamp(),
      key_data(),
      pointer_data() {
}

Event::~Event() {
}


EventPtr Event::Clone() const {
  EventPtr rv(New());
  rv->action = action;
  rv->flags = flags;
  rv->time_stamp = time_stamp;
  rv->key_data = key_data.Clone();
  rv->pointer_data = pointer_data.Clone();
  return rv;
}


bool Event::Equals(const Event& other) const {
  if (!mojo::internal::ValueTraits<mojo::EventType>::Equals(this->action, other.action))
    return false;
  if (!mojo::internal::ValueTraits<mojo::EventFlags>::Equals(this->flags, other.flags))
    return false;
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->time_stamp, other.time_stamp))
    return false;
  if (!mojo::internal::ValueTraits<KeyDataPtr>::Equals(this->key_data, other.key_data))
    return false;
  if (!mojo::internal::ValueTraits<PointerDataPtr>::Equals(this->pointer_data, other.pointer_data))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t KeyData::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool KeyData::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::KeyData_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool KeyData::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::KeyData_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void KeyData::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::KeyData_Data* input =
      static_cast<internal::KeyData_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const KeyData& input) {
  size_t size = sizeof(internal::KeyData_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    KeyData* input,
    mojo::internal::Buffer* buf,
    internal::KeyData_Data** output) {
  if (input) {
    internal::KeyData_Data* result =
        internal::KeyData_Data::New(buf);
    result->key_code = input->key_code;
    result->is_char = input->is_char;
    result->character = input->character;
    result->windows_key_code =
      static_cast<int32_t>(input->windows_key_code);
    result->native_key_code = input->native_key_code;
    result->text = input->text;
    result->unmodified_text = input->unmodified_text;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::KeyData_Data* input,
                  KeyData* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->key_code = input->key_code;
      result->is_char = input->is_char;
      result->character = input->character;
      result->windows_key_code = static_cast<mojo::KeyboardCode>(input->windows_key_code);
      result->native_key_code = input->native_key_code;
      result->text = input->text;
      result->unmodified_text = input->unmodified_text;
    } while (false);
  }
}


size_t PointerData::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PointerData::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PointerData_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PointerData::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PointerData_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PointerData::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PointerData_Data* input =
      static_cast<internal::PointerData_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PointerData& input) {
  size_t size = sizeof(internal::PointerData_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PointerData* input,
    mojo::internal::Buffer* buf,
    internal::PointerData_Data** output) {
  if (input) {
    internal::PointerData_Data* result =
        internal::PointerData_Data::New(buf);
    result->pointer_id = input->pointer_id;
    result->kind =
      static_cast<int32_t>(input->kind);
    result->x = input->x;
    result->y = input->y;
    result->screen_x = input->screen_x;
    result->screen_y = input->screen_y;
    result->pressure = input->pressure;
    result->radius_major = input->radius_major;
    result->radius_minor = input->radius_minor;
    result->orientation = input->orientation;
    result->horizontal_wheel = input->horizontal_wheel;
    result->vertical_wheel = input->vertical_wheel;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PointerData_Data* input,
                  PointerData* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->pointer_id = input->pointer_id;
      result->kind = static_cast<mojo::PointerKind>(input->kind);
      result->x = input->x;
      result->y = input->y;
      result->screen_x = input->screen_x;
      result->screen_y = input->screen_y;
      result->pressure = input->pressure;
      result->radius_major = input->radius_major;
      result->radius_minor = input->radius_minor;
      result->orientation = input->orientation;
      result->horizontal_wheel = input->horizontal_wheel;
      result->vertical_wheel = input->vertical_wheel;
    } while (false);
  }
}


size_t Event::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Event::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Event_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Event::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Event_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Event::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Event_Data* input =
      static_cast<internal::Event_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Event& input) {
  size_t size = sizeof(internal::Event_Data);
  size += input.key_data.is_null()
              ? 0
              : GetSerializedSize_(*input.key_data);
  size += input.pointer_data.is_null()
              ? 0
              : GetSerializedSize_(*input.pointer_data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Event* input,
    mojo::internal::Buffer* buf,
    internal::Event_Data** output) {
  if (input) {
    internal::Event_Data* result =
        internal::Event_Data::New(buf);
    result->action =
      static_cast<int32_t>(input->action);
    result->flags =
      static_cast<int32_t>(input->flags);
    result->time_stamp = input->time_stamp;
    {auto retval =Serialize_(input->key_data.get(),
                 buf,
                 &result->key_data.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {auto retval =Serialize_(input->pointer_data.get(),
                 buf,
                 &result->pointer_data.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Event_Data* input,
                  Event* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->action = static_cast<mojo::EventType>(input->action);
      result->flags = static_cast<mojo::EventFlags>(input->flags);
      result->time_stamp = input->time_stamp;
      if (input->key_data.ptr) {
        result->key_data = KeyData::New();
        Deserialize_(input->key_data.ptr, result->key_data.get());
      }
      if (input->pointer_data.ptr) {
        result->pointer_data = PointerData::New();
        Deserialize_(input->pointer_data.ptr, result->pointer_data.get());
      }
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---
}  // namespace mojo
