// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/flog/interfaces/flog.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace flog {

// --- Interface definitions ---
class FlogService_GetLogDescriptions_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FlogService_GetLogDescriptions_ForwardToCallback(
      const FlogService::GetLogDescriptionsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  FlogService::GetLogDescriptionsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(FlogService_GetLogDescriptions_ForwardToCallback);
};
bool FlogService_GetLogDescriptions_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::FlogService_GetLogDescriptions_ResponseParams_Data* params =
      reinterpret_cast<internal::FlogService_GetLogDescriptions_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<FlogDescriptionPtr> p_descriptions {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->descriptions.ptr, &p_descriptions);
  } while (false);
  callback_.Run(p_descriptions.Pass());
  return true;
}

FlogServiceProxy::FlogServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void FlogServiceProxy::CreateLogger(
    mojo::InterfaceRequest<FlogLogger> in_logger, const mojo::String& in_label) {
  size_t size = sizeof(internal::FlogService_CreateLogger_Params_Data);
  size += GetSerializedSize_(in_label);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::FlogService_Base::MessageOrdinals::CreateLogger), size);

  internal::FlogService_CreateLogger_Params_Data* params =
      internal::FlogService_CreateLogger_Params_Data::New(builder.buffer());
  params->logger = in_logger.PassMessagePipe().release();
  if (!params->logger.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid logger in FlogService.CreateLogger request");
  }
  SerializeString_(in_label, builder.buffer(), &params->label.ptr);
  if (!params->label.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null label in FlogService.CreateLogger request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void FlogServiceProxy::GetLogDescriptions(
    const GetLogDescriptionsCallback& callback) {
  size_t size = sizeof(internal::FlogService_GetLogDescriptions_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::FlogService_Base::MessageOrdinals::GetLogDescriptions), size);

  internal::FlogService_GetLogDescriptions_Params_Data* params =
      internal::FlogService_GetLogDescriptions_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new FlogService_GetLogDescriptions_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void FlogServiceProxy::CreateReader(
    mojo::InterfaceRequest<FlogReader> in_reader, uint32_t in_log_id) {
  size_t size = sizeof(internal::FlogService_CreateReader_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::FlogService_Base::MessageOrdinals::CreateReader), size);

  internal::FlogService_CreateReader_Params_Data* params =
      internal::FlogService_CreateReader_Params_Data::New(builder.buffer());
  params->reader = in_reader.PassMessagePipe().release();
  if (!params->reader.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid reader in FlogService.CreateReader request");
  }
  params->log_id = in_log_id;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class FlogService_GetLogDescriptions_ProxyToResponder
    : public FlogService::GetLogDescriptionsCallback::Runnable {
 public:
  ~FlogService_GetLogDescriptions_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "FlogService::GetLogDescriptions(callback) "
        "was never run.";
  }

  FlogService_GetLogDescriptions_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<FlogDescriptionPtr> in_descriptions) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(FlogService_GetLogDescriptions_ProxyToResponder);
};

void FlogService_GetLogDescriptions_ProxyToResponder::Run(
    mojo::Array<FlogDescriptionPtr> in_descriptions) const {
  size_t size = sizeof(internal::FlogService_GetLogDescriptions_ResponseParams_Data);
  size += GetSerializedSize_(in_descriptions);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::FlogService_Base::MessageOrdinals::GetLogDescriptions), size, request_id_);
  internal::FlogService_GetLogDescriptions_ResponseParams_Data* params =
      internal::FlogService_GetLogDescriptions_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams descriptions_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_descriptions, builder.buffer(), &params->descriptions.ptr,
                          &descriptions_validate_params);
  }
  if (!params->descriptions.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null descriptions in FlogService.GetLogDescriptions response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

FlogServiceStub::FlogServiceStub()
    : sink_(nullptr),
      control_message_handler_(FlogService::Version_) {
}

FlogServiceStub::~FlogServiceStub() {}

bool FlogServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::FlogService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::FlogService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::FlogService_Base::MessageOrdinals::CreateLogger: {
      internal::FlogService_CreateLogger_Params_Data* params =
          reinterpret_cast<internal::FlogService_CreateLogger_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<FlogLogger> p_logger {};
      mojo::String p_label {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_logger.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->logger)));
        Deserialize_(params->label.ptr, &p_label);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateLogger(p_logger.Pass(), p_label);
      return true;
    }
    case internal::FlogService_Base::MessageOrdinals::GetLogDescriptions: {
      break;
    }
    case internal::FlogService_Base::MessageOrdinals::CreateReader: {
      internal::FlogService_CreateReader_Params_Data* params =
          reinterpret_cast<internal::FlogService_CreateReader_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<FlogReader> p_reader {};
      uint32_t p_log_id {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_reader.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->reader)));
        p_log_id = params->log_id;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateReader(p_reader.Pass(), p_log_id);
      return true;
    }
  }
  return false;
}

bool FlogServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::FlogService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::FlogService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::FlogService_Base::MessageOrdinals::CreateLogger: {
      break;
    }
    case internal::FlogService_Base::MessageOrdinals::GetLogDescriptions: {
      internal::FlogService_GetLogDescriptions_Params_Data* params =
          reinterpret_cast<internal::FlogService_GetLogDescriptions_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      FlogService::GetLogDescriptionsCallback::Runnable* runnable =
          new FlogService_GetLogDescriptions_ProxyToResponder(
              message->request_id(), responder);
      FlogService::GetLogDescriptionsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetLogDescriptions(callback);
      return true;
    }
    case internal::FlogService_Base::MessageOrdinals::CreateReader: {
      break;
    }
  }
  return false;
}


FlogLoggerProxy::FlogLoggerProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void FlogLoggerProxy::LogChannelCreation(
    int64_t in_time_us, uint32_t in_channel_id, const mojo::String& in_type_name) {
  size_t size = sizeof(internal::FlogLogger_LogChannelCreation_Params_Data);
  size += GetSerializedSize_(in_type_name);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::FlogLogger_Base::MessageOrdinals::LogChannelCreation), size);

  internal::FlogLogger_LogChannelCreation_Params_Data* params =
      internal::FlogLogger_LogChannelCreation_Params_Data::New(builder.buffer());
  params->time_us = in_time_us;
  params->channel_id = in_channel_id;
  SerializeString_(in_type_name, builder.buffer(), &params->type_name.ptr);
  if (!params->type_name.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null type_name in FlogLogger.LogChannelCreation request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void FlogLoggerProxy::LogChannelMessage(
    int64_t in_time_us, uint32_t in_channel_id, mojo::Array<uint8_t> in_data) {
  size_t size = sizeof(internal::FlogLogger_LogChannelMessage_Params_Data);
  size += GetSerializedSize_(in_data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::FlogLogger_Base::MessageOrdinals::LogChannelMessage), size);

  internal::FlogLogger_LogChannelMessage_Params_Data* params =
      internal::FlogLogger_LogChannelMessage_Params_Data::New(builder.buffer());
  params->time_us = in_time_us;
  params->channel_id = in_channel_id;
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_data, builder.buffer(), &params->data.ptr,
                          &data_validate_params);
  }
  if (!params->data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null data in FlogLogger.LogChannelMessage request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void FlogLoggerProxy::LogChannelDeletion(
    int64_t in_time_us, uint32_t in_channel_id) {
  size_t size = sizeof(internal::FlogLogger_LogChannelDeletion_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::FlogLogger_Base::MessageOrdinals::LogChannelDeletion), size);

  internal::FlogLogger_LogChannelDeletion_Params_Data* params =
      internal::FlogLogger_LogChannelDeletion_Params_Data::New(builder.buffer());
  params->time_us = in_time_us;
  params->channel_id = in_channel_id;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

FlogLoggerStub::FlogLoggerStub()
    : sink_(nullptr),
      control_message_handler_(FlogLogger::Version_) {
}

FlogLoggerStub::~FlogLoggerStub() {}

bool FlogLoggerStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::FlogLogger_Base::MessageOrdinals method_ordinal =
      static_cast<internal::FlogLogger_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::FlogLogger_Base::MessageOrdinals::LogChannelCreation: {
      internal::FlogLogger_LogChannelCreation_Params_Data* params =
          reinterpret_cast<internal::FlogLogger_LogChannelCreation_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int64_t p_time_us {};
      uint32_t p_channel_id {};
      mojo::String p_type_name {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_time_us = params->time_us;
        p_channel_id = params->channel_id;
        Deserialize_(params->type_name.ptr, &p_type_name);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->LogChannelCreation(p_time_us, p_channel_id, p_type_name);
      return true;
    }
    case internal::FlogLogger_Base::MessageOrdinals::LogChannelMessage: {
      internal::FlogLogger_LogChannelMessage_Params_Data* params =
          reinterpret_cast<internal::FlogLogger_LogChannelMessage_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int64_t p_time_us {};
      uint32_t p_channel_id {};
      mojo::Array<uint8_t> p_data {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_time_us = params->time_us;
        p_channel_id = params->channel_id;
        Deserialize_(params->data.ptr, &p_data);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->LogChannelMessage(p_time_us, p_channel_id, p_data.Pass());
      return true;
    }
    case internal::FlogLogger_Base::MessageOrdinals::LogChannelDeletion: {
      internal::FlogLogger_LogChannelDeletion_Params_Data* params =
          reinterpret_cast<internal::FlogLogger_LogChannelDeletion_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int64_t p_time_us {};
      uint32_t p_channel_id {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_time_us = params->time_us;
        p_channel_id = params->channel_id;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->LogChannelDeletion(p_time_us, p_channel_id);
      return true;
    }
  }
  return false;
}

bool FlogLoggerStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::FlogLogger_Base::MessageOrdinals method_ordinal =
      static_cast<internal::FlogLogger_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::FlogLogger_Base::MessageOrdinals::LogChannelCreation: {
      break;
    }
    case internal::FlogLogger_Base::MessageOrdinals::LogChannelMessage: {
      break;
    }
    case internal::FlogLogger_Base::MessageOrdinals::LogChannelDeletion: {
      break;
    }
  }
  return false;
}

class FlogReader_GetEntries_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FlogReader_GetEntries_ForwardToCallback(
      const FlogReader::GetEntriesCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  FlogReader::GetEntriesCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(FlogReader_GetEntries_ForwardToCallback);
};
bool FlogReader_GetEntries_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::FlogReader_GetEntries_ResponseParams_Data* params =
      reinterpret_cast<internal::FlogReader_GetEntries_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<FlogEntryPtr> p_entries {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->entries.ptr, &p_entries);
  } while (false);
  callback_.Run(p_entries.Pass());
  return true;
}

FlogReaderProxy::FlogReaderProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void FlogReaderProxy::GetEntries(
    uint32_t in_start_index, uint32_t in_max_count, const GetEntriesCallback& callback) {
  size_t size = sizeof(internal::FlogReader_GetEntries_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::FlogReader_Base::MessageOrdinals::GetEntries), size);

  internal::FlogReader_GetEntries_Params_Data* params =
      internal::FlogReader_GetEntries_Params_Data::New(builder.buffer());
  params->start_index = in_start_index;
  params->max_count = in_max_count;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new FlogReader_GetEntries_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class FlogReader_GetEntries_ProxyToResponder
    : public FlogReader::GetEntriesCallback::Runnable {
 public:
  ~FlogReader_GetEntries_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "FlogReader::GetEntries(p_start_index, p_max_count, callback) "
        "was never run.";
  }

  FlogReader_GetEntries_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<FlogEntryPtr> in_entries) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(FlogReader_GetEntries_ProxyToResponder);
};

void FlogReader_GetEntries_ProxyToResponder::Run(
    mojo::Array<FlogEntryPtr> in_entries) const {
  size_t size = sizeof(internal::FlogReader_GetEntries_ResponseParams_Data);
  size += GetSerializedSize_(in_entries);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::FlogReader_Base::MessageOrdinals::GetEntries), size, request_id_);
  internal::FlogReader_GetEntries_ResponseParams_Data* params =
      internal::FlogReader_GetEntries_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams entries_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_entries, builder.buffer(), &params->entries.ptr,
                          &entries_validate_params);
  }
  if (!params->entries.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null entries in FlogReader.GetEntries response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

FlogReaderStub::FlogReaderStub()
    : sink_(nullptr),
      control_message_handler_(FlogReader::Version_) {
}

FlogReaderStub::~FlogReaderStub() {}

bool FlogReaderStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::FlogReader_Base::MessageOrdinals method_ordinal =
      static_cast<internal::FlogReader_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::FlogReader_Base::MessageOrdinals::GetEntries: {
      break;
    }
  }
  return false;
}

bool FlogReaderStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::FlogReader_Base::MessageOrdinals method_ordinal =
      static_cast<internal::FlogReader_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::FlogReader_Base::MessageOrdinals::GetEntries: {
      internal::FlogReader_GetEntries_Params_Data* params =
          reinterpret_cast<internal::FlogReader_GetEntries_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      FlogReader::GetEntriesCallback::Runnable* runnable =
          new FlogReader_GetEntries_ProxyToResponder(
              message->request_id(), responder);
      FlogReader::GetEntriesCallback callback(runnable);
      
      uint32_t p_start_index {};
      uint32_t p_max_count {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_start_index = params->start_index;
        p_max_count = params->max_count;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetEntries(p_start_index, p_max_count, callback);
      return true;
    }
  }
  return false;
}

}  // namespace flog
}  // namespace mojo
