// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/versioning_test_client.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {
namespace test {
namespace versioning {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
Employee_Data* Employee_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Employee_Data))) Employee_Data();
}

// static
mojo::internal::ValidationError Employee_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Employee_Data* object = static_cast<const Employee_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->name.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null name field in Employee struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->name.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams name_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->name.offset),
          bounds_checker, &name_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Employee_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->name, handles);
}

void Employee_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->name, handles);
}

Employee_Data::Employee_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
HumanResourceDatabase_AddEmployee_Params_Data* HumanResourceDatabase_AddEmployee_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_AddEmployee_Params_Data))) HumanResourceDatabase_AddEmployee_Params_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_AddEmployee_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_AddEmployee_Params_Data* object = static_cast<const HumanResourceDatabase_AddEmployee_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->employee.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null employee field in HumanResourceDatabase_AddEmployee_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->employee.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Employee::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->employee.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_AddEmployee_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->employee, handles);
}

void HumanResourceDatabase_AddEmployee_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->employee, handles);
}

HumanResourceDatabase_AddEmployee_Params_Data::HumanResourceDatabase_AddEmployee_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
HumanResourceDatabase_AddEmployee_ResponseParams_Data* HumanResourceDatabase_AddEmployee_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_AddEmployee_ResponseParams_Data))) HumanResourceDatabase_AddEmployee_ResponseParams_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_AddEmployee_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_AddEmployee_ResponseParams_Data* object = static_cast<const HumanResourceDatabase_AddEmployee_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_AddEmployee_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void HumanResourceDatabase_AddEmployee_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

HumanResourceDatabase_AddEmployee_ResponseParams_Data::HumanResourceDatabase_AddEmployee_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
HumanResourceDatabase_QueryEmployee_Params_Data* HumanResourceDatabase_QueryEmployee_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_QueryEmployee_Params_Data))) HumanResourceDatabase_QueryEmployee_Params_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_QueryEmployee_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_QueryEmployee_Params_Data* object = static_cast<const HumanResourceDatabase_QueryEmployee_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }, { 1, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_QueryEmployee_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 1);
}

void HumanResourceDatabase_QueryEmployee_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

HumanResourceDatabase_QueryEmployee_Params_Data::HumanResourceDatabase_QueryEmployee_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 1;
}


// static
HumanResourceDatabase_QueryEmployee_ResponseParams_Data* HumanResourceDatabase_QueryEmployee_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_QueryEmployee_ResponseParams_Data))) HumanResourceDatabase_QueryEmployee_ResponseParams_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_QueryEmployee_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_QueryEmployee_ResponseParams_Data* object = static_cast<const HumanResourceDatabase_QueryEmployee_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }, { 1, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->employee.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Employee::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->employee.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  if (object->header_.version < 1)
    return mojo::internal::ValidationError::NONE;
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->finger_print.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams finger_print_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->finger_print.offset),
          bounds_checker, &finger_print_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_QueryEmployee_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 1);
  mojo::internal::Encode(&this->employee, handles);
  mojo::internal::Encode(&this->finger_print, handles);
}

void HumanResourceDatabase_QueryEmployee_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->employee, handles);
  if (header_.version < 1)
    return;
  mojo::internal::Decode(&this->finger_print, handles);
}

HumanResourceDatabase_QueryEmployee_ResponseParams_Data::HumanResourceDatabase_QueryEmployee_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 1;
}



// static
HumanResourceDatabase_AttachFingerPrint_Params_Data* HumanResourceDatabase_AttachFingerPrint_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_AttachFingerPrint_Params_Data))) HumanResourceDatabase_AttachFingerPrint_Params_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_AttachFingerPrint_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_AttachFingerPrint_Params_Data* object = static_cast<const HumanResourceDatabase_AttachFingerPrint_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->finger_print.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null finger_print field in HumanResourceDatabase_AttachFingerPrint_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->finger_print.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams finger_print_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->finger_print.offset),
          bounds_checker, &finger_print_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_AttachFingerPrint_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->finger_print, handles);
}

void HumanResourceDatabase_AttachFingerPrint_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->finger_print, handles);
}

HumanResourceDatabase_AttachFingerPrint_Params_Data::HumanResourceDatabase_AttachFingerPrint_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data))) HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* object = static_cast<const HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
HumanResourceDatabase_ListEmployeeIds_Params_Data* HumanResourceDatabase_ListEmployeeIds_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_ListEmployeeIds_Params_Data))) HumanResourceDatabase_ListEmployeeIds_Params_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_ListEmployeeIds_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_ListEmployeeIds_Params_Data* object = static_cast<const HumanResourceDatabase_ListEmployeeIds_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_ListEmployeeIds_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void HumanResourceDatabase_ListEmployeeIds_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

HumanResourceDatabase_ListEmployeeIds_Params_Data::HumanResourceDatabase_ListEmployeeIds_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data))) HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data();
}

// static
mojo::internal::ValidationError HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* object = static_cast<const HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->ids.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams ids_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint64_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->ids.offset),
          bounds_checker, &ids_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->ids, handles);
}

void HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->ids, handles);
}

HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError HumanResourceDatabaseRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'HumanResourceDatabase', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::HumanResourceDatabase_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HumanResourceDatabase_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AddEmployee: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'HumanResourceDatabase', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::HumanResourceDatabase_AddEmployee_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'HumanResourceDatabase', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::QueryEmployee: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'HumanResourceDatabase', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::HumanResourceDatabase_QueryEmployee_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'HumanResourceDatabase', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AttachFingerPrint: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'HumanResourceDatabase', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::HumanResourceDatabase_AttachFingerPrint_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'HumanResourceDatabase', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::ListEmployeeIds: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'HumanResourceDatabase', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::HumanResourceDatabase_ListEmployeeIds_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'HumanResourceDatabase', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'HumanResourceDatabase'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError HumanResourceDatabaseResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'HumanResourceDatabase', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'HumanResourceDatabase', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::HumanResourceDatabase_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HumanResourceDatabase_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AddEmployee: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'HumanResourceDatabase',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::QueryEmployee: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'HumanResourceDatabase',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AttachFingerPrint: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'HumanResourceDatabase',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::ListEmployeeIds: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'HumanResourceDatabase',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'HumanResourceDatabase'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---
bool Department_IsValidValue(Department value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
    case 1:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const Department& val) {
  return (stream << static_cast<int32_t>(val));
}

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::HumanResourceDatabase_Base::Name_[] = "mojo::test::versioning::HumanResourceDatabase";
const uint32_t internal::HumanResourceDatabase_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
EmployeePtr Employee::New() {
  EmployeePtr rv;
  mojo::internal::StructHelper<Employee>::Initialize(&rv);
  return rv;
}

Employee::Employee()
    : employee_id(),
      name(),
      department() {
}

Employee::~Employee() {
}


EmployeePtr Employee::Clone() const {
  EmployeePtr rv(New());
  rv->employee_id = employee_id;
  rv->name = name;
  rv->department = department;
  return rv;
}


bool Employee::Equals(const Employee& other) const {
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->employee_id, other.employee_id))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->name, other.name))
    return false;
  if (!mojo::internal::ValueTraits<Department>::Equals(this->department, other.department))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t Employee::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Employee::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Employee_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Employee::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Employee_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Employee::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Employee_Data* input =
      static_cast<internal::Employee_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Employee& input) {
  size_t size = sizeof(internal::Employee_Data);
  size += GetSerializedSize_(input.name);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Employee* input,
    mojo::internal::Buffer* buf,
    internal::Employee_Data** output) {
  if (input) {
    internal::Employee_Data* result =
        internal::Employee_Data::New(buf);
    result->employee_id = input->employee_id;
    SerializeString_(input->name, buf, &result->name.ptr);
    if (!result->name.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null name in Employee struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->department =
      static_cast<int32_t>(input->department);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Employee_Data* input,
                  Employee* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->employee_id = input->employee_id;
      Deserialize_(input->name.ptr, &result->name);
      result->department = static_cast<Department>(input->department);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
HumanResourceDatabase_AddEmployee_ParamsPtr HumanResourceDatabase_AddEmployee_Params::New() {
  HumanResourceDatabase_AddEmployee_ParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_AddEmployee_Params>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_AddEmployee_Params::HumanResourceDatabase_AddEmployee_Params()
    : employee() {
}

HumanResourceDatabase_AddEmployee_Params::~HumanResourceDatabase_AddEmployee_Params() {
}


HumanResourceDatabase_AddEmployee_ParamsPtr HumanResourceDatabase_AddEmployee_Params::Clone() const {
  HumanResourceDatabase_AddEmployee_ParamsPtr rv(New());
  rv->employee = employee.Clone();
  return rv;
}


bool HumanResourceDatabase_AddEmployee_Params::Equals(const HumanResourceDatabase_AddEmployee_Params& other) const {
  if (!mojo::internal::ValueTraits<EmployeePtr>::Equals(this->employee, other.employee))
    return false;
  return true;
}


size_t HumanResourceDatabase_AddEmployee_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_AddEmployee_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_AddEmployee_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_AddEmployee_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_AddEmployee_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_AddEmployee_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_AddEmployee_Params_Data* input =
      static_cast<internal::HumanResourceDatabase_AddEmployee_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_AddEmployee_Params& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_AddEmployee_Params_Data);
  size += input.employee.is_null()
              ? 0
              : GetSerializedSize_(*input.employee);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_AddEmployee_Params* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_AddEmployee_Params_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_AddEmployee_Params_Data* result =
        internal::HumanResourceDatabase_AddEmployee_Params_Data::New(buf);
    {auto retval =Serialize_(input->employee.get(),
                 buf,
                 &result->employee.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->employee.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null employee in HumanResourceDatabase_AddEmployee_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_AddEmployee_Params_Data* input,
                  HumanResourceDatabase_AddEmployee_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->employee.ptr) {
        result->employee = Employee::New();
        Deserialize_(input->employee.ptr, result->employee.get());
      }
    } while (false);
  }
}


// static
HumanResourceDatabase_AddEmployee_ResponseParamsPtr HumanResourceDatabase_AddEmployee_ResponseParams::New() {
  HumanResourceDatabase_AddEmployee_ResponseParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_AddEmployee_ResponseParams>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_AddEmployee_ResponseParams::HumanResourceDatabase_AddEmployee_ResponseParams()
    : success() {
}

HumanResourceDatabase_AddEmployee_ResponseParams::~HumanResourceDatabase_AddEmployee_ResponseParams() {
}


HumanResourceDatabase_AddEmployee_ResponseParamsPtr HumanResourceDatabase_AddEmployee_ResponseParams::Clone() const {
  HumanResourceDatabase_AddEmployee_ResponseParamsPtr rv(New());
  rv->success = success;
  return rv;
}


bool HumanResourceDatabase_AddEmployee_ResponseParams::Equals(const HumanResourceDatabase_AddEmployee_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->success, other.success))
    return false;
  return true;
}


size_t HumanResourceDatabase_AddEmployee_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_AddEmployee_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_AddEmployee_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_AddEmployee_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data* input =
      static_cast<internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_AddEmployee_ResponseParams& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_AddEmployee_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data* result =
        internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data::New(buf);
    result->success = input->success;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data* input,
                  HumanResourceDatabase_AddEmployee_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->success = input->success;
    } while (false);
  }
}



// static
HumanResourceDatabase_QueryEmployee_ParamsPtr HumanResourceDatabase_QueryEmployee_Params::New() {
  HumanResourceDatabase_QueryEmployee_ParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_QueryEmployee_Params>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_QueryEmployee_Params::HumanResourceDatabase_QueryEmployee_Params()
    : id(),
      retrieve_finger_print() {
}

HumanResourceDatabase_QueryEmployee_Params::~HumanResourceDatabase_QueryEmployee_Params() {
}


HumanResourceDatabase_QueryEmployee_ParamsPtr HumanResourceDatabase_QueryEmployee_Params::Clone() const {
  HumanResourceDatabase_QueryEmployee_ParamsPtr rv(New());
  rv->id = id;
  rv->retrieve_finger_print = retrieve_finger_print;
  return rv;
}


bool HumanResourceDatabase_QueryEmployee_Params::Equals(const HumanResourceDatabase_QueryEmployee_Params& other) const {
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->id, other.id))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->retrieve_finger_print, other.retrieve_finger_print))
    return false;
  return true;
}


size_t HumanResourceDatabase_QueryEmployee_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_QueryEmployee_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_QueryEmployee_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_QueryEmployee_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_QueryEmployee_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_QueryEmployee_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_QueryEmployee_Params_Data* input =
      static_cast<internal::HumanResourceDatabase_QueryEmployee_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_QueryEmployee_Params& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_QueryEmployee_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_QueryEmployee_Params* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_QueryEmployee_Params_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_QueryEmployee_Params_Data* result =
        internal::HumanResourceDatabase_QueryEmployee_Params_Data::New(buf);
    result->id = input->id;
    result->retrieve_finger_print = input->retrieve_finger_print;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_QueryEmployee_Params_Data* input,
                  HumanResourceDatabase_QueryEmployee_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id = input->id;
      if (input->header_.version < 1)
        break;
      result->retrieve_finger_print = input->retrieve_finger_print;
    } while (false);
  }
}


// static
HumanResourceDatabase_QueryEmployee_ResponseParamsPtr HumanResourceDatabase_QueryEmployee_ResponseParams::New() {
  HumanResourceDatabase_QueryEmployee_ResponseParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_QueryEmployee_ResponseParams>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_QueryEmployee_ResponseParams::HumanResourceDatabase_QueryEmployee_ResponseParams()
    : employee(),
      finger_print() {
}

HumanResourceDatabase_QueryEmployee_ResponseParams::~HumanResourceDatabase_QueryEmployee_ResponseParams() {
}


HumanResourceDatabase_QueryEmployee_ResponseParamsPtr HumanResourceDatabase_QueryEmployee_ResponseParams::Clone() const {
  HumanResourceDatabase_QueryEmployee_ResponseParamsPtr rv(New());
  rv->employee = employee.Clone();
  rv->finger_print = finger_print.Clone();
  return rv;
}


bool HumanResourceDatabase_QueryEmployee_ResponseParams::Equals(const HumanResourceDatabase_QueryEmployee_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<EmployeePtr>::Equals(this->employee, other.employee))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->finger_print, other.finger_print))
    return false;
  return true;
}


size_t HumanResourceDatabase_QueryEmployee_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_QueryEmployee_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_QueryEmployee_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_QueryEmployee_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data* input =
      static_cast<internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_QueryEmployee_ResponseParams& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data);
  size += input.employee.is_null()
              ? 0
              : GetSerializedSize_(*input.employee);
  size += GetSerializedSize_(input.finger_print);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_QueryEmployee_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data* result =
        internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->employee.get(),
                 buf,
                 &result->employee.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams finger_print_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->finger_print, buf, &result->finger_print.ptr,
                            &finger_print_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data* input,
                  HumanResourceDatabase_QueryEmployee_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->employee.ptr) {
        result->employee = Employee::New();
        Deserialize_(input->employee.ptr, result->employee.get());
      }
      if (input->header_.version < 1)
        break;
      Deserialize_(input->finger_print.ptr, &result->finger_print);
    } while (false);
  }
}



// static
HumanResourceDatabase_AttachFingerPrint_ParamsPtr HumanResourceDatabase_AttachFingerPrint_Params::New() {
  HumanResourceDatabase_AttachFingerPrint_ParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_AttachFingerPrint_Params>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_AttachFingerPrint_Params::HumanResourceDatabase_AttachFingerPrint_Params()
    : id(),
      finger_print() {
}

HumanResourceDatabase_AttachFingerPrint_Params::~HumanResourceDatabase_AttachFingerPrint_Params() {
}


HumanResourceDatabase_AttachFingerPrint_ParamsPtr HumanResourceDatabase_AttachFingerPrint_Params::Clone() const {
  HumanResourceDatabase_AttachFingerPrint_ParamsPtr rv(New());
  rv->id = id;
  rv->finger_print = finger_print.Clone();
  return rv;
}


bool HumanResourceDatabase_AttachFingerPrint_Params::Equals(const HumanResourceDatabase_AttachFingerPrint_Params& other) const {
  if (!mojo::internal::ValueTraits<uint64_t>::Equals(this->id, other.id))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->finger_print, other.finger_print))
    return false;
  return true;
}


size_t HumanResourceDatabase_AttachFingerPrint_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_AttachFingerPrint_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_AttachFingerPrint_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_AttachFingerPrint_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_AttachFingerPrint_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_AttachFingerPrint_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_AttachFingerPrint_Params_Data* input =
      static_cast<internal::HumanResourceDatabase_AttachFingerPrint_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_AttachFingerPrint_Params& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_AttachFingerPrint_Params_Data);
  size += GetSerializedSize_(input.finger_print);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_AttachFingerPrint_Params* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_AttachFingerPrint_Params_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_AttachFingerPrint_Params_Data* result =
        internal::HumanResourceDatabase_AttachFingerPrint_Params_Data::New(buf);
    result->id = input->id;
    {
      const mojo::internal::ArrayValidateParams finger_print_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->finger_print, buf, &result->finger_print.ptr,
                            &finger_print_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->finger_print.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null finger_print in HumanResourceDatabase_AttachFingerPrint_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_AttachFingerPrint_Params_Data* input,
                  HumanResourceDatabase_AttachFingerPrint_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id = input->id;
      Deserialize_(input->finger_print.ptr, &result->finger_print);
    } while (false);
  }
}


// static
HumanResourceDatabase_AttachFingerPrint_ResponseParamsPtr HumanResourceDatabase_AttachFingerPrint_ResponseParams::New() {
  HumanResourceDatabase_AttachFingerPrint_ResponseParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_AttachFingerPrint_ResponseParams>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_AttachFingerPrint_ResponseParams::HumanResourceDatabase_AttachFingerPrint_ResponseParams()
    : success() {
}

HumanResourceDatabase_AttachFingerPrint_ResponseParams::~HumanResourceDatabase_AttachFingerPrint_ResponseParams() {
}


HumanResourceDatabase_AttachFingerPrint_ResponseParamsPtr HumanResourceDatabase_AttachFingerPrint_ResponseParams::Clone() const {
  HumanResourceDatabase_AttachFingerPrint_ResponseParamsPtr rv(New());
  rv->success = success;
  return rv;
}


bool HumanResourceDatabase_AttachFingerPrint_ResponseParams::Equals(const HumanResourceDatabase_AttachFingerPrint_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->success, other.success))
    return false;
  return true;
}


size_t HumanResourceDatabase_AttachFingerPrint_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_AttachFingerPrint_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_AttachFingerPrint_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_AttachFingerPrint_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* input =
      static_cast<internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_AttachFingerPrint_ResponseParams& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_AttachFingerPrint_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* result =
        internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::New(buf);
    result->success = input->success;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* input,
                  HumanResourceDatabase_AttachFingerPrint_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->success = input->success;
    } while (false);
  }
}



// static
HumanResourceDatabase_ListEmployeeIds_ParamsPtr HumanResourceDatabase_ListEmployeeIds_Params::New() {
  HumanResourceDatabase_ListEmployeeIds_ParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_ListEmployeeIds_Params>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_ListEmployeeIds_Params::HumanResourceDatabase_ListEmployeeIds_Params() {
}

HumanResourceDatabase_ListEmployeeIds_Params::~HumanResourceDatabase_ListEmployeeIds_Params() {
}


HumanResourceDatabase_ListEmployeeIds_ParamsPtr HumanResourceDatabase_ListEmployeeIds_Params::Clone() const {
  HumanResourceDatabase_ListEmployeeIds_ParamsPtr rv(New());
  return rv;
}


bool HumanResourceDatabase_ListEmployeeIds_Params::Equals(const HumanResourceDatabase_ListEmployeeIds_Params& other) const {
  return true;
}


size_t HumanResourceDatabase_ListEmployeeIds_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_ListEmployeeIds_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_ListEmployeeIds_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_ListEmployeeIds_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_ListEmployeeIds_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_ListEmployeeIds_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_ListEmployeeIds_Params_Data* input =
      static_cast<internal::HumanResourceDatabase_ListEmployeeIds_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_ListEmployeeIds_Params& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_ListEmployeeIds_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_ListEmployeeIds_Params* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_ListEmployeeIds_Params_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_ListEmployeeIds_Params_Data* result =
        internal::HumanResourceDatabase_ListEmployeeIds_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_ListEmployeeIds_Params_Data* input,
                  HumanResourceDatabase_ListEmployeeIds_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
HumanResourceDatabase_ListEmployeeIds_ResponseParamsPtr HumanResourceDatabase_ListEmployeeIds_ResponseParams::New() {
  HumanResourceDatabase_ListEmployeeIds_ResponseParamsPtr rv;
  mojo::internal::StructHelper<HumanResourceDatabase_ListEmployeeIds_ResponseParams>::Initialize(&rv);
  return rv;
}

HumanResourceDatabase_ListEmployeeIds_ResponseParams::HumanResourceDatabase_ListEmployeeIds_ResponseParams()
    : ids() {
}

HumanResourceDatabase_ListEmployeeIds_ResponseParams::~HumanResourceDatabase_ListEmployeeIds_ResponseParams() {
}


HumanResourceDatabase_ListEmployeeIds_ResponseParamsPtr HumanResourceDatabase_ListEmployeeIds_ResponseParams::Clone() const {
  HumanResourceDatabase_ListEmployeeIds_ResponseParamsPtr rv(New());
  rv->ids = ids.Clone();
  return rv;
}


bool HumanResourceDatabase_ListEmployeeIds_ResponseParams::Equals(const HumanResourceDatabase_ListEmployeeIds_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<uint64_t>>::Equals(this->ids, other.ids))
    return false;
  return true;
}


size_t HumanResourceDatabase_ListEmployeeIds_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool HumanResourceDatabase_ListEmployeeIds_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool HumanResourceDatabase_ListEmployeeIds_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void HumanResourceDatabase_ListEmployeeIds_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* input =
      static_cast<internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const HumanResourceDatabase_ListEmployeeIds_ResponseParams& input) {
  size_t size = sizeof(internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data);
  size += GetSerializedSize_(input.ids);
  return size;
}

mojo::internal::ValidationError Serialize_(
    HumanResourceDatabase_ListEmployeeIds_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data** output) {
  if (input) {
    internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* result =
        internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams ids_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->ids, buf, &result->ids.ptr,
                            &ids_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* input,
                  HumanResourceDatabase_ListEmployeeIds_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->ids.ptr, &result->ids);
    } while (false);
  }
}

}  // namespace versioning
}  // namespace test
}  // namespace mojo
