// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/tcp_bound_socket.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class TCPBoundSocket_StartListening_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TCPBoundSocket_StartListening_ForwardToCallback(
      const TCPBoundSocket::StartListeningCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TCPBoundSocket::StartListeningCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TCPBoundSocket_StartListening_ForwardToCallback);
};
bool TCPBoundSocket_StartListening_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TCPBoundSocket_StartListening_ResponseParams_Data* params =
      reinterpret_cast<internal::TCPBoundSocket_StartListening_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}
class TCPBoundSocket_Connect_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TCPBoundSocket_Connect_ForwardToCallback(
      const TCPBoundSocket::ConnectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TCPBoundSocket::ConnectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TCPBoundSocket_Connect_ForwardToCallback);
};
bool TCPBoundSocket_Connect_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TCPBoundSocket_Connect_ResponseParams_Data* params =
      reinterpret_cast<internal::TCPBoundSocket_Connect_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}

TCPBoundSocketProxy::TCPBoundSocketProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TCPBoundSocketProxy::StartListening(
    mojo::InterfaceRequest<mojo::TCPServerSocket> in_server, const StartListeningCallback& callback) {
  size_t size = sizeof(internal::TCPBoundSocket_StartListening_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TCPBoundSocket_Base::MessageOrdinals::StartListening), size);

  internal::TCPBoundSocket_StartListening_Params_Data* params =
      internal::TCPBoundSocket_StartListening_Params_Data::New(builder.buffer());
  params->server = in_server.PassMessagePipe().release();
  if (!params->server.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid server in TCPBoundSocket.StartListening request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TCPBoundSocket_StartListening_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TCPBoundSocketProxy::Connect(
    mojo::NetAddressPtr in_remote_address, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::ScopedDataPipeProducerHandle in_receive_stream, mojo::InterfaceRequest<mojo::TCPConnectedSocket> in_client_socket, const ConnectCallback& callback) {
  size_t size = sizeof(internal::TCPBoundSocket_Connect_Params_Data);
  size += in_remote_address.is_null()
              ? 0
              : GetSerializedSize_(*in_remote_address);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TCPBoundSocket_Base::MessageOrdinals::Connect), size);

  internal::TCPBoundSocket_Connect_Params_Data* params =
      internal::TCPBoundSocket_Connect_Params_Data::New(builder.buffer());
  {Serialize_(in_remote_address.get(),
               builder.buffer(),
               &params->remote_address.ptr);
  }
  if (!params->remote_address.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null remote_address in TCPBoundSocket.Connect request");
  }
  params->send_stream = in_send_stream.release();
  if (!params->send_stream.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid send_stream in TCPBoundSocket.Connect request");
  }
  params->receive_stream = in_receive_stream.release();
  if (!params->receive_stream.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid receive_stream in TCPBoundSocket.Connect request");
  }
  params->client_socket = in_client_socket.PassMessagePipe().release();
  if (!params->client_socket.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client_socket in TCPBoundSocket.Connect request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TCPBoundSocket_Connect_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TCPBoundSocket_StartListening_ProxyToResponder
    : public TCPBoundSocket::StartListeningCallback::Runnable {
 public:
  ~TCPBoundSocket_StartListening_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TCPBoundSocket::StartListening(p_server.Pass(), callback) "
        "was never run.";
  }

  TCPBoundSocket_StartListening_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TCPBoundSocket_StartListening_ProxyToResponder);
};

void TCPBoundSocket_StartListening_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::TCPBoundSocket_StartListening_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TCPBoundSocket_Base::MessageOrdinals::StartListening), size, request_id_);
  internal::TCPBoundSocket_StartListening_ResponseParams_Data* params =
      internal::TCPBoundSocket_StartListening_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in TCPBoundSocket.StartListening response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TCPBoundSocket_Connect_ProxyToResponder
    : public TCPBoundSocket::ConnectCallback::Runnable {
 public:
  ~TCPBoundSocket_Connect_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TCPBoundSocket::Connect(p_remote_address.Pass(), p_send_stream.Pass(), p_receive_stream.Pass(), p_client_socket.Pass(), callback) "
        "was never run.";
  }

  TCPBoundSocket_Connect_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TCPBoundSocket_Connect_ProxyToResponder);
};

void TCPBoundSocket_Connect_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::TCPBoundSocket_Connect_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TCPBoundSocket_Base::MessageOrdinals::Connect), size, request_id_);
  internal::TCPBoundSocket_Connect_ResponseParams_Data* params =
      internal::TCPBoundSocket_Connect_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in TCPBoundSocket.Connect response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TCPBoundSocketStub::TCPBoundSocketStub()
    : sink_(nullptr),
      control_message_handler_(TCPBoundSocket::Version_) {
}

TCPBoundSocketStub::~TCPBoundSocketStub() {}

bool TCPBoundSocketStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TCPBoundSocket_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TCPBoundSocket_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TCPBoundSocket_Base::MessageOrdinals::StartListening: {
      break;
    }
    case internal::TCPBoundSocket_Base::MessageOrdinals::Connect: {
      break;
    }
  }
  return false;
}

bool TCPBoundSocketStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TCPBoundSocket_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TCPBoundSocket_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TCPBoundSocket_Base::MessageOrdinals::StartListening: {
      internal::TCPBoundSocket_StartListening_Params_Data* params =
          reinterpret_cast<internal::TCPBoundSocket_StartListening_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TCPBoundSocket::StartListeningCallback::Runnable* runnable =
          new TCPBoundSocket_StartListening_ProxyToResponder(
              message->request_id(), responder);
      TCPBoundSocket::StartListeningCallback callback(runnable);
      
      mojo::InterfaceRequest<mojo::TCPServerSocket> p_server {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_server.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->server)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StartListening(p_server.Pass(), callback);
      return true;
    }
    case internal::TCPBoundSocket_Base::MessageOrdinals::Connect: {
      internal::TCPBoundSocket_Connect_Params_Data* params =
          reinterpret_cast<internal::TCPBoundSocket_Connect_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TCPBoundSocket::ConnectCallback::Runnable* runnable =
          new TCPBoundSocket_Connect_ProxyToResponder(
              message->request_id(), responder);
      TCPBoundSocket::ConnectCallback callback(runnable);
      
      mojo::NetAddressPtr p_remote_address {};
      mojo::ScopedDataPipeConsumerHandle p_send_stream {};
      mojo::ScopedDataPipeProducerHandle p_receive_stream {};
      mojo::InterfaceRequest<mojo::TCPConnectedSocket> p_client_socket {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->remote_address.ptr) {
          p_remote_address = mojo::NetAddress::New();
          Deserialize_(params->remote_address.ptr, p_remote_address.get());
        }
        p_send_stream.reset(mojo::internal::FetchAndReset(&params->send_stream));
        p_receive_stream.reset(mojo::internal::FetchAndReset(&params->receive_stream));
        p_client_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->client_socket)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Connect(p_remote_address.Pass(), p_send_stream.Pass(), p_receive_stream.Pass(), p_client_socket.Pass(), callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
