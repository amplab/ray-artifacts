// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/cookie_store.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class CookieStore_Get_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CookieStore_Get_ForwardToCallback(
      const CookieStore::GetCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CookieStore::GetCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CookieStore_Get_ForwardToCallback);
};
bool CookieStore_Get_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CookieStore_Get_ResponseParams_Data* params =
      reinterpret_cast<internal::CookieStore_Get_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_cookies {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->cookies.ptr, &p_cookies);
  } while (false);
  callback_.Run(p_cookies);
  return true;
}
class CookieStore_Set_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CookieStore_Set_ForwardToCallback(
      const CookieStore::SetCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  CookieStore::SetCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CookieStore_Set_ForwardToCallback);
};
bool CookieStore_Set_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::CookieStore_Set_ResponseParams_Data* params =
      reinterpret_cast<internal::CookieStore_Set_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  bool p_success {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_success = params->success;
  } while (false);
  callback_.Run(p_success);
  return true;
}

CookieStoreProxy::CookieStoreProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void CookieStoreProxy::Get(
    const mojo::String& in_url, const GetCallback& callback) {
  size_t size = sizeof(internal::CookieStore_Get_Params_Data);
  size += GetSerializedSize_(in_url);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CookieStore_Base::MessageOrdinals::Get), size);

  internal::CookieStore_Get_Params_Data* params =
      internal::CookieStore_Get_Params_Data::New(builder.buffer());
  SerializeString_(in_url, builder.buffer(), &params->url.ptr);
  if (!params->url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in CookieStore.Get request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CookieStore_Get_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void CookieStoreProxy::Set(
    const mojo::String& in_url, const mojo::String& in_cookie, const SetCallback& callback) {
  size_t size = sizeof(internal::CookieStore_Set_Params_Data);
  size += GetSerializedSize_(in_url);
  size += GetSerializedSize_(in_cookie);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::CookieStore_Base::MessageOrdinals::Set), size);

  internal::CookieStore_Set_Params_Data* params =
      internal::CookieStore_Set_Params_Data::New(builder.buffer());
  SerializeString_(in_url, builder.buffer(), &params->url.ptr);
  if (!params->url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in CookieStore.Set request");
  }
  SerializeString_(in_cookie, builder.buffer(), &params->cookie.ptr);
  if (!params->cookie.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null cookie in CookieStore.Set request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new CookieStore_Set_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CookieStore_Get_ProxyToResponder
    : public CookieStore::GetCallback::Runnable {
 public:
  ~CookieStore_Get_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CookieStore::Get(p_url, callback) "
        "was never run.";
  }

  CookieStore_Get_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_cookies) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CookieStore_Get_ProxyToResponder);
};

void CookieStore_Get_ProxyToResponder::Run(
    const mojo::String& in_cookies) const {
  size_t size = sizeof(internal::CookieStore_Get_ResponseParams_Data);
  size += GetSerializedSize_(in_cookies);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CookieStore_Base::MessageOrdinals::Get), size, request_id_);
  internal::CookieStore_Get_ResponseParams_Data* params =
      internal::CookieStore_Get_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_cookies, builder.buffer(), &params->cookies.ptr);
  if (!params->cookies.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null cookies in CookieStore.Get response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class CookieStore_Set_ProxyToResponder
    : public CookieStore::SetCallback::Runnable {
 public:
  ~CookieStore_Set_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "CookieStore::Set(p_url, p_cookie, callback) "
        "was never run.";
  }

  CookieStore_Set_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(bool in_success) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(CookieStore_Set_ProxyToResponder);
};

void CookieStore_Set_ProxyToResponder::Run(
    bool in_success) const {
  size_t size = sizeof(internal::CookieStore_Set_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::CookieStore_Base::MessageOrdinals::Set), size, request_id_);
  internal::CookieStore_Set_ResponseParams_Data* params =
      internal::CookieStore_Set_ResponseParams_Data::New(builder.buffer());
  params->success = in_success;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

CookieStoreStub::CookieStoreStub()
    : sink_(nullptr),
      control_message_handler_(CookieStore::Version_) {
}

CookieStoreStub::~CookieStoreStub() {}

bool CookieStoreStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::CookieStore_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CookieStore_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CookieStore_Base::MessageOrdinals::Get: {
      break;
    }
    case internal::CookieStore_Base::MessageOrdinals::Set: {
      break;
    }
  }
  return false;
}

bool CookieStoreStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::CookieStore_Base::MessageOrdinals method_ordinal =
      static_cast<internal::CookieStore_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::CookieStore_Base::MessageOrdinals::Get: {
      internal::CookieStore_Get_Params_Data* params =
          reinterpret_cast<internal::CookieStore_Get_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CookieStore::GetCallback::Runnable* runnable =
          new CookieStore_Get_ProxyToResponder(
              message->request_id(), responder);
      CookieStore::GetCallback callback(runnable);
      
      mojo::String p_url {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->url.ptr, &p_url);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Get(p_url, callback);
      return true;
    }
    case internal::CookieStore_Base::MessageOrdinals::Set: {
      internal::CookieStore_Set_Params_Data* params =
          reinterpret_cast<internal::CookieStore_Set_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      CookieStore::SetCallback::Runnable* runnable =
          new CookieStore_Set_ProxyToResponder(
              message->request_id(), responder);
      CookieStore::SetCallback callback(runnable);
      
      mojo::String p_url {};
      mojo::String p_cookie {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->url.ptr, &p_url);
        Deserialize_(params->cookie.ptr, &p_cookie);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Set(p_url, p_cookie, callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
