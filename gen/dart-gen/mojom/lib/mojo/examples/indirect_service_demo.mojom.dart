// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library indirect_service_demo_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _IntegerServiceIncrementParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _IntegerServiceIncrementParams() : super(kVersions.last.size);

  _IntegerServiceIncrementParams.init(
  ) : super(kVersions.last.size);

  static _IntegerServiceIncrementParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _IntegerServiceIncrementParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _IntegerServiceIncrementParams result = new _IntegerServiceIncrementParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_IntegerServiceIncrementParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_IntegerServiceIncrementParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class IntegerServiceIncrementResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  int value = 0;

  IntegerServiceIncrementResponseParams() : super(kVersions.last.size);

  IntegerServiceIncrementResponseParams.init(
    int this.value
  ) : super(kVersions.last.size);

  static IntegerServiceIncrementResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static IntegerServiceIncrementResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    IntegerServiceIncrementResponseParams result = new IntegerServiceIncrementResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.value = decoder0.decodeInt32(8);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "IntegerServiceIncrementResponseParams";
    String fieldName;
    try {
      fieldName = "value";
      encoder0.encodeInt32(value, 8);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "IntegerServiceIncrementResponseParams("
           "value: $value" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["value"] = value;
    return map;
  }
}


class _IndirectIntegerServiceSetParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  IntegerServiceInterface service = null;

  _IndirectIntegerServiceSetParams() : super(kVersions.last.size);

  _IndirectIntegerServiceSetParams.init(
    IntegerServiceInterface this.service
  ) : super(kVersions.last.size);

  static _IndirectIntegerServiceSetParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _IndirectIntegerServiceSetParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _IndirectIntegerServiceSetParams result = new _IndirectIntegerServiceSetParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.service = decoder0.decodeServiceInterface(8, true, IntegerServiceProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_IndirectIntegerServiceSetParams";
    String fieldName;
    try {
      fieldName = "service";
      encoder0.encodeInterface(service, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_IndirectIntegerServiceSetParams("
           "service: $service" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _IndirectIntegerServiceGetParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  IntegerServiceInterfaceRequest service = null;

  _IndirectIntegerServiceGetParams() : super(kVersions.last.size);

  _IndirectIntegerServiceGetParams.init(
    IntegerServiceInterfaceRequest this.service
  ) : super(kVersions.last.size);

  static _IndirectIntegerServiceGetParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _IndirectIntegerServiceGetParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _IndirectIntegerServiceGetParams result = new _IndirectIntegerServiceGetParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.service = decoder0.decodeInterfaceRequest(8, true, IntegerServiceStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_IndirectIntegerServiceGetParams";
    String fieldName;
    try {
      fieldName = "service";
      encoder0.encodeInterfaceRequest(service, 8, true);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_IndirectIntegerServiceGetParams("
           "service: $service" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _integerServiceMethodIncrementName = 0;

class _IntegerServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class IntegerService {
  static const String serviceName = "mojo::examples::IntegerService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _IntegerServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static IntegerServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    IntegerServiceProxy p = new IntegerServiceProxy.unbound();
    String name = serviceName ?? IntegerService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void increment(void callback(int value));
}

abstract class IntegerServiceInterface
    implements bindings.MojoInterface<IntegerService>,
               IntegerService {
  factory IntegerServiceInterface([IntegerService impl]) =>
      new IntegerServiceStub.unbound(impl);

  factory IntegerServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [IntegerService impl]) =>
      new IntegerServiceStub.fromEndpoint(endpoint, impl);

  factory IntegerServiceInterface.fromMock(
      IntegerService mock) =>
      new IntegerServiceProxy.fromMock(mock);
}

abstract class IntegerServiceInterfaceRequest
    implements bindings.MojoInterface<IntegerService>,
               IntegerService {
  factory IntegerServiceInterfaceRequest() =>
      new IntegerServiceProxy.unbound();
}

class _IntegerServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<IntegerService> {
  IntegerService impl;

  _IntegerServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _IntegerServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _IntegerServiceProxyControl.unbound() : super.unbound();

  String get serviceName => IntegerService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _integerServiceMethodIncrementName:
        var r = IntegerServiceIncrementResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.value );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_IntegerServiceProxyControl($superString)";
  }
}

class IntegerServiceProxy
    extends bindings.Proxy<IntegerService>
    implements IntegerService,
               IntegerServiceInterface,
               IntegerServiceInterfaceRequest {
  IntegerServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _IntegerServiceProxyControl.fromEndpoint(endpoint));

  IntegerServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _IntegerServiceProxyControl.fromHandle(handle));

  IntegerServiceProxy.unbound()
      : super(new _IntegerServiceProxyControl.unbound());

  factory IntegerServiceProxy.fromMock(IntegerService mock) {
    IntegerServiceProxy newMockedProxy =
        new IntegerServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static IntegerServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For IntegerServiceProxy"));
    return new IntegerServiceProxy.fromEndpoint(endpoint);
  }


  void increment(void callback(int value)) {
    if (impl != null) {
      impl.increment(callback);
      return;
    }
    var params = new _IntegerServiceIncrementParams();
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((int value) {
        z.bindCallback(() {
          callback(value);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _integerServiceMethodIncrementName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _IntegerServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<IntegerService> {
  IntegerService _impl;

  _IntegerServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [IntegerService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _IntegerServiceStubControl.fromHandle(
      core.MojoHandle handle, [IntegerService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _IntegerServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => IntegerService.serviceName;


  Function _integerServiceIncrementResponseParamsResponder(
      int requestId) {
  return (int value) {
      var result = new IntegerServiceIncrementResponseParams();
      result.value = value;
      sendResponse(buildResponseWithId(
          result,
          _integerServiceMethodIncrementName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _integerServiceMethodIncrementName:
        _impl.increment(_integerServiceIncrementResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  IntegerService get impl => _impl;
  set impl(IntegerService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_IntegerServiceStubControl($superString)";
  }

  int get version => 0;
}

class IntegerServiceStub
    extends bindings.Stub<IntegerService>
    implements IntegerService,
               IntegerServiceInterface,
               IntegerServiceInterfaceRequest {
  IntegerServiceStub.unbound([IntegerService impl])
      : super(new _IntegerServiceStubControl.unbound(impl));

  IntegerServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [IntegerService impl])
      : super(new _IntegerServiceStubControl.fromEndpoint(endpoint, impl));

  IntegerServiceStub.fromHandle(
      core.MojoHandle handle, [IntegerService impl])
      : super(new _IntegerServiceStubControl.fromHandle(handle, impl));

  static IntegerServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For IntegerServiceStub"));
    return new IntegerServiceStub.fromEndpoint(endpoint);
  }


  void increment(void callback(int value)) {
    return impl.increment(callback);
  }
}

const int _indirectIntegerServiceMethodSetName = 0;
const int _indirectIntegerServiceMethodGetName = 1;

class _IndirectIntegerServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class IndirectIntegerService {
  static const String serviceName = "mojo::examples::IndirectIntegerService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _IndirectIntegerServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static IndirectIntegerServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    IndirectIntegerServiceProxy p = new IndirectIntegerServiceProxy.unbound();
    String name = serviceName ?? IndirectIntegerService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void set(IntegerServiceInterface service);
  void get(IntegerServiceInterfaceRequest service);
}

abstract class IndirectIntegerServiceInterface
    implements bindings.MojoInterface<IndirectIntegerService>,
               IndirectIntegerService {
  factory IndirectIntegerServiceInterface([IndirectIntegerService impl]) =>
      new IndirectIntegerServiceStub.unbound(impl);

  factory IndirectIntegerServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [IndirectIntegerService impl]) =>
      new IndirectIntegerServiceStub.fromEndpoint(endpoint, impl);

  factory IndirectIntegerServiceInterface.fromMock(
      IndirectIntegerService mock) =>
      new IndirectIntegerServiceProxy.fromMock(mock);
}

abstract class IndirectIntegerServiceInterfaceRequest
    implements bindings.MojoInterface<IndirectIntegerService>,
               IndirectIntegerService {
  factory IndirectIntegerServiceInterfaceRequest() =>
      new IndirectIntegerServiceProxy.unbound();
}

class _IndirectIntegerServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<IndirectIntegerService> {
  IndirectIntegerService impl;

  _IndirectIntegerServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _IndirectIntegerServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _IndirectIntegerServiceProxyControl.unbound() : super.unbound();

  String get serviceName => IndirectIntegerService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_IndirectIntegerServiceProxyControl($superString)";
  }
}

class IndirectIntegerServiceProxy
    extends bindings.Proxy<IndirectIntegerService>
    implements IndirectIntegerService,
               IndirectIntegerServiceInterface,
               IndirectIntegerServiceInterfaceRequest {
  IndirectIntegerServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _IndirectIntegerServiceProxyControl.fromEndpoint(endpoint));

  IndirectIntegerServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _IndirectIntegerServiceProxyControl.fromHandle(handle));

  IndirectIntegerServiceProxy.unbound()
      : super(new _IndirectIntegerServiceProxyControl.unbound());

  factory IndirectIntegerServiceProxy.fromMock(IndirectIntegerService mock) {
    IndirectIntegerServiceProxy newMockedProxy =
        new IndirectIntegerServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static IndirectIntegerServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For IndirectIntegerServiceProxy"));
    return new IndirectIntegerServiceProxy.fromEndpoint(endpoint);
  }


  void set(IntegerServiceInterface service) {
    if (impl != null) {
      impl.set(service);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _IndirectIntegerServiceSetParams();
    params.service = service;
    ctrl.sendMessage(params,
        _indirectIntegerServiceMethodSetName);
  }
  void get(IntegerServiceInterfaceRequest service) {
    if (impl != null) {
      impl.get(service);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _IndirectIntegerServiceGetParams();
    params.service = service;
    ctrl.sendMessage(params,
        _indirectIntegerServiceMethodGetName);
  }
}

class _IndirectIntegerServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<IndirectIntegerService> {
  IndirectIntegerService _impl;

  _IndirectIntegerServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [IndirectIntegerService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _IndirectIntegerServiceStubControl.fromHandle(
      core.MojoHandle handle, [IndirectIntegerService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _IndirectIntegerServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => IndirectIntegerService.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _indirectIntegerServiceMethodSetName:
        var params = _IndirectIntegerServiceSetParams.deserialize(
            message.payload);
        _impl.set(params.service);
        break;
      case _indirectIntegerServiceMethodGetName:
        var params = _IndirectIntegerServiceGetParams.deserialize(
            message.payload);
        _impl.get(params.service);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  IndirectIntegerService get impl => _impl;
  set impl(IndirectIntegerService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_IndirectIntegerServiceStubControl($superString)";
  }

  int get version => 0;
}

class IndirectIntegerServiceStub
    extends bindings.Stub<IndirectIntegerService>
    implements IndirectIntegerService,
               IndirectIntegerServiceInterface,
               IndirectIntegerServiceInterfaceRequest {
  IndirectIntegerServiceStub.unbound([IndirectIntegerService impl])
      : super(new _IndirectIntegerServiceStubControl.unbound(impl));

  IndirectIntegerServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [IndirectIntegerService impl])
      : super(new _IndirectIntegerServiceStubControl.fromEndpoint(endpoint, impl));

  IndirectIntegerServiceStub.fromHandle(
      core.MojoHandle handle, [IndirectIntegerService impl])
      : super(new _IndirectIntegerServiceStubControl.fromHandle(handle, impl));

  static IndirectIntegerServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For IndirectIntegerServiceStub"));
    return new IndirectIntegerServiceStub.fromEndpoint(endpoint);
  }


  void set(IntegerServiceInterface service) {
    return impl.set(service);
  }
  void get(IntegerServiceInterfaceRequest service) {
    return impl.get(service);
  }
}



