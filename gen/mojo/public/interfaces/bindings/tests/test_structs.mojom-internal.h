// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_STRUCTS_MOJOM_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_STRUCTS_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/rect.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace test {

class StructOfStructs;
class NamedRegion;
class RectPair;
class EmptyStruct;
class HandleStruct;
class NullableHandleStruct;
class NoDefaultFieldValues;
class DefaultFieldValues;
class ScopedConstants;
class MapKeyTypes;
class MapValueTypes;
class ArrayValueTypes;
class FloatNumberValues;
class IntegerNumberValues;
class UnsignedNumberValues;
class BitArrayValues;
class MultiVersionStruct;
class MultiVersionStructV0;
class MultiVersionStructV1;
class MultiVersionStructV3;
class MultiVersionStructV5;
class MultiVersionStructV7;
class ContainsInterface;
class ContainsOther;
class ContainsInterfaceRequest;
class DartKeywordStruct;

class UnionOfStructs;

namespace internal {

class StructOfStructs_Data;
class NamedRegion_Data;
class RectPair_Data;
class EmptyStruct_Data;
class HandleStruct_Data;
class NullableHandleStruct_Data;
class NoDefaultFieldValues_Data;
class DefaultFieldValues_Data;
class ScopedConstants_Data;
class MapKeyTypes_Data;
class MapValueTypes_Data;
class ArrayValueTypes_Data;
class FloatNumberValues_Data;
class IntegerNumberValues_Data;
class UnsignedNumberValues_Data;
class BitArrayValues_Data;
class MultiVersionStruct_Data;
class MultiVersionStructV0_Data;
class MultiVersionStructV1_Data;
class MultiVersionStructV3_Data;
class MultiVersionStructV5_Data;
class MultiVersionStructV7_Data;
class ContainsInterface_Data;
class ContainsOther_Data;
class ContainsInterfaceRequest_Data;
class DartKeywordStruct_Data;


class UnionOfStructs_Data;

#pragma pack(push, 1)



class UnionOfStructs_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;
  static UnionOfStructs_Data* New(mojo::internal::Buffer* buf);
  UnionOfStructs_Data();
  // Do nothing in the destructor since it won't be called.
  ~UnionOfStructs_Data() {}

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      bool inlined,
      std::string* err);

  bool is_null() const {
    return size == 0;
  }

  void set_null();

  enum class UnionOfStructs_Tag : uint32_t {

    NR,
    A_NR,
    A_RP,
    M_NDFV,
    M_HS,
    __UNKNOWN__ = 0xFFFFFFFF,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    mojo::internal::StructPointer<internal::NamedRegion_Data> f_nr;
    mojo::internal::ArrayPointer<internal::NamedRegion_Data*> f_a_nr;
    mojo::internal::ArrayPointer<internal::RectPair_Data*> f_a_rp;
    mojo::internal::StructPointer<mojo::internal::Map_Data<int64_t, internal::NoDefaultFieldValues_Data*>> f_m_ndfv;
    mojo::internal::StructPointer<mojo::internal::Map_Data<int64_t, internal::HandleStruct_Data*>> f_m_hs;
    uint64_t unknown;
  };

  uint32_t size;
  UnionOfStructs_Tag tag;
  Union_ data;

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);
};
static_assert(sizeof(UnionOfStructs_Data) == 16,
              "Bad sizeof(UnionOfStructs_Data)");
static_assert(sizeof(UnionOfStructs_Data::Union_) == 8,
              "Bad sizeof(UnionOfStructs_Data::Union_)");


class StructOfStructs_Data {
 public:
  static StructOfStructs_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::NamedRegion_Data> nr;
  mojo::internal::ArrayPointer<internal::NamedRegion_Data*> a_nr;
  mojo::internal::ArrayPointer<internal::RectPair_Data*> a_rp;
  mojo::internal::StructPointer<mojo::internal::Map_Data<int64_t, internal::NoDefaultFieldValues_Data*>> m_ndfv;
  mojo::internal::StructPointer<mojo::internal::Map_Data<int64_t, internal::HandleStruct_Data*>> m_hs;

 private:
  StructOfStructs_Data();
  ~StructOfStructs_Data() = delete;
};
static_assert(sizeof(StructOfStructs_Data) == 48,
              "Bad sizeof(StructOfStructs_Data)");

class NamedRegion_Data {
 public:
  static NamedRegion_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer name;
  mojo::internal::ArrayPointer<mojo::test::internal::Rect_Data*> rects;

 private:
  NamedRegion_Data();
  ~NamedRegion_Data() = delete;
};
static_assert(sizeof(NamedRegion_Data) == 24,
              "Bad sizeof(NamedRegion_Data)");

class RectPair_Data {
 public:
  static RectPair_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> first;
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> second;

 private:
  RectPair_Data();
  ~RectPair_Data() = delete;
};
static_assert(sizeof(RectPair_Data) == 24,
              "Bad sizeof(RectPair_Data)");

class EmptyStruct_Data {
 public:
  static EmptyStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  EmptyStruct_Data();
  ~EmptyStruct_Data() = delete;
};
static_assert(sizeof(EmptyStruct_Data) == 8,
              "Bad sizeof(EmptyStruct_Data)");

class HandleStruct_Data {
 public:
  static HandleStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle h;
  uint8_t pad0_[4];
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> array_h;

 private:
  HandleStruct_Data();
  ~HandleStruct_Data() = delete;
};
static_assert(sizeof(HandleStruct_Data) == 24,
              "Bad sizeof(HandleStruct_Data)");

class NullableHandleStruct_Data {
 public:
  static NullableHandleStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle h;
  int32_t data;

 private:
  NullableHandleStruct_Data();
  ~NullableHandleStruct_Data() = delete;
};
static_assert(sizeof(NullableHandleStruct_Data) == 16,
              "Bad sizeof(NullableHandleStruct_Data)");

class NoDefaultFieldValues_Data {
 public:
  static NoDefaultFieldValues_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t f0 : 1;
  int8_t f1;
  uint8_t f2;
  uint8_t pad2_[1];
  int16_t f3;
  uint16_t f4;
  int32_t f5;
  uint32_t f6;
  int64_t f7;
  uint64_t f8;
  float f9;
  mojo::MessagePipeHandle f13;
  double f10;
  mojo::internal::StringPointer f11;
  mojo::internal::StringPointer f12;
  mojo::DataPipeConsumerHandle f14;
  mojo::DataPipeProducerHandle f15;
  mojo::MessagePipeHandle f16;
  mojo::DataPipeConsumerHandle f17;
  mojo::DataPipeProducerHandle f18;
  mojo::Handle f19;
  mojo::Handle f20;
  mojo::SharedBufferHandle f21;
  mojo::SharedBufferHandle f22;
  uint8_t pad22_[4];
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> f23;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> f24;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> f25;
  mojo::internal::ArrayPointer<mojo::internal::String_Data*> f26;
  mojo::internal::StructPointer<internal::EmptyStruct_Data> f27;
  mojo::internal::StructPointer<internal::EmptyStruct_Data> f28;

 private:
  NoDefaultFieldValues_Data();
  ~NoDefaultFieldValues_Data() = delete;
};
static_assert(sizeof(NoDefaultFieldValues_Data) == 160,
              "Bad sizeof(NoDefaultFieldValues_Data)");

class DefaultFieldValues_Data {
 public:
  static DefaultFieldValues_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t f0 : 1;
  int8_t f1;
  uint8_t f2;
  uint8_t pad2_[1];
  int16_t f3;
  uint16_t f4;
  int32_t f5;
  uint32_t f6;
  int64_t f7;
  uint64_t f8;
  float f9;
  float f10;
  double f11;
  double f12;
  mojo::internal::StringPointer f13;
  mojo::internal::StringPointer f14;
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> f15;
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> f16;

 private:
  DefaultFieldValues_Data();
  ~DefaultFieldValues_Data() = delete;
};
static_assert(sizeof(DefaultFieldValues_Data) == 96,
              "Bad sizeof(DefaultFieldValues_Data)");

class ScopedConstants_Data {
 public:
  static ScopedConstants_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t f0;
  int32_t f1;
  int32_t f2;
  int32_t f3;
  int32_t f4;
  int32_t f5;
  int32_t f6;
  uint8_t padfinal_[4];

 private:
  ScopedConstants_Data();
  ~ScopedConstants_Data() = delete;
};
static_assert(sizeof(ScopedConstants_Data) == 40,
              "Bad sizeof(ScopedConstants_Data)");

class MapKeyTypes_Data {
 public:
  static MapKeyTypes_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::Map_Data<bool, bool>> f0;
  mojo::internal::StructPointer<mojo::internal::Map_Data<int8_t, int8_t>> f1;
  mojo::internal::StructPointer<mojo::internal::Map_Data<uint8_t, uint8_t>> f2;
  mojo::internal::StructPointer<mojo::internal::Map_Data<int16_t, int16_t>> f3;
  mojo::internal::StructPointer<mojo::internal::Map_Data<uint16_t, uint16_t>> f4;
  mojo::internal::StructPointer<mojo::internal::Map_Data<int32_t, int32_t>> f5;
  mojo::internal::StructPointer<mojo::internal::Map_Data<uint32_t, uint32_t>> f6;
  mojo::internal::StructPointer<mojo::internal::Map_Data<int64_t, int64_t>> f7;
  mojo::internal::StructPointer<mojo::internal::Map_Data<uint64_t, uint64_t>> f8;
  mojo::internal::StructPointer<mojo::internal::Map_Data<float, float>> f9;
  mojo::internal::StructPointer<mojo::internal::Map_Data<double, double>> f10;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::String_Data*>> f11;

 private:
  MapKeyTypes_Data();
  ~MapKeyTypes_Data() = delete;
};
static_assert(sizeof(MapKeyTypes_Data) == 104,
              "Bad sizeof(MapKeyTypes_Data)");

class MapValueTypes_Data {
 public:
  static MapValueTypes_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::internal::String_Data*>*>> f0;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::internal::String_Data*>*>> f1;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::internal::String_Data*>*>> f2;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::internal::String_Data*>*>> f3;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::internal::Array_Data<mojo::internal::String_Data*>*>*>> f4;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::internal::Array_Data<mojo::internal::String_Data*>*>*>> f5;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::test::internal::Rect_Data*>> f6;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::String_Data*>*>> f7;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::String_Data*>*>*>> f8;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::Handle>> f9;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Array_Data<mojo::Handle>*>> f10;
  mojo::internal::StructPointer<mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::internal::Map_Data<mojo::internal::String_Data*, mojo::Handle>*>> f11;

 private:
  MapValueTypes_Data();
  ~MapValueTypes_Data() = delete;
};
static_assert(sizeof(MapValueTypes_Data) == 104,
              "Bad sizeof(MapValueTypes_Data)");

class ArrayValueTypes_Data {
 public:
  static ArrayValueTypes_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<int8_t> f0;
  mojo::internal::ArrayPointer<int16_t> f1;
  mojo::internal::ArrayPointer<int32_t> f2;
  mojo::internal::ArrayPointer<int64_t> f3;
  mojo::internal::ArrayPointer<float> f4;
  mojo::internal::ArrayPointer<double> f5;

 private:
  ArrayValueTypes_Data();
  ~ArrayValueTypes_Data() = delete;
};
static_assert(sizeof(ArrayValueTypes_Data) == 56,
              "Bad sizeof(ArrayValueTypes_Data)");

class FloatNumberValues_Data {
 public:
  static FloatNumberValues_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  double f0;
  double f1;
  double f2;
  float f3;
  float f4;
  float f5;
  float f6;
  double f7;
  double f8;
  double f9;

 private:
  FloatNumberValues_Data();
  ~FloatNumberValues_Data() = delete;
};
static_assert(sizeof(FloatNumberValues_Data) == 72,
              "Bad sizeof(FloatNumberValues_Data)");

class IntegerNumberValues_Data {
 public:
  static IntegerNumberValues_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int8_t f0;
  int8_t f1;
  int8_t f2;
  int8_t f3;
  int8_t f4;
  uint8_t pad4_[1];
  int16_t f5;
  int16_t f6;
  int16_t f7;
  int16_t f8;
  int16_t f9;
  int32_t f10;
  int32_t f11;
  int32_t f12;
  int32_t f13;
  int32_t f14;
  uint8_t pad14_[4];
  int64_t f15;
  int64_t f16;
  int64_t f17;
  int64_t f18;
  int64_t f19;

 private:
  IntegerNumberValues_Data();
  ~IntegerNumberValues_Data() = delete;
};
static_assert(sizeof(IntegerNumberValues_Data) == 88,
              "Bad sizeof(IntegerNumberValues_Data)");

class UnsignedNumberValues_Data {
 public:
  static UnsignedNumberValues_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t f0;
  uint8_t f1;
  uint8_t f2;
  uint8_t pad2_[1];
  uint16_t f3;
  uint16_t f4;
  uint16_t f5;
  uint8_t pad5_[2];
  uint32_t f6;
  uint32_t f7;
  uint32_t f8;
  uint64_t f9;
  uint64_t f10;
  uint64_t f11;

 private:
  UnsignedNumberValues_Data();
  ~UnsignedNumberValues_Data() = delete;
};
static_assert(sizeof(UnsignedNumberValues_Data) == 56,
              "Bad sizeof(UnsignedNumberValues_Data)");

class BitArrayValues_Data {
 public:
  static BitArrayValues_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<bool> f0;
  mojo::internal::ArrayPointer<bool> f1;
  mojo::internal::ArrayPointer<bool> f2;
  mojo::internal::ArrayPointer<bool> f3;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<bool>*> f4;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<bool>*> f5;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<bool>*> f6;

 private:
  BitArrayValues_Data();
  ~BitArrayValues_Data() = delete;
};
static_assert(sizeof(BitArrayValues_Data) == 64,
              "Bad sizeof(BitArrayValues_Data)");

class MultiVersionStruct_Data {
 public:
  static MultiVersionStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t f_int32;
  mojo::MessagePipeHandle f_message_pipe;
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> f_rect;
  mojo::internal::StringPointer f_string;
  mojo::internal::ArrayPointer<int8_t> f_array;
  uint8_t f_bool : 1;
  uint8_t pad5_[1];
  int16_t f_int16;
  uint8_t padfinal_[4];

 private:
  MultiVersionStruct_Data();
  ~MultiVersionStruct_Data() = delete;
};
static_assert(sizeof(MultiVersionStruct_Data) == 48,
              "Bad sizeof(MultiVersionStruct_Data)");

class MultiVersionStructV0_Data {
 public:
  static MultiVersionStructV0_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t f_int32;
  uint8_t padfinal_[4];

 private:
  MultiVersionStructV0_Data();
  ~MultiVersionStructV0_Data() = delete;
};
static_assert(sizeof(MultiVersionStructV0_Data) == 16,
              "Bad sizeof(MultiVersionStructV0_Data)");

class MultiVersionStructV1_Data {
 public:
  static MultiVersionStructV1_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t f_int32;
  uint8_t pad0_[4];
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> f_rect;

 private:
  MultiVersionStructV1_Data();
  ~MultiVersionStructV1_Data() = delete;
};
static_assert(sizeof(MultiVersionStructV1_Data) == 24,
              "Bad sizeof(MultiVersionStructV1_Data)");

class MultiVersionStructV3_Data {
 public:
  static MultiVersionStructV3_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t f_int32;
  uint8_t pad0_[4];
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> f_rect;
  mojo::internal::StringPointer f_string;

 private:
  MultiVersionStructV3_Data();
  ~MultiVersionStructV3_Data() = delete;
};
static_assert(sizeof(MultiVersionStructV3_Data) == 32,
              "Bad sizeof(MultiVersionStructV3_Data)");

class MultiVersionStructV5_Data {
 public:
  static MultiVersionStructV5_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t f_int32;
  uint8_t pad0_[4];
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> f_rect;
  mojo::internal::StringPointer f_string;
  mojo::internal::ArrayPointer<int8_t> f_array;

 private:
  MultiVersionStructV5_Data();
  ~MultiVersionStructV5_Data() = delete;
};
static_assert(sizeof(MultiVersionStructV5_Data) == 40,
              "Bad sizeof(MultiVersionStructV5_Data)");

class MultiVersionStructV7_Data {
 public:
  static MultiVersionStructV7_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t f_int32;
  mojo::MessagePipeHandle f_message_pipe;
  mojo::internal::StructPointer<mojo::test::internal::Rect_Data> f_rect;
  mojo::internal::StringPointer f_string;
  mojo::internal::ArrayPointer<int8_t> f_array;
  uint8_t f_bool : 1;
  uint8_t padfinal_[7];

 private:
  MultiVersionStructV7_Data();
  ~MultiVersionStructV7_Data() = delete;
};
static_assert(sizeof(MultiVersionStructV7_Data) == 48,
              "Bad sizeof(MultiVersionStructV7_Data)");

class ContainsInterface_Data {
 public:
  static ContainsInterface_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data some_interface;

 private:
  ContainsInterface_Data();
  ~ContainsInterface_Data() = delete;
};
static_assert(sizeof(ContainsInterface_Data) == 16,
              "Bad sizeof(ContainsInterface_Data)");

class ContainsOther_Data {
 public:
  static ContainsOther_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t other;
  uint8_t padfinal_[4];

 private:
  ContainsOther_Data();
  ~ContainsOther_Data() = delete;
};
static_assert(sizeof(ContainsOther_Data) == 16,
              "Bad sizeof(ContainsOther_Data)");

class ContainsInterfaceRequest_Data {
 public:
  static ContainsInterfaceRequest_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle req;
  mojo::MessagePipeHandle nullable_req;

 private:
  ContainsInterfaceRequest_Data();
  ~ContainsInterfaceRequest_Data() = delete;
};
static_assert(sizeof(ContainsInterfaceRequest_Data) == 16,
              "Bad sizeof(ContainsInterfaceRequest_Data)");

class DartKeywordStruct_Data {
 public:
  static DartKeywordStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t await;
  int32_t is;
  int32_t rethrow;
  uint8_t padfinal_[4];

 private:
  DartKeywordStruct_Data();
  ~DartKeywordStruct_Data() = delete;
};
static_assert(sizeof(DartKeywordStruct_Data) == 24,
              "Bad sizeof(DartKeywordStruct_Data)");


class SomeInterface_SomeMethod_Params_Data {
 public:
  static SomeInterface_SomeMethod_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::RectPair_Data> pair;

 private:
  SomeInterface_SomeMethod_Params_Data();
  ~SomeInterface_SomeMethod_Params_Data() = delete;
};
static_assert(sizeof(SomeInterface_SomeMethod_Params_Data) == 16,
              "Bad sizeof(SomeInterface_SomeMethod_Params_Data)");

class SomeInterface_SomeMethod_ResponseParams_Data {
 public:
  static SomeInterface_SomeMethod_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::RectPair_Data> other_pair;

 private:
  SomeInterface_SomeMethod_ResponseParams_Data();
  ~SomeInterface_SomeMethod_ResponseParams_Data() = delete;
};
static_assert(sizeof(SomeInterface_SomeMethod_ResponseParams_Data) == 16,
              "Bad sizeof(SomeInterface_SomeMethod_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_STRUCTS_MOJOM_INTERNAL_H_
