// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
RunMessageParams_Data* RunMessageParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(RunMessageParams_Data))) RunMessageParams_Data();
}

// static
mojo::internal::ValidationError RunMessageParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RunMessageParams_Data* object = static_cast<const RunMessageParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->query_version.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null query_version field in RunMessageParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->query_version.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = QueryVersion::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->query_version.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void RunMessageParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->query_version, handles);
}

void RunMessageParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->query_version, handles);
}

RunMessageParams_Data::RunMessageParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
RunResponseMessageParams_Data* RunResponseMessageParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(RunResponseMessageParams_Data))) RunResponseMessageParams_Data();
}

// static
mojo::internal::ValidationError RunResponseMessageParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RunResponseMessageParams_Data* object = static_cast<const RunResponseMessageParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->query_version_result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null query_version_result field in RunResponseMessageParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->query_version_result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = QueryVersionResult::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->query_version_result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void RunResponseMessageParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->query_version_result, handles);
}

void RunResponseMessageParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->query_version_result, handles);
}

RunResponseMessageParams_Data::RunResponseMessageParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
QueryVersion_Data* QueryVersion_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(QueryVersion_Data))) QueryVersion_Data();
}

// static
mojo::internal::ValidationError QueryVersion_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const QueryVersion_Data* object = static_cast<const QueryVersion_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void QueryVersion_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void QueryVersion_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

QueryVersion_Data::QueryVersion_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
QueryVersionResult_Data* QueryVersionResult_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(QueryVersionResult_Data))) QueryVersionResult_Data();
}

// static
mojo::internal::ValidationError QueryVersionResult_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const QueryVersionResult_Data* object = static_cast<const QueryVersionResult_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void QueryVersionResult_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void QueryVersionResult_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

QueryVersionResult_Data::QueryVersionResult_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
RunOrClosePipeMessageParams_Data* RunOrClosePipeMessageParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(RunOrClosePipeMessageParams_Data))) RunOrClosePipeMessageParams_Data();
}

// static
mojo::internal::ValidationError RunOrClosePipeMessageParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RunOrClosePipeMessageParams_Data* object = static_cast<const RunOrClosePipeMessageParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->require_version.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null require_version field in RunOrClosePipeMessageParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->require_version.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = RequireVersion::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->require_version.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void RunOrClosePipeMessageParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->require_version, handles);
}

void RunOrClosePipeMessageParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->require_version, handles);
}

RunOrClosePipeMessageParams_Data::RunOrClosePipeMessageParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
RequireVersion_Data* RequireVersion_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(RequireVersion_Data))) RequireVersion_Data();
}

// static
mojo::internal::ValidationError RequireVersion_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const RequireVersion_Data* object = static_cast<const RequireVersion_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void RequireVersion_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void RequireVersion_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

RequireVersion_Data::RequireVersion_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---

}  // namespace internal

// --- Request and response validator definitions for interfaces --- 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)

// Struct Constants

// --- Struct builder definitions ---

// static
RunMessageParamsPtr RunMessageParams::New() {
  RunMessageParamsPtr rv;
  mojo::internal::StructHelper<RunMessageParams>::Initialize(&rv);
  return rv;
}

RunMessageParams::RunMessageParams()
    : reserved0(),
      reserved1(),
      query_version() {
}

RunMessageParams::~RunMessageParams() {
}


RunMessageParamsPtr RunMessageParams::Clone() const {
  RunMessageParamsPtr rv(New());
  rv->reserved0 = reserved0;
  rv->reserved1 = reserved1;
  rv->query_version = query_version.Clone();
  return rv;
}


bool RunMessageParams::Equals(const RunMessageParams& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->reserved0, other.reserved0))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->reserved1, other.reserved1))
    return false;
  if (!mojo::internal::ValueTraits<QueryVersionPtr>::Equals(this->query_version, other.query_version))
    return false;
  return true;
}


// static
RunResponseMessageParamsPtr RunResponseMessageParams::New() {
  RunResponseMessageParamsPtr rv;
  mojo::internal::StructHelper<RunResponseMessageParams>::Initialize(&rv);
  return rv;
}

RunResponseMessageParams::RunResponseMessageParams()
    : reserved0(),
      reserved1(),
      query_version_result() {
}

RunResponseMessageParams::~RunResponseMessageParams() {
}


RunResponseMessageParamsPtr RunResponseMessageParams::Clone() const {
  RunResponseMessageParamsPtr rv(New());
  rv->reserved0 = reserved0;
  rv->reserved1 = reserved1;
  rv->query_version_result = query_version_result.Clone();
  return rv;
}


bool RunResponseMessageParams::Equals(const RunResponseMessageParams& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->reserved0, other.reserved0))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->reserved1, other.reserved1))
    return false;
  if (!mojo::internal::ValueTraits<QueryVersionResultPtr>::Equals(this->query_version_result, other.query_version_result))
    return false;
  return true;
}


// static
QueryVersionPtr QueryVersion::New() {
  QueryVersionPtr rv;
  mojo::internal::StructHelper<QueryVersion>::Initialize(&rv);
  return rv;
}

QueryVersion::QueryVersion() {
}

QueryVersion::~QueryVersion() {
}


QueryVersionPtr QueryVersion::Clone() const {
  QueryVersionPtr rv(New());
  return rv;
}


bool QueryVersion::Equals(const QueryVersion& other) const {
  return true;
}


// static
QueryVersionResultPtr QueryVersionResult::New() {
  QueryVersionResultPtr rv;
  mojo::internal::StructHelper<QueryVersionResult>::Initialize(&rv);
  return rv;
}

QueryVersionResult::QueryVersionResult()
    : version() {
}

QueryVersionResult::~QueryVersionResult() {
}


QueryVersionResultPtr QueryVersionResult::Clone() const {
  QueryVersionResultPtr rv(New());
  rv->version = version;
  return rv;
}


bool QueryVersionResult::Equals(const QueryVersionResult& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->version, other.version))
    return false;
  return true;
}


// static
RunOrClosePipeMessageParamsPtr RunOrClosePipeMessageParams::New() {
  RunOrClosePipeMessageParamsPtr rv;
  mojo::internal::StructHelper<RunOrClosePipeMessageParams>::Initialize(&rv);
  return rv;
}

RunOrClosePipeMessageParams::RunOrClosePipeMessageParams()
    : reserved0(),
      reserved1(),
      require_version() {
}

RunOrClosePipeMessageParams::~RunOrClosePipeMessageParams() {
}


RunOrClosePipeMessageParamsPtr RunOrClosePipeMessageParams::Clone() const {
  RunOrClosePipeMessageParamsPtr rv(New());
  rv->reserved0 = reserved0;
  rv->reserved1 = reserved1;
  rv->require_version = require_version.Clone();
  return rv;
}


bool RunOrClosePipeMessageParams::Equals(const RunOrClosePipeMessageParams& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->reserved0, other.reserved0))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->reserved1, other.reserved1))
    return false;
  if (!mojo::internal::ValueTraits<RequireVersionPtr>::Equals(this->require_version, other.require_version))
    return false;
  return true;
}


// static
RequireVersionPtr RequireVersion::New() {
  RequireVersionPtr rv;
  mojo::internal::StructHelper<RequireVersion>::Initialize(&rv);
  return rv;
}

RequireVersion::RequireVersion()
    : version() {
}

RequireVersion::~RequireVersion() {
}


RequireVersionPtr RequireVersion::Clone() const {
  RequireVersionPtr rv(New());
  rv->version = version;
  return rv;
}


bool RequireVersion::Equals(const RequireVersion& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->version, other.version))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t RunMessageParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool RunMessageParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::RunMessageParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool RunMessageParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::RunMessageParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void RunMessageParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::RunMessageParams_Data* input =
      static_cast<internal::RunMessageParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const RunMessageParams& input) {
  size_t size = sizeof(internal::RunMessageParams_Data);
  size += input.query_version.is_null()
              ? 0
              : GetSerializedSize_(*input.query_version);
  return size;
}

mojo::internal::ValidationError Serialize_(
    RunMessageParams* input,
    mojo::internal::Buffer* buf,
    internal::RunMessageParams_Data** output) {
  if (input) {
    internal::RunMessageParams_Data* result =
        internal::RunMessageParams_Data::New(buf);
    result->reserved0 = input->reserved0;
    result->reserved1 = input->reserved1;
    {auto retval =Serialize_(input->query_version.get(),
                 buf,
                 &result->query_version.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->query_version.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null query_version in RunMessageParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::RunMessageParams_Data* input,
                  RunMessageParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->reserved0 = input->reserved0;
      result->reserved1 = input->reserved1;
      if (input->query_version.ptr) {
        result->query_version = QueryVersion::New();
        Deserialize_(input->query_version.ptr, result->query_version.get());
      }
    } while (false);
  }
}


size_t RunResponseMessageParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool RunResponseMessageParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::RunResponseMessageParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool RunResponseMessageParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::RunResponseMessageParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void RunResponseMessageParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::RunResponseMessageParams_Data* input =
      static_cast<internal::RunResponseMessageParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const RunResponseMessageParams& input) {
  size_t size = sizeof(internal::RunResponseMessageParams_Data);
  size += input.query_version_result.is_null()
              ? 0
              : GetSerializedSize_(*input.query_version_result);
  return size;
}

mojo::internal::ValidationError Serialize_(
    RunResponseMessageParams* input,
    mojo::internal::Buffer* buf,
    internal::RunResponseMessageParams_Data** output) {
  if (input) {
    internal::RunResponseMessageParams_Data* result =
        internal::RunResponseMessageParams_Data::New(buf);
    result->reserved0 = input->reserved0;
    result->reserved1 = input->reserved1;
    {auto retval =Serialize_(input->query_version_result.get(),
                 buf,
                 &result->query_version_result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->query_version_result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null query_version_result in RunResponseMessageParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::RunResponseMessageParams_Data* input,
                  RunResponseMessageParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->reserved0 = input->reserved0;
      result->reserved1 = input->reserved1;
      if (input->query_version_result.ptr) {
        result->query_version_result = QueryVersionResult::New();
        Deserialize_(input->query_version_result.ptr, result->query_version_result.get());
      }
    } while (false);
  }
}


size_t QueryVersion::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool QueryVersion::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::QueryVersion_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool QueryVersion::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::QueryVersion_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void QueryVersion::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::QueryVersion_Data* input =
      static_cast<internal::QueryVersion_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const QueryVersion& input) {
  size_t size = sizeof(internal::QueryVersion_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    QueryVersion* input,
    mojo::internal::Buffer* buf,
    internal::QueryVersion_Data** output) {
  if (input) {
    internal::QueryVersion_Data* result =
        internal::QueryVersion_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::QueryVersion_Data* input,
                  QueryVersion* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


size_t QueryVersionResult::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool QueryVersionResult::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::QueryVersionResult_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool QueryVersionResult::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::QueryVersionResult_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void QueryVersionResult::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::QueryVersionResult_Data* input =
      static_cast<internal::QueryVersionResult_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const QueryVersionResult& input) {
  size_t size = sizeof(internal::QueryVersionResult_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    QueryVersionResult* input,
    mojo::internal::Buffer* buf,
    internal::QueryVersionResult_Data** output) {
  if (input) {
    internal::QueryVersionResult_Data* result =
        internal::QueryVersionResult_Data::New(buf);
    result->version = input->version;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::QueryVersionResult_Data* input,
                  QueryVersionResult* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->version = input->version;
    } while (false);
  }
}


size_t RunOrClosePipeMessageParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool RunOrClosePipeMessageParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::RunOrClosePipeMessageParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool RunOrClosePipeMessageParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::RunOrClosePipeMessageParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void RunOrClosePipeMessageParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::RunOrClosePipeMessageParams_Data* input =
      static_cast<internal::RunOrClosePipeMessageParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const RunOrClosePipeMessageParams& input) {
  size_t size = sizeof(internal::RunOrClosePipeMessageParams_Data);
  size += input.require_version.is_null()
              ? 0
              : GetSerializedSize_(*input.require_version);
  return size;
}

mojo::internal::ValidationError Serialize_(
    RunOrClosePipeMessageParams* input,
    mojo::internal::Buffer* buf,
    internal::RunOrClosePipeMessageParams_Data** output) {
  if (input) {
    internal::RunOrClosePipeMessageParams_Data* result =
        internal::RunOrClosePipeMessageParams_Data::New(buf);
    result->reserved0 = input->reserved0;
    result->reserved1 = input->reserved1;
    {auto retval =Serialize_(input->require_version.get(),
                 buf,
                 &result->require_version.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->require_version.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null require_version in RunOrClosePipeMessageParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::RunOrClosePipeMessageParams_Data* input,
                  RunOrClosePipeMessageParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->reserved0 = input->reserved0;
      result->reserved1 = input->reserved1;
      if (input->require_version.ptr) {
        result->require_version = RequireVersion::New();
        Deserialize_(input->require_version.ptr, result->require_version.get());
      }
    } while (false);
  }
}


size_t RequireVersion::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool RequireVersion::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::RequireVersion_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool RequireVersion::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::RequireVersion_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void RequireVersion::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::RequireVersion_Data* input =
      static_cast<internal::RequireVersion_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const RequireVersion& input) {
  size_t size = sizeof(internal::RequireVersion_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    RequireVersion* input,
    mojo::internal::Buffer* buf,
    internal::RequireVersion_Data** output) {
  if (input) {
    internal::RequireVersion_Data* result =
        internal::RequireVersion_Data::New(buf);
    result->version = input->version;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::RequireVersion_Data* input,
                  RequireVersion* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->version = input->version;
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---
}  // namespace mojo
