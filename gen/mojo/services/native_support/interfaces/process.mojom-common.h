// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_COMMON_H_
#define MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/native_support/interfaces/process.mojom-internal.h"
#include "mojo/services/files/interfaces/file.mojom-common.h"
#include "mojo/services/files/interfaces/types.mojom-common.h"
namespace native_support {

// --- Interface Forward Declarations ---
class Process;
class ProcessRequestValidator;
class ProcessResponseValidator;
class Process_Synchronous;
class ProcessController;
class ProcessControllerRequestValidator;
class ProcessControllerResponseValidator;
class ProcessController_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Process_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ProcessRequestValidator;
  using ResponseValidator_ = ProcessResponseValidator;
  using Synchronous_ = Process_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Spawn = 0,
    SpawnWithTerminal = 1,
  };


  virtual ~Process_Base() {}
};

}  // namespace internal

// Async interface declaration

class ProcessProxy;
class ProcessStub;
class Process_Synchronous;

class ProcessRequestValidator;
class ProcessResponseValidator;

class Process : public internal::Process_Base {
 public:
  virtual ~Process() override {}

  using Proxy_ = ProcessProxy;
  using Stub_ = ProcessStub;
  using SpawnCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void Spawn(mojo::Array<uint8_t> path, mojo::Array<mojo::Array<uint8_t> > argv, mojo::Array<mojo::Array<uint8_t> > envp, mojo::InterfaceHandle<mojo::files::File> stdin_file, mojo::InterfaceHandle<mojo::files::File> stdout_file, mojo::InterfaceHandle<mojo::files::File> stderr_file, mojo::InterfaceRequest<ProcessController> process_controller, const SpawnCallback& callback) = 0;
  using SpawnWithTerminalCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void SpawnWithTerminal(mojo::Array<uint8_t> path, mojo::Array<mojo::Array<uint8_t> > argv, mojo::Array<mojo::Array<uint8_t> > envp, mojo::InterfaceHandle<mojo::files::File> terminal_file, mojo::InterfaceRequest<ProcessController> process_controller, const SpawnWithTerminalCallback& callback) = 0;
};

namespace internal {
class ProcessController_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ProcessControllerRequestValidator;
  using ResponseValidator_ = ProcessControllerResponseValidator;
  using Synchronous_ = ProcessController_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Wait = 0,
    Kill = 1,
  };


  virtual ~ProcessController_Base() {}
};

}  // namespace internal

// Async interface declaration

class ProcessControllerProxy;
class ProcessControllerStub;
class ProcessController_Synchronous;

class ProcessControllerRequestValidator;
class ProcessControllerResponseValidator;

class ProcessController : public internal::ProcessController_Base {
 public:
  virtual ~ProcessController() override {}

  using Proxy_ = ProcessControllerProxy;
  using Stub_ = ProcessControllerStub;
  using WaitCallback = mojo::Callback<void(mojo::files::Error, int32_t)>;
  virtual void Wait(const WaitCallback& callback) = 0;
  using KillCallback = mojo::Callback<void(mojo::files::Error)>;
  virtual void Kill(int32_t signal, const KillCallback& callback) = 0;
};

}  // namespace native_support

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace native_support {

// --- Interface Request Validators ---
class ProcessRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class ProcessControllerRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class ProcessResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class ProcessControllerResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Process_Spawn_Params;

using Process_Spawn_ParamsPtr = mojo::StructPtr<Process_Spawn_Params>;


size_t GetSerializedSize_(const Process_Spawn_Params& input);
mojo::internal::ValidationError Serialize_(
    Process_Spawn_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Process_Spawn_Params_Data** output);
void Deserialize_(internal::Process_Spawn_Params_Data* input,
                  Process_Spawn_Params* output);

class Process_Spawn_Params {
 public:
  using Data_ = internal::Process_Spawn_Params_Data;

  static Process_Spawn_ParamsPtr New();

  template <typename U>
  static Process_Spawn_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Process_Spawn_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Process_Spawn_Params>::Convert(*this);
  }

  Process_Spawn_Params();
  ~Process_Spawn_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Process_Spawn_Params& other) const;

  mojo::Array<uint8_t> path;
  mojo::Array<mojo::Array<uint8_t> > argv;
  mojo::Array<mojo::Array<uint8_t> > envp;
  mojo::InterfaceHandle<mojo::files::File> stdin_file;
  mojo::InterfaceHandle<mojo::files::File> stdout_file;
  mojo::InterfaceHandle<mojo::files::File> stderr_file;
  mojo::InterfaceRequest<ProcessController> process_controller;
};



class Process_Spawn_ResponseParams;

using Process_Spawn_ResponseParamsPtr = mojo::InlinedStructPtr<Process_Spawn_ResponseParams>;


size_t GetSerializedSize_(const Process_Spawn_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Process_Spawn_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Process_Spawn_ResponseParams_Data** output);
void Deserialize_(internal::Process_Spawn_ResponseParams_Data* input,
                  Process_Spawn_ResponseParams* output);

class Process_Spawn_ResponseParams {
 public:
  using Data_ = internal::Process_Spawn_ResponseParams_Data;

  static Process_Spawn_ResponseParamsPtr New();

  template <typename U>
  static Process_Spawn_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Process_Spawn_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Process_Spawn_ResponseParams>::Convert(*this);
  }

  Process_Spawn_ResponseParams();
  ~Process_Spawn_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Process_Spawn_ResponseParamsPtr Clone() const;
  bool Equals(const Process_Spawn_ResponseParams& other) const;

  mojo::files::Error error;
};



class Process_SpawnWithTerminal_Params;

using Process_SpawnWithTerminal_ParamsPtr = mojo::StructPtr<Process_SpawnWithTerminal_Params>;


size_t GetSerializedSize_(const Process_SpawnWithTerminal_Params& input);
mojo::internal::ValidationError Serialize_(
    Process_SpawnWithTerminal_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Process_SpawnWithTerminal_Params_Data** output);
void Deserialize_(internal::Process_SpawnWithTerminal_Params_Data* input,
                  Process_SpawnWithTerminal_Params* output);

class Process_SpawnWithTerminal_Params {
 public:
  using Data_ = internal::Process_SpawnWithTerminal_Params_Data;

  static Process_SpawnWithTerminal_ParamsPtr New();

  template <typename U>
  static Process_SpawnWithTerminal_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Process_SpawnWithTerminal_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Process_SpawnWithTerminal_Params>::Convert(*this);
  }

  Process_SpawnWithTerminal_Params();
  ~Process_SpawnWithTerminal_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Process_SpawnWithTerminal_Params& other) const;

  mojo::Array<uint8_t> path;
  mojo::Array<mojo::Array<uint8_t> > argv;
  mojo::Array<mojo::Array<uint8_t> > envp;
  mojo::InterfaceHandle<mojo::files::File> terminal_file;
  mojo::InterfaceRequest<ProcessController> process_controller;
};



class Process_SpawnWithTerminal_ResponseParams;

using Process_SpawnWithTerminal_ResponseParamsPtr = mojo::InlinedStructPtr<Process_SpawnWithTerminal_ResponseParams>;


size_t GetSerializedSize_(const Process_SpawnWithTerminal_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Process_SpawnWithTerminal_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Process_SpawnWithTerminal_ResponseParams_Data** output);
void Deserialize_(internal::Process_SpawnWithTerminal_ResponseParams_Data* input,
                  Process_SpawnWithTerminal_ResponseParams* output);

class Process_SpawnWithTerminal_ResponseParams {
 public:
  using Data_ = internal::Process_SpawnWithTerminal_ResponseParams_Data;

  static Process_SpawnWithTerminal_ResponseParamsPtr New();

  template <typename U>
  static Process_SpawnWithTerminal_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Process_SpawnWithTerminal_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Process_SpawnWithTerminal_ResponseParams>::Convert(*this);
  }

  Process_SpawnWithTerminal_ResponseParams();
  ~Process_SpawnWithTerminal_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Process_SpawnWithTerminal_ResponseParamsPtr Clone() const;
  bool Equals(const Process_SpawnWithTerminal_ResponseParams& other) const;

  mojo::files::Error error;
};


      

class ProcessController_Wait_Params;

using ProcessController_Wait_ParamsPtr = mojo::InlinedStructPtr<ProcessController_Wait_Params>;


size_t GetSerializedSize_(const ProcessController_Wait_Params& input);
mojo::internal::ValidationError Serialize_(
    ProcessController_Wait_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ProcessController_Wait_Params_Data** output);
void Deserialize_(internal::ProcessController_Wait_Params_Data* input,
                  ProcessController_Wait_Params* output);

class ProcessController_Wait_Params {
 public:
  using Data_ = internal::ProcessController_Wait_Params_Data;

  static ProcessController_Wait_ParamsPtr New();

  template <typename U>
  static ProcessController_Wait_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ProcessController_Wait_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ProcessController_Wait_Params>::Convert(*this);
  }

  ProcessController_Wait_Params();
  ~ProcessController_Wait_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ProcessController_Wait_ParamsPtr Clone() const;
  bool Equals(const ProcessController_Wait_Params& other) const;

};



class ProcessController_Wait_ResponseParams;

using ProcessController_Wait_ResponseParamsPtr = mojo::InlinedStructPtr<ProcessController_Wait_ResponseParams>;


size_t GetSerializedSize_(const ProcessController_Wait_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ProcessController_Wait_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ProcessController_Wait_ResponseParams_Data** output);
void Deserialize_(internal::ProcessController_Wait_ResponseParams_Data* input,
                  ProcessController_Wait_ResponseParams* output);

class ProcessController_Wait_ResponseParams {
 public:
  using Data_ = internal::ProcessController_Wait_ResponseParams_Data;

  static ProcessController_Wait_ResponseParamsPtr New();

  template <typename U>
  static ProcessController_Wait_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ProcessController_Wait_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ProcessController_Wait_ResponseParams>::Convert(*this);
  }

  ProcessController_Wait_ResponseParams();
  ~ProcessController_Wait_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ProcessController_Wait_ResponseParamsPtr Clone() const;
  bool Equals(const ProcessController_Wait_ResponseParams& other) const;

  mojo::files::Error error;
  int32_t exit_status;
};



class ProcessController_Kill_Params;

using ProcessController_Kill_ParamsPtr = mojo::InlinedStructPtr<ProcessController_Kill_Params>;


size_t GetSerializedSize_(const ProcessController_Kill_Params& input);
mojo::internal::ValidationError Serialize_(
    ProcessController_Kill_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ProcessController_Kill_Params_Data** output);
void Deserialize_(internal::ProcessController_Kill_Params_Data* input,
                  ProcessController_Kill_Params* output);

class ProcessController_Kill_Params {
 public:
  using Data_ = internal::ProcessController_Kill_Params_Data;

  static ProcessController_Kill_ParamsPtr New();

  template <typename U>
  static ProcessController_Kill_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ProcessController_Kill_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ProcessController_Kill_Params>::Convert(*this);
  }

  ProcessController_Kill_Params();
  ~ProcessController_Kill_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ProcessController_Kill_ParamsPtr Clone() const;
  bool Equals(const ProcessController_Kill_Params& other) const;

  int32_t signal;
};



class ProcessController_Kill_ResponseParams;

using ProcessController_Kill_ResponseParamsPtr = mojo::InlinedStructPtr<ProcessController_Kill_ResponseParams>;


size_t GetSerializedSize_(const ProcessController_Kill_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ProcessController_Kill_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ProcessController_Kill_ResponseParams_Data** output);
void Deserialize_(internal::ProcessController_Kill_ResponseParams_Data* input,
                  ProcessController_Kill_ResponseParams* output);

class ProcessController_Kill_ResponseParams {
 public:
  using Data_ = internal::ProcessController_Kill_ResponseParams_Data;

  static ProcessController_Kill_ResponseParamsPtr New();

  template <typename U>
  static ProcessController_Kill_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ProcessController_Kill_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ProcessController_Kill_ResponseParams>::Convert(*this);
  }

  ProcessController_Kill_ResponseParams();
  ~ProcessController_Kill_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ProcessController_Kill_ResponseParamsPtr Clone() const;
  bool Equals(const ProcessController_Kill_ResponseParams& other) const;

  mojo::files::Error error;
};


}  // namespace native_support

#endif  // MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_COMMON_H_
