// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom-common.h"
namespace mojo {
namespace test {

// --- Interface definitions ---
InterfaceA_SynchronousProxy::InterfaceA_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}

BoundsCheckTestInterface_SynchronousProxy::BoundsCheckTestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool BoundsCheckTestInterface_SynchronousProxy::Method0(uint8_t in_param0, uint8_t* out_param0) {
  size_t size = sizeof(internal::BoundsCheckTestInterface_Method0_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method0);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::BoundsCheckTestInterface_Method0_Params_Data* out_params =
      internal::BoundsCheckTestInterface_Method0_Params_Data::New(builder.buffer());
  out_params->param0 = in_param0;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::BoundsCheckTestInterface_Method0_ResponseParams_Data*
      response_params = reinterpret_cast<internal::BoundsCheckTestInterface_Method0_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_param0) = response_params->param0;
  } while (false);
  return true;
}
bool BoundsCheckTestInterface_SynchronousProxy::Method1(uint8_t in_param0) const  {
  size_t size = sizeof(internal::BoundsCheckTestInterface_Method1_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method1);
  mojo::MessageBuilder builder(msg_name, size);

  internal::BoundsCheckTestInterface_Method1_Params_Data* out_params =
      internal::BoundsCheckTestInterface_Method1_Params_Data::New(builder.buffer());
  out_params->param0 = in_param0;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}ConformanceTestInterface_SynchronousProxy::ConformanceTestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool ConformanceTestInterface_SynchronousProxy::Method0(float in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method0_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method0);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method0_Params_Data* out_params =
      internal::ConformanceTestInterface_Method0_Params_Data::New(builder.buffer());
  out_params->param0 = in_param0;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method1(StructAPtr in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method1_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method1);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method1_Params_Data* out_params =
      internal::ConformanceTestInterface_Method1_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method2(StructBPtr in_param0, StructAPtr in_param1) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method2_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  size += in_param1.is_null()
              ? 0
              : GetSerializedSize_(*in_param1);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method2);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method2_Params_Data* out_params =
      internal::ConformanceTestInterface_Method2_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  {Serialize_(in_param1.get(),
               builder.buffer(),
               &out_params->param1.ptr);
  }
  if (!out_params->param1.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param1 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method3(mojo::Array<bool> in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method3_Params_Data);
  size += GetSerializedSize_(in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method3);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method3_Params_Data* out_params =
      internal::ConformanceTestInterface_Method3_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_param0, builder.buffer(), &out_params->param0.ptr,
                          &param0_validate_params);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method4(StructCPtr in_param0, mojo::Array<uint8_t> in_param1) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method4_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  size += GetSerializedSize_(in_param1);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method4);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method4_Params_Data* out_params =
      internal::ConformanceTestInterface_Method4_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  {
    const mojo::internal::ArrayValidateParams param1_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_param1, builder.buffer(), &out_params->param1.ptr,
                          &param1_validate_params);
  }
  if (!out_params->param1.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param1 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method5(StructEPtr in_param0, mojo::ScopedDataPipeProducerHandle in_param1) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method5_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method5);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method5_Params_Data* out_params =
      internal::ConformanceTestInterface_Method5_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->param1 = in_param1.release();
  if (!out_params->param1.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid param1 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method6(mojo::Array<mojo::Array<uint8_t> > in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method6_Params_Data);
  size += GetSerializedSize_(in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method6);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method6_Params_Data* out_params =
      internal::ConformanceTestInterface_Method6_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_param0, builder.buffer(), &out_params->param0.ptr,
                          &param0_validate_params);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method7(StructFPtr in_param0, mojo::Array<mojo::Array<uint8_t> > in_param1) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method7_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  size += GetSerializedSize_(in_param1);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method7);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method7_Params_Data* out_params =
      internal::ConformanceTestInterface_Method7_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  {
    const mojo::internal::ArrayValidateParams param1_validate_params(
      2, true, new mojo::internal::ArrayValidateParams(3, false, nullptr));mojo::SerializeArray_(&in_param1, builder.buffer(), &out_params->param1.ptr,
                          &param1_validate_params);
  }
  if (!out_params->param1.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param1 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method8(mojo::Array<mojo::Array<mojo::String> > in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method8_Params_Data);
  size += GetSerializedSize_(in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method8);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method8_Params_Data* out_params =
      internal::ConformanceTestInterface_Method8_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, true, new mojo::internal::ArrayValidateParams(0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr)));mojo::SerializeArray_(&in_param0, builder.buffer(), &out_params->param0.ptr,
                          &param0_validate_params);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method9(mojo::Array<mojo::Array<mojo::ScopedHandle> > in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method9_Params_Data);
  size += GetSerializedSize_(in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method9);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method9_Params_Data* out_params =
      internal::ConformanceTestInterface_Method9_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, true, nullptr));mojo::SerializeArray_(&in_param0, builder.buffer(), &out_params->param0.ptr,
                          &param0_validate_params);
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method10(mojo::Map<mojo::String, uint8_t> in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method10_Params_Data);
  size += GetSerializedSize_(in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method10);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method10_Params_Data* out_params =
      internal::ConformanceTestInterface_Method10_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
        0, false, nullptr);mojo::SerializeMap_(
        &in_param0, builder.buffer(), &out_params->param0.ptr,
        &param0_validate_params);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method11(StructGPtr in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method11_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method11);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method11_Params_Data* out_params =
      internal::ConformanceTestInterface_Method11_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method12(float in_param0, float* out_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method12_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method12);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method12_Params_Data* out_params =
      internal::ConformanceTestInterface_Method12_Params_Data::New(builder.buffer());
  out_params->param0 = in_param0;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::ConformanceTestInterface_Method12_ResponseParams_Data*
      response_params = reinterpret_cast<internal::ConformanceTestInterface_Method12_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_param0) = response_params->param0;
  } while (false);
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method13(mojo::InterfaceHandle<InterfaceA> in_param0, uint32_t in_param1, mojo::InterfaceHandle<InterfaceA> in_param2) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method13_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method13);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method13_Params_Data* out_params =
      internal::ConformanceTestInterface_Method13_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_param0.Pass(),
                                        &out_params->param0);
  out_params->param1 = in_param1;
  mojo::internal::InterfaceHandleToData(in_param2.Pass(),
                                        &out_params->param2);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method14(UnionAPtr in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method14_Params_Data);
  size += GetSerializedSize_(in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method14);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method14_Params_Data* out_params =
      internal::ConformanceTestInterface_Method14_Params_Data::New(builder.buffer());
  internal::UnionA_Data* param0_ptr = &out_params->param0;
  {
      SerializeUnion_(in_param0.get(),
                      builder.buffer(),
                      &param0_ptr);
  }
  if (out_params->param0.is_null()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool ConformanceTestInterface_SynchronousProxy::Method15(StructHPtr in_param0) const  {
  size_t size = sizeof(internal::ConformanceTestInterface_Method15_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);

  auto msg_name = static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method15);
  mojo::MessageBuilder builder(msg_name, size);

  internal::ConformanceTestInterface_Method15_Params_Data* out_params =
      internal::ConformanceTestInterface_Method15_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}IntegrationTestInterface_SynchronousProxy::IntegrationTestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool IntegrationTestInterface_SynchronousProxy::Method0(BasicStructPtr in_param0, mojo::Array<uint8_t>* out_param0) {
  size_t size = sizeof(internal::IntegrationTestInterface_Method0_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);

  auto msg_name = static_cast<uint32_t>(internal::IntegrationTestInterface_Base::MessageOrdinals::Method0);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::IntegrationTestInterface_Method0_Params_Data* out_params =
      internal::IntegrationTestInterface_Method0_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &out_params->param0.ptr);
  }
  if (!out_params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::IntegrationTestInterface_Method0_ResponseParams_Data*
      response_params = reinterpret_cast<internal::IntegrationTestInterface_Method0_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->param0.ptr, &(*out_param0));
  } while (false);
  return true;
}
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
