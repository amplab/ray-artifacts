// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_H_
#define SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "services/js/system/tests/js_to_cpp.mojom-common.h"
namespace js_to_cpp {

// --- Interface Forward Declarations ---

using CppSidePtr = mojo::InterfacePtr<CppSide>;

using JsSidePtr = mojo::InterfacePtr<JsSide>;


// --- Interface Proxies ---


class CppSideProxy
    : public CppSide,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CppSideProxy(mojo::MessageReceiverWithResponder* receiver);
  void StartTest(
      
  ) override;
  void TestFinished(
      
  ) override;
  void PingResponse(
      
  ) override;
  void EchoResponse(
      EchoArgsListPtr list
  ) override;
  void BitFlipResponse(
      EchoArgsListPtr arg
  ) override;
  void BackPointerResponse(
      EchoArgsListPtr arg
  ) override;
};


class JsSideProxy
    : public JsSide,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit JsSideProxy(mojo::MessageReceiverWithResponder* receiver);
  void SetCppSide(
      mojo::InterfaceHandle<CppSide> cpp
  ) override;
  void Ping(
      
  ) override;
  void Echo(
      int32_t numIterations, EchoArgsPtr arg
  ) override;
  void BitFlip(
      EchoArgsPtr arg
  ) override;
  void BackPointer(
      EchoArgsPtr arg
  ) override;
};


// --- Interface Stubs ---

class CppSideStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CppSideStub();
  ~CppSideStub() override;
  void set_sink(CppSide* sink) { sink_ = sink; }
  CppSide* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CppSide* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class JsSideStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  JsSideStub();
  ~JsSideStub() override;
  void set_sink(JsSide* sink) { sink_ = sink; }
  JsSide* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  JsSide* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace js_to_cpp

#endif  // SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_H_
