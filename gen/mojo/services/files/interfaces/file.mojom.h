// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_FILE_MOJOM_H_
#define MOJO_SERVICES_FILES_INTERFACES_FILE_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/file.mojom-common.h"
#include "mojo/services/files/interfaces/types.mojom.h"
namespace mojo {
namespace files {

// --- Interface Forward Declarations ---

using FilePtr = mojo::InterfacePtr<File>;


// --- Interface Proxies ---


class FileProxy
    : public File,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit FileProxy(mojo::MessageReceiverWithResponder* receiver);
  void Close(
      const CloseCallback& callback
  ) override;
  void Read(
      uint32_t num_bytes_to_read, int64_t offset, mojo::files::Whence whence, const ReadCallback& callback
  ) override;
  void Write(
      mojo::Array<uint8_t> bytes_to_write, int64_t offset, mojo::files::Whence whence, const WriteCallback& callback
  ) override;
  void ReadToStream(
      mojo::ScopedDataPipeProducerHandle source, int64_t offset, mojo::files::Whence whence, int64_t num_bytes_to_read, const ReadToStreamCallback& callback
  ) override;
  void WriteFromStream(
      mojo::ScopedDataPipeConsumerHandle sink, int64_t offset, mojo::files::Whence whence, const WriteFromStreamCallback& callback
  ) override;
  void Tell(
      const TellCallback& callback
  ) override;
  void Seek(
      int64_t offset, mojo::files::Whence whence, const SeekCallback& callback
  ) override;
  void Stat(
      const StatCallback& callback
  ) override;
  void Truncate(
      int64_t size, const TruncateCallback& callback
  ) override;
  void Touch(
      mojo::files::TimespecOrNowPtr atime, mojo::files::TimespecOrNowPtr mtime, const TouchCallback& callback
  ) override;
  void Dup(
      mojo::InterfaceRequest<File> file, const DupCallback& callback
  ) override;
  void Reopen(
      mojo::InterfaceRequest<File> file, uint32_t open_flags, const ReopenCallback& callback
  ) override;
  void AsBuffer(
      const AsBufferCallback& callback
  ) override;
  void Ioctl(
      uint32_t request, mojo::Array<uint32_t> in_values, const IoctlCallback& callback
  ) override;
};


// --- Interface Stubs ---

class FileStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  FileStub();
  ~FileStub() override;
  void set_sink(File* sink) { sink_ = sink; }
  File* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  File* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_FILE_MOJOM_H_
