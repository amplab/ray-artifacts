// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/web_socket.mojom-common.h"
#include "mojo/public/interfaces/network/network_error.mojom.h"
namespace mojo {

// --- Interface Forward Declarations ---

using WebSocketPtr = mojo::InterfacePtr<WebSocket>;

using WebSocketClientPtr = mojo::InterfacePtr<WebSocketClient>;


// --- Interface Proxies ---


class WebSocketProxy
    : public WebSocket,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit WebSocketProxy(mojo::MessageReceiverWithResponder* receiver);
  void Connect(
      const mojo::String& url, mojo::Array<mojo::String> protocols, const mojo::String& origin, mojo::ScopedDataPipeConsumerHandle send_stream, mojo::InterfaceHandle<WebSocketClient> client
  ) override;
  void Send(
      bool fin, WebSocket::MessageType type, uint32_t num_bytes
  ) override;
  void FlowControl(
      int64_t quota
  ) override;
  void Close(
      uint16_t code, const mojo::String& reason
  ) override;
};


class WebSocketClientProxy
    : public WebSocketClient,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit WebSocketClientProxy(mojo::MessageReceiverWithResponder* receiver);
  void DidConnect(
      const mojo::String& selected_subprotocol, const mojo::String& extensions, mojo::ScopedDataPipeConsumerHandle receive_stream
  ) override;
  void DidReceiveData(
      bool fin, WebSocket::MessageType type, uint32_t num_bytes
  ) override;
  void DidReceiveFlowControl(
      int64_t quota
  ) override;
  void DidFail(
      const mojo::String& message
  ) override;
  void DidClose(
      bool was_clean, uint16_t code, const mojo::String& reason
  ) override;
};


// --- Interface Stubs ---

class WebSocketStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  WebSocketStub();
  ~WebSocketStub() override;
  void set_sink(WebSocket* sink) { sink_ = sink; }
  WebSocket* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  WebSocket* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class WebSocketClientStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  WebSocketClientStub();
  ~WebSocketClientStub() override;
  void set_sink(WebSocketClient* sink) { sink_ = sink; }
  WebSocketClient* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  WebSocketClient* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_H_
