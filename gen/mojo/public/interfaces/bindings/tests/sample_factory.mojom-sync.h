// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_FACTORY_MOJOM_SYNC_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_FACTORY_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/interfaces/bindings/tests/sample_factory.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/sample_factory.mojom-common.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom.h"


namespace sample {

// --- Synchronous interface declaration ---

class NamedObject_SynchronousProxy;
class NamedObject_Synchronous
  : public internal::NamedObject_Base {
 public:
  virtual ~NamedObject_Synchronous() override {}
  
  using Proxy_ = NamedObject_SynchronousProxy;
  virtual bool SetName(
      const mojo::String& in_name)const= 0;
  virtual bool GetName(
      mojo::String* out_name)= 0;
};

class NamedObject_SynchronousProxy
    : public NamedObject_Synchronous {
 public:
  explicit NamedObject_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool SetName(const mojo::String& in_name) const  override;
  bool GetName(mojo::String* out_name) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class Factory_SynchronousProxy;
class Factory_Synchronous
  : public internal::Factory_Base {
 public:
  virtual ~Factory_Synchronous() override {}
  
  using Proxy_ = Factory_SynchronousProxy;
  virtual bool DoStuff(
      RequestPtr in_request, mojo::ScopedMessagePipeHandle in_pipe, ResponsePtr* out_response, mojo::String* out_text)= 0;
  virtual bool DoStuff2(
      mojo::ScopedDataPipeConsumerHandle in_pipe, mojo::String* out_text)= 0;
  virtual bool CreateNamedObject(
      mojo::InterfaceRequest<NamedObject> in_obj)const= 0;
  virtual bool RequestImportedInterface(
      mojo::InterfaceRequest<imported::ImportedInterface> in_obj, mojo::InterfaceRequest<imported::ImportedInterface>* out_obj)= 0;
  virtual bool TakeImportedInterface(
      mojo::InterfaceHandle<imported::ImportedInterface> in_obj, mojo::InterfaceHandle<imported::ImportedInterface>* out_obj)= 0;
};

class Factory_SynchronousProxy
    : public Factory_Synchronous {
 public:
  explicit Factory_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool DoStuff(RequestPtr in_request, mojo::ScopedMessagePipeHandle in_pipe, ResponsePtr* out_response, mojo::String* out_text) override;
  bool DoStuff2(mojo::ScopedDataPipeConsumerHandle in_pipe, mojo::String* out_text) override;
  bool CreateNamedObject(mojo::InterfaceRequest<NamedObject> in_obj) const  override;
  bool RequestImportedInterface(mojo::InterfaceRequest<imported::ImportedInterface> in_obj, mojo::InterfaceRequest<imported::ImportedInterface>* out_obj) override;
  bool TakeImportedInterface(mojo::InterfaceHandle<imported::ImportedInterface> in_obj, mojo::InterfaceHandle<imported::ImportedInterface>* out_obj) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace sample

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_FACTORY_MOJOM_SYNC_H_
