// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_SYNC_H_
#define SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "services/js/system/tests/js_to_cpp.mojom-internal.h"
#include "services/js/system/tests/js_to_cpp.mojom-common.h"


namespace js_to_cpp {

// --- Synchronous interface declaration ---

class CppSide_SynchronousProxy;
class CppSide_Synchronous
  : public internal::CppSide_Base {
 public:
  virtual ~CppSide_Synchronous() override {}
  
  using Proxy_ = CppSide_SynchronousProxy;
  virtual bool StartTest(
      )const= 0;
  virtual bool TestFinished(
      )const= 0;
  virtual bool PingResponse(
      )const= 0;
  virtual bool EchoResponse(
      EchoArgsListPtr in_list)const= 0;
  virtual bool BitFlipResponse(
      EchoArgsListPtr in_arg)const= 0;
  virtual bool BackPointerResponse(
      EchoArgsListPtr in_arg)const= 0;
};

class CppSide_SynchronousProxy
    : public CppSide_Synchronous {
 public:
  explicit CppSide_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool StartTest() const  override;
  bool TestFinished() const  override;
  bool PingResponse() const  override;
  bool EchoResponse(EchoArgsListPtr in_list) const  override;
  bool BitFlipResponse(EchoArgsListPtr in_arg) const  override;
  bool BackPointerResponse(EchoArgsListPtr in_arg) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class JsSide_SynchronousProxy;
class JsSide_Synchronous
  : public internal::JsSide_Base {
 public:
  virtual ~JsSide_Synchronous() override {}
  
  using Proxy_ = JsSide_SynchronousProxy;
  virtual bool SetCppSide(
      mojo::InterfaceHandle<CppSide> in_cpp)const= 0;
  virtual bool Ping(
      )const= 0;
  virtual bool Echo(
      int32_t in_numIterations, EchoArgsPtr in_arg)const= 0;
  virtual bool BitFlip(
      EchoArgsPtr in_arg)const= 0;
  virtual bool BackPointer(
      EchoArgsPtr in_arg)const= 0;
};

class JsSide_SynchronousProxy
    : public JsSide_Synchronous {
 public:
  explicit JsSide_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool SetCppSide(mojo::InterfaceHandle<CppSide> in_cpp) const  override;
  bool Ping() const  override;
  bool Echo(int32_t in_numIterations, EchoArgsPtr in_arg) const  override;
  bool BitFlip(EchoArgsPtr in_arg) const  override;
  bool BackPointer(EchoArgsPtr in_arg) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace js_to_cpp

#endif  // SERVICES_JS_SYSTEM_TESTS_JS_TO_CPP_MOJOM_SYNC_H_
