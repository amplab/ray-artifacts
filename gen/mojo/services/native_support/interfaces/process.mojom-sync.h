// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_SYNC_H_
#define MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/native_support/interfaces/process.mojom-internal.h"
#include "mojo/services/native_support/interfaces/process.mojom-common.h"
#include "mojo/services/files/interfaces/file.mojom.h"
#include "mojo/services/files/interfaces/types.mojom.h"


namespace native_support {

// --- Synchronous interface declaration ---

class Process_SynchronousProxy;
class Process_Synchronous
  : public internal::Process_Base {
 public:
  virtual ~Process_Synchronous() override {}
  
  using Proxy_ = Process_SynchronousProxy;
  virtual bool Spawn(
      mojo::Array<uint8_t> in_path, mojo::Array<mojo::Array<uint8_t> > in_argv, mojo::Array<mojo::Array<uint8_t> > in_envp, mojo::InterfaceHandle<mojo::files::File> in_stdin_file, mojo::InterfaceHandle<mojo::files::File> in_stdout_file, mojo::InterfaceHandle<mojo::files::File> in_stderr_file, mojo::InterfaceRequest<ProcessController> in_process_controller, mojo::files::Error* out_error)= 0;
  virtual bool SpawnWithTerminal(
      mojo::Array<uint8_t> in_path, mojo::Array<mojo::Array<uint8_t> > in_argv, mojo::Array<mojo::Array<uint8_t> > in_envp, mojo::InterfaceHandle<mojo::files::File> in_terminal_file, mojo::InterfaceRequest<ProcessController> in_process_controller, mojo::files::Error* out_error)= 0;
};

class Process_SynchronousProxy
    : public Process_Synchronous {
 public:
  explicit Process_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Spawn(mojo::Array<uint8_t> in_path, mojo::Array<mojo::Array<uint8_t> > in_argv, mojo::Array<mojo::Array<uint8_t> > in_envp, mojo::InterfaceHandle<mojo::files::File> in_stdin_file, mojo::InterfaceHandle<mojo::files::File> in_stdout_file, mojo::InterfaceHandle<mojo::files::File> in_stderr_file, mojo::InterfaceRequest<ProcessController> in_process_controller, mojo::files::Error* out_error) override;
  bool SpawnWithTerminal(mojo::Array<uint8_t> in_path, mojo::Array<mojo::Array<uint8_t> > in_argv, mojo::Array<mojo::Array<uint8_t> > in_envp, mojo::InterfaceHandle<mojo::files::File> in_terminal_file, mojo::InterfaceRequest<ProcessController> in_process_controller, mojo::files::Error* out_error) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class ProcessController_SynchronousProxy;
class ProcessController_Synchronous
  : public internal::ProcessController_Base {
 public:
  virtual ~ProcessController_Synchronous() override {}
  
  using Proxy_ = ProcessController_SynchronousProxy;
  virtual bool Wait(
      mojo::files::Error* out_error, int32_t* out_exit_status)= 0;
  virtual bool Kill(
      int32_t in_signal, mojo::files::Error* out_error)= 0;
};

class ProcessController_SynchronousProxy
    : public ProcessController_Synchronous {
 public:
  explicit ProcessController_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Wait(mojo::files::Error* out_error, int32_t* out_exit_status) override;
  bool Kill(int32_t in_signal, mojo::files::Error* out_error) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace native_support

#endif  // MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_SYNC_H_
