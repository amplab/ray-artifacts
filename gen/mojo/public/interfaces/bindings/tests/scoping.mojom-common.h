// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SCOPING_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SCOPING_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/scoping.mojom-internal.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---
class A;
class ARequestValidator;
class A_Synchronous;
class B;
class BRequestValidator;
class B_Synchronous;
class C;
class CRequestValidator;
class C_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class A_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ARequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = A_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetB = 0,
  };


  virtual ~A_Base() {}
};

}  // namespace internal

// Async interface declaration

class AProxy;
class AStub;
class A_Synchronous;

class ARequestValidator;

class A : public internal::A_Base {
 public:
  virtual ~A() override {}

  using Proxy_ = AProxy;
  using Stub_ = AStub;
  virtual void GetB(mojo::InterfaceRequest<B> b) = 0;
};

namespace internal {
class B_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = BRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = B_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetC = 0,
  };


  virtual ~B_Base() {}
};

}  // namespace internal

// Async interface declaration

class BProxy;
class BStub;
class B_Synchronous;

class BRequestValidator;

class B : public internal::B_Base {
 public:
  virtual ~B() override {}

  using Proxy_ = BProxy;
  using Stub_ = BStub;
  virtual void GetC(mojo::InterfaceRequest<C> c) = 0;
};

namespace internal {
class C_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = CRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = C_Synchronous;
  enum class MessageOrdinals : uint32_t {
    D = 0,
  };


  virtual ~C_Base() {}
};

}  // namespace internal

// Async interface declaration

class CProxy;
class CStub;
class C_Synchronous;

class CRequestValidator;

class C : public internal::C_Base {
 public:
  virtual ~C() override {}

  using Proxy_ = CProxy;
  using Stub_ = CStub;
  virtual void D() = 0;
};

}  // namespace test
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {
namespace test {

// --- Interface Request Validators ---
class ARequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class BRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class CRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class A_GetB_Params;

using A_GetB_ParamsPtr = mojo::StructPtr<A_GetB_Params>;


size_t GetSerializedSize_(const A_GetB_Params& input);
mojo::internal::ValidationError Serialize_(
    A_GetB_Params* input,
    mojo::internal::Buffer* buffer,
    internal::A_GetB_Params_Data** output);
void Deserialize_(internal::A_GetB_Params_Data* input,
                  A_GetB_Params* output);

class A_GetB_Params {
 public:
  using Data_ = internal::A_GetB_Params_Data;

  static A_GetB_ParamsPtr New();

  template <typename U>
  static A_GetB_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<A_GetB_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, A_GetB_Params>::Convert(*this);
  }

  A_GetB_Params();
  ~A_GetB_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const A_GetB_Params& other) const;

  mojo::InterfaceRequest<B> b;
};



      

class B_GetC_Params;

using B_GetC_ParamsPtr = mojo::StructPtr<B_GetC_Params>;


size_t GetSerializedSize_(const B_GetC_Params& input);
mojo::internal::ValidationError Serialize_(
    B_GetC_Params* input,
    mojo::internal::Buffer* buffer,
    internal::B_GetC_Params_Data** output);
void Deserialize_(internal::B_GetC_Params_Data* input,
                  B_GetC_Params* output);

class B_GetC_Params {
 public:
  using Data_ = internal::B_GetC_Params_Data;

  static B_GetC_ParamsPtr New();

  template <typename U>
  static B_GetC_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<B_GetC_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, B_GetC_Params>::Convert(*this);
  }

  B_GetC_Params();
  ~B_GetC_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const B_GetC_Params& other) const;

  mojo::InterfaceRequest<C> c;
};



      

class C_D_Params;

using C_D_ParamsPtr = mojo::InlinedStructPtr<C_D_Params>;


size_t GetSerializedSize_(const C_D_Params& input);
mojo::internal::ValidationError Serialize_(
    C_D_Params* input,
    mojo::internal::Buffer* buffer,
    internal::C_D_Params_Data** output);
void Deserialize_(internal::C_D_Params_Data* input,
                  C_D_Params* output);

class C_D_Params {
 public:
  using Data_ = internal::C_D_Params_Data;

  static C_D_ParamsPtr New();

  template <typename U>
  static C_D_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<C_D_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, C_D_Params>::Convert(*this);
  }

  C_D_Params();
  ~C_D_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  C_D_ParamsPtr Clone() const;
  bool Equals(const C_D_Params& other) const;

};



}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SCOPING_MOJOM_COMMON_H_
