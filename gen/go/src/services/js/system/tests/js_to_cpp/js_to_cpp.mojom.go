// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/js/system/tests/js_to_cpp.mojom
//

package js_to_cpp

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type CppSide interface {
	StartTest() (err error)
	TestFinished() (err error)
	PingResponse() (err error)
	EchoResponse(inList EchoArgsList) (err error)
	BitFlipResponse(inArg EchoArgsList) (err error)
	BackPointerResponse(inArg EchoArgsList) (err error)
}




type CppSide_Request bindings.InterfaceRequest



type CppSide_Pointer bindings.InterfacePointer


type CppSide_ServiceFactory struct{
	Delegate CppSide_Factory
}

type CppSide_Factory interface {
	Create(request CppSide_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *CppSide_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &CppSide_ServiceDescription{}
}

func (f *CppSide_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := CppSide_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForCppSide creates a message pipe for use with the
// CppSide interface with a CppSide_Request on one end and a CppSide_Pointer on the other.
func CreateMessagePipeForCppSide() (CppSide_Request, CppSide_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return CppSide_Request(r), CppSide_Pointer(p)
}

const cppSide_StartTest_Name uint32 = 88888888
const cppSide_TestFinished_Name uint32 = 99999999
const cppSide_PingResponse_Name uint32 = 100000000
const cppSide_EchoResponse_Name uint32 = 100000001
const cppSide_BitFlipResponse_Name uint32 = 100000002
const cppSide_BackPointerResponse_Name uint32 = 100000003

type CppSide_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewCppSideProxy(p CppSide_Pointer, waiter bindings.AsyncWaiter) *CppSide_Proxy {
	return &CppSide_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *CppSide_Proxy) Close_Proxy() {
	p.router.Close()
}

type cppSide_StartTest_Params struct {
}


func (s *cppSide_StartTest_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var cppSide_StartTest_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *cppSide_StartTest_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(cppSide_StartTest_Params_Versions), func(i int) bool {
		return cppSide_StartTest_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(cppSide_StartTest_Params_Versions) {
		if cppSide_StartTest_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := cppSide_StartTest_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *CppSide_Proxy) StartTest() (err error) {
	payload := &cppSide_StartTest_Params{
	}
	header := bindings.MessageHeader{
		Type: cppSide_StartTest_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type cppSide_TestFinished_Params struct {
}


func (s *cppSide_TestFinished_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var cppSide_TestFinished_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *cppSide_TestFinished_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(cppSide_TestFinished_Params_Versions), func(i int) bool {
		return cppSide_TestFinished_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(cppSide_TestFinished_Params_Versions) {
		if cppSide_TestFinished_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := cppSide_TestFinished_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *CppSide_Proxy) TestFinished() (err error) {
	payload := &cppSide_TestFinished_Params{
	}
	header := bindings.MessageHeader{
		Type: cppSide_TestFinished_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type cppSide_PingResponse_Params struct {
}


func (s *cppSide_PingResponse_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var cppSide_PingResponse_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *cppSide_PingResponse_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(cppSide_PingResponse_Params_Versions), func(i int) bool {
		return cppSide_PingResponse_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(cppSide_PingResponse_Params_Versions) {
		if cppSide_PingResponse_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := cppSide_PingResponse_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *CppSide_Proxy) PingResponse() (err error) {
	payload := &cppSide_PingResponse_Params{
	}
	header := bindings.MessageHeader{
		Type: cppSide_PingResponse_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type cppSide_EchoResponse_Params struct {
	inList EchoArgsList
}


func (s *cppSide_EchoResponse_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inList.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var cppSide_EchoResponse_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *cppSide_EchoResponse_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(cppSide_EchoResponse_Params_Versions), func(i int) bool {
		return cppSide_EchoResponse_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(cppSide_EchoResponse_Params_Versions) {
		if cppSide_EchoResponse_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := cppSide_EchoResponse_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inList.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *CppSide_Proxy) EchoResponse(inList EchoArgsList) (err error) {
	payload := &cppSide_EchoResponse_Params{
		inList,
	}
	header := bindings.MessageHeader{
		Type: cppSide_EchoResponse_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type cppSide_BitFlipResponse_Params struct {
	inArg EchoArgsList
}


func (s *cppSide_BitFlipResponse_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inArg.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var cppSide_BitFlipResponse_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *cppSide_BitFlipResponse_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(cppSide_BitFlipResponse_Params_Versions), func(i int) bool {
		return cppSide_BitFlipResponse_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(cppSide_BitFlipResponse_Params_Versions) {
		if cppSide_BitFlipResponse_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := cppSide_BitFlipResponse_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inArg.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *CppSide_Proxy) BitFlipResponse(inArg EchoArgsList) (err error) {
	payload := &cppSide_BitFlipResponse_Params{
		inArg,
	}
	header := bindings.MessageHeader{
		Type: cppSide_BitFlipResponse_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type cppSide_BackPointerResponse_Params struct {
	inArg EchoArgsList
}


func (s *cppSide_BackPointerResponse_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inArg.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var cppSide_BackPointerResponse_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *cppSide_BackPointerResponse_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(cppSide_BackPointerResponse_Params_Versions), func(i int) bool {
		return cppSide_BackPointerResponse_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(cppSide_BackPointerResponse_Params_Versions) {
		if cppSide_BackPointerResponse_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := cppSide_BackPointerResponse_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inArg.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *CppSide_Proxy) BackPointerResponse(inArg EchoArgsList) (err error) {
	payload := &cppSide_BackPointerResponse_Params{
		inArg,
	}
	header := bindings.MessageHeader{
		Type: cppSide_BackPointerResponse_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type cppSide_Stub struct {
	connector *bindings.Connector
	impl CppSide
}

func NewCppSideStub(r CppSide_Request, impl CppSide, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &cppSide_Stub{connector, impl})
}


func (f *CppSide_Request) ServiceDescription() service_describer.ServiceDescription {
	return &CppSide_ServiceDescription{}
}


type CppSide_ServiceDescription struct{}

func (sd *CppSide_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *CppSide_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *CppSide_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*CppSide_ServiceDescription)(nil)


func (s *cppSide_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case cppSide_StartTest_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request cppSide_StartTest_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.StartTest()
		if err != nil {
			return
		}
	case cppSide_TestFinished_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request cppSide_TestFinished_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.TestFinished()
		if err != nil {
			return
		}
	case cppSide_PingResponse_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request cppSide_PingResponse_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.PingResponse()
		if err != nil {
			return
		}
	case cppSide_EchoResponse_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request cppSide_EchoResponse_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.EchoResponse(request.inList)
		if err != nil {
			return
		}
	case cppSide_BitFlipResponse_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request cppSide_BitFlipResponse_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.BitFlipResponse(request.inArg)
		if err != nil {
			return
		}
	case cppSide_BackPointerResponse_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request cppSide_BackPointerResponse_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.BackPointerResponse(request.inArg)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type JsSide interface {
	SetCppSide(inCpp CppSide_Pointer) (err error)
	Ping() (err error)
	Echo(inNumIterations int32, inArg EchoArgs) (err error)
	BitFlip(inArg EchoArgs) (err error)
	BackPointer(inArg EchoArgs) (err error)
}




type JsSide_Request bindings.InterfaceRequest



type JsSide_Pointer bindings.InterfacePointer


type JsSide_ServiceFactory struct{
	Delegate JsSide_Factory
}

type JsSide_Factory interface {
	Create(request JsSide_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *JsSide_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &JsSide_ServiceDescription{}
}

func (f *JsSide_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := JsSide_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForJsSide creates a message pipe for use with the
// JsSide interface with a JsSide_Request on one end and a JsSide_Pointer on the other.
func CreateMessagePipeForJsSide() (JsSide_Request, JsSide_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return JsSide_Request(r), JsSide_Pointer(p)
}

const jsSide_SetCppSide_Name uint32 = 0
const jsSide_Ping_Name uint32 = 1
const jsSide_Echo_Name uint32 = 2
const jsSide_BitFlip_Name uint32 = 3
const jsSide_BackPointer_Name uint32 = 4

type JsSide_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewJsSideProxy(p JsSide_Pointer, waiter bindings.AsyncWaiter) *JsSide_Proxy {
	return &JsSide_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *JsSide_Proxy) Close_Proxy() {
	p.router.Close()
}

type jsSide_SetCppSide_Params struct {
	inCpp CppSide_Pointer
}


func (s *jsSide_SetCppSide_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInterface(s.inCpp.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var jsSide_SetCppSide_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *jsSide_SetCppSide_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(jsSide_SetCppSide_Params_Versions), func(i int) bool {
		return jsSide_SetCppSide_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(jsSide_SetCppSide_Params_Versions) {
		if jsSide_SetCppSide_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := jsSide_SetCppSide_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inCpp = CppSide_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *JsSide_Proxy) SetCppSide(inCpp CppSide_Pointer) (err error) {
	payload := &jsSide_SetCppSide_Params{
		inCpp,
	}
	header := bindings.MessageHeader{
		Type: jsSide_SetCppSide_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type jsSide_Ping_Params struct {
}


func (s *jsSide_Ping_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var jsSide_Ping_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *jsSide_Ping_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(jsSide_Ping_Params_Versions), func(i int) bool {
		return jsSide_Ping_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(jsSide_Ping_Params_Versions) {
		if jsSide_Ping_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := jsSide_Ping_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *JsSide_Proxy) Ping() (err error) {
	payload := &jsSide_Ping_Params{
	}
	header := bindings.MessageHeader{
		Type: jsSide_Ping_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type jsSide_Echo_Params struct {
	inNumIterations int32
	inArg EchoArgs
}


func (s *jsSide_Echo_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(s.inNumIterations); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inArg.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var jsSide_Echo_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *jsSide_Echo_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(jsSide_Echo_Params_Versions), func(i int) bool {
		return jsSide_Echo_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(jsSide_Echo_Params_Versions) {
		if jsSide_Echo_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := jsSide_Echo_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inNumIterations = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inArg.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *JsSide_Proxy) Echo(inNumIterations int32, inArg EchoArgs) (err error) {
	payload := &jsSide_Echo_Params{
		inNumIterations,
		inArg,
	}
	header := bindings.MessageHeader{
		Type: jsSide_Echo_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type jsSide_BitFlip_Params struct {
	inArg EchoArgs
}


func (s *jsSide_BitFlip_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inArg.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var jsSide_BitFlip_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *jsSide_BitFlip_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(jsSide_BitFlip_Params_Versions), func(i int) bool {
		return jsSide_BitFlip_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(jsSide_BitFlip_Params_Versions) {
		if jsSide_BitFlip_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := jsSide_BitFlip_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inArg.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *JsSide_Proxy) BitFlip(inArg EchoArgs) (err error) {
	payload := &jsSide_BitFlip_Params{
		inArg,
	}
	header := bindings.MessageHeader{
		Type: jsSide_BitFlip_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type jsSide_BackPointer_Params struct {
	inArg EchoArgs
}


func (s *jsSide_BackPointer_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inArg.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var jsSide_BackPointer_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *jsSide_BackPointer_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(jsSide_BackPointer_Params_Versions), func(i int) bool {
		return jsSide_BackPointer_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(jsSide_BackPointer_Params_Versions) {
		if jsSide_BackPointer_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := jsSide_BackPointer_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inArg.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *JsSide_Proxy) BackPointer(inArg EchoArgs) (err error) {
	payload := &jsSide_BackPointer_Params{
		inArg,
	}
	header := bindings.MessageHeader{
		Type: jsSide_BackPointer_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type jsSide_Stub struct {
	connector *bindings.Connector
	impl JsSide
}

func NewJsSideStub(r JsSide_Request, impl JsSide, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &jsSide_Stub{connector, impl})
}


func (f *JsSide_Request) ServiceDescription() service_describer.ServiceDescription {
	return &JsSide_ServiceDescription{}
}


type JsSide_ServiceDescription struct{}

func (sd *JsSide_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *JsSide_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *JsSide_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*JsSide_ServiceDescription)(nil)


func (s *jsSide_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case jsSide_SetCppSide_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request jsSide_SetCppSide_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.SetCppSide(request.inCpp)
		if err != nil {
			return
		}
	case jsSide_Ping_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request jsSide_Ping_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Ping()
		if err != nil {
			return
		}
	case jsSide_Echo_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request jsSide_Echo_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Echo(request.inNumIterations, request.inArg)
		if err != nil {
			return
		}
	case jsSide_BitFlip_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request jsSide_BitFlip_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.BitFlip(request.inArg)
		if err != nil {
			return
		}
	case jsSide_BackPointer_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request jsSide_BackPointer_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.BackPointer(request.inArg)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type EchoArgs struct {
	Si64 int64
	Si32 int32
	Si16 int16
	Si8 int8
	Ui64 uint64
	Ui32 uint32
	Ui16 uint16
	Ui8 uint8
	FloatVal float32
	FloatInf float32
	FloatNan float32
	DoubleVal float64
	DoubleInf float64
	DoubleNan float64
	Name *string
	StringArray *[]string
	MessageHandle *system.MessagePipeHandle
	DataHandle *system.ConsumerHandle
}


func (s *EchoArgs) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(96, 0)
	if err := encoder.WriteInt64(s.Si64); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.Si32); err != nil {
		return err
	}
	if err := encoder.WriteInt16(s.Si16); err != nil {
		return err
	}
	if err := encoder.WriteInt8(s.Si8); err != nil {
		return err
	}
	if err := encoder.WriteUint8(s.Ui8); err != nil {
		return err
	}
	if err := encoder.WriteUint64(s.Ui64); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.Ui32); err != nil {
		return err
	}
	if err := encoder.WriteUint16(s.Ui16); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.FloatVal); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.FloatInf); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.FloatNan); err != nil {
		return err
	}
	if s.MessageHandle == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.MessageHandle)); err != nil {
			return err
		}
	}
	if err := encoder.WriteFloat64(s.DoubleVal); err != nil {
		return err
	}
	if err := encoder.WriteFloat64(s.DoubleInf); err != nil {
		return err
	}
	if err := encoder.WriteFloat64(s.DoubleNan); err != nil {
		return err
	}
	if s.Name == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.Name)); err != nil {
			return err
		}
	}
	if s.StringArray == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.StringArray))), 64)
		for _, elem0 := range (*s.StringArray) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			if err := encoder.WriteString(elem0); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if s.DataHandle == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.DataHandle)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var echoArgs_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{104, 0},
}

func (s *EchoArgs) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(echoArgs_Versions), func(i int) bool {
		return echoArgs_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(echoArgs_Versions) {
		if echoArgs_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := echoArgs_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.Si64 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Si32 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt16()
		if err != nil {
			return err
		}
		s.Si16 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt8()
		if err != nil {
			return err
		}
		s.Si8 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint8()
		if err != nil {
			return err
		}
		s.Ui8 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint64()
		if err != nil {
			return err
		}
		s.Ui64 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.Ui32 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.Ui16 = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.FloatVal = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.FloatInf = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.FloatNan = value0
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.MessageHandle = &handle0
		} else {
			s.MessageHandle = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat64()
		if err != nil {
			return err
		}
		s.DoubleVal = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat64()
		if err != nil {
			return err
		}
		s.DoubleInf = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat64()
		if err != nil {
			return err
		}
		s.DoubleNan = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Name = nil
		} else {
			s.Name = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.Name) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.StringArray = nil
		} else {
			s.StringArray = new([]string)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.StringArray) = make([]string, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					value1, err := decoder.ReadString()
					if err != nil {
						return err
					}
					(*s.StringArray)[i0] = value1
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.DataHandle = &handle0
		} else {
			s.DataHandle = nil
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type EchoArgsList struct {
	Next *EchoArgsList
	Item *EchoArgs
}


func (s *EchoArgsList) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.Next == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.Next).Encode(encoder); err != nil {
			return err
		}
	}
	if s.Item == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.Item).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var echoArgsList_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *EchoArgsList) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(echoArgsList_Versions), func(i int) bool {
		return echoArgsList_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(echoArgsList_Versions) {
		if echoArgsList_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := echoArgsList_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Next = nil
		} else {
			s.Next = new(EchoArgsList)
			if err := (*s.Next).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Item = nil
		} else {
			s.Item = new(EchoArgs)
			if err := (*s.Item).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

