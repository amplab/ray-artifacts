// This file was auto-generated by the C bindings generator.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_STRUCTS_MOJOM_C_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_STRUCTS_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.
#include "mojo/public/interfaces/bindings/tests/rect.mojom-c.h"


// Forward declarations for structs.
struct mojo_test_StructOfStructs;
union mojo_test_StructOfStructsPtr {
  struct mojo_test_StructOfStructs* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_StructOfStructsPtr) == 8,
              "union mojo_test_StructOfStructsPtr must be 8 bytes");

struct mojo_test_NamedRegion;
union mojo_test_NamedRegionPtr {
  struct mojo_test_NamedRegion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_NamedRegionPtr) == 8,
              "union mojo_test_NamedRegionPtr must be 8 bytes");

struct mojo_test_RectPair;
union mojo_test_RectPairPtr {
  struct mojo_test_RectPair* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_RectPairPtr) == 8,
              "union mojo_test_RectPairPtr must be 8 bytes");

struct mojo_test_EmptyStruct;
union mojo_test_EmptyStructPtr {
  struct mojo_test_EmptyStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_EmptyStructPtr) == 8,
              "union mojo_test_EmptyStructPtr must be 8 bytes");

struct mojo_test_HandleStruct;
union mojo_test_HandleStructPtr {
  struct mojo_test_HandleStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_HandleStructPtr) == 8,
              "union mojo_test_HandleStructPtr must be 8 bytes");

struct mojo_test_NullableHandleStruct;
union mojo_test_NullableHandleStructPtr {
  struct mojo_test_NullableHandleStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_NullableHandleStructPtr) == 8,
              "union mojo_test_NullableHandleStructPtr must be 8 bytes");

struct mojo_test_NoDefaultFieldValues;
union mojo_test_NoDefaultFieldValuesPtr {
  struct mojo_test_NoDefaultFieldValues* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_NoDefaultFieldValuesPtr) == 8,
              "union mojo_test_NoDefaultFieldValuesPtr must be 8 bytes");

struct mojo_test_DefaultFieldValues;
union mojo_test_DefaultFieldValuesPtr {
  struct mojo_test_DefaultFieldValues* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_DefaultFieldValuesPtr) == 8,
              "union mojo_test_DefaultFieldValuesPtr must be 8 bytes");

struct mojo_test_ScopedConstants;
union mojo_test_ScopedConstantsPtr {
  struct mojo_test_ScopedConstants* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_ScopedConstantsPtr) == 8,
              "union mojo_test_ScopedConstantsPtr must be 8 bytes");

struct mojo_test_MapKeyTypes;
union mojo_test_MapKeyTypesPtr {
  struct mojo_test_MapKeyTypes* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MapKeyTypesPtr) == 8,
              "union mojo_test_MapKeyTypesPtr must be 8 bytes");

struct mojo_test_MapValueTypes;
union mojo_test_MapValueTypesPtr {
  struct mojo_test_MapValueTypes* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MapValueTypesPtr) == 8,
              "union mojo_test_MapValueTypesPtr must be 8 bytes");

struct mojo_test_ArrayValueTypes;
union mojo_test_ArrayValueTypesPtr {
  struct mojo_test_ArrayValueTypes* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_ArrayValueTypesPtr) == 8,
              "union mojo_test_ArrayValueTypesPtr must be 8 bytes");

struct mojo_test_FloatNumberValues;
union mojo_test_FloatNumberValuesPtr {
  struct mojo_test_FloatNumberValues* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_FloatNumberValuesPtr) == 8,
              "union mojo_test_FloatNumberValuesPtr must be 8 bytes");

struct mojo_test_IntegerNumberValues;
union mojo_test_IntegerNumberValuesPtr {
  struct mojo_test_IntegerNumberValues* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_IntegerNumberValuesPtr) == 8,
              "union mojo_test_IntegerNumberValuesPtr must be 8 bytes");

struct mojo_test_UnsignedNumberValues;
union mojo_test_UnsignedNumberValuesPtr {
  struct mojo_test_UnsignedNumberValues* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_UnsignedNumberValuesPtr) == 8,
              "union mojo_test_UnsignedNumberValuesPtr must be 8 bytes");

struct mojo_test_BitArrayValues;
union mojo_test_BitArrayValuesPtr {
  struct mojo_test_BitArrayValues* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_BitArrayValuesPtr) == 8,
              "union mojo_test_BitArrayValuesPtr must be 8 bytes");

struct mojo_test_MultiVersionStruct;
union mojo_test_MultiVersionStructPtr {
  struct mojo_test_MultiVersionStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MultiVersionStructPtr) == 8,
              "union mojo_test_MultiVersionStructPtr must be 8 bytes");

struct mojo_test_MultiVersionStructV0;
union mojo_test_MultiVersionStructV0Ptr {
  struct mojo_test_MultiVersionStructV0* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MultiVersionStructV0Ptr) == 8,
              "union mojo_test_MultiVersionStructV0Ptr must be 8 bytes");

struct mojo_test_MultiVersionStructV1;
union mojo_test_MultiVersionStructV1Ptr {
  struct mojo_test_MultiVersionStructV1* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MultiVersionStructV1Ptr) == 8,
              "union mojo_test_MultiVersionStructV1Ptr must be 8 bytes");

struct mojo_test_MultiVersionStructV3;
union mojo_test_MultiVersionStructV3Ptr {
  struct mojo_test_MultiVersionStructV3* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MultiVersionStructV3Ptr) == 8,
              "union mojo_test_MultiVersionStructV3Ptr must be 8 bytes");

struct mojo_test_MultiVersionStructV5;
union mojo_test_MultiVersionStructV5Ptr {
  struct mojo_test_MultiVersionStructV5* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MultiVersionStructV5Ptr) == 8,
              "union mojo_test_MultiVersionStructV5Ptr must be 8 bytes");

struct mojo_test_MultiVersionStructV7;
union mojo_test_MultiVersionStructV7Ptr {
  struct mojo_test_MultiVersionStructV7* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_MultiVersionStructV7Ptr) == 8,
              "union mojo_test_MultiVersionStructV7Ptr must be 8 bytes");

struct mojo_test_ContainsInterface;
union mojo_test_ContainsInterfacePtr {
  struct mojo_test_ContainsInterface* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_ContainsInterfacePtr) == 8,
              "union mojo_test_ContainsInterfacePtr must be 8 bytes");

struct mojo_test_ContainsOther;
union mojo_test_ContainsOtherPtr {
  struct mojo_test_ContainsOther* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_ContainsOtherPtr) == 8,
              "union mojo_test_ContainsOtherPtr must be 8 bytes");

struct mojo_test_ContainsInterfaceRequest;
union mojo_test_ContainsInterfaceRequestPtr {
  struct mojo_test_ContainsInterfaceRequest* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_ContainsInterfaceRequestPtr) == 8,
              "union mojo_test_ContainsInterfaceRequestPtr must be 8 bytes");

struct mojo_test_DartKeywordStruct;
union mojo_test_DartKeywordStructPtr {
  struct mojo_test_DartKeywordStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_DartKeywordStructPtr) == 8,
              "union mojo_test_DartKeywordStructPtr must be 8 bytes");

// Forward declarations for unions.
struct mojo_test_UnionOfStructs;
union mojo_test_UnionOfStructsPtr {
  struct mojo_test_UnionOfStructs* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_UnionOfStructsPtr) == 8,
             "union mojo_test_UnionOfStructs must be 8 bytes");

// Top level constants.


// Top level enums.


// Union definitions.
// -- mojo_test_UnionOfStructs --
// Enum describing the union tags.
typedef uint32_t mojo_test_UnionOfStructs_Tag;
enum mojo_test_UnionOfStructs_Tag_Enum {
  mojo_test_UnionOfStructs_Tag_nr = 0,
  mojo_test_UnionOfStructs_Tag_a_nr = 1,
  mojo_test_UnionOfStructs_Tag_a_rp = 2,
  mojo_test_UnionOfStructs_Tag_m_ndfv = 3,
  mojo_test_UnionOfStructs_Tag_m_hs = 4,
  
  mojo_test_UnionOfStructs_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_UnionOfStructs {
  uint32_t size;
  mojo_test_UnionOfStructs_Tag tag;
  
  union {
    union mojo_test_NamedRegionPtr f_nr;
    union MojomArrayPtr f_a_nr;
    union MojomArrayPtr f_a_rp;
    union MojomMapPtr f_m_ndfv;
    union MojomMapPtr f_m_hs;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_UnionOfStructs) == 16,
             "struct mojo_test_UnionOfStructs must be 16 bytes");



// Struct definitions.
// -- mojo_test_StructOfStructs --
// Enums
// Constants
// Struct definition
struct mojo_test_StructOfStructs {
  struct MojomStructHeader header_;
  union mojo_test_NamedRegionPtr nr;  // offset,bit = 0,0
  union MojomArrayPtr a_nr;  // offset,bit = 8,0
  union MojomArrayPtr a_rp;  // offset,bit = 16,0
  union MojomMapPtr m_ndfv;  // offset,bit = 24,0
  union MojomMapPtr m_hs;  // offset,bit = 32,0
  
};

struct mojo_test_StructOfStructs* mojo_test_StructOfStructs_New(struct MojomBuffer* in_buffer);

void mojo_test_StructOfStructs_Init(
  struct mojo_test_StructOfStructs* in_data);

void mojo_test_StructOfStructs_CloseAllHandles(
  struct mojo_test_StructOfStructs* in_data);

struct mojo_test_StructOfStructs* mojo_test_StructOfStructs_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_StructOfStructs* in_data);

size_t mojo_test_StructOfStructs_ComputeSerializedSize(
  const struct mojo_test_StructOfStructs* in_data);

MojomValidationResult mojo_test_StructOfStructs_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_StructOfStructs_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_StructOfStructs_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_NamedRegion --
// Enums
// Constants
// Struct definition
struct mojo_test_NamedRegion {
  struct MojomStructHeader header_;
  union MojomStringPtr name;  // offset,bit = 0,0
  union MojomArrayPtr rects;  // offset,bit = 8,0
  
};

struct mojo_test_NamedRegion* mojo_test_NamedRegion_New(struct MojomBuffer* in_buffer);

void mojo_test_NamedRegion_Init(
  struct mojo_test_NamedRegion* in_data);

void mojo_test_NamedRegion_CloseAllHandles(
  struct mojo_test_NamedRegion* in_data);

struct mojo_test_NamedRegion* mojo_test_NamedRegion_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_NamedRegion* in_data);

size_t mojo_test_NamedRegion_ComputeSerializedSize(
  const struct mojo_test_NamedRegion* in_data);

MojomValidationResult mojo_test_NamedRegion_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_NamedRegion_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_NamedRegion_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_RectPair --
// Enums
// Constants
// Struct definition
struct mojo_test_RectPair {
  struct MojomStructHeader header_;
  union mojo_test_RectPtr first;  // offset,bit = 0,0
  union mojo_test_RectPtr second;  // offset,bit = 8,0
  
};

struct mojo_test_RectPair* mojo_test_RectPair_New(struct MojomBuffer* in_buffer);

void mojo_test_RectPair_Init(
  struct mojo_test_RectPair* in_data);

void mojo_test_RectPair_CloseAllHandles(
  struct mojo_test_RectPair* in_data);

struct mojo_test_RectPair* mojo_test_RectPair_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_RectPair* in_data);

size_t mojo_test_RectPair_ComputeSerializedSize(
  const struct mojo_test_RectPair* in_data);

MojomValidationResult mojo_test_RectPair_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_RectPair_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_RectPair_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_EmptyStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_EmptyStruct {
  struct MojomStructHeader header_;
  
};

struct mojo_test_EmptyStruct* mojo_test_EmptyStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_EmptyStruct_Init(
  struct mojo_test_EmptyStruct* in_data);

void mojo_test_EmptyStruct_CloseAllHandles(
  struct mojo_test_EmptyStruct* in_data);

struct mojo_test_EmptyStruct* mojo_test_EmptyStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_EmptyStruct* in_data);

size_t mojo_test_EmptyStruct_ComputeSerializedSize(
  const struct mojo_test_EmptyStruct* in_data);

MojomValidationResult mojo_test_EmptyStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_EmptyStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_EmptyStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_HandleStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_HandleStruct {
  struct MojomStructHeader header_;
  MojoHandle h;  // offset,bit = 0,0
  union MojomArrayPtr array_h;  // offset,bit = 8,0
  
};

struct mojo_test_HandleStruct* mojo_test_HandleStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_HandleStruct_Init(
  struct mojo_test_HandleStruct* in_data);

void mojo_test_HandleStruct_CloseAllHandles(
  struct mojo_test_HandleStruct* in_data);

struct mojo_test_HandleStruct* mojo_test_HandleStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_HandleStruct* in_data);

size_t mojo_test_HandleStruct_ComputeSerializedSize(
  const struct mojo_test_HandleStruct* in_data);

MojomValidationResult mojo_test_HandleStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_HandleStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_HandleStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_NullableHandleStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_NullableHandleStruct {
  struct MojomStructHeader header_;
  MojoHandle h;  // offset,bit = 0,0
  int32_t data;  // offset,bit = 4,0
  uint8_t pad1_[4];  // padding
  
};

struct mojo_test_NullableHandleStruct* mojo_test_NullableHandleStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_NullableHandleStruct_Init(
  struct mojo_test_NullableHandleStruct* in_data);

void mojo_test_NullableHandleStruct_CloseAllHandles(
  struct mojo_test_NullableHandleStruct* in_data);

struct mojo_test_NullableHandleStruct* mojo_test_NullableHandleStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_NullableHandleStruct* in_data);

size_t mojo_test_NullableHandleStruct_ComputeSerializedSize(
  const struct mojo_test_NullableHandleStruct* in_data);

MojomValidationResult mojo_test_NullableHandleStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_NullableHandleStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_NullableHandleStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_NoDefaultFieldValues --
// Enums
// Constants
// Struct definition
struct mojo_test_NoDefaultFieldValues {
  struct MojomStructHeader header_;
  bool f0 : 1;  // offset,bit = 0,0
  int8_t f1;  // offset,bit = 1,0
  uint8_t f2;  // offset,bit = 2,0
  uint8_t pad2_[1];  // padding
  int16_t f3;  // offset,bit = 4,0
  uint16_t f4;  // offset,bit = 6,0
  int32_t f5;  // offset,bit = 8,0
  uint32_t f6;  // offset,bit = 12,0
  int64_t f7;  // offset,bit = 16,0
  uint64_t f8;  // offset,bit = 24,0
  float f9;  // offset,bit = 32,0
  MojoHandle f13;  // offset,bit = 36,0
  double f10;  // offset,bit = 40,0
  union MojomStringPtr f11;  // offset,bit = 48,0
  union MojomStringPtr f12;  // offset,bit = 56,0
  MojoHandle f14;  // offset,bit = 64,0
  MojoHandle f15;  // offset,bit = 68,0
  MojoHandle f16;  // offset,bit = 72,0
  MojoHandle f17;  // offset,bit = 76,0
  MojoHandle f18;  // offset,bit = 80,0
  MojoHandle f19;  // offset,bit = 84,0
  MojoHandle f20;  // offset,bit = 88,0
  MojoHandle f21;  // offset,bit = 92,0
  MojoHandle f22;  // offset,bit = 96,0
  union MojomArrayPtr f23;  // offset,bit = 104,0
  union MojomArrayPtr f24;  // offset,bit = 112,0
  union MojomArrayPtr f25;  // offset,bit = 120,0
  union MojomArrayPtr f26;  // offset,bit = 128,0
  union mojo_test_EmptyStructPtr f27;  // offset,bit = 136,0
  union mojo_test_EmptyStructPtr f28;  // offset,bit = 144,0
  
};

struct mojo_test_NoDefaultFieldValues* mojo_test_NoDefaultFieldValues_New(struct MojomBuffer* in_buffer);

void mojo_test_NoDefaultFieldValues_Init(
  struct mojo_test_NoDefaultFieldValues* in_data);

void mojo_test_NoDefaultFieldValues_CloseAllHandles(
  struct mojo_test_NoDefaultFieldValues* in_data);

struct mojo_test_NoDefaultFieldValues* mojo_test_NoDefaultFieldValues_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_NoDefaultFieldValues* in_data);

size_t mojo_test_NoDefaultFieldValues_ComputeSerializedSize(
  const struct mojo_test_NoDefaultFieldValues* in_data);

MojomValidationResult mojo_test_NoDefaultFieldValues_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_NoDefaultFieldValues_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_NoDefaultFieldValues_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_DefaultFieldValues --
// Enums
// Constants
const char* mojo_test_DefaultFieldValues_kFoo;
// Struct definition
struct mojo_test_DefaultFieldValues {
  struct MojomStructHeader header_;
  bool f0 : 1;  // offset,bit = 0,0
  int8_t f1;  // offset,bit = 1,0
  uint8_t f2;  // offset,bit = 2,0
  uint8_t pad2_[1];  // padding
  int16_t f3;  // offset,bit = 4,0
  uint16_t f4;  // offset,bit = 6,0
  int32_t f5;  // offset,bit = 8,0
  uint32_t f6;  // offset,bit = 12,0
  int64_t f7;  // offset,bit = 16,0
  uint64_t f8;  // offset,bit = 24,0
  float f9;  // offset,bit = 32,0
  float f10;  // offset,bit = 36,0
  double f11;  // offset,bit = 40,0
  double f12;  // offset,bit = 48,0
  union MojomStringPtr f13;  // offset,bit = 56,0
  union MojomStringPtr f14;  // offset,bit = 64,0
  union mojo_test_RectPtr f15;  // offset,bit = 72,0
  union mojo_test_RectPtr f16;  // offset,bit = 80,0
  
};

struct mojo_test_DefaultFieldValues* mojo_test_DefaultFieldValues_New(struct MojomBuffer* in_buffer);

void mojo_test_DefaultFieldValues_Init(
  struct mojo_test_DefaultFieldValues* in_data);

void mojo_test_DefaultFieldValues_CloseAllHandles(
  struct mojo_test_DefaultFieldValues* in_data);

struct mojo_test_DefaultFieldValues* mojo_test_DefaultFieldValues_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_DefaultFieldValues* in_data);

size_t mojo_test_DefaultFieldValues_ComputeSerializedSize(
  const struct mojo_test_DefaultFieldValues* in_data);

MojomValidationResult mojo_test_DefaultFieldValues_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_DefaultFieldValues_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_DefaultFieldValues_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_ScopedConstants --
// Enums
typedef uint32_t mojo_test_ScopedConstants_EType;
enum mojo_test_ScopedConstants_EType_Enum {
  mojo_test_ScopedConstants_EType_E0 = 0,
  mojo_test_ScopedConstants_EType_E1 = 1,
  mojo_test_ScopedConstants_EType_E2 = 10,
  mojo_test_ScopedConstants_EType_E3 = 10,
  mojo_test_ScopedConstants_EType_E4 = 11,
  
  mojo_test_ScopedConstants_EType__UNKNOWN__ = 0xFFFFFFFF,
};

// Constants
const int32_t mojo_test_ScopedConstants_TEN;
const int32_t mojo_test_ScopedConstants_ALSO_TEN;
// Struct definition
struct mojo_test_ScopedConstants {
  struct MojomStructHeader header_;
  mojo_test_ScopedConstants_EType f0;  // offset,bit = 0,0
  mojo_test_ScopedConstants_EType f1;  // offset,bit = 4,0
  mojo_test_ScopedConstants_EType f2;  // offset,bit = 8,0
  mojo_test_ScopedConstants_EType f3;  // offset,bit = 12,0
  mojo_test_ScopedConstants_EType f4;  // offset,bit = 16,0
  int32_t f5;  // offset,bit = 20,0
  int32_t f6;  // offset,bit = 24,0
  
};

struct mojo_test_ScopedConstants* mojo_test_ScopedConstants_New(struct MojomBuffer* in_buffer);

void mojo_test_ScopedConstants_Init(
  struct mojo_test_ScopedConstants* in_data);

void mojo_test_ScopedConstants_CloseAllHandles(
  struct mojo_test_ScopedConstants* in_data);

struct mojo_test_ScopedConstants* mojo_test_ScopedConstants_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_ScopedConstants* in_data);

size_t mojo_test_ScopedConstants_ComputeSerializedSize(
  const struct mojo_test_ScopedConstants* in_data);

MojomValidationResult mojo_test_ScopedConstants_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_ScopedConstants_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_ScopedConstants_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MapKeyTypes --
// Enums
// Constants
// Struct definition
struct mojo_test_MapKeyTypes {
  struct MojomStructHeader header_;
  union MojomMapPtr f0;  // offset,bit = 0,0
  union MojomMapPtr f1;  // offset,bit = 8,0
  union MojomMapPtr f2;  // offset,bit = 16,0
  union MojomMapPtr f3;  // offset,bit = 24,0
  union MojomMapPtr f4;  // offset,bit = 32,0
  union MojomMapPtr f5;  // offset,bit = 40,0
  union MojomMapPtr f6;  // offset,bit = 48,0
  union MojomMapPtr f7;  // offset,bit = 56,0
  union MojomMapPtr f8;  // offset,bit = 64,0
  union MojomMapPtr f9;  // offset,bit = 72,0
  union MojomMapPtr f10;  // offset,bit = 80,0
  union MojomMapPtr f11;  // offset,bit = 88,0
  
};

struct mojo_test_MapKeyTypes* mojo_test_MapKeyTypes_New(struct MojomBuffer* in_buffer);

void mojo_test_MapKeyTypes_Init(
  struct mojo_test_MapKeyTypes* in_data);

void mojo_test_MapKeyTypes_CloseAllHandles(
  struct mojo_test_MapKeyTypes* in_data);

struct mojo_test_MapKeyTypes* mojo_test_MapKeyTypes_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MapKeyTypes* in_data);

size_t mojo_test_MapKeyTypes_ComputeSerializedSize(
  const struct mojo_test_MapKeyTypes* in_data);

MojomValidationResult mojo_test_MapKeyTypes_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MapKeyTypes_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MapKeyTypes_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MapValueTypes --
// Enums
// Constants
// Struct definition
struct mojo_test_MapValueTypes {
  struct MojomStructHeader header_;
  union MojomMapPtr f0;  // offset,bit = 0,0
  union MojomMapPtr f1;  // offset,bit = 8,0
  union MojomMapPtr f2;  // offset,bit = 16,0
  union MojomMapPtr f3;  // offset,bit = 24,0
  union MojomMapPtr f4;  // offset,bit = 32,0
  union MojomMapPtr f5;  // offset,bit = 40,0
  union MojomMapPtr f6;  // offset,bit = 48,0
  union MojomMapPtr f7;  // offset,bit = 56,0
  union MojomMapPtr f8;  // offset,bit = 64,0
  union MojomMapPtr f9;  // offset,bit = 72,0
  union MojomMapPtr f10;  // offset,bit = 80,0
  union MojomMapPtr f11;  // offset,bit = 88,0
  
};

struct mojo_test_MapValueTypes* mojo_test_MapValueTypes_New(struct MojomBuffer* in_buffer);

void mojo_test_MapValueTypes_Init(
  struct mojo_test_MapValueTypes* in_data);

void mojo_test_MapValueTypes_CloseAllHandles(
  struct mojo_test_MapValueTypes* in_data);

struct mojo_test_MapValueTypes* mojo_test_MapValueTypes_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MapValueTypes* in_data);

size_t mojo_test_MapValueTypes_ComputeSerializedSize(
  const struct mojo_test_MapValueTypes* in_data);

MojomValidationResult mojo_test_MapValueTypes_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MapValueTypes_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MapValueTypes_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_ArrayValueTypes --
// Enums
// Constants
// Struct definition
struct mojo_test_ArrayValueTypes {
  struct MojomStructHeader header_;
  union MojomArrayPtr f0;  // offset,bit = 0,0
  union MojomArrayPtr f1;  // offset,bit = 8,0
  union MojomArrayPtr f2;  // offset,bit = 16,0
  union MojomArrayPtr f3;  // offset,bit = 24,0
  union MojomArrayPtr f4;  // offset,bit = 32,0
  union MojomArrayPtr f5;  // offset,bit = 40,0
  
};

struct mojo_test_ArrayValueTypes* mojo_test_ArrayValueTypes_New(struct MojomBuffer* in_buffer);

void mojo_test_ArrayValueTypes_Init(
  struct mojo_test_ArrayValueTypes* in_data);

void mojo_test_ArrayValueTypes_CloseAllHandles(
  struct mojo_test_ArrayValueTypes* in_data);

struct mojo_test_ArrayValueTypes* mojo_test_ArrayValueTypes_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_ArrayValueTypes* in_data);

size_t mojo_test_ArrayValueTypes_ComputeSerializedSize(
  const struct mojo_test_ArrayValueTypes* in_data);

MojomValidationResult mojo_test_ArrayValueTypes_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_ArrayValueTypes_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_ArrayValueTypes_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_FloatNumberValues --
// Enums
// Constants
const double mojo_test_FloatNumberValues_V0;
const double mojo_test_FloatNumberValues_V1;
const double mojo_test_FloatNumberValues_V2;
const float mojo_test_FloatNumberValues_V3;
const float mojo_test_FloatNumberValues_V4;
const float mojo_test_FloatNumberValues_V5;
const float mojo_test_FloatNumberValues_V6;
const double mojo_test_FloatNumberValues_V7;
const double mojo_test_FloatNumberValues_V8;
const double mojo_test_FloatNumberValues_V9;
// Struct definition
struct mojo_test_FloatNumberValues {
  struct MojomStructHeader header_;
  double f0;  // offset,bit = 0,0
  double f1;  // offset,bit = 8,0
  double f2;  // offset,bit = 16,0
  float f3;  // offset,bit = 24,0
  float f4;  // offset,bit = 28,0
  float f5;  // offset,bit = 32,0
  float f6;  // offset,bit = 36,0
  double f7;  // offset,bit = 40,0
  double f8;  // offset,bit = 48,0
  double f9;  // offset,bit = 56,0
  
};

struct mojo_test_FloatNumberValues* mojo_test_FloatNumberValues_New(struct MojomBuffer* in_buffer);

void mojo_test_FloatNumberValues_Init(
  struct mojo_test_FloatNumberValues* in_data);

void mojo_test_FloatNumberValues_CloseAllHandles(
  struct mojo_test_FloatNumberValues* in_data);

struct mojo_test_FloatNumberValues* mojo_test_FloatNumberValues_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_FloatNumberValues* in_data);

size_t mojo_test_FloatNumberValues_ComputeSerializedSize(
  const struct mojo_test_FloatNumberValues* in_data);

MojomValidationResult mojo_test_FloatNumberValues_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_FloatNumberValues_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_FloatNumberValues_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_IntegerNumberValues --
// Enums
// Constants
const int8_t mojo_test_IntegerNumberValues_V0;
const int8_t mojo_test_IntegerNumberValues_V1;
const int8_t mojo_test_IntegerNumberValues_V2;
const int8_t mojo_test_IntegerNumberValues_V3;
const int8_t mojo_test_IntegerNumberValues_V4;
const int16_t mojo_test_IntegerNumberValues_V5;
const int16_t mojo_test_IntegerNumberValues_V6;
const int16_t mojo_test_IntegerNumberValues_V7;
const int16_t mojo_test_IntegerNumberValues_V8;
const int16_t mojo_test_IntegerNumberValues_V9;
const int32_t mojo_test_IntegerNumberValues_V10;
const int32_t mojo_test_IntegerNumberValues_V11;
const int32_t mojo_test_IntegerNumberValues_V12;
const int32_t mojo_test_IntegerNumberValues_V13;
const int32_t mojo_test_IntegerNumberValues_V14;
const int64_t mojo_test_IntegerNumberValues_V15;
const int64_t mojo_test_IntegerNumberValues_V16;
const int64_t mojo_test_IntegerNumberValues_V17;
const int64_t mojo_test_IntegerNumberValues_V18;
const int64_t mojo_test_IntegerNumberValues_V19;
// Struct definition
struct mojo_test_IntegerNumberValues {
  struct MojomStructHeader header_;
  int8_t f0;  // offset,bit = 0,0
  int8_t f1;  // offset,bit = 1,0
  int8_t f2;  // offset,bit = 2,0
  int8_t f3;  // offset,bit = 3,0
  int8_t f4;  // offset,bit = 4,0
  uint8_t pad4_[1];  // padding
  int16_t f5;  // offset,bit = 6,0
  int16_t f6;  // offset,bit = 8,0
  int16_t f7;  // offset,bit = 10,0
  int16_t f8;  // offset,bit = 12,0
  int16_t f9;  // offset,bit = 14,0
  int32_t f10;  // offset,bit = 16,0
  int32_t f11;  // offset,bit = 20,0
  int32_t f12;  // offset,bit = 24,0
  int32_t f13;  // offset,bit = 28,0
  int32_t f14;  // offset,bit = 32,0
  uint8_t pad14_[4];  // padding
  int64_t f15;  // offset,bit = 40,0
  int64_t f16;  // offset,bit = 48,0
  int64_t f17;  // offset,bit = 56,0
  int64_t f18;  // offset,bit = 64,0
  int64_t f19;  // offset,bit = 72,0
  
};

struct mojo_test_IntegerNumberValues* mojo_test_IntegerNumberValues_New(struct MojomBuffer* in_buffer);

void mojo_test_IntegerNumberValues_Init(
  struct mojo_test_IntegerNumberValues* in_data);

void mojo_test_IntegerNumberValues_CloseAllHandles(
  struct mojo_test_IntegerNumberValues* in_data);

struct mojo_test_IntegerNumberValues* mojo_test_IntegerNumberValues_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_IntegerNumberValues* in_data);

size_t mojo_test_IntegerNumberValues_ComputeSerializedSize(
  const struct mojo_test_IntegerNumberValues* in_data);

MojomValidationResult mojo_test_IntegerNumberValues_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_IntegerNumberValues_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_IntegerNumberValues_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_UnsignedNumberValues --
// Enums
// Constants
const uint8_t mojo_test_UnsignedNumberValues_V0;
const uint8_t mojo_test_UnsignedNumberValues_V1;
const uint8_t mojo_test_UnsignedNumberValues_V2;
const uint16_t mojo_test_UnsignedNumberValues_V3;
const uint16_t mojo_test_UnsignedNumberValues_V4;
const uint16_t mojo_test_UnsignedNumberValues_V5;
const uint32_t mojo_test_UnsignedNumberValues_V6;
const uint32_t mojo_test_UnsignedNumberValues_V7;
const uint32_t mojo_test_UnsignedNumberValues_V8;
const uint64_t mojo_test_UnsignedNumberValues_V9;
const uint64_t mojo_test_UnsignedNumberValues_V10;
const uint64_t mojo_test_UnsignedNumberValues_V11;
// Struct definition
struct mojo_test_UnsignedNumberValues {
  struct MojomStructHeader header_;
  uint8_t f0;  // offset,bit = 0,0
  uint8_t f1;  // offset,bit = 1,0
  uint8_t f2;  // offset,bit = 2,0
  uint8_t pad2_[1];  // padding
  uint16_t f3;  // offset,bit = 4,0
  uint16_t f4;  // offset,bit = 6,0
  uint16_t f5;  // offset,bit = 8,0
  uint8_t pad5_[2];  // padding
  uint32_t f6;  // offset,bit = 12,0
  uint32_t f7;  // offset,bit = 16,0
  uint32_t f8;  // offset,bit = 20,0
  uint64_t f9;  // offset,bit = 24,0
  uint64_t f10;  // offset,bit = 32,0
  uint64_t f11;  // offset,bit = 40,0
  
};

struct mojo_test_UnsignedNumberValues* mojo_test_UnsignedNumberValues_New(struct MojomBuffer* in_buffer);

void mojo_test_UnsignedNumberValues_Init(
  struct mojo_test_UnsignedNumberValues* in_data);

void mojo_test_UnsignedNumberValues_CloseAllHandles(
  struct mojo_test_UnsignedNumberValues* in_data);

struct mojo_test_UnsignedNumberValues* mojo_test_UnsignedNumberValues_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_UnsignedNumberValues* in_data);

size_t mojo_test_UnsignedNumberValues_ComputeSerializedSize(
  const struct mojo_test_UnsignedNumberValues* in_data);

MojomValidationResult mojo_test_UnsignedNumberValues_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_UnsignedNumberValues_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_UnsignedNumberValues_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_BitArrayValues --
// Enums
// Constants
// Struct definition
struct mojo_test_BitArrayValues {
  struct MojomStructHeader header_;
  union MojomArrayPtr f0;  // offset,bit = 0,0
  union MojomArrayPtr f1;  // offset,bit = 8,0
  union MojomArrayPtr f2;  // offset,bit = 16,0
  union MojomArrayPtr f3;  // offset,bit = 24,0
  union MojomArrayPtr f4;  // offset,bit = 32,0
  union MojomArrayPtr f5;  // offset,bit = 40,0
  union MojomArrayPtr f6;  // offset,bit = 48,0
  
};

struct mojo_test_BitArrayValues* mojo_test_BitArrayValues_New(struct MojomBuffer* in_buffer);

void mojo_test_BitArrayValues_Init(
  struct mojo_test_BitArrayValues* in_data);

void mojo_test_BitArrayValues_CloseAllHandles(
  struct mojo_test_BitArrayValues* in_data);

struct mojo_test_BitArrayValues* mojo_test_BitArrayValues_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_BitArrayValues* in_data);

size_t mojo_test_BitArrayValues_ComputeSerializedSize(
  const struct mojo_test_BitArrayValues* in_data);

MojomValidationResult mojo_test_BitArrayValues_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_BitArrayValues_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_BitArrayValues_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MultiVersionStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_MultiVersionStruct {
  struct MojomStructHeader header_;
  int32_t f_int32;  // offset,bit = 0,0
  MojoHandle f_message_pipe;  // offset,bit = 4,0
  union mojo_test_RectPtr f_rect;  // offset,bit = 8,0
  union MojomStringPtr f_string;  // offset,bit = 16,0
  union MojomArrayPtr f_array;  // offset,bit = 24,0
  bool f_bool : 1;  // offset,bit = 32,0
  uint8_t pad5_[1];  // padding
  int16_t f_int16;  // offset,bit = 34,0
  uint8_t pad6_[6];  // padding
  
};

struct mojo_test_MultiVersionStruct* mojo_test_MultiVersionStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_MultiVersionStruct_Init(
  struct mojo_test_MultiVersionStruct* in_data);

void mojo_test_MultiVersionStruct_CloseAllHandles(
  struct mojo_test_MultiVersionStruct* in_data);

struct mojo_test_MultiVersionStruct* mojo_test_MultiVersionStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MultiVersionStruct* in_data);

size_t mojo_test_MultiVersionStruct_ComputeSerializedSize(
  const struct mojo_test_MultiVersionStruct* in_data);

MojomValidationResult mojo_test_MultiVersionStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MultiVersionStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MultiVersionStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MultiVersionStructV0 --
// Enums
// Constants
// Struct definition
struct mojo_test_MultiVersionStructV0 {
  struct MojomStructHeader header_;
  int32_t f_int32;  // offset,bit = 0,0
  
};

struct mojo_test_MultiVersionStructV0* mojo_test_MultiVersionStructV0_New(struct MojomBuffer* in_buffer);

void mojo_test_MultiVersionStructV0_Init(
  struct mojo_test_MultiVersionStructV0* in_data);

void mojo_test_MultiVersionStructV0_CloseAllHandles(
  struct mojo_test_MultiVersionStructV0* in_data);

struct mojo_test_MultiVersionStructV0* mojo_test_MultiVersionStructV0_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MultiVersionStructV0* in_data);

size_t mojo_test_MultiVersionStructV0_ComputeSerializedSize(
  const struct mojo_test_MultiVersionStructV0* in_data);

MojomValidationResult mojo_test_MultiVersionStructV0_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV0_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV0_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MultiVersionStructV1 --
// Enums
// Constants
// Struct definition
struct mojo_test_MultiVersionStructV1 {
  struct MojomStructHeader header_;
  int32_t f_int32;  // offset,bit = 0,0
  uint8_t pad0_[4];  // padding
  union mojo_test_RectPtr f_rect;  // offset,bit = 8,0
  
};

struct mojo_test_MultiVersionStructV1* mojo_test_MultiVersionStructV1_New(struct MojomBuffer* in_buffer);

void mojo_test_MultiVersionStructV1_Init(
  struct mojo_test_MultiVersionStructV1* in_data);

void mojo_test_MultiVersionStructV1_CloseAllHandles(
  struct mojo_test_MultiVersionStructV1* in_data);

struct mojo_test_MultiVersionStructV1* mojo_test_MultiVersionStructV1_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MultiVersionStructV1* in_data);

size_t mojo_test_MultiVersionStructV1_ComputeSerializedSize(
  const struct mojo_test_MultiVersionStructV1* in_data);

MojomValidationResult mojo_test_MultiVersionStructV1_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV1_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV1_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MultiVersionStructV3 --
// Enums
// Constants
// Struct definition
struct mojo_test_MultiVersionStructV3 {
  struct MojomStructHeader header_;
  int32_t f_int32;  // offset,bit = 0,0
  uint8_t pad0_[4];  // padding
  union mojo_test_RectPtr f_rect;  // offset,bit = 8,0
  union MojomStringPtr f_string;  // offset,bit = 16,0
  
};

struct mojo_test_MultiVersionStructV3* mojo_test_MultiVersionStructV3_New(struct MojomBuffer* in_buffer);

void mojo_test_MultiVersionStructV3_Init(
  struct mojo_test_MultiVersionStructV3* in_data);

void mojo_test_MultiVersionStructV3_CloseAllHandles(
  struct mojo_test_MultiVersionStructV3* in_data);

struct mojo_test_MultiVersionStructV3* mojo_test_MultiVersionStructV3_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MultiVersionStructV3* in_data);

size_t mojo_test_MultiVersionStructV3_ComputeSerializedSize(
  const struct mojo_test_MultiVersionStructV3* in_data);

MojomValidationResult mojo_test_MultiVersionStructV3_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV3_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV3_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MultiVersionStructV5 --
// Enums
// Constants
// Struct definition
struct mojo_test_MultiVersionStructV5 {
  struct MojomStructHeader header_;
  int32_t f_int32;  // offset,bit = 0,0
  uint8_t pad0_[4];  // padding
  union mojo_test_RectPtr f_rect;  // offset,bit = 8,0
  union MojomStringPtr f_string;  // offset,bit = 16,0
  union MojomArrayPtr f_array;  // offset,bit = 24,0
  
};

struct mojo_test_MultiVersionStructV5* mojo_test_MultiVersionStructV5_New(struct MojomBuffer* in_buffer);

void mojo_test_MultiVersionStructV5_Init(
  struct mojo_test_MultiVersionStructV5* in_data);

void mojo_test_MultiVersionStructV5_CloseAllHandles(
  struct mojo_test_MultiVersionStructV5* in_data);

struct mojo_test_MultiVersionStructV5* mojo_test_MultiVersionStructV5_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MultiVersionStructV5* in_data);

size_t mojo_test_MultiVersionStructV5_ComputeSerializedSize(
  const struct mojo_test_MultiVersionStructV5* in_data);

MojomValidationResult mojo_test_MultiVersionStructV5_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV5_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV5_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_MultiVersionStructV7 --
// Enums
// Constants
// Struct definition
struct mojo_test_MultiVersionStructV7 {
  struct MojomStructHeader header_;
  int32_t f_int32;  // offset,bit = 0,0
  MojoHandle f_message_pipe;  // offset,bit = 4,0
  union mojo_test_RectPtr f_rect;  // offset,bit = 8,0
  union MojomStringPtr f_string;  // offset,bit = 16,0
  union MojomArrayPtr f_array;  // offset,bit = 24,0
  bool f_bool : 1;  // offset,bit = 32,0
  
};

struct mojo_test_MultiVersionStructV7* mojo_test_MultiVersionStructV7_New(struct MojomBuffer* in_buffer);

void mojo_test_MultiVersionStructV7_Init(
  struct mojo_test_MultiVersionStructV7* in_data);

void mojo_test_MultiVersionStructV7_CloseAllHandles(
  struct mojo_test_MultiVersionStructV7* in_data);

struct mojo_test_MultiVersionStructV7* mojo_test_MultiVersionStructV7_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_MultiVersionStructV7* in_data);

size_t mojo_test_MultiVersionStructV7_ComputeSerializedSize(
  const struct mojo_test_MultiVersionStructV7* in_data);

MojomValidationResult mojo_test_MultiVersionStructV7_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV7_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_MultiVersionStructV7_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_ContainsInterface --
// Enums
// Constants
// Struct definition
struct mojo_test_ContainsInterface {
  struct MojomStructHeader header_;
  struct MojomInterfaceData some_interface;  // offset,bit = 0,0
  
};

struct mojo_test_ContainsInterface* mojo_test_ContainsInterface_New(struct MojomBuffer* in_buffer);

void mojo_test_ContainsInterface_Init(
  struct mojo_test_ContainsInterface* in_data);

void mojo_test_ContainsInterface_CloseAllHandles(
  struct mojo_test_ContainsInterface* in_data);

struct mojo_test_ContainsInterface* mojo_test_ContainsInterface_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_ContainsInterface* in_data);

size_t mojo_test_ContainsInterface_ComputeSerializedSize(
  const struct mojo_test_ContainsInterface* in_data);

MojomValidationResult mojo_test_ContainsInterface_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_ContainsInterface_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_ContainsInterface_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_ContainsOther --
// Enums
// Constants
// Struct definition
struct mojo_test_ContainsOther {
  struct MojomStructHeader header_;
  int32_t other;  // offset,bit = 0,0
  
};

struct mojo_test_ContainsOther* mojo_test_ContainsOther_New(struct MojomBuffer* in_buffer);

void mojo_test_ContainsOther_Init(
  struct mojo_test_ContainsOther* in_data);

void mojo_test_ContainsOther_CloseAllHandles(
  struct mojo_test_ContainsOther* in_data);

struct mojo_test_ContainsOther* mojo_test_ContainsOther_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_ContainsOther* in_data);

size_t mojo_test_ContainsOther_ComputeSerializedSize(
  const struct mojo_test_ContainsOther* in_data);

MojomValidationResult mojo_test_ContainsOther_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_ContainsOther_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_ContainsOther_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_ContainsInterfaceRequest --
// Enums
// Constants
// Struct definition
struct mojo_test_ContainsInterfaceRequest {
  struct MojomStructHeader header_;
  MojoHandle req;  // offset,bit = 0,0
  MojoHandle nullable_req;  // offset,bit = 4,0
  uint8_t pad1_[4];  // padding
  
};

struct mojo_test_ContainsInterfaceRequest* mojo_test_ContainsInterfaceRequest_New(struct MojomBuffer* in_buffer);

void mojo_test_ContainsInterfaceRequest_Init(
  struct mojo_test_ContainsInterfaceRequest* in_data);

void mojo_test_ContainsInterfaceRequest_CloseAllHandles(
  struct mojo_test_ContainsInterfaceRequest* in_data);

struct mojo_test_ContainsInterfaceRequest* mojo_test_ContainsInterfaceRequest_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_ContainsInterfaceRequest* in_data);

size_t mojo_test_ContainsInterfaceRequest_ComputeSerializedSize(
  const struct mojo_test_ContainsInterfaceRequest* in_data);

MojomValidationResult mojo_test_ContainsInterfaceRequest_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_ContainsInterfaceRequest_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_ContainsInterfaceRequest_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_DartKeywordStruct --
// Enums
typedef uint32_t mojo_test_DartKeywordStruct_Keywords;
enum mojo_test_DartKeywordStruct_Keywords_Enum {
  mojo_test_DartKeywordStruct_Keywords_AWAIT = 0,
  mojo_test_DartKeywordStruct_Keywords_IS = 1,
  mojo_test_DartKeywordStruct_Keywords_RETHROW = 2,
  
  mojo_test_DartKeywordStruct_Keywords__UNKNOWN__ = 0xFFFFFFFF,
};

// Constants
// Struct definition
struct mojo_test_DartKeywordStruct {
  struct MojomStructHeader header_;
  mojo_test_DartKeywordStruct_Keywords await;  // offset,bit = 0,0
  mojo_test_DartKeywordStruct_Keywords is;  // offset,bit = 4,0
  mojo_test_DartKeywordStruct_Keywords rethrow;  // offset,bit = 8,0
  
};

struct mojo_test_DartKeywordStruct* mojo_test_DartKeywordStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_DartKeywordStruct_Init(
  struct mojo_test_DartKeywordStruct* in_data);

void mojo_test_DartKeywordStruct_CloseAllHandles(
  struct mojo_test_DartKeywordStruct* in_data);

struct mojo_test_DartKeywordStruct* mojo_test_DartKeywordStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_DartKeywordStruct* in_data);

size_t mojo_test_DartKeywordStruct_ComputeSerializedSize(
  const struct mojo_test_DartKeywordStruct* in_data);

MojomValidationResult mojo_test_DartKeywordStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_DartKeywordStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_DartKeywordStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.
// --- mojo_test_SomeInterface ---
#define mojo_test_SomeInterface__ServiceName ((const char*)"")
#define mojo_test_SomeInterface__CurrentVersion ((uint32_t)0)

// Enums
// Constants


// Message: SomeMethod

#define mojo_test_SomeInterface_SomeMethod__Ordinal \
    ((uint32_t)0)
#define mojo_test_SomeInterface_SomeMethod__MinVersion \
    ((uint32_t)0)

struct mojo_test_SomeInterface_SomeMethod_Request;
// -- mojo_test_SomeInterface_SomeMethod_Request --
// Enums
// Constants
// Struct definition
struct mojo_test_SomeInterface_SomeMethod_Request {
  struct MojomStructHeader header_;
  union mojo_test_RectPairPtr pair;  // offset,bit = 0,0
  
};

struct mojo_test_SomeInterface_SomeMethod_Request* mojo_test_SomeInterface_SomeMethod_Request_New(struct MojomBuffer* in_buffer);

void mojo_test_SomeInterface_SomeMethod_Request_Init(
  struct mojo_test_SomeInterface_SomeMethod_Request* in_data);

void mojo_test_SomeInterface_SomeMethod_Request_CloseAllHandles(
  struct mojo_test_SomeInterface_SomeMethod_Request* in_data);

struct mojo_test_SomeInterface_SomeMethod_Request* mojo_test_SomeInterface_SomeMethod_Request_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SomeInterface_SomeMethod_Request* in_data);

size_t mojo_test_SomeInterface_SomeMethod_Request_ComputeSerializedSize(
  const struct mojo_test_SomeInterface_SomeMethod_Request* in_data);

MojomValidationResult mojo_test_SomeInterface_SomeMethod_Request_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SomeInterface_SomeMethod_Request_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SomeInterface_SomeMethod_Request_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


struct mojo_test_SomeInterface_SomeMethod_Response;
// -- mojo_test_SomeInterface_SomeMethod_Response --
// Enums
// Constants
// Struct definition
struct mojo_test_SomeInterface_SomeMethod_Response {
  struct MojomStructHeader header_;
  union mojo_test_RectPairPtr other_pair;  // offset,bit = 0,0
  
};

struct mojo_test_SomeInterface_SomeMethod_Response* mojo_test_SomeInterface_SomeMethod_Response_New(struct MojomBuffer* in_buffer);

void mojo_test_SomeInterface_SomeMethod_Response_Init(
  struct mojo_test_SomeInterface_SomeMethod_Response* in_data);

void mojo_test_SomeInterface_SomeMethod_Response_CloseAllHandles(
  struct mojo_test_SomeInterface_SomeMethod_Response* in_data);

struct mojo_test_SomeInterface_SomeMethod_Response* mojo_test_SomeInterface_SomeMethod_Response_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SomeInterface_SomeMethod_Response* in_data);

size_t mojo_test_SomeInterface_SomeMethod_Response_ComputeSerializedSize(
  const struct mojo_test_SomeInterface_SomeMethod_Response* in_data);

MojomValidationResult mojo_test_SomeInterface_SomeMethod_Response_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SomeInterface_SomeMethod_Response_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SomeInterface_SomeMethod_Response_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);







// Type tables declarations for structs and unions.

extern struct MojomPointerTableUnionEntry mojo_test_UnionOfStructs__PointerTable[];


extern struct MojomPointerTableStructEntry mojo_test_StructOfStructs__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_NamedRegion__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_RectPair__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_EmptyStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_HandleStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_NullableHandleStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_NoDefaultFieldValues__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_DefaultFieldValues__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_ScopedConstants__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MapKeyTypes__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MapValueTypes__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_ArrayValueTypes__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_FloatNumberValues__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_IntegerNumberValues__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_UnsignedNumberValues__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_BitArrayValues__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MultiVersionStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MultiVersionStructV0__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MultiVersionStructV1__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MultiVersionStructV3__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MultiVersionStructV5__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_MultiVersionStructV7__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_ContainsInterface__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_ContainsOther__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_ContainsInterfaceRequest__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_DartKeywordStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SomeInterface_SomeMethod_Request__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SomeInterface_SomeMethod_Response__PointerTable[];


#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_STRUCTS_MOJOM_C_H_