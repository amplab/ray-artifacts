// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library pingable_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _PingablePingParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String message = null;

  _PingablePingParams() : super(kVersions.last.size);

  _PingablePingParams.init(
    String this.message
  ) : super(kVersions.last.size);

  static _PingablePingParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _PingablePingParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _PingablePingParams result = new _PingablePingParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.message = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_PingablePingParams";
    String fieldName;
    try {
      fieldName = "message";
      encoder0.encodeString(message, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_PingablePingParams("
           "message: $message" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["message"] = message;
    return map;
  }
}


class PingablePingResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  String appUrl = null;
  String connectionUrl = null;
  String message = null;

  PingablePingResponseParams() : super(kVersions.last.size);

  PingablePingResponseParams.init(
    String this.appUrl, 
    String this.connectionUrl, 
    String this.message
  ) : super(kVersions.last.size);

  static PingablePingResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static PingablePingResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    PingablePingResponseParams result = new PingablePingResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.appUrl = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.connectionUrl = decoder0.decodeString(16, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.message = decoder0.decodeString(24, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "PingablePingResponseParams";
    String fieldName;
    try {
      fieldName = "appUrl";
      encoder0.encodeString(appUrl, 8, false);
      fieldName = "connectionUrl";
      encoder0.encodeString(connectionUrl, 16, false);
      fieldName = "message";
      encoder0.encodeString(message, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "PingablePingResponseParams("
           "appUrl: $appUrl" ", "
           "connectionUrl: $connectionUrl" ", "
           "message: $message" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["appUrl"] = appUrl;
    map["connectionUrl"] = connectionUrl;
    map["message"] = message;
    return map;
  }
}

const int _pingableMethodPingName = 0;

class _PingableServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Pingable {
  static const String serviceName = "Pingable";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _PingableServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static PingableProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    PingableProxy p = new PingableProxy.unbound();
    String name = serviceName ?? Pingable.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void ping(String message,void callback(String appUrl, String connectionUrl, String message));
}

abstract class PingableInterface
    implements bindings.MojoInterface<Pingable>,
               Pingable {
  factory PingableInterface([Pingable impl]) =>
      new PingableStub.unbound(impl);

  factory PingableInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Pingable impl]) =>
      new PingableStub.fromEndpoint(endpoint, impl);

  factory PingableInterface.fromMock(
      Pingable mock) =>
      new PingableProxy.fromMock(mock);
}

abstract class PingableInterfaceRequest
    implements bindings.MojoInterface<Pingable>,
               Pingable {
  factory PingableInterfaceRequest() =>
      new PingableProxy.unbound();
}

class _PingableProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Pingable> {
  Pingable impl;

  _PingableProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _PingableProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _PingableProxyControl.unbound() : super.unbound();

  String get serviceName => Pingable.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _pingableMethodPingName:
        var r = PingablePingResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.appUrl , r.connectionUrl , r.message );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingableProxyControl($superString)";
  }
}

class PingableProxy
    extends bindings.Proxy<Pingable>
    implements Pingable,
               PingableInterface,
               PingableInterfaceRequest {
  PingableProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _PingableProxyControl.fromEndpoint(endpoint));

  PingableProxy.fromHandle(core.MojoHandle handle)
      : super(new _PingableProxyControl.fromHandle(handle));

  PingableProxy.unbound()
      : super(new _PingableProxyControl.unbound());

  factory PingableProxy.fromMock(Pingable mock) {
    PingableProxy newMockedProxy =
        new PingableProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static PingableProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingableProxy"));
    return new PingableProxy.fromEndpoint(endpoint);
  }


  void ping(String message,void callback(String appUrl, String connectionUrl, String message)) {
    if (impl != null) {
      impl.ping(message,callback);
      return;
    }
    var params = new _PingablePingParams();
    params.message = message;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((String appUrl, String connectionUrl, String message) {
        z.bindCallback(() {
          callback(appUrl, connectionUrl, message);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _pingableMethodPingName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _PingableStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Pingable> {
  Pingable _impl;

  _PingableStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Pingable impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingableStubControl.fromHandle(
      core.MojoHandle handle, [Pingable impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _PingableStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Pingable.serviceName;


  Function _pingablePingResponseParamsResponder(
      int requestId) {
  return (String appUrl, String connectionUrl, String message) {
      var result = new PingablePingResponseParams();
      result.appUrl = appUrl;
      result.connectionUrl = connectionUrl;
      result.message = message;
      sendResponse(buildResponseWithId(
          result,
          _pingableMethodPingName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _pingableMethodPingName:
        var params = _PingablePingParams.deserialize(
            message.payload);
        _impl.ping(params.message, _pingablePingResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Pingable get impl => _impl;
  set impl(Pingable d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_PingableStubControl($superString)";
  }

  int get version => 0;
}

class PingableStub
    extends bindings.Stub<Pingable>
    implements Pingable,
               PingableInterface,
               PingableInterfaceRequest {
  PingableStub.unbound([Pingable impl])
      : super(new _PingableStubControl.unbound(impl));

  PingableStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Pingable impl])
      : super(new _PingableStubControl.fromEndpoint(endpoint, impl));

  PingableStub.fromHandle(
      core.MojoHandle handle, [Pingable impl])
      : super(new _PingableStubControl.fromHandle(handle, impl));

  static PingableStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For PingableStub"));
    return new PingableStub.fromEndpoint(endpoint);
  }


  void ping(String message,void callback(String appUrl, String connectionUrl, String message)) {
    return impl.ping(message,callback);
  }
}



