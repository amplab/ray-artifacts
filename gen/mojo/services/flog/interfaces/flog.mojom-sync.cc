// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/flog/interfaces/flog.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/flog/interfaces/flog.mojom-internal.h"
#include "mojo/services/flog/interfaces/flog.mojom-common.h"
namespace mojo {
namespace flog {

// --- Interface definitions ---
FlogService_SynchronousProxy::FlogService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool FlogService_SynchronousProxy::CreateLogger(mojo::InterfaceRequest<FlogLogger> in_logger, const mojo::String& in_label) const  {
  size_t size = sizeof(internal::FlogService_CreateLogger_Params_Data);
  size += GetSerializedSize_(in_label);

  auto msg_name = static_cast<uint32_t>(internal::FlogService_Base::MessageOrdinals::CreateLogger);
  mojo::MessageBuilder builder(msg_name, size);

  internal::FlogService_CreateLogger_Params_Data* out_params =
      internal::FlogService_CreateLogger_Params_Data::New(builder.buffer());
  out_params->logger = in_logger.PassMessagePipe().release();
  if (!out_params->logger.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid logger in {{interface.name}}::{{method.name}}");
  }
  SerializeString_(in_label, builder.buffer(), &out_params->label.ptr);
  if (!out_params->label.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null label in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool FlogService_SynchronousProxy::GetLogDescriptions(mojo::Array<FlogDescriptionPtr>* out_descriptions) {
  size_t size = sizeof(internal::FlogService_GetLogDescriptions_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::FlogService_Base::MessageOrdinals::GetLogDescriptions);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::FlogService_GetLogDescriptions_Params_Data* out_params =
      internal::FlogService_GetLogDescriptions_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::FlogService_GetLogDescriptions_ResponseParams_Data*
      response_params = reinterpret_cast<internal::FlogService_GetLogDescriptions_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->descriptions.ptr, &(*out_descriptions));
  } while (false);
  return true;
}
bool FlogService_SynchronousProxy::CreateReader(mojo::InterfaceRequest<FlogReader> in_reader, uint32_t in_log_id) const  {
  size_t size = sizeof(internal::FlogService_CreateReader_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::FlogService_Base::MessageOrdinals::CreateReader);
  mojo::MessageBuilder builder(msg_name, size);

  internal::FlogService_CreateReader_Params_Data* out_params =
      internal::FlogService_CreateReader_Params_Data::New(builder.buffer());
  out_params->reader = in_reader.PassMessagePipe().release();
  if (!out_params->reader.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid reader in {{interface.name}}::{{method.name}}");
  }
  out_params->log_id = in_log_id;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}FlogLogger_SynchronousProxy::FlogLogger_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool FlogLogger_SynchronousProxy::LogChannelCreation(int64_t in_time_us, uint32_t in_channel_id, const mojo::String& in_type_name) const  {
  size_t size = sizeof(internal::FlogLogger_LogChannelCreation_Params_Data);
  size += GetSerializedSize_(in_type_name);

  auto msg_name = static_cast<uint32_t>(internal::FlogLogger_Base::MessageOrdinals::LogChannelCreation);
  mojo::MessageBuilder builder(msg_name, size);

  internal::FlogLogger_LogChannelCreation_Params_Data* out_params =
      internal::FlogLogger_LogChannelCreation_Params_Data::New(builder.buffer());
  out_params->time_us = in_time_us;
  out_params->channel_id = in_channel_id;
  SerializeString_(in_type_name, builder.buffer(), &out_params->type_name.ptr);
  if (!out_params->type_name.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null type_name in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool FlogLogger_SynchronousProxy::LogChannelMessage(int64_t in_time_us, uint32_t in_channel_id, mojo::Array<uint8_t> in_data) const  {
  size_t size = sizeof(internal::FlogLogger_LogChannelMessage_Params_Data);
  size += GetSerializedSize_(in_data);

  auto msg_name = static_cast<uint32_t>(internal::FlogLogger_Base::MessageOrdinals::LogChannelMessage);
  mojo::MessageBuilder builder(msg_name, size);

  internal::FlogLogger_LogChannelMessage_Params_Data* out_params =
      internal::FlogLogger_LogChannelMessage_Params_Data::New(builder.buffer());
  out_params->time_us = in_time_us;
  out_params->channel_id = in_channel_id;
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_data, builder.buffer(), &out_params->data.ptr,
                          &data_validate_params);
  }
  if (!out_params->data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null data in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool FlogLogger_SynchronousProxy::LogChannelDeletion(int64_t in_time_us, uint32_t in_channel_id) const  {
  size_t size = sizeof(internal::FlogLogger_LogChannelDeletion_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::FlogLogger_Base::MessageOrdinals::LogChannelDeletion);
  mojo::MessageBuilder builder(msg_name, size);

  internal::FlogLogger_LogChannelDeletion_Params_Data* out_params =
      internal::FlogLogger_LogChannelDeletion_Params_Data::New(builder.buffer());
  out_params->time_us = in_time_us;
  out_params->channel_id = in_channel_id;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}FlogReader_SynchronousProxy::FlogReader_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool FlogReader_SynchronousProxy::GetEntries(uint32_t in_start_index, uint32_t in_max_count, mojo::Array<FlogEntryPtr>* out_entries) {
  size_t size = sizeof(internal::FlogReader_GetEntries_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::FlogReader_Base::MessageOrdinals::GetEntries);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::FlogReader_GetEntries_Params_Data* out_params =
      internal::FlogReader_GetEntries_Params_Data::New(builder.buffer());
  out_params->start_index = in_start_index;
  out_params->max_count = in_max_count;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::FlogReader_GetEntries_ResponseParams_Data*
      response_params = reinterpret_cast<internal::FlogReader_GetEntries_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    Deserialize_(response_params->entries.ptr, &(*out_entries));
  } while (false);
  return true;
}
}  // namespace flog
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
