// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_TEST_SERVICE_TEST_SERVICE_MOJOM_COMMON_H_
#define SERVICES_TEST_SERVICE_TEST_SERVICE_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "services/test_service/test_service.mojom-internal.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---
class TestService;
class TestServiceRequestValidator;
class TestServiceResponseValidator;
class TestService_Synchronous;
class TestTimeService;
class TestTimeServiceRequestValidator;
class TestTimeServiceResponseValidator;
class TestTimeService_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class TestService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestServiceRequestValidator;
  using ResponseValidator_ = TestServiceResponseValidator;
  using Synchronous_ = TestService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Ping = 0,
    ConnectToAppAndGetTime = 1,
    StartTrackingRequests = 2,
  };


  virtual ~TestService_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestServiceProxy;
class TestServiceStub;
class TestService_Synchronous;

class TestServiceRequestValidator;
class TestServiceResponseValidator;

class TestService : public internal::TestService_Base {
 public:
  virtual ~TestService() override {}

  using Proxy_ = TestServiceProxy;
  using Stub_ = TestServiceStub;
  using PingCallback = mojo::Callback<void()>;
  virtual void Ping(const PingCallback& callback) = 0;
  using ConnectToAppAndGetTimeCallback = mojo::Callback<void(int64_t)>;
  virtual void ConnectToAppAndGetTime(const mojo::String& app_url, const ConnectToAppAndGetTimeCallback& callback) = 0;
  using StartTrackingRequestsCallback = mojo::Callback<void()>;
  virtual void StartTrackingRequests(const StartTrackingRequestsCallback& callback) = 0;
};

namespace internal {
class TestTimeService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestTimeServiceRequestValidator;
  using ResponseValidator_ = TestTimeServiceResponseValidator;
  using Synchronous_ = TestTimeService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetPartyTime = 0,
    StartTrackingRequests = 1,
  };


  virtual ~TestTimeService_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestTimeServiceProxy;
class TestTimeServiceStub;
class TestTimeService_Synchronous;

class TestTimeServiceRequestValidator;
class TestTimeServiceResponseValidator;

class TestTimeService : public internal::TestTimeService_Base {
 public:
  virtual ~TestTimeService() override {}

  using Proxy_ = TestTimeServiceProxy;
  using Stub_ = TestTimeServiceStub;
  using GetPartyTimeCallback = mojo::Callback<void(int64_t)>;
  virtual void GetPartyTime(const GetPartyTimeCallback& callback) = 0;
  using StartTrackingRequestsCallback = mojo::Callback<void()>;
  virtual void StartTrackingRequests(const StartTrackingRequestsCallback& callback) = 0;
};

}  // namespace test
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {
namespace test {

// --- Interface Request Validators ---
class TestServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestTimeServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class TestServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestTimeServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class TestService_Ping_Params;

using TestService_Ping_ParamsPtr = mojo::InlinedStructPtr<TestService_Ping_Params>;


size_t GetSerializedSize_(const TestService_Ping_Params& input);
mojo::internal::ValidationError Serialize_(
    TestService_Ping_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_Ping_Params_Data** output);
void Deserialize_(internal::TestService_Ping_Params_Data* input,
                  TestService_Ping_Params* output);

class TestService_Ping_Params {
 public:
  using Data_ = internal::TestService_Ping_Params_Data;

  static TestService_Ping_ParamsPtr New();

  template <typename U>
  static TestService_Ping_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_Ping_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_Ping_Params>::Convert(*this);
  }

  TestService_Ping_Params();
  ~TestService_Ping_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_Ping_ParamsPtr Clone() const;
  bool Equals(const TestService_Ping_Params& other) const;

};



class TestService_Ping_ResponseParams;

using TestService_Ping_ResponseParamsPtr = mojo::InlinedStructPtr<TestService_Ping_ResponseParams>;


size_t GetSerializedSize_(const TestService_Ping_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestService_Ping_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_Ping_ResponseParams_Data** output);
void Deserialize_(internal::TestService_Ping_ResponseParams_Data* input,
                  TestService_Ping_ResponseParams* output);

class TestService_Ping_ResponseParams {
 public:
  using Data_ = internal::TestService_Ping_ResponseParams_Data;

  static TestService_Ping_ResponseParamsPtr New();

  template <typename U>
  static TestService_Ping_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_Ping_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_Ping_ResponseParams>::Convert(*this);
  }

  TestService_Ping_ResponseParams();
  ~TestService_Ping_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_Ping_ResponseParamsPtr Clone() const;
  bool Equals(const TestService_Ping_ResponseParams& other) const;

};



class TestService_ConnectToAppAndGetTime_Params;

using TestService_ConnectToAppAndGetTime_ParamsPtr = mojo::InlinedStructPtr<TestService_ConnectToAppAndGetTime_Params>;


size_t GetSerializedSize_(const TestService_ConnectToAppAndGetTime_Params& input);
mojo::internal::ValidationError Serialize_(
    TestService_ConnectToAppAndGetTime_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_ConnectToAppAndGetTime_Params_Data** output);
void Deserialize_(internal::TestService_ConnectToAppAndGetTime_Params_Data* input,
                  TestService_ConnectToAppAndGetTime_Params* output);

class TestService_ConnectToAppAndGetTime_Params {
 public:
  using Data_ = internal::TestService_ConnectToAppAndGetTime_Params_Data;

  static TestService_ConnectToAppAndGetTime_ParamsPtr New();

  template <typename U>
  static TestService_ConnectToAppAndGetTime_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_ConnectToAppAndGetTime_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_ConnectToAppAndGetTime_Params>::Convert(*this);
  }

  TestService_ConnectToAppAndGetTime_Params();
  ~TestService_ConnectToAppAndGetTime_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_ConnectToAppAndGetTime_ParamsPtr Clone() const;
  bool Equals(const TestService_ConnectToAppAndGetTime_Params& other) const;

  mojo::String app_url;
};



class TestService_ConnectToAppAndGetTime_ResponseParams;

using TestService_ConnectToAppAndGetTime_ResponseParamsPtr = mojo::InlinedStructPtr<TestService_ConnectToAppAndGetTime_ResponseParams>;


size_t GetSerializedSize_(const TestService_ConnectToAppAndGetTime_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestService_ConnectToAppAndGetTime_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data** output);
void Deserialize_(internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data* input,
                  TestService_ConnectToAppAndGetTime_ResponseParams* output);

class TestService_ConnectToAppAndGetTime_ResponseParams {
 public:
  using Data_ = internal::TestService_ConnectToAppAndGetTime_ResponseParams_Data;

  static TestService_ConnectToAppAndGetTime_ResponseParamsPtr New();

  template <typename U>
  static TestService_ConnectToAppAndGetTime_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_ConnectToAppAndGetTime_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_ConnectToAppAndGetTime_ResponseParams>::Convert(*this);
  }

  TestService_ConnectToAppAndGetTime_ResponseParams();
  ~TestService_ConnectToAppAndGetTime_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_ConnectToAppAndGetTime_ResponseParamsPtr Clone() const;
  bool Equals(const TestService_ConnectToAppAndGetTime_ResponseParams& other) const;

  int64_t time_usec;
};



class TestService_StartTrackingRequests_Params;

using TestService_StartTrackingRequests_ParamsPtr = mojo::InlinedStructPtr<TestService_StartTrackingRequests_Params>;


size_t GetSerializedSize_(const TestService_StartTrackingRequests_Params& input);
mojo::internal::ValidationError Serialize_(
    TestService_StartTrackingRequests_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_StartTrackingRequests_Params_Data** output);
void Deserialize_(internal::TestService_StartTrackingRequests_Params_Data* input,
                  TestService_StartTrackingRequests_Params* output);

class TestService_StartTrackingRequests_Params {
 public:
  using Data_ = internal::TestService_StartTrackingRequests_Params_Data;

  static TestService_StartTrackingRequests_ParamsPtr New();

  template <typename U>
  static TestService_StartTrackingRequests_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_StartTrackingRequests_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_StartTrackingRequests_Params>::Convert(*this);
  }

  TestService_StartTrackingRequests_Params();
  ~TestService_StartTrackingRequests_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_StartTrackingRequests_ParamsPtr Clone() const;
  bool Equals(const TestService_StartTrackingRequests_Params& other) const;

};



class TestService_StartTrackingRequests_ResponseParams;

using TestService_StartTrackingRequests_ResponseParamsPtr = mojo::InlinedStructPtr<TestService_StartTrackingRequests_ResponseParams>;


size_t GetSerializedSize_(const TestService_StartTrackingRequests_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestService_StartTrackingRequests_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestService_StartTrackingRequests_ResponseParams_Data** output);
void Deserialize_(internal::TestService_StartTrackingRequests_ResponseParams_Data* input,
                  TestService_StartTrackingRequests_ResponseParams* output);

class TestService_StartTrackingRequests_ResponseParams {
 public:
  using Data_ = internal::TestService_StartTrackingRequests_ResponseParams_Data;

  static TestService_StartTrackingRequests_ResponseParamsPtr New();

  template <typename U>
  static TestService_StartTrackingRequests_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestService_StartTrackingRequests_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestService_StartTrackingRequests_ResponseParams>::Convert(*this);
  }

  TestService_StartTrackingRequests_ResponseParams();
  ~TestService_StartTrackingRequests_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestService_StartTrackingRequests_ResponseParamsPtr Clone() const;
  bool Equals(const TestService_StartTrackingRequests_ResponseParams& other) const;

};


      

class TestTimeService_GetPartyTime_Params;

using TestTimeService_GetPartyTime_ParamsPtr = mojo::InlinedStructPtr<TestTimeService_GetPartyTime_Params>;


size_t GetSerializedSize_(const TestTimeService_GetPartyTime_Params& input);
mojo::internal::ValidationError Serialize_(
    TestTimeService_GetPartyTime_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestTimeService_GetPartyTime_Params_Data** output);
void Deserialize_(internal::TestTimeService_GetPartyTime_Params_Data* input,
                  TestTimeService_GetPartyTime_Params* output);

class TestTimeService_GetPartyTime_Params {
 public:
  using Data_ = internal::TestTimeService_GetPartyTime_Params_Data;

  static TestTimeService_GetPartyTime_ParamsPtr New();

  template <typename U>
  static TestTimeService_GetPartyTime_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestTimeService_GetPartyTime_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestTimeService_GetPartyTime_Params>::Convert(*this);
  }

  TestTimeService_GetPartyTime_Params();
  ~TestTimeService_GetPartyTime_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestTimeService_GetPartyTime_ParamsPtr Clone() const;
  bool Equals(const TestTimeService_GetPartyTime_Params& other) const;

};



class TestTimeService_GetPartyTime_ResponseParams;

using TestTimeService_GetPartyTime_ResponseParamsPtr = mojo::InlinedStructPtr<TestTimeService_GetPartyTime_ResponseParams>;


size_t GetSerializedSize_(const TestTimeService_GetPartyTime_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestTimeService_GetPartyTime_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestTimeService_GetPartyTime_ResponseParams_Data** output);
void Deserialize_(internal::TestTimeService_GetPartyTime_ResponseParams_Data* input,
                  TestTimeService_GetPartyTime_ResponseParams* output);

class TestTimeService_GetPartyTime_ResponseParams {
 public:
  using Data_ = internal::TestTimeService_GetPartyTime_ResponseParams_Data;

  static TestTimeService_GetPartyTime_ResponseParamsPtr New();

  template <typename U>
  static TestTimeService_GetPartyTime_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestTimeService_GetPartyTime_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestTimeService_GetPartyTime_ResponseParams>::Convert(*this);
  }

  TestTimeService_GetPartyTime_ResponseParams();
  ~TestTimeService_GetPartyTime_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestTimeService_GetPartyTime_ResponseParamsPtr Clone() const;
  bool Equals(const TestTimeService_GetPartyTime_ResponseParams& other) const;

  int64_t time_usec;
};



class TestTimeService_StartTrackingRequests_Params;

using TestTimeService_StartTrackingRequests_ParamsPtr = mojo::InlinedStructPtr<TestTimeService_StartTrackingRequests_Params>;


size_t GetSerializedSize_(const TestTimeService_StartTrackingRequests_Params& input);
mojo::internal::ValidationError Serialize_(
    TestTimeService_StartTrackingRequests_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestTimeService_StartTrackingRequests_Params_Data** output);
void Deserialize_(internal::TestTimeService_StartTrackingRequests_Params_Data* input,
                  TestTimeService_StartTrackingRequests_Params* output);

class TestTimeService_StartTrackingRequests_Params {
 public:
  using Data_ = internal::TestTimeService_StartTrackingRequests_Params_Data;

  static TestTimeService_StartTrackingRequests_ParamsPtr New();

  template <typename U>
  static TestTimeService_StartTrackingRequests_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestTimeService_StartTrackingRequests_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestTimeService_StartTrackingRequests_Params>::Convert(*this);
  }

  TestTimeService_StartTrackingRequests_Params();
  ~TestTimeService_StartTrackingRequests_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestTimeService_StartTrackingRequests_ParamsPtr Clone() const;
  bool Equals(const TestTimeService_StartTrackingRequests_Params& other) const;

};



class TestTimeService_StartTrackingRequests_ResponseParams;

using TestTimeService_StartTrackingRequests_ResponseParamsPtr = mojo::InlinedStructPtr<TestTimeService_StartTrackingRequests_ResponseParams>;


size_t GetSerializedSize_(const TestTimeService_StartTrackingRequests_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestTimeService_StartTrackingRequests_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestTimeService_StartTrackingRequests_ResponseParams_Data** output);
void Deserialize_(internal::TestTimeService_StartTrackingRequests_ResponseParams_Data* input,
                  TestTimeService_StartTrackingRequests_ResponseParams* output);

class TestTimeService_StartTrackingRequests_ResponseParams {
 public:
  using Data_ = internal::TestTimeService_StartTrackingRequests_ResponseParams_Data;

  static TestTimeService_StartTrackingRequests_ResponseParamsPtr New();

  template <typename U>
  static TestTimeService_StartTrackingRequests_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestTimeService_StartTrackingRequests_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestTimeService_StartTrackingRequests_ResponseParams>::Convert(*this);
  }

  TestTimeService_StartTrackingRequests_ResponseParams();
  ~TestTimeService_StartTrackingRequests_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestTimeService_StartTrackingRequests_ResponseParamsPtr Clone() const;
  bool Equals(const TestTimeService_StartTrackingRequests_ResponseParams& other) const;

};


}  // namespace test
}  // namespace mojo

#endif  // SERVICES_TEST_SERVICE_TEST_SERVICE_MOJOM_COMMON_H_
