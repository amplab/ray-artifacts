// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_COMMON_H_
#define MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/nfc/interfaces/nfc.mojom-internal.h"
namespace nfc {

// --- Interface Forward Declarations ---
class NfcTransmission;
class NfcTransmissionRequestValidator;
class NfcTransmission_Synchronous;
class NfcReceiver;
class NfcReceiverRequestValidator;
class NfcReceiver_Synchronous;
class Nfc;
class NfcRequestValidator;
class NfcResponseValidator;
class Nfc_Synchronous;

// --- Struct Forward Declarations ---
class NfcData;

using NfcDataPtr = mojo::StructPtr<NfcData>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class NfcTransmission_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NfcTransmissionRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = NfcTransmission_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Cancel = 0,
  };


  virtual ~NfcTransmission_Base() {}
};

}  // namespace internal

// Async interface declaration

class NfcTransmissionProxy;
class NfcTransmissionStub;
class NfcTransmission_Synchronous;

class NfcTransmissionRequestValidator;

class NfcTransmission : public internal::NfcTransmission_Base {
 public:
  virtual ~NfcTransmission() override {}

  using Proxy_ = NfcTransmissionProxy;
  using Stub_ = NfcTransmissionStub;
  virtual void Cancel() = 0;
};

namespace internal {
class NfcReceiver_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NfcReceiverRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = NfcReceiver_Synchronous;
  enum class MessageOrdinals : uint32_t {
    OnReceivedNfcData = 0,
  };


  virtual ~NfcReceiver_Base() {}
};

}  // namespace internal

// Async interface declaration

class NfcReceiverProxy;
class NfcReceiverStub;
class NfcReceiver_Synchronous;

class NfcReceiverRequestValidator;

class NfcReceiver : public internal::NfcReceiver_Base {
 public:
  virtual ~NfcReceiver() override {}

  using Proxy_ = NfcReceiverProxy;
  using Stub_ = NfcReceiverStub;
  virtual void OnReceivedNfcData(NfcDataPtr nfc_data) = 0;
};

namespace internal {
class Nfc_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NfcRequestValidator;
  using ResponseValidator_ = NfcResponseValidator;
  using Synchronous_ = Nfc_Synchronous;
  enum class MessageOrdinals : uint32_t {
    TransmitOnNextConnection = 0,
    Register = 1,
    Unregister = 2,
  };


  virtual ~Nfc_Base() {}
};

}  // namespace internal

// Async interface declaration

class NfcProxy;
class NfcStub;
class Nfc_Synchronous;

class NfcRequestValidator;
class NfcResponseValidator;

class Nfc : public internal::Nfc_Base {
 public:
  virtual ~Nfc() override {}

  using Proxy_ = NfcProxy;
  using Stub_ = NfcStub;
  using TransmitOnNextConnectionCallback = mojo::Callback<void(bool)>;
  virtual void TransmitOnNextConnection(NfcDataPtr nfc_data, mojo::InterfaceRequest<NfcTransmission> transmission, const TransmitOnNextConnectionCallback& callback) = 0;
  virtual void Register() = 0;
  virtual void Unregister() = 0;
};

}  // namespace nfc

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<nfc::NfcDataPtr, true, false> {
  using DataType = nfc::internal::NfcData_Data*;
};

}  // internal
}  // mojo
namespace nfc {

// --- Interface Request Validators ---
class NfcTransmissionRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class NfcReceiverRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class NfcRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class NfcResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class NfcData {
 public:
  using Data_ = internal::NfcData_Data;

  static NfcDataPtr New();

  template <typename U>
  static NfcDataPtr From(const U& u) {
    return mojo::TypeConverter<NfcDataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NfcData>::Convert(*this);
  }

  NfcData();
  ~NfcData();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NfcDataPtr Clone() const;
  bool Equals(const NfcData& other) const;

  mojo::Array<uint8_t> data;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const NfcData& input);
mojo::internal::ValidationError Serialize_(
    NfcData* input,
    mojo::internal::Buffer* buffer,
    internal::NfcData_Data** output);
void Deserialize_(internal::NfcData_Data* input,
                  NfcData* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class NfcTransmission_Cancel_Params;

using NfcTransmission_Cancel_ParamsPtr = mojo::InlinedStructPtr<NfcTransmission_Cancel_Params>;


size_t GetSerializedSize_(const NfcTransmission_Cancel_Params& input);
mojo::internal::ValidationError Serialize_(
    NfcTransmission_Cancel_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NfcTransmission_Cancel_Params_Data** output);
void Deserialize_(internal::NfcTransmission_Cancel_Params_Data* input,
                  NfcTransmission_Cancel_Params* output);

class NfcTransmission_Cancel_Params {
 public:
  using Data_ = internal::NfcTransmission_Cancel_Params_Data;

  static NfcTransmission_Cancel_ParamsPtr New();

  template <typename U>
  static NfcTransmission_Cancel_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NfcTransmission_Cancel_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NfcTransmission_Cancel_Params>::Convert(*this);
  }

  NfcTransmission_Cancel_Params();
  ~NfcTransmission_Cancel_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NfcTransmission_Cancel_ParamsPtr Clone() const;
  bool Equals(const NfcTransmission_Cancel_Params& other) const;

};



      

class NfcReceiver_OnReceivedNfcData_Params;

using NfcReceiver_OnReceivedNfcData_ParamsPtr = mojo::StructPtr<NfcReceiver_OnReceivedNfcData_Params>;


size_t GetSerializedSize_(const NfcReceiver_OnReceivedNfcData_Params& input);
mojo::internal::ValidationError Serialize_(
    NfcReceiver_OnReceivedNfcData_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NfcReceiver_OnReceivedNfcData_Params_Data** output);
void Deserialize_(internal::NfcReceiver_OnReceivedNfcData_Params_Data* input,
                  NfcReceiver_OnReceivedNfcData_Params* output);

class NfcReceiver_OnReceivedNfcData_Params {
 public:
  using Data_ = internal::NfcReceiver_OnReceivedNfcData_Params_Data;

  static NfcReceiver_OnReceivedNfcData_ParamsPtr New();

  template <typename U>
  static NfcReceiver_OnReceivedNfcData_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NfcReceiver_OnReceivedNfcData_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NfcReceiver_OnReceivedNfcData_Params>::Convert(*this);
  }

  NfcReceiver_OnReceivedNfcData_Params();
  ~NfcReceiver_OnReceivedNfcData_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NfcReceiver_OnReceivedNfcData_ParamsPtr Clone() const;
  bool Equals(const NfcReceiver_OnReceivedNfcData_Params& other) const;

  NfcDataPtr nfc_data;
};



      

class Nfc_TransmitOnNextConnection_Params;

using Nfc_TransmitOnNextConnection_ParamsPtr = mojo::StructPtr<Nfc_TransmitOnNextConnection_Params>;


size_t GetSerializedSize_(const Nfc_TransmitOnNextConnection_Params& input);
mojo::internal::ValidationError Serialize_(
    Nfc_TransmitOnNextConnection_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Nfc_TransmitOnNextConnection_Params_Data** output);
void Deserialize_(internal::Nfc_TransmitOnNextConnection_Params_Data* input,
                  Nfc_TransmitOnNextConnection_Params* output);

class Nfc_TransmitOnNextConnection_Params {
 public:
  using Data_ = internal::Nfc_TransmitOnNextConnection_Params_Data;

  static Nfc_TransmitOnNextConnection_ParamsPtr New();

  template <typename U>
  static Nfc_TransmitOnNextConnection_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Nfc_TransmitOnNextConnection_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Nfc_TransmitOnNextConnection_Params>::Convert(*this);
  }

  Nfc_TransmitOnNextConnection_Params();
  ~Nfc_TransmitOnNextConnection_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Nfc_TransmitOnNextConnection_Params& other) const;

  NfcDataPtr nfc_data;
  mojo::InterfaceRequest<NfcTransmission> transmission;
};



class Nfc_TransmitOnNextConnection_ResponseParams;

using Nfc_TransmitOnNextConnection_ResponseParamsPtr = mojo::InlinedStructPtr<Nfc_TransmitOnNextConnection_ResponseParams>;


size_t GetSerializedSize_(const Nfc_TransmitOnNextConnection_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Nfc_TransmitOnNextConnection_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Nfc_TransmitOnNextConnection_ResponseParams_Data** output);
void Deserialize_(internal::Nfc_TransmitOnNextConnection_ResponseParams_Data* input,
                  Nfc_TransmitOnNextConnection_ResponseParams* output);

class Nfc_TransmitOnNextConnection_ResponseParams {
 public:
  using Data_ = internal::Nfc_TransmitOnNextConnection_ResponseParams_Data;

  static Nfc_TransmitOnNextConnection_ResponseParamsPtr New();

  template <typename U>
  static Nfc_TransmitOnNextConnection_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Nfc_TransmitOnNextConnection_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Nfc_TransmitOnNextConnection_ResponseParams>::Convert(*this);
  }

  Nfc_TransmitOnNextConnection_ResponseParams();
  ~Nfc_TransmitOnNextConnection_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Nfc_TransmitOnNextConnection_ResponseParamsPtr Clone() const;
  bool Equals(const Nfc_TransmitOnNextConnection_ResponseParams& other) const;

  bool success;
};



class Nfc_Register_Params;

using Nfc_Register_ParamsPtr = mojo::InlinedStructPtr<Nfc_Register_Params>;


size_t GetSerializedSize_(const Nfc_Register_Params& input);
mojo::internal::ValidationError Serialize_(
    Nfc_Register_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Nfc_Register_Params_Data** output);
void Deserialize_(internal::Nfc_Register_Params_Data* input,
                  Nfc_Register_Params* output);

class Nfc_Register_Params {
 public:
  using Data_ = internal::Nfc_Register_Params_Data;

  static Nfc_Register_ParamsPtr New();

  template <typename U>
  static Nfc_Register_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Nfc_Register_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Nfc_Register_Params>::Convert(*this);
  }

  Nfc_Register_Params();
  ~Nfc_Register_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Nfc_Register_ParamsPtr Clone() const;
  bool Equals(const Nfc_Register_Params& other) const;

};




class Nfc_Unregister_Params;

using Nfc_Unregister_ParamsPtr = mojo::InlinedStructPtr<Nfc_Unregister_Params>;


size_t GetSerializedSize_(const Nfc_Unregister_Params& input);
mojo::internal::ValidationError Serialize_(
    Nfc_Unregister_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Nfc_Unregister_Params_Data** output);
void Deserialize_(internal::Nfc_Unregister_Params_Data* input,
                  Nfc_Unregister_Params* output);

class Nfc_Unregister_Params {
 public:
  using Data_ = internal::Nfc_Unregister_Params_Data;

  static Nfc_Unregister_ParamsPtr New();

  template <typename U>
  static Nfc_Unregister_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Nfc_Unregister_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Nfc_Unregister_Params>::Convert(*this);
  }

  Nfc_Unregister_Params();
  ~Nfc_Unregister_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Nfc_Unregister_ParamsPtr Clone() const;
  bool Equals(const Nfc_Unregister_Params& other) const;

};



}  // namespace nfc

#endif  // MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_COMMON_H_
