// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library log_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojom/mojo/log/entry.mojom.dart' as entry_mojom;



class _LogAddEntryParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  entry_mojom.Entry entry = null;

  _LogAddEntryParams() : super(kVersions.last.size);

  _LogAddEntryParams.init(
    entry_mojom.Entry this.entry
  ) : super(kVersions.last.size);

  static _LogAddEntryParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _LogAddEntryParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _LogAddEntryParams result = new _LogAddEntryParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.entry = entry_mojom.Entry.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_LogAddEntryParams";
    String fieldName;
    try {
      fieldName = "entry";
      encoder0.encodeStruct(entry, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_LogAddEntryParams("
           "entry: $entry" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["entry"] = entry;
    return map;
  }
}

const int _logMethodAddEntryName = 0;

class _LogServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Log {
  static const String serviceName = "mojo::log::Log";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _LogServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static LogProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    LogProxy p = new LogProxy.unbound();
    String name = serviceName ?? Log.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void addEntry(entry_mojom.Entry entry);
}

abstract class LogInterface
    implements bindings.MojoInterface<Log>,
               Log {
  factory LogInterface([Log impl]) =>
      new LogStub.unbound(impl);

  factory LogInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Log impl]) =>
      new LogStub.fromEndpoint(endpoint, impl);

  factory LogInterface.fromMock(
      Log mock) =>
      new LogProxy.fromMock(mock);
}

abstract class LogInterfaceRequest
    implements bindings.MojoInterface<Log>,
               Log {
  factory LogInterfaceRequest() =>
      new LogProxy.unbound();
}

class _LogProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Log> {
  Log impl;

  _LogProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _LogProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _LogProxyControl.unbound() : super.unbound();

  String get serviceName => Log.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_LogProxyControl($superString)";
  }
}

class LogProxy
    extends bindings.Proxy<Log>
    implements Log,
               LogInterface,
               LogInterfaceRequest {
  LogProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _LogProxyControl.fromEndpoint(endpoint));

  LogProxy.fromHandle(core.MojoHandle handle)
      : super(new _LogProxyControl.fromHandle(handle));

  LogProxy.unbound()
      : super(new _LogProxyControl.unbound());

  factory LogProxy.fromMock(Log mock) {
    LogProxy newMockedProxy =
        new LogProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static LogProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For LogProxy"));
    return new LogProxy.fromEndpoint(endpoint);
  }


  void addEntry(entry_mojom.Entry entry) {
    if (impl != null) {
      impl.addEntry(entry);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _LogAddEntryParams();
    params.entry = entry;
    ctrl.sendMessage(params,
        _logMethodAddEntryName);
  }
}

class _LogStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Log> {
  Log _impl;

  _LogStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Log impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _LogStubControl.fromHandle(
      core.MojoHandle handle, [Log impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _LogStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Log.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _logMethodAddEntryName:
        var params = _LogAddEntryParams.deserialize(
            message.payload);
        _impl.addEntry(params.entry);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Log get impl => _impl;
  set impl(Log d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_LogStubControl($superString)";
  }

  int get version => 0;
}

class LogStub
    extends bindings.Stub<Log>
    implements Log,
               LogInterface,
               LogInterfaceRequest {
  LogStub.unbound([Log impl])
      : super(new _LogStubControl.unbound(impl));

  LogStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Log impl])
      : super(new _LogStubControl.fromEndpoint(endpoint, impl));

  LogStub.fromHandle(
      core.MojoHandle handle, [Log impl])
      : super(new _LogStubControl.fromHandle(handle, impl));

  static LogStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For LogStub"));
    return new LogStub.fromEndpoint(endpoint);
  }


  void addEntry(entry_mojom.Entry entry) {
    return impl.addEntry(entry);
  }
}



