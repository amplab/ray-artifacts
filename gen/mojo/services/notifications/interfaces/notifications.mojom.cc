// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/notifications/interfaces/notifications.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace notifications {

// --- Interface definitions ---

NotificationClientProxy::NotificationClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void NotificationClientProxy::OnSelected(
    ) {
  size_t size = sizeof(internal::NotificationClient_OnSelected_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NotificationClient_Base::MessageOrdinals::OnSelected), size);

  internal::NotificationClient_OnSelected_Params_Data* params =
      internal::NotificationClient_OnSelected_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NotificationClientProxy::OnDismissed(
    ) {
  size_t size = sizeof(internal::NotificationClient_OnDismissed_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NotificationClient_Base::MessageOrdinals::OnDismissed), size);

  internal::NotificationClient_OnDismissed_Params_Data* params =
      internal::NotificationClient_OnDismissed_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

NotificationClientStub::NotificationClientStub()
    : sink_(nullptr),
      control_message_handler_(NotificationClient::Version_) {
}

NotificationClientStub::~NotificationClientStub() {}

bool NotificationClientStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::NotificationClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NotificationClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NotificationClient_Base::MessageOrdinals::OnSelected: {
      internal::NotificationClient_OnSelected_Params_Data* params =
          reinterpret_cast<internal::NotificationClient_OnSelected_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnSelected();
      return true;
    }
    case internal::NotificationClient_Base::MessageOrdinals::OnDismissed: {
      internal::NotificationClient_OnDismissed_Params_Data* params =
          reinterpret_cast<internal::NotificationClient_OnDismissed_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnDismissed();
      return true;
    }
  }
  return false;
}

bool NotificationClientStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::NotificationClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NotificationClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NotificationClient_Base::MessageOrdinals::OnSelected: {
      break;
    }
    case internal::NotificationClient_Base::MessageOrdinals::OnDismissed: {
      break;
    }
  }
  return false;
}


NotificationProxy::NotificationProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void NotificationProxy::Update(
    NotificationDataPtr in_notification_data) {
  size_t size = sizeof(internal::Notification_Update_Params_Data);
  size += in_notification_data.is_null()
              ? 0
              : GetSerializedSize_(*in_notification_data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Notification_Base::MessageOrdinals::Update), size);

  internal::Notification_Update_Params_Data* params =
      internal::Notification_Update_Params_Data::New(builder.buffer());
  {Serialize_(in_notification_data.get(),
               builder.buffer(),
               &params->notification_data.ptr);
  }
  if (!params->notification_data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null notification_data in Notification.Update request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NotificationProxy::Cancel(
    ) {
  size_t size = sizeof(internal::Notification_Cancel_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Notification_Base::MessageOrdinals::Cancel), size);

  internal::Notification_Cancel_Params_Data* params =
      internal::Notification_Cancel_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

NotificationStub::NotificationStub()
    : sink_(nullptr),
      control_message_handler_(Notification::Version_) {
}

NotificationStub::~NotificationStub() {}

bool NotificationStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Notification_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Notification_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Notification_Base::MessageOrdinals::Update: {
      internal::Notification_Update_Params_Data* params =
          reinterpret_cast<internal::Notification_Update_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      NotificationDataPtr p_notification_data {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->notification_data.ptr) {
          p_notification_data = NotificationData::New();
          Deserialize_(params->notification_data.ptr, p_notification_data.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Update(p_notification_data.Pass());
      return true;
    }
    case internal::Notification_Base::MessageOrdinals::Cancel: {
      internal::Notification_Cancel_Params_Data* params =
          reinterpret_cast<internal::Notification_Cancel_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Cancel();
      return true;
    }
  }
  return false;
}

bool NotificationStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Notification_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Notification_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Notification_Base::MessageOrdinals::Update: {
      break;
    }
    case internal::Notification_Base::MessageOrdinals::Cancel: {
      break;
    }
  }
  return false;
}


NotificationServiceProxy::NotificationServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void NotificationServiceProxy::Post(
    NotificationDataPtr in_notification_data, mojo::InterfaceHandle<NotificationClient> in_client, mojo::InterfaceRequest<Notification> in_notification) {
  size_t size = sizeof(internal::NotificationService_Post_Params_Data);
  size += in_notification_data.is_null()
              ? 0
              : GetSerializedSize_(*in_notification_data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NotificationService_Base::MessageOrdinals::Post), size);

  internal::NotificationService_Post_Params_Data* params =
      internal::NotificationService_Post_Params_Data::New(builder.buffer());
  {Serialize_(in_notification_data.get(),
               builder.buffer(),
               &params->notification_data.ptr);
  }
  if (!params->notification_data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null notification_data in NotificationService.Post request");
  }
  mojo::internal::InterfaceHandleToData(in_client.Pass(),
                                        &params->client);
  params->notification = in_notification.PassMessagePipe().release();
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

NotificationServiceStub::NotificationServiceStub()
    : sink_(nullptr),
      control_message_handler_(NotificationService::Version_) {
}

NotificationServiceStub::~NotificationServiceStub() {}

bool NotificationServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::NotificationService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NotificationService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NotificationService_Base::MessageOrdinals::Post: {
      internal::NotificationService_Post_Params_Data* params =
          reinterpret_cast<internal::NotificationService_Post_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      NotificationDataPtr p_notification_data {};
      mojo::InterfaceHandle<NotificationClient> p_client {};
      mojo::InterfaceRequest<Notification> p_notification {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->notification_data.ptr) {
          p_notification_data = NotificationData::New();
          Deserialize_(params->notification_data.ptr, p_notification_data.get());
        }
        mojo::internal::InterfaceDataToHandle(&params->client, &p_client);
        p_notification.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->notification)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Post(p_notification_data.Pass(), p_client.Pass(), p_notification.Pass());
      return true;
    }
  }
  return false;
}

bool NotificationServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::NotificationService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NotificationService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NotificationService_Base::MessageOrdinals::Post: {
      break;
    }
  }
  return false;
}

}  // namespace notifications
