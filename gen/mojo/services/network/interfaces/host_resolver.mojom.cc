// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/host_resolver.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class HostResolver_GetHostAddresses_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HostResolver_GetHostAddresses_ForwardToCallback(
      const HostResolver::GetHostAddressesCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HostResolver::GetHostAddressesCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HostResolver_GetHostAddresses_ForwardToCallback);
};
bool HostResolver_GetHostAddresses_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HostResolver_GetHostAddresses_ResponseParams_Data* params =
      reinterpret_cast<internal::HostResolver_GetHostAddresses_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  mojo::Array<mojo::NetAddressPtr> p_addresses {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
    Deserialize_(params->addresses.ptr, &p_addresses);
  } while (false);
  callback_.Run(p_result.Pass(), p_addresses.Pass());
  return true;
}

HostResolverProxy::HostResolverProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void HostResolverProxy::GetHostAddresses(
    const mojo::String& in_host, mojo::NetAddressFamily in_family, const GetHostAddressesCallback& callback) {
  size_t size = sizeof(internal::HostResolver_GetHostAddresses_Params_Data);
  size += GetSerializedSize_(in_host);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HostResolver_Base::MessageOrdinals::GetHostAddresses), size);

  internal::HostResolver_GetHostAddresses_Params_Data* params =
      internal::HostResolver_GetHostAddresses_Params_Data::New(builder.buffer());
  SerializeString_(in_host, builder.buffer(), &params->host.ptr);
  if (!params->host.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null host in HostResolver.GetHostAddresses request");
  }
  params->family =
    static_cast<int32_t>(in_family);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HostResolver_GetHostAddresses_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HostResolver_GetHostAddresses_ProxyToResponder
    : public HostResolver::GetHostAddressesCallback::Runnable {
 public:
  ~HostResolver_GetHostAddresses_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HostResolver::GetHostAddresses(p_host, p_family, callback) "
        "was never run.";
  }

  HostResolver_GetHostAddresses_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result, mojo::Array<mojo::NetAddressPtr> in_addresses) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HostResolver_GetHostAddresses_ProxyToResponder);
};

void HostResolver_GetHostAddresses_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result, mojo::Array<mojo::NetAddressPtr> in_addresses) const {
  size_t size = sizeof(internal::HostResolver_GetHostAddresses_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += GetSerializedSize_(in_addresses);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HostResolver_Base::MessageOrdinals::GetHostAddresses), size, request_id_);
  internal::HostResolver_GetHostAddresses_ResponseParams_Data* params =
      internal::HostResolver_GetHostAddresses_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in HostResolver.GetHostAddresses response");
  }
  {
    const mojo::internal::ArrayValidateParams addresses_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_addresses, builder.buffer(), &params->addresses.ptr,
                          &addresses_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

HostResolverStub::HostResolverStub()
    : sink_(nullptr),
      control_message_handler_(HostResolver::Version_) {
}

HostResolverStub::~HostResolverStub() {}

bool HostResolverStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::HostResolver_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HostResolver_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HostResolver_Base::MessageOrdinals::GetHostAddresses: {
      break;
    }
  }
  return false;
}

bool HostResolverStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::HostResolver_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HostResolver_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HostResolver_Base::MessageOrdinals::GetHostAddresses: {
      internal::HostResolver_GetHostAddresses_Params_Data* params =
          reinterpret_cast<internal::HostResolver_GetHostAddresses_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HostResolver::GetHostAddressesCallback::Runnable* runnable =
          new HostResolver_GetHostAddresses_ProxyToResponder(
              message->request_id(), responder);
      HostResolver::GetHostAddressesCallback callback(runnable);
      
      mojo::String p_host {};
      mojo::NetAddressFamily p_family {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->host.ptr, &p_host);
        p_family = static_cast<mojo::NetAddressFamily>(params->family);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetHostAddresses(p_host, p_family, callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
