// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_JS_TEST_PINGPONG_SERVICE_MOJOM_INTERNAL_H_
#define SERVICES_JS_TEST_PINGPONG_SERVICE_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace js {



namespace internal {




#pragma pack(push, 1)



class PingPongService_SetClient_Params_Data {
 public:
  static PingPongService_SetClient_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  PingPongService_SetClient_Params_Data();
  ~PingPongService_SetClient_Params_Data() = delete;
};
static_assert(sizeof(PingPongService_SetClient_Params_Data) == 16,
              "Bad sizeof(PingPongService_SetClient_Params_Data)");


class PingPongService_Ping_Params_Data {
 public:
  static PingPongService_Ping_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint16_t ping_value;
  uint8_t padfinal_[6];

 private:
  PingPongService_Ping_Params_Data();
  ~PingPongService_Ping_Params_Data() = delete;
};
static_assert(sizeof(PingPongService_Ping_Params_Data) == 16,
              "Bad sizeof(PingPongService_Ping_Params_Data)");


class PingPongService_PingTargetURL_Params_Data {
 public:
  static PingPongService_PingTargetURL_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer url;
  uint16_t count;
  uint8_t padfinal_[6];

 private:
  PingPongService_PingTargetURL_Params_Data();
  ~PingPongService_PingTargetURL_Params_Data() = delete;
};
static_assert(sizeof(PingPongService_PingTargetURL_Params_Data) == 24,
              "Bad sizeof(PingPongService_PingTargetURL_Params_Data)");

class PingPongService_PingTargetURL_ResponseParams_Data {
 public:
  static PingPongService_PingTargetURL_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t ok : 1;
  uint8_t padfinal_[7];

 private:
  PingPongService_PingTargetURL_ResponseParams_Data();
  ~PingPongService_PingTargetURL_ResponseParams_Data() = delete;
};
static_assert(sizeof(PingPongService_PingTargetURL_ResponseParams_Data) == 16,
              "Bad sizeof(PingPongService_PingTargetURL_ResponseParams_Data)");


class PingPongService_PingTargetService_Params_Data {
 public:
  static PingPongService_PingTargetService_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data service;
  uint16_t count;
  uint8_t padfinal_[6];

 private:
  PingPongService_PingTargetService_Params_Data();
  ~PingPongService_PingTargetService_Params_Data() = delete;
};
static_assert(sizeof(PingPongService_PingTargetService_Params_Data) == 24,
              "Bad sizeof(PingPongService_PingTargetService_Params_Data)");

class PingPongService_PingTargetService_ResponseParams_Data {
 public:
  static PingPongService_PingTargetService_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t ok : 1;
  uint8_t padfinal_[7];

 private:
  PingPongService_PingTargetService_ResponseParams_Data();
  ~PingPongService_PingTargetService_ResponseParams_Data() = delete;
};
static_assert(sizeof(PingPongService_PingTargetService_ResponseParams_Data) == 16,
              "Bad sizeof(PingPongService_PingTargetService_ResponseParams_Data)");


class PingPongService_GetPingPongService_Params_Data {
 public:
  static PingPongService_GetPingPongService_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle service;
  uint8_t padfinal_[4];

 private:
  PingPongService_GetPingPongService_Params_Data();
  ~PingPongService_GetPingPongService_Params_Data() = delete;
};
static_assert(sizeof(PingPongService_GetPingPongService_Params_Data) == 16,
              "Bad sizeof(PingPongService_GetPingPongService_Params_Data)");


class PingPongService_Quit_Params_Data {
 public:
  static PingPongService_Quit_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  PingPongService_Quit_Params_Data();
  ~PingPongService_Quit_Params_Data() = delete;
};
static_assert(sizeof(PingPongService_Quit_Params_Data) == 8,
              "Bad sizeof(PingPongService_Quit_Params_Data)");


class PingPongClient_Pong_Params_Data {
 public:
  static PingPongClient_Pong_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint16_t pong_value;
  uint8_t padfinal_[6];

 private:
  PingPongClient_Pong_Params_Data();
  ~PingPongClient_Pong_Params_Data() = delete;
};
static_assert(sizeof(PingPongClient_Pong_Params_Data) == 16,
              "Bad sizeof(PingPongClient_Pong_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace js

#endif  // SERVICES_JS_TEST_PINGPONG_SERVICE_MOJOM_INTERNAL_H_
