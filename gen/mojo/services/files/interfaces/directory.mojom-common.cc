// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/files/interfaces/directory.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {
namespace files {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
Directory_Read_Params_Data* Directory_Read_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Read_Params_Data))) Directory_Read_Params_Data();
}

// static
mojo::internal::ValidationError Directory_Read_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Read_Params_Data* object = static_cast<const Directory_Read_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Read_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Directory_Read_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Directory_Read_Params_Data::Directory_Read_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Directory_Read_ResponseParams_Data* Directory_Read_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Read_ResponseParams_Data))) Directory_Read_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Directory_Read_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Read_ResponseParams_Data* object = static_cast<const Directory_Read_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->directory_contents.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams directory_contents_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::files::DirectoryEntryPtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->directory_contents.offset),
          bounds_checker, &directory_contents_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Read_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->directory_contents, handles);
}

void Directory_Read_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->directory_contents, handles);
}

Directory_Read_ResponseParams_Data::Directory_Read_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Directory_Stat_Params_Data* Directory_Stat_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Stat_Params_Data))) Directory_Stat_Params_Data();
}

// static
mojo::internal::ValidationError Directory_Stat_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Stat_Params_Data* object = static_cast<const Directory_Stat_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Stat_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Directory_Stat_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Directory_Stat_Params_Data::Directory_Stat_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Directory_Stat_ResponseParams_Data* Directory_Stat_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Stat_ResponseParams_Data))) Directory_Stat_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Directory_Stat_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Stat_ResponseParams_Data* object = static_cast<const Directory_Stat_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->file_information.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::files::FileInformation::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->file_information.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Stat_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->file_information, handles);
}

void Directory_Stat_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->file_information, handles);
}

Directory_Stat_ResponseParams_Data::Directory_Stat_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Directory_Touch_Params_Data* Directory_Touch_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Touch_Params_Data))) Directory_Touch_Params_Data();
}

// static
mojo::internal::ValidationError Directory_Touch_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Touch_Params_Data* object = static_cast<const Directory_Touch_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->atime.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::files::TimespecOrNow::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->atime.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->mtime.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::files::TimespecOrNow::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->mtime.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Touch_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->atime, handles);
  mojo::internal::Encode(&this->mtime, handles);
}

void Directory_Touch_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->atime, handles);
  mojo::internal::Decode(&this->mtime, handles);
}

Directory_Touch_Params_Data::Directory_Touch_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Directory_Touch_ResponseParams_Data* Directory_Touch_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Touch_ResponseParams_Data))) Directory_Touch_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Directory_Touch_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Touch_ResponseParams_Data* object = static_cast<const Directory_Touch_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Touch_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Directory_Touch_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Directory_Touch_ResponseParams_Data::Directory_Touch_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Directory_OpenFile_Params_Data* Directory_OpenFile_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_OpenFile_Params_Data))) Directory_OpenFile_Params_Data();
}

// static
mojo::internal::ValidationError Directory_OpenFile_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_OpenFile_Params_Data* object = static_cast<const Directory_OpenFile_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->path.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null path field in Directory_OpenFile_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->path.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->path.offset),
          bounds_checker, &path_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle file_handle = object->file;
  if (!bounds_checker->ClaimHandle(file_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_OpenFile_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->path, handles);
  mojo::internal::EncodeHandle(&this->file, handles);
}

void Directory_OpenFile_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->path, handles);
  mojo::internal::DecodeHandle(&this->file, handles);
}

Directory_OpenFile_Params_Data::Directory_OpenFile_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Directory_OpenFile_ResponseParams_Data* Directory_OpenFile_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_OpenFile_ResponseParams_Data))) Directory_OpenFile_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Directory_OpenFile_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_OpenFile_ResponseParams_Data* object = static_cast<const Directory_OpenFile_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_OpenFile_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Directory_OpenFile_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Directory_OpenFile_ResponseParams_Data::Directory_OpenFile_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Directory_OpenDirectory_Params_Data* Directory_OpenDirectory_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_OpenDirectory_Params_Data))) Directory_OpenDirectory_Params_Data();
}

// static
mojo::internal::ValidationError Directory_OpenDirectory_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_OpenDirectory_Params_Data* object = static_cast<const Directory_OpenDirectory_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->path.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null path field in Directory_OpenDirectory_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->path.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->path.offset),
          bounds_checker, &path_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle directory_handle = object->directory;
  if (!bounds_checker->ClaimHandle(directory_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_OpenDirectory_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->path, handles);
  mojo::internal::EncodeHandle(&this->directory, handles);
}

void Directory_OpenDirectory_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->path, handles);
  mojo::internal::DecodeHandle(&this->directory, handles);
}

Directory_OpenDirectory_Params_Data::Directory_OpenDirectory_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Directory_OpenDirectory_ResponseParams_Data* Directory_OpenDirectory_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_OpenDirectory_ResponseParams_Data))) Directory_OpenDirectory_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Directory_OpenDirectory_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_OpenDirectory_ResponseParams_Data* object = static_cast<const Directory_OpenDirectory_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_OpenDirectory_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Directory_OpenDirectory_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Directory_OpenDirectory_ResponseParams_Data::Directory_OpenDirectory_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Directory_Rename_Params_Data* Directory_Rename_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Rename_Params_Data))) Directory_Rename_Params_Data();
}

// static
mojo::internal::ValidationError Directory_Rename_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Rename_Params_Data* object = static_cast<const Directory_Rename_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->path.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null path field in Directory_Rename_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->path.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->path.offset),
          bounds_checker, &path_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->new_path.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null new_path field in Directory_Rename_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->new_path.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams new_path_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->new_path.offset),
          bounds_checker, &new_path_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Rename_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->path, handles);
  mojo::internal::Encode(&this->new_path, handles);
}

void Directory_Rename_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->path, handles);
  mojo::internal::Decode(&this->new_path, handles);
}

Directory_Rename_Params_Data::Directory_Rename_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Directory_Rename_ResponseParams_Data* Directory_Rename_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Rename_ResponseParams_Data))) Directory_Rename_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Directory_Rename_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Rename_ResponseParams_Data* object = static_cast<const Directory_Rename_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Rename_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Directory_Rename_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Directory_Rename_ResponseParams_Data::Directory_Rename_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Directory_Delete_Params_Data* Directory_Delete_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Delete_Params_Data))) Directory_Delete_Params_Data();
}

// static
mojo::internal::ValidationError Directory_Delete_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Delete_Params_Data* object = static_cast<const Directory_Delete_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->path.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null path field in Directory_Delete_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->path.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->path.offset),
          bounds_checker, &path_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Delete_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->path, handles);
}

void Directory_Delete_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->path, handles);
}

Directory_Delete_Params_Data::Directory_Delete_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Directory_Delete_ResponseParams_Data* Directory_Delete_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Directory_Delete_ResponseParams_Data))) Directory_Delete_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Directory_Delete_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Directory_Delete_ResponseParams_Data* object = static_cast<const Directory_Delete_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Directory_Delete_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Directory_Delete_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Directory_Delete_ResponseParams_Data::Directory_Delete_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError DirectoryRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'Directory', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::Directory_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Directory_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Directory_Base::MessageOrdinals::Read: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Directory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Directory_Read_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Stat: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Directory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Directory_Stat_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Touch: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Directory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Directory_Touch_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::OpenFile: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Directory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Directory_OpenFile_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::OpenDirectory: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Directory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Directory_OpenDirectory_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Rename: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Directory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Directory_Rename_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Delete: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Directory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Directory_Delete_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'Directory'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError DirectoryResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'Directory', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::Directory_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Directory_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Directory_Base::MessageOrdinals::Read: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Directory_Read_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Stat: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Directory_Stat_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Touch: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Directory_Touch_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::OpenFile: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Directory_OpenFile_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::OpenDirectory: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Directory_OpenDirectory_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Rename: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Directory_Rename_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Directory_Base::MessageOrdinals::Delete: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Directory_Delete_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Directory',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'Directory'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::Directory_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
Directory_Read_ParamsPtr Directory_Read_Params::New() {
  Directory_Read_ParamsPtr rv;
  mojo::internal::StructHelper<Directory_Read_Params>::Initialize(&rv);
  return rv;
}

Directory_Read_Params::Directory_Read_Params() {
}

Directory_Read_Params::~Directory_Read_Params() {
}


Directory_Read_ParamsPtr Directory_Read_Params::Clone() const {
  Directory_Read_ParamsPtr rv(New());
  return rv;
}


bool Directory_Read_Params::Equals(const Directory_Read_Params& other) const {
  return true;
}


size_t Directory_Read_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Read_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Read_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Read_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Read_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Read_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Read_Params_Data* input =
      static_cast<internal::Directory_Read_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Read_Params& input) {
  size_t size = sizeof(internal::Directory_Read_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Read_Params* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Read_Params_Data** output) {
  if (input) {
    internal::Directory_Read_Params_Data* result =
        internal::Directory_Read_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Read_Params_Data* input,
                  Directory_Read_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
Directory_Read_ResponseParamsPtr Directory_Read_ResponseParams::New() {
  Directory_Read_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Directory_Read_ResponseParams>::Initialize(&rv);
  return rv;
}

Directory_Read_ResponseParams::Directory_Read_ResponseParams()
    : error(),
      directory_contents() {
}

Directory_Read_ResponseParams::~Directory_Read_ResponseParams() {
}


Directory_Read_ResponseParamsPtr Directory_Read_ResponseParams::Clone() const {
  Directory_Read_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->directory_contents = directory_contents.Clone();
  return rv;
}


bool Directory_Read_ResponseParams::Equals(const Directory_Read_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::files::DirectoryEntryPtr>>::Equals(this->directory_contents, other.directory_contents))
    return false;
  return true;
}


size_t Directory_Read_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Read_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Read_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Read_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Read_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Read_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Read_ResponseParams_Data* input =
      static_cast<internal::Directory_Read_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Read_ResponseParams& input) {
  size_t size = sizeof(internal::Directory_Read_ResponseParams_Data);
  size += GetSerializedSize_(input.directory_contents);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Read_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Read_ResponseParams_Data** output) {
  if (input) {
    internal::Directory_Read_ResponseParams_Data* result =
        internal::Directory_Read_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    {
      const mojo::internal::ArrayValidateParams directory_contents_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->directory_contents, buf, &result->directory_contents.ptr,
                            &directory_contents_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Read_ResponseParams_Data* input,
                  Directory_Read_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      Deserialize_(input->directory_contents.ptr, &result->directory_contents);
    } while (false);
  }
}



// static
Directory_Stat_ParamsPtr Directory_Stat_Params::New() {
  Directory_Stat_ParamsPtr rv;
  mojo::internal::StructHelper<Directory_Stat_Params>::Initialize(&rv);
  return rv;
}

Directory_Stat_Params::Directory_Stat_Params() {
}

Directory_Stat_Params::~Directory_Stat_Params() {
}


Directory_Stat_ParamsPtr Directory_Stat_Params::Clone() const {
  Directory_Stat_ParamsPtr rv(New());
  return rv;
}


bool Directory_Stat_Params::Equals(const Directory_Stat_Params& other) const {
  return true;
}


size_t Directory_Stat_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Stat_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Stat_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Stat_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Stat_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Stat_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Stat_Params_Data* input =
      static_cast<internal::Directory_Stat_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Stat_Params& input) {
  size_t size = sizeof(internal::Directory_Stat_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Stat_Params* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Stat_Params_Data** output) {
  if (input) {
    internal::Directory_Stat_Params_Data* result =
        internal::Directory_Stat_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Stat_Params_Data* input,
                  Directory_Stat_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
Directory_Stat_ResponseParamsPtr Directory_Stat_ResponseParams::New() {
  Directory_Stat_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Directory_Stat_ResponseParams>::Initialize(&rv);
  return rv;
}

Directory_Stat_ResponseParams::Directory_Stat_ResponseParams()
    : error(),
      file_information() {
}

Directory_Stat_ResponseParams::~Directory_Stat_ResponseParams() {
}


Directory_Stat_ResponseParamsPtr Directory_Stat_ResponseParams::Clone() const {
  Directory_Stat_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->file_information = file_information.Clone();
  return rv;
}


bool Directory_Stat_ResponseParams::Equals(const Directory_Stat_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::FileInformationPtr>::Equals(this->file_information, other.file_information))
    return false;
  return true;
}


size_t Directory_Stat_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Stat_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Stat_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Stat_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Stat_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Stat_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Stat_ResponseParams_Data* input =
      static_cast<internal::Directory_Stat_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Stat_ResponseParams& input) {
  size_t size = sizeof(internal::Directory_Stat_ResponseParams_Data);
  size += input.file_information.is_null()
              ? 0
              : GetSerializedSize_(*input.file_information);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Stat_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Stat_ResponseParams_Data** output) {
  if (input) {
    internal::Directory_Stat_ResponseParams_Data* result =
        internal::Directory_Stat_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    {auto retval =Serialize_(input->file_information.get(),
                 buf,
                 &result->file_information.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Stat_ResponseParams_Data* input,
                  Directory_Stat_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      if (input->file_information.ptr) {
        result->file_information = mojo::files::FileInformation::New();
        Deserialize_(input->file_information.ptr, result->file_information.get());
      }
    } while (false);
  }
}



// static
Directory_Touch_ParamsPtr Directory_Touch_Params::New() {
  Directory_Touch_ParamsPtr rv;
  mojo::internal::StructHelper<Directory_Touch_Params>::Initialize(&rv);
  return rv;
}

Directory_Touch_Params::Directory_Touch_Params()
    : atime(),
      mtime() {
}

Directory_Touch_Params::~Directory_Touch_Params() {
}


Directory_Touch_ParamsPtr Directory_Touch_Params::Clone() const {
  Directory_Touch_ParamsPtr rv(New());
  rv->atime = atime.Clone();
  rv->mtime = mtime.Clone();
  return rv;
}


bool Directory_Touch_Params::Equals(const Directory_Touch_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::TimespecOrNowPtr>::Equals(this->atime, other.atime))
    return false;
  if (!mojo::internal::ValueTraits<mojo::files::TimespecOrNowPtr>::Equals(this->mtime, other.mtime))
    return false;
  return true;
}


size_t Directory_Touch_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Touch_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Touch_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Touch_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Touch_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Touch_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Touch_Params_Data* input =
      static_cast<internal::Directory_Touch_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Touch_Params& input) {
  size_t size = sizeof(internal::Directory_Touch_Params_Data);
  size += input.atime.is_null()
              ? 0
              : GetSerializedSize_(*input.atime);
  size += input.mtime.is_null()
              ? 0
              : GetSerializedSize_(*input.mtime);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Touch_Params* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Touch_Params_Data** output) {
  if (input) {
    internal::Directory_Touch_Params_Data* result =
        internal::Directory_Touch_Params_Data::New(buf);
    {auto retval =Serialize_(input->atime.get(),
                 buf,
                 &result->atime.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {auto retval =Serialize_(input->mtime.get(),
                 buf,
                 &result->mtime.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Touch_Params_Data* input,
                  Directory_Touch_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->atime.ptr) {
        result->atime = mojo::files::TimespecOrNow::New();
        Deserialize_(input->atime.ptr, result->atime.get());
      }
      if (input->mtime.ptr) {
        result->mtime = mojo::files::TimespecOrNow::New();
        Deserialize_(input->mtime.ptr, result->mtime.get());
      }
    } while (false);
  }
}


// static
Directory_Touch_ResponseParamsPtr Directory_Touch_ResponseParams::New() {
  Directory_Touch_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Directory_Touch_ResponseParams>::Initialize(&rv);
  return rv;
}

Directory_Touch_ResponseParams::Directory_Touch_ResponseParams()
    : error() {
}

Directory_Touch_ResponseParams::~Directory_Touch_ResponseParams() {
}


Directory_Touch_ResponseParamsPtr Directory_Touch_ResponseParams::Clone() const {
  Directory_Touch_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool Directory_Touch_ResponseParams::Equals(const Directory_Touch_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t Directory_Touch_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Touch_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Touch_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Touch_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Touch_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Touch_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Touch_ResponseParams_Data* input =
      static_cast<internal::Directory_Touch_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Touch_ResponseParams& input) {
  size_t size = sizeof(internal::Directory_Touch_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Touch_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Touch_ResponseParams_Data** output) {
  if (input) {
    internal::Directory_Touch_ResponseParams_Data* result =
        internal::Directory_Touch_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Touch_ResponseParams_Data* input,
                  Directory_Touch_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
Directory_OpenFile_ParamsPtr Directory_OpenFile_Params::New() {
  Directory_OpenFile_ParamsPtr rv;
  mojo::internal::StructHelper<Directory_OpenFile_Params>::Initialize(&rv);
  return rv;
}

Directory_OpenFile_Params::Directory_OpenFile_Params()
    : path(),
      file(),
      open_flags() {
}

Directory_OpenFile_Params::~Directory_OpenFile_Params() {
}



bool Directory_OpenFile_Params::Equals(const Directory_OpenFile_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->path, other.path))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::files::File>>::Equals(this->file, other.file))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->open_flags, other.open_flags))
    return false;
  return true;
}


size_t Directory_OpenFile_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_OpenFile_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_OpenFile_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_OpenFile_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_OpenFile_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_OpenFile_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_OpenFile_Params_Data* input =
      static_cast<internal::Directory_OpenFile_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_OpenFile_Params& input) {
  size_t size = sizeof(internal::Directory_OpenFile_Params_Data);
  size += GetSerializedSize_(input.path);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_OpenFile_Params* input,
    mojo::internal::Buffer* buf,
    internal::Directory_OpenFile_Params_Data** output) {
  if (input) {
    internal::Directory_OpenFile_Params_Data* result =
        internal::Directory_OpenFile_Params_Data::New(buf);
    SerializeString_(input->path, buf, &result->path.ptr);
    if (!result->path.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Directory_OpenFile_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->file = input->file.PassMessagePipe().release();
    result->open_flags = input->open_flags;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_OpenFile_Params_Data* input,
                  Directory_OpenFile_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->path.ptr, &result->path);
      result->file.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->file)));
      result->open_flags = input->open_flags;
    } while (false);
  }
}


// static
Directory_OpenFile_ResponseParamsPtr Directory_OpenFile_ResponseParams::New() {
  Directory_OpenFile_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Directory_OpenFile_ResponseParams>::Initialize(&rv);
  return rv;
}

Directory_OpenFile_ResponseParams::Directory_OpenFile_ResponseParams()
    : error() {
}

Directory_OpenFile_ResponseParams::~Directory_OpenFile_ResponseParams() {
}


Directory_OpenFile_ResponseParamsPtr Directory_OpenFile_ResponseParams::Clone() const {
  Directory_OpenFile_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool Directory_OpenFile_ResponseParams::Equals(const Directory_OpenFile_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t Directory_OpenFile_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_OpenFile_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_OpenFile_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_OpenFile_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_OpenFile_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_OpenFile_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_OpenFile_ResponseParams_Data* input =
      static_cast<internal::Directory_OpenFile_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_OpenFile_ResponseParams& input) {
  size_t size = sizeof(internal::Directory_OpenFile_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_OpenFile_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Directory_OpenFile_ResponseParams_Data** output) {
  if (input) {
    internal::Directory_OpenFile_ResponseParams_Data* result =
        internal::Directory_OpenFile_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_OpenFile_ResponseParams_Data* input,
                  Directory_OpenFile_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
Directory_OpenDirectory_ParamsPtr Directory_OpenDirectory_Params::New() {
  Directory_OpenDirectory_ParamsPtr rv;
  mojo::internal::StructHelper<Directory_OpenDirectory_Params>::Initialize(&rv);
  return rv;
}

Directory_OpenDirectory_Params::Directory_OpenDirectory_Params()
    : path(),
      directory(),
      open_flags() {
}

Directory_OpenDirectory_Params::~Directory_OpenDirectory_Params() {
}



bool Directory_OpenDirectory_Params::Equals(const Directory_OpenDirectory_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->path, other.path))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<Directory>>::Equals(this->directory, other.directory))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->open_flags, other.open_flags))
    return false;
  return true;
}


size_t Directory_OpenDirectory_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_OpenDirectory_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_OpenDirectory_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_OpenDirectory_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_OpenDirectory_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_OpenDirectory_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_OpenDirectory_Params_Data* input =
      static_cast<internal::Directory_OpenDirectory_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_OpenDirectory_Params& input) {
  size_t size = sizeof(internal::Directory_OpenDirectory_Params_Data);
  size += GetSerializedSize_(input.path);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_OpenDirectory_Params* input,
    mojo::internal::Buffer* buf,
    internal::Directory_OpenDirectory_Params_Data** output) {
  if (input) {
    internal::Directory_OpenDirectory_Params_Data* result =
        internal::Directory_OpenDirectory_Params_Data::New(buf);
    SerializeString_(input->path, buf, &result->path.ptr);
    if (!result->path.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Directory_OpenDirectory_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->directory = input->directory.PassMessagePipe().release();
    result->open_flags = input->open_flags;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_OpenDirectory_Params_Data* input,
                  Directory_OpenDirectory_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->path.ptr, &result->path);
      result->directory.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->directory)));
      result->open_flags = input->open_flags;
    } while (false);
  }
}


// static
Directory_OpenDirectory_ResponseParamsPtr Directory_OpenDirectory_ResponseParams::New() {
  Directory_OpenDirectory_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Directory_OpenDirectory_ResponseParams>::Initialize(&rv);
  return rv;
}

Directory_OpenDirectory_ResponseParams::Directory_OpenDirectory_ResponseParams()
    : error() {
}

Directory_OpenDirectory_ResponseParams::~Directory_OpenDirectory_ResponseParams() {
}


Directory_OpenDirectory_ResponseParamsPtr Directory_OpenDirectory_ResponseParams::Clone() const {
  Directory_OpenDirectory_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool Directory_OpenDirectory_ResponseParams::Equals(const Directory_OpenDirectory_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t Directory_OpenDirectory_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_OpenDirectory_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_OpenDirectory_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_OpenDirectory_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_OpenDirectory_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_OpenDirectory_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_OpenDirectory_ResponseParams_Data* input =
      static_cast<internal::Directory_OpenDirectory_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_OpenDirectory_ResponseParams& input) {
  size_t size = sizeof(internal::Directory_OpenDirectory_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_OpenDirectory_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Directory_OpenDirectory_ResponseParams_Data** output) {
  if (input) {
    internal::Directory_OpenDirectory_ResponseParams_Data* result =
        internal::Directory_OpenDirectory_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_OpenDirectory_ResponseParams_Data* input,
                  Directory_OpenDirectory_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
Directory_Rename_ParamsPtr Directory_Rename_Params::New() {
  Directory_Rename_ParamsPtr rv;
  mojo::internal::StructHelper<Directory_Rename_Params>::Initialize(&rv);
  return rv;
}

Directory_Rename_Params::Directory_Rename_Params()
    : path(),
      new_path() {
}

Directory_Rename_Params::~Directory_Rename_Params() {
}


Directory_Rename_ParamsPtr Directory_Rename_Params::Clone() const {
  Directory_Rename_ParamsPtr rv(New());
  rv->path = path;
  rv->new_path = new_path;
  return rv;
}


bool Directory_Rename_Params::Equals(const Directory_Rename_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->path, other.path))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->new_path, other.new_path))
    return false;
  return true;
}


size_t Directory_Rename_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Rename_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Rename_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Rename_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Rename_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Rename_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Rename_Params_Data* input =
      static_cast<internal::Directory_Rename_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Rename_Params& input) {
  size_t size = sizeof(internal::Directory_Rename_Params_Data);
  size += GetSerializedSize_(input.path);
  size += GetSerializedSize_(input.new_path);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Rename_Params* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Rename_Params_Data** output) {
  if (input) {
    internal::Directory_Rename_Params_Data* result =
        internal::Directory_Rename_Params_Data::New(buf);
    SerializeString_(input->path, buf, &result->path.ptr);
    if (!result->path.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Directory_Rename_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    SerializeString_(input->new_path, buf, &result->new_path.ptr);
    if (!result->new_path.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null new_path in Directory_Rename_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Rename_Params_Data* input,
                  Directory_Rename_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->path.ptr, &result->path);
      Deserialize_(input->new_path.ptr, &result->new_path);
    } while (false);
  }
}


// static
Directory_Rename_ResponseParamsPtr Directory_Rename_ResponseParams::New() {
  Directory_Rename_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Directory_Rename_ResponseParams>::Initialize(&rv);
  return rv;
}

Directory_Rename_ResponseParams::Directory_Rename_ResponseParams()
    : error() {
}

Directory_Rename_ResponseParams::~Directory_Rename_ResponseParams() {
}


Directory_Rename_ResponseParamsPtr Directory_Rename_ResponseParams::Clone() const {
  Directory_Rename_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool Directory_Rename_ResponseParams::Equals(const Directory_Rename_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t Directory_Rename_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Rename_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Rename_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Rename_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Rename_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Rename_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Rename_ResponseParams_Data* input =
      static_cast<internal::Directory_Rename_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Rename_ResponseParams& input) {
  size_t size = sizeof(internal::Directory_Rename_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Rename_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Rename_ResponseParams_Data** output) {
  if (input) {
    internal::Directory_Rename_ResponseParams_Data* result =
        internal::Directory_Rename_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Rename_ResponseParams_Data* input,
                  Directory_Rename_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
Directory_Delete_ParamsPtr Directory_Delete_Params::New() {
  Directory_Delete_ParamsPtr rv;
  mojo::internal::StructHelper<Directory_Delete_Params>::Initialize(&rv);
  return rv;
}

Directory_Delete_Params::Directory_Delete_Params()
    : path(),
      delete_flags() {
}

Directory_Delete_Params::~Directory_Delete_Params() {
}


Directory_Delete_ParamsPtr Directory_Delete_Params::Clone() const {
  Directory_Delete_ParamsPtr rv(New());
  rv->path = path;
  rv->delete_flags = delete_flags;
  return rv;
}


bool Directory_Delete_Params::Equals(const Directory_Delete_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->path, other.path))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->delete_flags, other.delete_flags))
    return false;
  return true;
}


size_t Directory_Delete_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Delete_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Delete_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Delete_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Delete_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Delete_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Delete_Params_Data* input =
      static_cast<internal::Directory_Delete_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Delete_Params& input) {
  size_t size = sizeof(internal::Directory_Delete_Params_Data);
  size += GetSerializedSize_(input.path);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Delete_Params* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Delete_Params_Data** output) {
  if (input) {
    internal::Directory_Delete_Params_Data* result =
        internal::Directory_Delete_Params_Data::New(buf);
    SerializeString_(input->path, buf, &result->path.ptr);
    if (!result->path.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Directory_Delete_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->delete_flags = input->delete_flags;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Delete_Params_Data* input,
                  Directory_Delete_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->path.ptr, &result->path);
      result->delete_flags = input->delete_flags;
    } while (false);
  }
}


// static
Directory_Delete_ResponseParamsPtr Directory_Delete_ResponseParams::New() {
  Directory_Delete_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Directory_Delete_ResponseParams>::Initialize(&rv);
  return rv;
}

Directory_Delete_ResponseParams::Directory_Delete_ResponseParams()
    : error() {
}

Directory_Delete_ResponseParams::~Directory_Delete_ResponseParams() {
}


Directory_Delete_ResponseParamsPtr Directory_Delete_ResponseParams::Clone() const {
  Directory_Delete_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool Directory_Delete_ResponseParams::Equals(const Directory_Delete_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t Directory_Delete_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Directory_Delete_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Directory_Delete_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Directory_Delete_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Directory_Delete_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Directory_Delete_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Directory_Delete_ResponseParams_Data* input =
      static_cast<internal::Directory_Delete_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Directory_Delete_ResponseParams& input) {
  size_t size = sizeof(internal::Directory_Delete_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Directory_Delete_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Directory_Delete_ResponseParams_Data** output) {
  if (input) {
    internal::Directory_Delete_ResponseParams_Data* result =
        internal::Directory_Delete_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Directory_Delete_ResponseParams_Data* input,
                  Directory_Delete_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}

}  // namespace files
}  // namespace mojo
