// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace tracing {



namespace internal {




#pragma pack(push, 1)



class TraceProvider_StartTracing_Params_Data {
 public:
  static TraceProvider_StartTracing_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer categories;
  mojo::internal::Interface_Data recorder;

 private:
  TraceProvider_StartTracing_Params_Data();
  ~TraceProvider_StartTracing_Params_Data() = delete;
};
static_assert(sizeof(TraceProvider_StartTracing_Params_Data) == 24,
              "Bad sizeof(TraceProvider_StartTracing_Params_Data)");


class TraceProvider_StopTracing_Params_Data {
 public:
  static TraceProvider_StopTracing_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TraceProvider_StopTracing_Params_Data();
  ~TraceProvider_StopTracing_Params_Data() = delete;
};
static_assert(sizeof(TraceProvider_StopTracing_Params_Data) == 8,
              "Bad sizeof(TraceProvider_StopTracing_Params_Data)");


class TraceRecorder_Record_Params_Data {
 public:
  static TraceRecorder_Record_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer json;

 private:
  TraceRecorder_Record_Params_Data();
  ~TraceRecorder_Record_Params_Data() = delete;
};
static_assert(sizeof(TraceRecorder_Record_Params_Data) == 16,
              "Bad sizeof(TraceRecorder_Record_Params_Data)");


class TraceCollector_Start_Params_Data {
 public:
  static TraceCollector_Start_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::DataPipeProducerHandle stream;
  uint8_t pad0_[4];
  mojo::internal::StringPointer categories;

 private:
  TraceCollector_Start_Params_Data();
  ~TraceCollector_Start_Params_Data() = delete;
};
static_assert(sizeof(TraceCollector_Start_Params_Data) == 24,
              "Bad sizeof(TraceCollector_Start_Params_Data)");


class TraceCollector_StopAndFlush_Params_Data {
 public:
  static TraceCollector_StopAndFlush_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TraceCollector_StopAndFlush_Params_Data();
  ~TraceCollector_StopAndFlush_Params_Data() = delete;
};
static_assert(sizeof(TraceCollector_StopAndFlush_Params_Data) == 8,
              "Bad sizeof(TraceCollector_StopAndFlush_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace tracing

#endif  // MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_INTERNAL_H_
