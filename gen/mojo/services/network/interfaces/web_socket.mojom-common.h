// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/web_socket.mojom-internal.h"
#include "mojo/public/interfaces/network/network_error.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class WebSocket;
class WebSocketRequestValidator;
class WebSocket_Synchronous;
class WebSocketClient;
class WebSocketClientRequestValidator;
class WebSocketClient_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class WebSocket_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = WebSocketRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = WebSocket_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Connect = 0,
    Send = 1,
    FlowControl = 2,
    Close = 3,
  };

  
  enum class MessageType : int32_t {
    CONTINUATION,
    TEXT,
    BINARY,
  };
  
  static bool MessageType_IsValidValue(MessageType value);
  static const uint16_t kAbnormalCloseCode = 1006U;

  virtual ~WebSocket_Base() {}
};

}  // namespace internal

// Async interface declaration

class WebSocketProxy;
class WebSocketStub;
class WebSocket_Synchronous;

class WebSocketRequestValidator;

class WebSocket : public internal::WebSocket_Base {
 public:
  virtual ~WebSocket() override {}

  using Proxy_ = WebSocketProxy;
  using Stub_ = WebSocketStub;
  virtual void Connect(const mojo::String& url, mojo::Array<mojo::String> protocols, const mojo::String& origin, mojo::ScopedDataPipeConsumerHandle send_stream, mojo::InterfaceHandle<WebSocketClient> client) = 0;
  virtual void Send(bool fin, WebSocket::MessageType type, uint32_t num_bytes) = 0;
  virtual void FlowControl(int64_t quota) = 0;
  virtual void Close(uint16_t code, const mojo::String& reason) = 0;
};

namespace internal {
class WebSocketClient_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = WebSocketClientRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = WebSocketClient_Synchronous;
  enum class MessageOrdinals : uint32_t {
    DidConnect = 0,
    DidReceiveData = 1,
    DidReceiveFlowControl = 2,
    DidFail = 3,
    DidClose = 4,
  };


  virtual ~WebSocketClient_Base() {}
};

}  // namespace internal

// Async interface declaration

class WebSocketClientProxy;
class WebSocketClientStub;
class WebSocketClient_Synchronous;

class WebSocketClientRequestValidator;

class WebSocketClient : public internal::WebSocketClient_Base {
 public:
  virtual ~WebSocketClient() override {}

  using Proxy_ = WebSocketClientProxy;
  using Stub_ = WebSocketClientStub;
  virtual void DidConnect(const mojo::String& selected_subprotocol, const mojo::String& extensions, mojo::ScopedDataPipeConsumerHandle receive_stream) = 0;
  virtual void DidReceiveData(bool fin, WebSocket::MessageType type, uint32_t num_bytes) = 0;
  virtual void DidReceiveFlowControl(int64_t quota) = 0;
  virtual void DidFail(const mojo::String& message) = 0;
  virtual void DidClose(bool was_clean, uint16_t code, const mojo::String& reason) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class WebSocketRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class WebSocketClientRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---
  
std::ostream& operator<<(std::ostream& stream,
                         const internal::WebSocket_Base::MessageType& val);

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class WebSocket_Connect_Params;

using WebSocket_Connect_ParamsPtr = mojo::StructPtr<WebSocket_Connect_Params>;


size_t GetSerializedSize_(const WebSocket_Connect_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocket_Connect_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocket_Connect_Params_Data** output);
void Deserialize_(internal::WebSocket_Connect_Params_Data* input,
                  WebSocket_Connect_Params* output);

class WebSocket_Connect_Params {
 public:
  using Data_ = internal::WebSocket_Connect_Params_Data;

  static WebSocket_Connect_ParamsPtr New();

  template <typename U>
  static WebSocket_Connect_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocket_Connect_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocket_Connect_Params>::Convert(*this);
  }

  WebSocket_Connect_Params();
  ~WebSocket_Connect_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const WebSocket_Connect_Params& other) const;

  mojo::String url;
  mojo::Array<mojo::String> protocols;
  mojo::String origin;
  mojo::ScopedDataPipeConsumerHandle send_stream;
  mojo::InterfaceHandle<WebSocketClient> client;
};




class WebSocket_Send_Params;

using WebSocket_Send_ParamsPtr = mojo::InlinedStructPtr<WebSocket_Send_Params>;


size_t GetSerializedSize_(const WebSocket_Send_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocket_Send_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocket_Send_Params_Data** output);
void Deserialize_(internal::WebSocket_Send_Params_Data* input,
                  WebSocket_Send_Params* output);

class WebSocket_Send_Params {
 public:
  using Data_ = internal::WebSocket_Send_Params_Data;

  static WebSocket_Send_ParamsPtr New();

  template <typename U>
  static WebSocket_Send_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocket_Send_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocket_Send_Params>::Convert(*this);
  }

  WebSocket_Send_Params();
  ~WebSocket_Send_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  WebSocket_Send_ParamsPtr Clone() const;
  bool Equals(const WebSocket_Send_Params& other) const;

  bool fin;
  WebSocket::MessageType type;
  uint32_t num_bytes;
};




class WebSocket_FlowControl_Params;

using WebSocket_FlowControl_ParamsPtr = mojo::InlinedStructPtr<WebSocket_FlowControl_Params>;


size_t GetSerializedSize_(const WebSocket_FlowControl_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocket_FlowControl_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocket_FlowControl_Params_Data** output);
void Deserialize_(internal::WebSocket_FlowControl_Params_Data* input,
                  WebSocket_FlowControl_Params* output);

class WebSocket_FlowControl_Params {
 public:
  using Data_ = internal::WebSocket_FlowControl_Params_Data;

  static WebSocket_FlowControl_ParamsPtr New();

  template <typename U>
  static WebSocket_FlowControl_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocket_FlowControl_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocket_FlowControl_Params>::Convert(*this);
  }

  WebSocket_FlowControl_Params();
  ~WebSocket_FlowControl_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  WebSocket_FlowControl_ParamsPtr Clone() const;
  bool Equals(const WebSocket_FlowControl_Params& other) const;

  int64_t quota;
};




class WebSocket_Close_Params;

using WebSocket_Close_ParamsPtr = mojo::InlinedStructPtr<WebSocket_Close_Params>;


size_t GetSerializedSize_(const WebSocket_Close_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocket_Close_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocket_Close_Params_Data** output);
void Deserialize_(internal::WebSocket_Close_Params_Data* input,
                  WebSocket_Close_Params* output);

class WebSocket_Close_Params {
 public:
  using Data_ = internal::WebSocket_Close_Params_Data;

  static WebSocket_Close_ParamsPtr New();

  template <typename U>
  static WebSocket_Close_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocket_Close_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocket_Close_Params>::Convert(*this);
  }

  WebSocket_Close_Params();
  ~WebSocket_Close_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  WebSocket_Close_ParamsPtr Clone() const;
  bool Equals(const WebSocket_Close_Params& other) const;

  uint16_t code;
  mojo::String reason;
};



      

class WebSocketClient_DidConnect_Params;

using WebSocketClient_DidConnect_ParamsPtr = mojo::StructPtr<WebSocketClient_DidConnect_Params>;


size_t GetSerializedSize_(const WebSocketClient_DidConnect_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidConnect_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocketClient_DidConnect_Params_Data** output);
void Deserialize_(internal::WebSocketClient_DidConnect_Params_Data* input,
                  WebSocketClient_DidConnect_Params* output);

class WebSocketClient_DidConnect_Params {
 public:
  using Data_ = internal::WebSocketClient_DidConnect_Params_Data;

  static WebSocketClient_DidConnect_ParamsPtr New();

  template <typename U>
  static WebSocketClient_DidConnect_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocketClient_DidConnect_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocketClient_DidConnect_Params>::Convert(*this);
  }

  WebSocketClient_DidConnect_Params();
  ~WebSocketClient_DidConnect_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const WebSocketClient_DidConnect_Params& other) const;

  mojo::String selected_subprotocol;
  mojo::String extensions;
  mojo::ScopedDataPipeConsumerHandle receive_stream;
};




class WebSocketClient_DidReceiveData_Params;

using WebSocketClient_DidReceiveData_ParamsPtr = mojo::InlinedStructPtr<WebSocketClient_DidReceiveData_Params>;


size_t GetSerializedSize_(const WebSocketClient_DidReceiveData_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidReceiveData_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocketClient_DidReceiveData_Params_Data** output);
void Deserialize_(internal::WebSocketClient_DidReceiveData_Params_Data* input,
                  WebSocketClient_DidReceiveData_Params* output);

class WebSocketClient_DidReceiveData_Params {
 public:
  using Data_ = internal::WebSocketClient_DidReceiveData_Params_Data;

  static WebSocketClient_DidReceiveData_ParamsPtr New();

  template <typename U>
  static WebSocketClient_DidReceiveData_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocketClient_DidReceiveData_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocketClient_DidReceiveData_Params>::Convert(*this);
  }

  WebSocketClient_DidReceiveData_Params();
  ~WebSocketClient_DidReceiveData_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  WebSocketClient_DidReceiveData_ParamsPtr Clone() const;
  bool Equals(const WebSocketClient_DidReceiveData_Params& other) const;

  bool fin;
  WebSocket::MessageType type;
  uint32_t num_bytes;
};




class WebSocketClient_DidReceiveFlowControl_Params;

using WebSocketClient_DidReceiveFlowControl_ParamsPtr = mojo::InlinedStructPtr<WebSocketClient_DidReceiveFlowControl_Params>;


size_t GetSerializedSize_(const WebSocketClient_DidReceiveFlowControl_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidReceiveFlowControl_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocketClient_DidReceiveFlowControl_Params_Data** output);
void Deserialize_(internal::WebSocketClient_DidReceiveFlowControl_Params_Data* input,
                  WebSocketClient_DidReceiveFlowControl_Params* output);

class WebSocketClient_DidReceiveFlowControl_Params {
 public:
  using Data_ = internal::WebSocketClient_DidReceiveFlowControl_Params_Data;

  static WebSocketClient_DidReceiveFlowControl_ParamsPtr New();

  template <typename U>
  static WebSocketClient_DidReceiveFlowControl_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocketClient_DidReceiveFlowControl_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocketClient_DidReceiveFlowControl_Params>::Convert(*this);
  }

  WebSocketClient_DidReceiveFlowControl_Params();
  ~WebSocketClient_DidReceiveFlowControl_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  WebSocketClient_DidReceiveFlowControl_ParamsPtr Clone() const;
  bool Equals(const WebSocketClient_DidReceiveFlowControl_Params& other) const;

  int64_t quota;
};




class WebSocketClient_DidFail_Params;

using WebSocketClient_DidFail_ParamsPtr = mojo::InlinedStructPtr<WebSocketClient_DidFail_Params>;


size_t GetSerializedSize_(const WebSocketClient_DidFail_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidFail_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocketClient_DidFail_Params_Data** output);
void Deserialize_(internal::WebSocketClient_DidFail_Params_Data* input,
                  WebSocketClient_DidFail_Params* output);

class WebSocketClient_DidFail_Params {
 public:
  using Data_ = internal::WebSocketClient_DidFail_Params_Data;

  static WebSocketClient_DidFail_ParamsPtr New();

  template <typename U>
  static WebSocketClient_DidFail_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocketClient_DidFail_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocketClient_DidFail_Params>::Convert(*this);
  }

  WebSocketClient_DidFail_Params();
  ~WebSocketClient_DidFail_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  WebSocketClient_DidFail_ParamsPtr Clone() const;
  bool Equals(const WebSocketClient_DidFail_Params& other) const;

  mojo::String message;
};




class WebSocketClient_DidClose_Params;

using WebSocketClient_DidClose_ParamsPtr = mojo::InlinedStructPtr<WebSocketClient_DidClose_Params>;


size_t GetSerializedSize_(const WebSocketClient_DidClose_Params& input);
mojo::internal::ValidationError Serialize_(
    WebSocketClient_DidClose_Params* input,
    mojo::internal::Buffer* buffer,
    internal::WebSocketClient_DidClose_Params_Data** output);
void Deserialize_(internal::WebSocketClient_DidClose_Params_Data* input,
                  WebSocketClient_DidClose_Params* output);

class WebSocketClient_DidClose_Params {
 public:
  using Data_ = internal::WebSocketClient_DidClose_Params_Data;

  static WebSocketClient_DidClose_ParamsPtr New();

  template <typename U>
  static WebSocketClient_DidClose_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<WebSocketClient_DidClose_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, WebSocketClient_DidClose_Params>::Convert(*this);
  }

  WebSocketClient_DidClose_Params();
  ~WebSocketClient_DidClose_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  WebSocketClient_DidClose_ParamsPtr Clone() const;
  bool Equals(const WebSocketClient_DidClose_Params& other) const;

  bool was_clean;
  uint16_t code;
  mojo::String reason;
};



}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_WEB_SOCKET_MOJOM_COMMON_H_
