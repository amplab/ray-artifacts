// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/test_service/test_request_tracker.mojom
//

package test_request_tracker

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type TestTrackedRequestService interface {
	GetReport() (outReport *[]*ServiceReport, err error)
}



var testTrackedRequestService_Name = "mojo::test::TestTrackedRequestService"

type TestTrackedRequestService_Request bindings.InterfaceRequest

func (r *TestTrackedRequestService_Request) Name() string {
	return testTrackedRequestService_Name
}


type TestTrackedRequestService_Pointer bindings.InterfacePointer

func (p *TestTrackedRequestService_Pointer) Name() string {
	return testTrackedRequestService_Name
}

type TestTrackedRequestService_ServiceFactory struct{
	Delegate TestTrackedRequestService_Factory
}

type TestTrackedRequestService_Factory interface {
	Create(request TestTrackedRequestService_Request)
}

func (f *TestTrackedRequestService_ServiceFactory) Name() string {
	return testTrackedRequestService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestTrackedRequestService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestTrackedRequestService_ServiceDescription{}
}

func (f *TestTrackedRequestService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestTrackedRequestService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestTrackedRequestService creates a message pipe for use with the
// TestTrackedRequestService interface with a TestTrackedRequestService_Request on one end and a TestTrackedRequestService_Pointer on the other.
func CreateMessagePipeForTestTrackedRequestService() (TestTrackedRequestService_Request, TestTrackedRequestService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestTrackedRequestService_Request(r), TestTrackedRequestService_Pointer(p)
}

const testTrackedRequestService_GetReport_Name uint32 = 0

type TestTrackedRequestService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestTrackedRequestServiceProxy(p TestTrackedRequestService_Pointer, waiter bindings.AsyncWaiter) *TestTrackedRequestService_Proxy {
	return &TestTrackedRequestService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestTrackedRequestService_Proxy) Close_Proxy() {
	p.router.Close()
}

type testTrackedRequestService_GetReport_Params struct {
}


func (s *testTrackedRequestService_GetReport_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testTrackedRequestService_GetReport_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testTrackedRequestService_GetReport_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testTrackedRequestService_GetReport_Params_Versions), func(i int) bool {
		return testTrackedRequestService_GetReport_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testTrackedRequestService_GetReport_Params_Versions) {
		if testTrackedRequestService_GetReport_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testTrackedRequestService_GetReport_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testTrackedRequestService_GetReport_ResponseParams struct {
	outReport *[]*ServiceReport
}


func (s *testTrackedRequestService_GetReport_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.outReport == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.outReport))), 64)
		for _, elem0 := range (*s.outReport) {
			if elem0 == nil {
				encoder.WriteNullPointer()
			} else {
				if err := encoder.WritePointer(); err != nil {
					return err
				}
				if err := (*elem0).Encode(encoder); err != nil {
					return err
				}
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testTrackedRequestService_GetReport_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *testTrackedRequestService_GetReport_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testTrackedRequestService_GetReport_ResponseParams_Versions), func(i int) bool {
		return testTrackedRequestService_GetReport_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testTrackedRequestService_GetReport_ResponseParams_Versions) {
		if testTrackedRequestService_GetReport_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testTrackedRequestService_GetReport_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outReport = nil
		} else {
			s.outReport = new([]*ServiceReport)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.outReport) = make([]*ServiceReport, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					(*s.outReport)[i0] = nil
				} else {
					(*s.outReport)[i0] = new(ServiceReport)
					if err := (*(*s.outReport)[i0]).Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestTrackedRequestService_Proxy) GetReport() (outReport *[]*ServiceReport, err error) {
	payload := &testTrackedRequestService_GetReport_Params{
	}
	header := bindings.MessageHeader{
		Type: testTrackedRequestService_GetReport_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testTrackedRequestService_GetReport_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testTrackedRequestService_GetReport_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outReport = response.outReport
	return
}

type testTrackedRequestService_Stub struct {
	connector *bindings.Connector
	impl TestTrackedRequestService
}

func NewTestTrackedRequestServiceStub(r TestTrackedRequestService_Request, impl TestTrackedRequestService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testTrackedRequestService_Stub{connector, impl})
}


func (f *TestTrackedRequestService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestTrackedRequestService_ServiceDescription{}
}


type TestTrackedRequestService_ServiceDescription struct{}

func (sd *TestTrackedRequestService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestTrackedRequestService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestTrackedRequestService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestTrackedRequestService_ServiceDescription)(nil)


func (s *testTrackedRequestService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testTrackedRequestService_GetReport_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testTrackedRequestService_GetReport_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testTrackedRequestService_GetReport_ResponseParams
		response.outReport, err = s.impl.GetReport()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testTrackedRequestService_GetReport_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type TestRequestTracker interface {
	SetNameAndReturnId(inServiceName string) (outId uint64, err error)
	RecordStats(inClientId uint64, inStats *ServiceStats) (err error)
}



var testRequestTracker_Name = "mojo::test::TestRequestTracker"

type TestRequestTracker_Request bindings.InterfaceRequest

func (r *TestRequestTracker_Request) Name() string {
	return testRequestTracker_Name
}


type TestRequestTracker_Pointer bindings.InterfacePointer

func (p *TestRequestTracker_Pointer) Name() string {
	return testRequestTracker_Name
}

type TestRequestTracker_ServiceFactory struct{
	Delegate TestRequestTracker_Factory
}

type TestRequestTracker_Factory interface {
	Create(request TestRequestTracker_Request)
}

func (f *TestRequestTracker_ServiceFactory) Name() string {
	return testRequestTracker_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestRequestTracker_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestRequestTracker_ServiceDescription{}
}

func (f *TestRequestTracker_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestRequestTracker_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestRequestTracker creates a message pipe for use with the
// TestRequestTracker interface with a TestRequestTracker_Request on one end and a TestRequestTracker_Pointer on the other.
func CreateMessagePipeForTestRequestTracker() (TestRequestTracker_Request, TestRequestTracker_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestRequestTracker_Request(r), TestRequestTracker_Pointer(p)
}

const testRequestTracker_SetNameAndReturnId_Name uint32 = 0
const testRequestTracker_RecordStats_Name uint32 = 1

type TestRequestTracker_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestRequestTrackerProxy(p TestRequestTracker_Pointer, waiter bindings.AsyncWaiter) *TestRequestTracker_Proxy {
	return &TestRequestTracker_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestRequestTracker_Proxy) Close_Proxy() {
	p.router.Close()
}

type testRequestTracker_SetNameAndReturnId_Params struct {
	inServiceName string
}


func (s *testRequestTracker_SetNameAndReturnId_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inServiceName); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testRequestTracker_SetNameAndReturnId_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *testRequestTracker_SetNameAndReturnId_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testRequestTracker_SetNameAndReturnId_Params_Versions), func(i int) bool {
		return testRequestTracker_SetNameAndReturnId_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testRequestTracker_SetNameAndReturnId_Params_Versions) {
		if testRequestTracker_SetNameAndReturnId_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testRequestTracker_SetNameAndReturnId_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inServiceName = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testRequestTracker_SetNameAndReturnId_ResponseParams struct {
	outId uint64
}


func (s *testRequestTracker_SetNameAndReturnId_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint64(s.outId); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testRequestTracker_SetNameAndReturnId_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *testRequestTracker_SetNameAndReturnId_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testRequestTracker_SetNameAndReturnId_ResponseParams_Versions), func(i int) bool {
		return testRequestTracker_SetNameAndReturnId_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testRequestTracker_SetNameAndReturnId_ResponseParams_Versions) {
		if testRequestTracker_SetNameAndReturnId_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testRequestTracker_SetNameAndReturnId_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint64()
		if err != nil {
			return err
		}
		s.outId = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestRequestTracker_Proxy) SetNameAndReturnId(inServiceName string) (outId uint64, err error) {
	payload := &testRequestTracker_SetNameAndReturnId_Params{
		inServiceName,
	}
	header := bindings.MessageHeader{
		Type: testRequestTracker_SetNameAndReturnId_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testRequestTracker_SetNameAndReturnId_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testRequestTracker_SetNameAndReturnId_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outId = response.outId
	return
}

type testRequestTracker_RecordStats_Params struct {
	inClientId uint64
	inStats *ServiceStats
}


func (s *testRequestTracker_RecordStats_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteUint64(s.inClientId); err != nil {
		return err
	}
	if s.inStats == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.inStats).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testRequestTracker_RecordStats_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *testRequestTracker_RecordStats_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testRequestTracker_RecordStats_Params_Versions), func(i int) bool {
		return testRequestTracker_RecordStats_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testRequestTracker_RecordStats_Params_Versions) {
		if testRequestTracker_RecordStats_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testRequestTracker_RecordStats_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint64()
		if err != nil {
			return err
		}
		s.inClientId = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inStats = nil
		} else {
			s.inStats = new(ServiceStats)
			if err := (*s.inStats).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestRequestTracker_Proxy) RecordStats(inClientId uint64, inStats *ServiceStats) (err error) {
	payload := &testRequestTracker_RecordStats_Params{
		inClientId,
		inStats,
	}
	header := bindings.MessageHeader{
		Type: testRequestTracker_RecordStats_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testRequestTracker_Stub struct {
	connector *bindings.Connector
	impl TestRequestTracker
}

func NewTestRequestTrackerStub(r TestRequestTracker_Request, impl TestRequestTracker, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testRequestTracker_Stub{connector, impl})
}


func (f *TestRequestTracker_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestRequestTracker_ServiceDescription{}
}


type TestRequestTracker_ServiceDescription struct{}

func (sd *TestRequestTracker_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestRequestTracker_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestRequestTracker_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestRequestTracker_ServiceDescription)(nil)


func (s *testRequestTracker_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testRequestTracker_SetNameAndReturnId_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testRequestTracker_SetNameAndReturnId_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testRequestTracker_SetNameAndReturnId_ResponseParams
		response.outId, err = s.impl.SetNameAndReturnId(request.inServiceName)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testRequestTracker_SetNameAndReturnId_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case testRequestTracker_RecordStats_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testRequestTracker_RecordStats_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.RecordStats(request.inClientId, request.inStats)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type ServiceStats struct {
	NumNewRequests uint64
	Health float64
}


func (s *ServiceStats) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteUint64(s.NumNewRequests); err != nil {
		return err
	}
	if err := encoder.WriteFloat64(s.Health); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceStats_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *ServiceStats) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceStats_Versions), func(i int) bool {
		return serviceStats_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceStats_Versions) {
		if serviceStats_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceStats_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint64()
		if err != nil {
			return err
		}
		s.NumNewRequests = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat64()
		if err != nil {
			return err
		}
		s.Health = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type ServiceReport struct {
	ServiceName *string
	TotalRequests uint64
	MeanHealth float64
}


func (s *ServiceReport) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if s.ServiceName == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.ServiceName)); err != nil {
			return err
		}
	}
	if err := encoder.WriteUint64(s.TotalRequests); err != nil {
		return err
	}
	if err := encoder.WriteFloat64(s.MeanHealth); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceReport_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *ServiceReport) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceReport_Versions), func(i int) bool {
		return serviceReport_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceReport_Versions) {
		if serviceReport_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceReport_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.ServiceName = nil
		} else {
			s.ServiceName = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.ServiceName) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint64()
		if err != nil {
			return err
		}
		s.TotalRequests = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat64()
		if err != nil {
			return err
		}
		s.MeanHealth = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

