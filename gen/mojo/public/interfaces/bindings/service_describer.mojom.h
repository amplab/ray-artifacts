// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_SERVICE_DESCRIBER_MOJOM_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_SERVICE_DESCRIBER_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/service_describer.mojom-common.h"
#include "mojo/public/interfaces/bindings/mojom_types.mojom.h"
namespace mojo {
namespace bindings {
namespace types {

// --- Interface Forward Declarations ---

using ServiceDescriberPtr = mojo::InterfacePtr<ServiceDescriber>;

using ServiceDescriptionPtr = mojo::InterfacePtr<ServiceDescription>;


// --- Interface Proxies ---


class ServiceDescriberProxy
    : public ServiceDescriber,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit ServiceDescriberProxy(mojo::MessageReceiverWithResponder* receiver);
  void DescribeService(
      const mojo::String& interface_name, mojo::InterfaceRequest<ServiceDescription> description_request
  ) override;
};


class ServiceDescriptionProxy
    : public ServiceDescription,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit ServiceDescriptionProxy(mojo::MessageReceiverWithResponder* receiver);
  void GetTopLevelInterface(
      const GetTopLevelInterfaceCallback& callback
  ) override;
  void GetTypeDefinition(
      const mojo::String& type_key, const GetTypeDefinitionCallback& callback
  ) override;
  void GetAllTypeDefinitions(
      const GetAllTypeDefinitionsCallback& callback
  ) override;
};


// --- Interface Stubs ---

class ServiceDescriberStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  ServiceDescriberStub();
  ~ServiceDescriberStub() override;
  void set_sink(ServiceDescriber* sink) { sink_ = sink; }
  ServiceDescriber* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  ServiceDescriber* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class ServiceDescriptionStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  ServiceDescriptionStub();
  ~ServiceDescriptionStub() override;
  void set_sink(ServiceDescription* sink) { sink_ = sink; }
  ServiceDescription* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  ServiceDescription* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace types
}  // namespace bindings
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_SERVICE_DESCRIBER_MOJOM_H_
