// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_COMMON_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/network_service.mojom-internal.h"
#include "mojo/public/interfaces/network/network_error.mojom-common.h"
#include "mojo/services/network/interfaces/cookie_store.mojom-common.h"
#include "mojo/services/network/interfaces/host_resolver.mojom-common.h"
#include "mojo/services/network/interfaces/http_server.mojom-common.h"
#include "mojo/services/network/interfaces/net_address.mojom-common.h"
#include "mojo/services/network/interfaces/tcp_bound_socket.mojom-common.h"
#include "mojo/services/network/interfaces/tcp_connected_socket.mojom-common.h"
#include "mojo/services/network/interfaces/udp_socket.mojom-common.h"
#include "mojo/services/network/interfaces/url_loader.mojom-common.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom-common.h"
#include "mojo/services/network/interfaces/web_socket.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class NetworkService;
class NetworkServiceRequestValidator;
class NetworkServiceResponseValidator;
class NetworkService_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class NetworkService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NetworkServiceRequestValidator;
  using ResponseValidator_ = NetworkServiceResponseValidator;
  using Synchronous_ = NetworkService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    CreateURLLoader = 0,
    GetCookieStore = 1,
    CreateWebSocket = 2,
    CreateTCPBoundSocket = 3,
    CreateTCPConnectedSocket = 4,
    CreateUDPSocket = 5,
    CreateHttpServer = 6,
    RegisterURLLoaderInterceptor = 7,
    CreateHostResolver = 8,
  };


  virtual ~NetworkService_Base() {}
};

}  // namespace internal

// Async interface declaration

class NetworkServiceProxy;
class NetworkServiceStub;
class NetworkService_Synchronous;

class NetworkServiceRequestValidator;
class NetworkServiceResponseValidator;

class NetworkService : public internal::NetworkService_Base {
 public:
  virtual ~NetworkService() override {}

  using Proxy_ = NetworkServiceProxy;
  using Stub_ = NetworkServiceStub;
  virtual void CreateURLLoader(mojo::InterfaceRequest<mojo::URLLoader> loader) = 0;
  virtual void GetCookieStore(mojo::InterfaceRequest<mojo::CookieStore> cookie_store) = 0;
  virtual void CreateWebSocket(mojo::InterfaceRequest<mojo::WebSocket> socket) = 0;
  using CreateTCPBoundSocketCallback = mojo::Callback<void(mojo::NetworkErrorPtr, mojo::NetAddressPtr)>;
  virtual void CreateTCPBoundSocket(mojo::NetAddressPtr local_address, mojo::InterfaceRequest<mojo::TCPBoundSocket> bound_socket, const CreateTCPBoundSocketCallback& callback) = 0;
  using CreateTCPConnectedSocketCallback = mojo::Callback<void(mojo::NetworkErrorPtr, mojo::NetAddressPtr)>;
  virtual void CreateTCPConnectedSocket(mojo::NetAddressPtr remote_address, mojo::ScopedDataPipeConsumerHandle send_stream, mojo::ScopedDataPipeProducerHandle receive_stream, mojo::InterfaceRequest<mojo::TCPConnectedSocket> client_socket, const CreateTCPConnectedSocketCallback& callback) = 0;
  virtual void CreateUDPSocket(mojo::InterfaceRequest<mojo::UDPSocket> socket) = 0;
  using CreateHttpServerCallback = mojo::Callback<void(mojo::NetworkErrorPtr, mojo::NetAddressPtr)>;
  virtual void CreateHttpServer(mojo::NetAddressPtr local_address, mojo::InterfaceHandle<mojo::HttpServerDelegate> delegate, const CreateHttpServerCallback& callback) = 0;
  virtual void RegisterURLLoaderInterceptor(mojo::InterfaceHandle<mojo::URLLoaderInterceptorFactory> factory) = 0;
  virtual void CreateHostResolver(mojo::InterfaceRequest<mojo::HostResolver> host_resolver) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class NetworkServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class NetworkServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class NetworkService_CreateURLLoader_Params;

using NetworkService_CreateURLLoader_ParamsPtr = mojo::StructPtr<NetworkService_CreateURLLoader_Params>;


size_t GetSerializedSize_(const NetworkService_CreateURLLoader_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateURLLoader_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateURLLoader_Params_Data** output);
void Deserialize_(internal::NetworkService_CreateURLLoader_Params_Data* input,
                  NetworkService_CreateURLLoader_Params* output);

class NetworkService_CreateURLLoader_Params {
 public:
  using Data_ = internal::NetworkService_CreateURLLoader_Params_Data;

  static NetworkService_CreateURLLoader_ParamsPtr New();

  template <typename U>
  static NetworkService_CreateURLLoader_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateURLLoader_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateURLLoader_Params>::Convert(*this);
  }

  NetworkService_CreateURLLoader_Params();
  ~NetworkService_CreateURLLoader_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_CreateURLLoader_Params& other) const;

  mojo::InterfaceRequest<mojo::URLLoader> loader;
};




class NetworkService_GetCookieStore_Params;

using NetworkService_GetCookieStore_ParamsPtr = mojo::StructPtr<NetworkService_GetCookieStore_Params>;


size_t GetSerializedSize_(const NetworkService_GetCookieStore_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_GetCookieStore_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_GetCookieStore_Params_Data** output);
void Deserialize_(internal::NetworkService_GetCookieStore_Params_Data* input,
                  NetworkService_GetCookieStore_Params* output);

class NetworkService_GetCookieStore_Params {
 public:
  using Data_ = internal::NetworkService_GetCookieStore_Params_Data;

  static NetworkService_GetCookieStore_ParamsPtr New();

  template <typename U>
  static NetworkService_GetCookieStore_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_GetCookieStore_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_GetCookieStore_Params>::Convert(*this);
  }

  NetworkService_GetCookieStore_Params();
  ~NetworkService_GetCookieStore_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_GetCookieStore_Params& other) const;

  mojo::InterfaceRequest<mojo::CookieStore> cookie_store;
};




class NetworkService_CreateWebSocket_Params;

using NetworkService_CreateWebSocket_ParamsPtr = mojo::StructPtr<NetworkService_CreateWebSocket_Params>;


size_t GetSerializedSize_(const NetworkService_CreateWebSocket_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateWebSocket_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateWebSocket_Params_Data** output);
void Deserialize_(internal::NetworkService_CreateWebSocket_Params_Data* input,
                  NetworkService_CreateWebSocket_Params* output);

class NetworkService_CreateWebSocket_Params {
 public:
  using Data_ = internal::NetworkService_CreateWebSocket_Params_Data;

  static NetworkService_CreateWebSocket_ParamsPtr New();

  template <typename U>
  static NetworkService_CreateWebSocket_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateWebSocket_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateWebSocket_Params>::Convert(*this);
  }

  NetworkService_CreateWebSocket_Params();
  ~NetworkService_CreateWebSocket_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_CreateWebSocket_Params& other) const;

  mojo::InterfaceRequest<mojo::WebSocket> socket;
};




class NetworkService_CreateTCPBoundSocket_Params;

using NetworkService_CreateTCPBoundSocket_ParamsPtr = mojo::StructPtr<NetworkService_CreateTCPBoundSocket_Params>;


size_t GetSerializedSize_(const NetworkService_CreateTCPBoundSocket_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPBoundSocket_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateTCPBoundSocket_Params_Data** output);
void Deserialize_(internal::NetworkService_CreateTCPBoundSocket_Params_Data* input,
                  NetworkService_CreateTCPBoundSocket_Params* output);

class NetworkService_CreateTCPBoundSocket_Params {
 public:
  using Data_ = internal::NetworkService_CreateTCPBoundSocket_Params_Data;

  static NetworkService_CreateTCPBoundSocket_ParamsPtr New();

  template <typename U>
  static NetworkService_CreateTCPBoundSocket_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateTCPBoundSocket_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateTCPBoundSocket_Params>::Convert(*this);
  }

  NetworkService_CreateTCPBoundSocket_Params();
  ~NetworkService_CreateTCPBoundSocket_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_CreateTCPBoundSocket_Params& other) const;

  mojo::NetAddressPtr local_address;
  mojo::InterfaceRequest<mojo::TCPBoundSocket> bound_socket;
};



class NetworkService_CreateTCPBoundSocket_ResponseParams;

using NetworkService_CreateTCPBoundSocket_ResponseParamsPtr = mojo::StructPtr<NetworkService_CreateTCPBoundSocket_ResponseParams>;


size_t GetSerializedSize_(const NetworkService_CreateTCPBoundSocket_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPBoundSocket_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data** output);
void Deserialize_(internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data* input,
                  NetworkService_CreateTCPBoundSocket_ResponseParams* output);

class NetworkService_CreateTCPBoundSocket_ResponseParams {
 public:
  using Data_ = internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data;

  static NetworkService_CreateTCPBoundSocket_ResponseParamsPtr New();

  template <typename U>
  static NetworkService_CreateTCPBoundSocket_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateTCPBoundSocket_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateTCPBoundSocket_ResponseParams>::Convert(*this);
  }

  NetworkService_CreateTCPBoundSocket_ResponseParams();
  ~NetworkService_CreateTCPBoundSocket_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NetworkService_CreateTCPBoundSocket_ResponseParamsPtr Clone() const;
  bool Equals(const NetworkService_CreateTCPBoundSocket_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
  mojo::NetAddressPtr bound_to;
};



class NetworkService_CreateTCPConnectedSocket_Params;

using NetworkService_CreateTCPConnectedSocket_ParamsPtr = mojo::StructPtr<NetworkService_CreateTCPConnectedSocket_Params>;


size_t GetSerializedSize_(const NetworkService_CreateTCPConnectedSocket_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPConnectedSocket_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateTCPConnectedSocket_Params_Data** output);
void Deserialize_(internal::NetworkService_CreateTCPConnectedSocket_Params_Data* input,
                  NetworkService_CreateTCPConnectedSocket_Params* output);

class NetworkService_CreateTCPConnectedSocket_Params {
 public:
  using Data_ = internal::NetworkService_CreateTCPConnectedSocket_Params_Data;

  static NetworkService_CreateTCPConnectedSocket_ParamsPtr New();

  template <typename U>
  static NetworkService_CreateTCPConnectedSocket_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateTCPConnectedSocket_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateTCPConnectedSocket_Params>::Convert(*this);
  }

  NetworkService_CreateTCPConnectedSocket_Params();
  ~NetworkService_CreateTCPConnectedSocket_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_CreateTCPConnectedSocket_Params& other) const;

  mojo::NetAddressPtr remote_address;
  mojo::ScopedDataPipeConsumerHandle send_stream;
  mojo::ScopedDataPipeProducerHandle receive_stream;
  mojo::InterfaceRequest<mojo::TCPConnectedSocket> client_socket;
};



class NetworkService_CreateTCPConnectedSocket_ResponseParams;

using NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr = mojo::StructPtr<NetworkService_CreateTCPConnectedSocket_ResponseParams>;


size_t GetSerializedSize_(const NetworkService_CreateTCPConnectedSocket_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPConnectedSocket_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data** output);
void Deserialize_(internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* input,
                  NetworkService_CreateTCPConnectedSocket_ResponseParams* output);

class NetworkService_CreateTCPConnectedSocket_ResponseParams {
 public:
  using Data_ = internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data;

  static NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr New();

  template <typename U>
  static NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateTCPConnectedSocket_ResponseParams>::Convert(*this);
  }

  NetworkService_CreateTCPConnectedSocket_ResponseParams();
  ~NetworkService_CreateTCPConnectedSocket_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr Clone() const;
  bool Equals(const NetworkService_CreateTCPConnectedSocket_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
  mojo::NetAddressPtr local_address;
};



class NetworkService_CreateUDPSocket_Params;

using NetworkService_CreateUDPSocket_ParamsPtr = mojo::StructPtr<NetworkService_CreateUDPSocket_Params>;


size_t GetSerializedSize_(const NetworkService_CreateUDPSocket_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateUDPSocket_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateUDPSocket_Params_Data** output);
void Deserialize_(internal::NetworkService_CreateUDPSocket_Params_Data* input,
                  NetworkService_CreateUDPSocket_Params* output);

class NetworkService_CreateUDPSocket_Params {
 public:
  using Data_ = internal::NetworkService_CreateUDPSocket_Params_Data;

  static NetworkService_CreateUDPSocket_ParamsPtr New();

  template <typename U>
  static NetworkService_CreateUDPSocket_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateUDPSocket_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateUDPSocket_Params>::Convert(*this);
  }

  NetworkService_CreateUDPSocket_Params();
  ~NetworkService_CreateUDPSocket_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_CreateUDPSocket_Params& other) const;

  mojo::InterfaceRequest<mojo::UDPSocket> socket;
};




class NetworkService_CreateHttpServer_Params;

using NetworkService_CreateHttpServer_ParamsPtr = mojo::StructPtr<NetworkService_CreateHttpServer_Params>;


size_t GetSerializedSize_(const NetworkService_CreateHttpServer_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateHttpServer_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateHttpServer_Params_Data** output);
void Deserialize_(internal::NetworkService_CreateHttpServer_Params_Data* input,
                  NetworkService_CreateHttpServer_Params* output);

class NetworkService_CreateHttpServer_Params {
 public:
  using Data_ = internal::NetworkService_CreateHttpServer_Params_Data;

  static NetworkService_CreateHttpServer_ParamsPtr New();

  template <typename U>
  static NetworkService_CreateHttpServer_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateHttpServer_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateHttpServer_Params>::Convert(*this);
  }

  NetworkService_CreateHttpServer_Params();
  ~NetworkService_CreateHttpServer_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_CreateHttpServer_Params& other) const;

  mojo::NetAddressPtr local_address;
  mojo::InterfaceHandle<mojo::HttpServerDelegate> delegate;
};



class NetworkService_CreateHttpServer_ResponseParams;

using NetworkService_CreateHttpServer_ResponseParamsPtr = mojo::StructPtr<NetworkService_CreateHttpServer_ResponseParams>;


size_t GetSerializedSize_(const NetworkService_CreateHttpServer_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateHttpServer_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateHttpServer_ResponseParams_Data** output);
void Deserialize_(internal::NetworkService_CreateHttpServer_ResponseParams_Data* input,
                  NetworkService_CreateHttpServer_ResponseParams* output);

class NetworkService_CreateHttpServer_ResponseParams {
 public:
  using Data_ = internal::NetworkService_CreateHttpServer_ResponseParams_Data;

  static NetworkService_CreateHttpServer_ResponseParamsPtr New();

  template <typename U>
  static NetworkService_CreateHttpServer_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateHttpServer_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateHttpServer_ResponseParams>::Convert(*this);
  }

  NetworkService_CreateHttpServer_ResponseParams();
  ~NetworkService_CreateHttpServer_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NetworkService_CreateHttpServer_ResponseParamsPtr Clone() const;
  bool Equals(const NetworkService_CreateHttpServer_ResponseParams& other) const;

  mojo::NetworkErrorPtr result;
  mojo::NetAddressPtr bound_to;
};



class NetworkService_RegisterURLLoaderInterceptor_Params;

using NetworkService_RegisterURLLoaderInterceptor_ParamsPtr = mojo::StructPtr<NetworkService_RegisterURLLoaderInterceptor_Params>;


size_t GetSerializedSize_(const NetworkService_RegisterURLLoaderInterceptor_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_RegisterURLLoaderInterceptor_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data** output);
void Deserialize_(internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data* input,
                  NetworkService_RegisterURLLoaderInterceptor_Params* output);

class NetworkService_RegisterURLLoaderInterceptor_Params {
 public:
  using Data_ = internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data;

  static NetworkService_RegisterURLLoaderInterceptor_ParamsPtr New();

  template <typename U>
  static NetworkService_RegisterURLLoaderInterceptor_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_RegisterURLLoaderInterceptor_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_RegisterURLLoaderInterceptor_Params>::Convert(*this);
  }

  NetworkService_RegisterURLLoaderInterceptor_Params();
  ~NetworkService_RegisterURLLoaderInterceptor_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_RegisterURLLoaderInterceptor_Params& other) const;

  mojo::InterfaceHandle<mojo::URLLoaderInterceptorFactory> factory;
};




class NetworkService_CreateHostResolver_Params;

using NetworkService_CreateHostResolver_ParamsPtr = mojo::StructPtr<NetworkService_CreateHostResolver_Params>;


size_t GetSerializedSize_(const NetworkService_CreateHostResolver_Params& input);
mojo::internal::ValidationError Serialize_(
    NetworkService_CreateHostResolver_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NetworkService_CreateHostResolver_Params_Data** output);
void Deserialize_(internal::NetworkService_CreateHostResolver_Params_Data* input,
                  NetworkService_CreateHostResolver_Params* output);

class NetworkService_CreateHostResolver_Params {
 public:
  using Data_ = internal::NetworkService_CreateHostResolver_Params_Data;

  static NetworkService_CreateHostResolver_ParamsPtr New();

  template <typename U>
  static NetworkService_CreateHostResolver_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NetworkService_CreateHostResolver_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NetworkService_CreateHostResolver_Params>::Convert(*this);
  }

  NetworkService_CreateHostResolver_Params();
  ~NetworkService_CreateHostResolver_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NetworkService_CreateHostResolver_Params& other) const;

  mojo::InterfaceRequest<mojo::HostResolver> host_resolver;
};



}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_COMMON_H_
