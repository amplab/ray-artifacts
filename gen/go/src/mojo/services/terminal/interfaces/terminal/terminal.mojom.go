// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/terminal/interfaces/terminal.mojom
//

package terminal

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	types "mojo/services/files/interfaces/types"
	fmt "fmt"
	file "mojo/services/files/interfaces/file"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	terminal_client "mojo/services/terminal/interfaces/terminal_client"
)


type Terminal interface {
	Connect(inTerminalFile file.File_Request, inForce bool) (outError types.Error, err error)
	ConnectToClient(inTerminalClient terminal_client.TerminalClient_Pointer, inForce bool) (outError types.Error, err error)
	GetSize() (outError types.Error, outRows uint32, outColumns uint32, err error)
	SetSize(inRows uint32, inColumns uint32, inReset bool) (outError types.Error, outRows uint32, outColumns uint32, err error)
}



var terminal_Name = "mojo::terminal::Terminal"

type Terminal_Request bindings.InterfaceRequest

func (r *Terminal_Request) Name() string {
	return terminal_Name
}


type Terminal_Pointer bindings.InterfacePointer

func (p *Terminal_Pointer) Name() string {
	return terminal_Name
}

type Terminal_ServiceFactory struct{
	Delegate Terminal_Factory
}

type Terminal_Factory interface {
	Create(request Terminal_Request)
}

func (f *Terminal_ServiceFactory) Name() string {
	return terminal_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Terminal_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Terminal_ServiceDescription{}
}

func (f *Terminal_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Terminal_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTerminal creates a message pipe for use with the
// Terminal interface with a Terminal_Request on one end and a Terminal_Pointer on the other.
func CreateMessagePipeForTerminal() (Terminal_Request, Terminal_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Terminal_Request(r), Terminal_Pointer(p)
}

const terminal_Connect_Name uint32 = 0
const terminal_ConnectToClient_Name uint32 = 1
const terminal_GetSize_Name uint32 = 2
const terminal_SetSize_Name uint32 = 3

type Terminal_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTerminalProxy(p Terminal_Pointer, waiter bindings.AsyncWaiter) *Terminal_Proxy {
	return &Terminal_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Terminal_Proxy) Close_Proxy() {
	p.router.Close()
}

type terminal_Connect_Params struct {
	inTerminalFile file.File_Request
	inForce bool
}


func (s *terminal_Connect_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inTerminalFile.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.inForce); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_Connect_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *terminal_Connect_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_Connect_Params_Versions), func(i int) bool {
		return terminal_Connect_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_Connect_Params_Versions) {
		if terminal_Connect_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_Connect_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inTerminalFile = file.File_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.inForce = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type terminal_Connect_ResponseParams struct {
	outError types.Error
}


func (s *terminal_Connect_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_Connect_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *terminal_Connect_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_Connect_ResponseParams_Versions), func(i int) bool {
		return terminal_Connect_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_Connect_ResponseParams_Versions) {
		if terminal_Connect_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_Connect_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Terminal_Proxy) Connect(inTerminalFile file.File_Request, inForce bool) (outError types.Error, err error) {
	payload := &terminal_Connect_Params{
		inTerminalFile,
		inForce,
	}
	header := bindings.MessageHeader{
		Type: terminal_Connect_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, terminal_Connect_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response terminal_Connect_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type terminal_ConnectToClient_Params struct {
	inTerminalClient terminal_client.TerminalClient_Pointer
	inForce bool
}


func (s *terminal_ConnectToClient_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInterface(s.inTerminalClient.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.inForce); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_ConnectToClient_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *terminal_ConnectToClient_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_ConnectToClient_Params_Versions), func(i int) bool {
		return terminal_ConnectToClient_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_ConnectToClient_Params_Versions) {
		if terminal_ConnectToClient_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_ConnectToClient_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inTerminalClient = terminal_client.TerminalClient_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.inForce = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type terminal_ConnectToClient_ResponseParams struct {
	outError types.Error
}


func (s *terminal_ConnectToClient_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_ConnectToClient_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *terminal_ConnectToClient_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_ConnectToClient_ResponseParams_Versions), func(i int) bool {
		return terminal_ConnectToClient_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_ConnectToClient_ResponseParams_Versions) {
		if terminal_ConnectToClient_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_ConnectToClient_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Terminal_Proxy) ConnectToClient(inTerminalClient terminal_client.TerminalClient_Pointer, inForce bool) (outError types.Error, err error) {
	payload := &terminal_ConnectToClient_Params{
		inTerminalClient,
		inForce,
	}
	header := bindings.MessageHeader{
		Type: terminal_ConnectToClient_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, terminal_ConnectToClient_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response terminal_ConnectToClient_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type terminal_GetSize_Params struct {
}


func (s *terminal_GetSize_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_GetSize_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *terminal_GetSize_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_GetSize_Params_Versions), func(i int) bool {
		return terminal_GetSize_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_GetSize_Params_Versions) {
		if terminal_GetSize_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_GetSize_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type terminal_GetSize_ResponseParams struct {
	outError types.Error
	outRows uint32
	outColumns uint32
}


func (s *terminal_GetSize_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.outRows); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.outColumns); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_GetSize_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *terminal_GetSize_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_GetSize_ResponseParams_Versions), func(i int) bool {
		return terminal_GetSize_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_GetSize_ResponseParams_Versions) {
		if terminal_GetSize_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_GetSize_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.outRows = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.outColumns = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Terminal_Proxy) GetSize() (outError types.Error, outRows uint32, outColumns uint32, err error) {
	payload := &terminal_GetSize_Params{
	}
	header := bindings.MessageHeader{
		Type: terminal_GetSize_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, terminal_GetSize_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response terminal_GetSize_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	outRows = response.outRows
	outColumns = response.outColumns
	return
}

type terminal_SetSize_Params struct {
	inRows uint32
	inColumns uint32
	inReset bool
}


func (s *terminal_SetSize_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteUint32(s.inRows); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inColumns); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.inReset); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_SetSize_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *terminal_SetSize_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_SetSize_Params_Versions), func(i int) bool {
		return terminal_SetSize_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_SetSize_Params_Versions) {
		if terminal_SetSize_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_SetSize_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inRows = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inColumns = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.inReset = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type terminal_SetSize_ResponseParams struct {
	outError types.Error
	outRows uint32
	outColumns uint32
}


func (s *terminal_SetSize_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.outRows); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.outColumns); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var terminal_SetSize_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *terminal_SetSize_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(terminal_SetSize_ResponseParams_Versions), func(i int) bool {
		return terminal_SetSize_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(terminal_SetSize_ResponseParams_Versions) {
		if terminal_SetSize_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := terminal_SetSize_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.outRows = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.outColumns = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Terminal_Proxy) SetSize(inRows uint32, inColumns uint32, inReset bool) (outError types.Error, outRows uint32, outColumns uint32, err error) {
	payload := &terminal_SetSize_Params{
		inRows,
		inColumns,
		inReset,
	}
	header := bindings.MessageHeader{
		Type: terminal_SetSize_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, terminal_SetSize_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response terminal_SetSize_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	outRows = response.outRows
	outColumns = response.outColumns
	return
}

type terminal_Stub struct {
	connector *bindings.Connector
	impl Terminal
}

func NewTerminalStub(r Terminal_Request, impl Terminal, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &terminal_Stub{connector, impl})
}


func (f *Terminal_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Terminal_ServiceDescription{}
}


type Terminal_ServiceDescription struct{}

func (sd *Terminal_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Terminal_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Terminal_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Terminal_ServiceDescription)(nil)


func (s *terminal_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case terminal_Connect_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request terminal_Connect_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response terminal_Connect_ResponseParams
		response.outError, err = s.impl.Connect(request.inTerminalFile, request.inForce)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: terminal_Connect_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case terminal_ConnectToClient_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request terminal_ConnectToClient_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response terminal_ConnectToClient_ResponseParams
		response.outError, err = s.impl.ConnectToClient(request.inTerminalClient, request.inForce)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: terminal_ConnectToClient_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case terminal_GetSize_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request terminal_GetSize_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response terminal_GetSize_ResponseParams
		response.outError, 		response.outRows, 		response.outColumns, err = s.impl.GetSize()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: terminal_GetSize_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case terminal_SetSize_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request terminal_SetSize_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response terminal_SetSize_ResponseParams
		response.outError, 		response.outRows, 		response.outColumns, err = s.impl.SetSize(request.inRows, request.inColumns, request.inReset)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: terminal_SetSize_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

