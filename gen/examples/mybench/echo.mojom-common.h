// NOTE: This file was generated by the Mojo bindings generator.
#ifndef EXAMPLES_MYBENCH_ECHO_MOJOM_COMMON_H_
#define EXAMPLES_MYBENCH_ECHO_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "examples/mybench/echo.mojom-internal.h"
namespace mojo {
namespace examples {

// --- Interface Forward Declarations ---
class Echo;
class EchoRequestValidator;
class EchoResponseValidator;
class Echo_Synchronous;

// --- Struct Forward Declarations ---
class ObjectInfo;

using ObjectInfoPtr = mojo::InlinedStructPtr<ObjectInfo>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Echo_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = EchoRequestValidator;
  using ResponseValidator_ = EchoResponseValidator;
  using Synchronous_ = Echo_Synchronous;
  enum class MessageOrdinals : uint32_t {
    EchoString = 0,
    BuildObject = 1,
    ListObjects = 2,
  };


  virtual ~Echo_Base() {}
};

}  // namespace internal

// Async interface declaration

class EchoProxy;
class EchoStub;
class Echo_Synchronous;

class EchoRequestValidator;
class EchoResponseValidator;

class Echo : public internal::Echo_Base {
 public:
  virtual ~Echo() override {}

  using Proxy_ = EchoProxy;
  using Stub_ = EchoStub;
  using EchoStringCallback = mojo::Callback<void(uint32_t)>;
  virtual void EchoString(uint32_t value, const EchoStringCallback& callback) = 0;
  using BuildObjectCallback = mojo::Callback<void(mojo::ScopedSharedBufferHandle)>;
  virtual void BuildObject(int64_t object_id, uint64_t size, const BuildObjectCallback& callback) = 0;
  using ListObjectsCallback = mojo::Callback<void(mojo::Array<ObjectInfoPtr>)>;
  virtual void ListObjects(const ListObjectsCallback& callback) = 0;
};

}  // namespace examples
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::examples::ObjectInfoPtr, true, false> {
  using DataType = mojo::examples::internal::ObjectInfo_Data*;
};

}  // internal
}  // mojo
namespace mojo {
namespace examples {

// --- Interface Request Validators ---
class EchoRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class EchoResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class ObjectInfo {
 public:
  using Data_ = internal::ObjectInfo_Data;

  static ObjectInfoPtr New();

  template <typename U>
  static ObjectInfoPtr From(const U& u) {
    return mojo::TypeConverter<ObjectInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ObjectInfo>::Convert(*this);
  }

  ObjectInfo();
  ~ObjectInfo();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ObjectInfoPtr Clone() const;
  bool Equals(const ObjectInfo& other) const;

  int64_t ms_since_epoch;
  uint64_t num_bytes;
};



// --- Non-inlined structs ---

// --- Struct serialization helpers ---
size_t GetSerializedSize_(const ObjectInfo& input);
mojo::internal::ValidationError Serialize_(
    ObjectInfo* input,
    mojo::internal::Buffer* buffer,
    internal::ObjectInfo_Data** output);
void Deserialize_(internal::ObjectInfo_Data* input,
                  ObjectInfo* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Echo_EchoString_Params;

using Echo_EchoString_ParamsPtr = mojo::InlinedStructPtr<Echo_EchoString_Params>;


size_t GetSerializedSize_(const Echo_EchoString_Params& input);
mojo::internal::ValidationError Serialize_(
    Echo_EchoString_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Echo_EchoString_Params_Data** output);
void Deserialize_(internal::Echo_EchoString_Params_Data* input,
                  Echo_EchoString_Params* output);

class Echo_EchoString_Params {
 public:
  using Data_ = internal::Echo_EchoString_Params_Data;

  static Echo_EchoString_ParamsPtr New();

  template <typename U>
  static Echo_EchoString_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Echo_EchoString_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Echo_EchoString_Params>::Convert(*this);
  }

  Echo_EchoString_Params();
  ~Echo_EchoString_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Echo_EchoString_ParamsPtr Clone() const;
  bool Equals(const Echo_EchoString_Params& other) const;

  uint32_t value;
};



class Echo_EchoString_ResponseParams;

using Echo_EchoString_ResponseParamsPtr = mojo::InlinedStructPtr<Echo_EchoString_ResponseParams>;


size_t GetSerializedSize_(const Echo_EchoString_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Echo_EchoString_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Echo_EchoString_ResponseParams_Data** output);
void Deserialize_(internal::Echo_EchoString_ResponseParams_Data* input,
                  Echo_EchoString_ResponseParams* output);

class Echo_EchoString_ResponseParams {
 public:
  using Data_ = internal::Echo_EchoString_ResponseParams_Data;

  static Echo_EchoString_ResponseParamsPtr New();

  template <typename U>
  static Echo_EchoString_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Echo_EchoString_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Echo_EchoString_ResponseParams>::Convert(*this);
  }

  Echo_EchoString_ResponseParams();
  ~Echo_EchoString_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Echo_EchoString_ResponseParamsPtr Clone() const;
  bool Equals(const Echo_EchoString_ResponseParams& other) const;

  uint32_t value;
};



class Echo_BuildObject_Params;

using Echo_BuildObject_ParamsPtr = mojo::InlinedStructPtr<Echo_BuildObject_Params>;


size_t GetSerializedSize_(const Echo_BuildObject_Params& input);
mojo::internal::ValidationError Serialize_(
    Echo_BuildObject_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Echo_BuildObject_Params_Data** output);
void Deserialize_(internal::Echo_BuildObject_Params_Data* input,
                  Echo_BuildObject_Params* output);

class Echo_BuildObject_Params {
 public:
  using Data_ = internal::Echo_BuildObject_Params_Data;

  static Echo_BuildObject_ParamsPtr New();

  template <typename U>
  static Echo_BuildObject_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Echo_BuildObject_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Echo_BuildObject_Params>::Convert(*this);
  }

  Echo_BuildObject_Params();
  ~Echo_BuildObject_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Echo_BuildObject_ParamsPtr Clone() const;
  bool Equals(const Echo_BuildObject_Params& other) const;

  int64_t object_id;
  uint64_t size;
};



class Echo_BuildObject_ResponseParams;

using Echo_BuildObject_ResponseParamsPtr = mojo::StructPtr<Echo_BuildObject_ResponseParams>;


size_t GetSerializedSize_(const Echo_BuildObject_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Echo_BuildObject_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Echo_BuildObject_ResponseParams_Data** output);
void Deserialize_(internal::Echo_BuildObject_ResponseParams_Data* input,
                  Echo_BuildObject_ResponseParams* output);

class Echo_BuildObject_ResponseParams {
 public:
  using Data_ = internal::Echo_BuildObject_ResponseParams_Data;

  static Echo_BuildObject_ResponseParamsPtr New();

  template <typename U>
  static Echo_BuildObject_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Echo_BuildObject_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Echo_BuildObject_ResponseParams>::Convert(*this);
  }

  Echo_BuildObject_ResponseParams();
  ~Echo_BuildObject_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Echo_BuildObject_ResponseParams& other) const;

  mojo::ScopedSharedBufferHandle buffer;
};



class Echo_ListObjects_Params;

using Echo_ListObjects_ParamsPtr = mojo::InlinedStructPtr<Echo_ListObjects_Params>;


size_t GetSerializedSize_(const Echo_ListObjects_Params& input);
mojo::internal::ValidationError Serialize_(
    Echo_ListObjects_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Echo_ListObjects_Params_Data** output);
void Deserialize_(internal::Echo_ListObjects_Params_Data* input,
                  Echo_ListObjects_Params* output);

class Echo_ListObjects_Params {
 public:
  using Data_ = internal::Echo_ListObjects_Params_Data;

  static Echo_ListObjects_ParamsPtr New();

  template <typename U>
  static Echo_ListObjects_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Echo_ListObjects_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Echo_ListObjects_Params>::Convert(*this);
  }

  Echo_ListObjects_Params();
  ~Echo_ListObjects_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Echo_ListObjects_ParamsPtr Clone() const;
  bool Equals(const Echo_ListObjects_Params& other) const;

};



class Echo_ListObjects_ResponseParams;

using Echo_ListObjects_ResponseParamsPtr = mojo::StructPtr<Echo_ListObjects_ResponseParams>;


size_t GetSerializedSize_(const Echo_ListObjects_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Echo_ListObjects_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Echo_ListObjects_ResponseParams_Data** output);
void Deserialize_(internal::Echo_ListObjects_ResponseParams_Data* input,
                  Echo_ListObjects_ResponseParams* output);

class Echo_ListObjects_ResponseParams {
 public:
  using Data_ = internal::Echo_ListObjects_ResponseParams_Data;

  static Echo_ListObjects_ResponseParamsPtr New();

  template <typename U>
  static Echo_ListObjects_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Echo_ListObjects_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Echo_ListObjects_ResponseParams>::Convert(*this);
  }

  Echo_ListObjects_ResponseParams();
  ~Echo_ListObjects_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Echo_ListObjects_ResponseParamsPtr Clone() const;
  bool Equals(const Echo_ListObjects_ResponseParams& other) const;

  mojo::Array<ObjectInfoPtr> info;
};


}  // namespace examples
}  // namespace mojo

#endif  // EXAMPLES_MYBENCH_ECHO_MOJOM_COMMON_H_
