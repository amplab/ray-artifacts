// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/notifications/interfaces/notifications.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/notifications/interfaces/notifications.mojom-internal.h"
#include "mojo/services/notifications/interfaces/notifications.mojom-common.h"
namespace notifications {

// --- Interface definitions ---
NotificationClient_SynchronousProxy::NotificationClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool NotificationClient_SynchronousProxy::OnSelected() const  {
  size_t size = sizeof(internal::NotificationClient_OnSelected_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::NotificationClient_Base::MessageOrdinals::OnSelected);
  mojo::MessageBuilder builder(msg_name, size);

  internal::NotificationClient_OnSelected_Params_Data* out_params =
      internal::NotificationClient_OnSelected_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool NotificationClient_SynchronousProxy::OnDismissed() const  {
  size_t size = sizeof(internal::NotificationClient_OnDismissed_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::NotificationClient_Base::MessageOrdinals::OnDismissed);
  mojo::MessageBuilder builder(msg_name, size);

  internal::NotificationClient_OnDismissed_Params_Data* out_params =
      internal::NotificationClient_OnDismissed_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}Notification_SynchronousProxy::Notification_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool Notification_SynchronousProxy::Update(NotificationDataPtr in_notification_data) const  {
  size_t size = sizeof(internal::Notification_Update_Params_Data);
  size += in_notification_data.is_null()
              ? 0
              : GetSerializedSize_(*in_notification_data);

  auto msg_name = static_cast<uint32_t>(internal::Notification_Base::MessageOrdinals::Update);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Notification_Update_Params_Data* out_params =
      internal::Notification_Update_Params_Data::New(builder.buffer());
  {Serialize_(in_notification_data.get(),
               builder.buffer(),
               &out_params->notification_data.ptr);
  }
  if (!out_params->notification_data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null notification_data in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool Notification_SynchronousProxy::Cancel() const  {
  size_t size = sizeof(internal::Notification_Cancel_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Notification_Base::MessageOrdinals::Cancel);
  mojo::MessageBuilder builder(msg_name, size);

  internal::Notification_Cancel_Params_Data* out_params =
      internal::Notification_Cancel_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}NotificationService_SynchronousProxy::NotificationService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool NotificationService_SynchronousProxy::Post(NotificationDataPtr in_notification_data, mojo::InterfaceHandle<NotificationClient> in_client, mojo::InterfaceRequest<Notification> in_notification) const  {
  size_t size = sizeof(internal::NotificationService_Post_Params_Data);
  size += in_notification_data.is_null()
              ? 0
              : GetSerializedSize_(*in_notification_data);

  auto msg_name = static_cast<uint32_t>(internal::NotificationService_Base::MessageOrdinals::Post);
  mojo::MessageBuilder builder(msg_name, size);

  internal::NotificationService_Post_Params_Data* out_params =
      internal::NotificationService_Post_Params_Data::New(builder.buffer());
  {Serialize_(in_notification_data.get(),
               builder.buffer(),
               &out_params->notification_data.ptr);
  }
  if (!out_params->notification_data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null notification_data in {{interface.name}}::{{method.name}}");
  }
  mojo::internal::InterfaceHandleToData(in_client.Pass(),
                                        &out_params->client);
  out_params->notification = in_notification.PassMessagePipe().release();
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
}  // namespace notifications

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
