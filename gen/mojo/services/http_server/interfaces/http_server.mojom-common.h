// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_HTTP_SERVER_INTERFACES_HTTP_SERVER_MOJOM_COMMON_H_
#define MOJO_SERVICES_HTTP_SERVER_INTERFACES_HTTP_SERVER_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/http_server/interfaces/http_server.mojom-internal.h"
#include "mojo/services/http_server/interfaces/http_request.mojom-common.h"
#include "mojo/services/http_server/interfaces/http_response.mojom-common.h"
namespace http_server {

// --- Interface Forward Declarations ---
class HttpServer;
class HttpServerRequestValidator;
class HttpServerResponseValidator;
class HttpServer_Synchronous;
class HttpHandler;
class HttpHandlerRequestValidator;
class HttpHandlerResponseValidator;
class HttpHandler_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class HttpServer_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = HttpServerRequestValidator;
  using ResponseValidator_ = HttpServerResponseValidator;
  using Synchronous_ = HttpServer_Synchronous;
  enum class MessageOrdinals : uint32_t {
    SetHandler = 0,
    GetPort = 1,
  };


  virtual ~HttpServer_Base() {}
};

}  // namespace internal

// Async interface declaration

class HttpServerProxy;
class HttpServerStub;
class HttpServer_Synchronous;

class HttpServerRequestValidator;
class HttpServerResponseValidator;

class HttpServer : public internal::HttpServer_Base {
 public:
  virtual ~HttpServer() override {}

  using Proxy_ = HttpServerProxy;
  using Stub_ = HttpServerStub;
  using SetHandlerCallback = mojo::Callback<void(bool)>;
  virtual void SetHandler(const mojo::String& pattern, mojo::InterfaceHandle<HttpHandler> handler, const SetHandlerCallback& callback) = 0;
  using GetPortCallback = mojo::Callback<void(uint16_t)>;
  virtual void GetPort(const GetPortCallback& callback) = 0;
};

namespace internal {
class HttpHandler_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = HttpHandlerRequestValidator;
  using ResponseValidator_ = HttpHandlerResponseValidator;
  using Synchronous_ = HttpHandler_Synchronous;
  enum class MessageOrdinals : uint32_t {
    HandleRequest = 0,
  };


  virtual ~HttpHandler_Base() {}
};

}  // namespace internal

// Async interface declaration

class HttpHandlerProxy;
class HttpHandlerStub;
class HttpHandler_Synchronous;

class HttpHandlerRequestValidator;
class HttpHandlerResponseValidator;

class HttpHandler : public internal::HttpHandler_Base {
 public:
  virtual ~HttpHandler() override {}

  using Proxy_ = HttpHandlerProxy;
  using Stub_ = HttpHandlerStub;
  using HandleRequestCallback = mojo::Callback<void(http_server::HttpResponsePtr)>;
  virtual void HandleRequest(http_server::HttpRequestPtr request, const HandleRequestCallback& callback) = 0;
};

}  // namespace http_server

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace http_server {

// --- Interface Request Validators ---
class HttpServerRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class HttpHandlerRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class HttpServerResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class HttpHandlerResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class HttpServer_SetHandler_Params;

using HttpServer_SetHandler_ParamsPtr = mojo::StructPtr<HttpServer_SetHandler_Params>;


size_t GetSerializedSize_(const HttpServer_SetHandler_Params& input);
mojo::internal::ValidationError Serialize_(
    HttpServer_SetHandler_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HttpServer_SetHandler_Params_Data** output);
void Deserialize_(internal::HttpServer_SetHandler_Params_Data* input,
                  HttpServer_SetHandler_Params* output);

class HttpServer_SetHandler_Params {
 public:
  using Data_ = internal::HttpServer_SetHandler_Params_Data;

  static HttpServer_SetHandler_ParamsPtr New();

  template <typename U>
  static HttpServer_SetHandler_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpServer_SetHandler_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpServer_SetHandler_Params>::Convert(*this);
  }

  HttpServer_SetHandler_Params();
  ~HttpServer_SetHandler_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const HttpServer_SetHandler_Params& other) const;

  mojo::String pattern;
  mojo::InterfaceHandle<HttpHandler> handler;
};



class HttpServer_SetHandler_ResponseParams;

using HttpServer_SetHandler_ResponseParamsPtr = mojo::InlinedStructPtr<HttpServer_SetHandler_ResponseParams>;


size_t GetSerializedSize_(const HttpServer_SetHandler_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HttpServer_SetHandler_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HttpServer_SetHandler_ResponseParams_Data** output);
void Deserialize_(internal::HttpServer_SetHandler_ResponseParams_Data* input,
                  HttpServer_SetHandler_ResponseParams* output);

class HttpServer_SetHandler_ResponseParams {
 public:
  using Data_ = internal::HttpServer_SetHandler_ResponseParams_Data;

  static HttpServer_SetHandler_ResponseParamsPtr New();

  template <typename U>
  static HttpServer_SetHandler_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpServer_SetHandler_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpServer_SetHandler_ResponseParams>::Convert(*this);
  }

  HttpServer_SetHandler_ResponseParams();
  ~HttpServer_SetHandler_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HttpServer_SetHandler_ResponseParamsPtr Clone() const;
  bool Equals(const HttpServer_SetHandler_ResponseParams& other) const;

  bool success;
};



class HttpServer_GetPort_Params;

using HttpServer_GetPort_ParamsPtr = mojo::InlinedStructPtr<HttpServer_GetPort_Params>;


size_t GetSerializedSize_(const HttpServer_GetPort_Params& input);
mojo::internal::ValidationError Serialize_(
    HttpServer_GetPort_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HttpServer_GetPort_Params_Data** output);
void Deserialize_(internal::HttpServer_GetPort_Params_Data* input,
                  HttpServer_GetPort_Params* output);

class HttpServer_GetPort_Params {
 public:
  using Data_ = internal::HttpServer_GetPort_Params_Data;

  static HttpServer_GetPort_ParamsPtr New();

  template <typename U>
  static HttpServer_GetPort_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpServer_GetPort_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpServer_GetPort_Params>::Convert(*this);
  }

  HttpServer_GetPort_Params();
  ~HttpServer_GetPort_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HttpServer_GetPort_ParamsPtr Clone() const;
  bool Equals(const HttpServer_GetPort_Params& other) const;

};



class HttpServer_GetPort_ResponseParams;

using HttpServer_GetPort_ResponseParamsPtr = mojo::InlinedStructPtr<HttpServer_GetPort_ResponseParams>;


size_t GetSerializedSize_(const HttpServer_GetPort_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HttpServer_GetPort_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HttpServer_GetPort_ResponseParams_Data** output);
void Deserialize_(internal::HttpServer_GetPort_ResponseParams_Data* input,
                  HttpServer_GetPort_ResponseParams* output);

class HttpServer_GetPort_ResponseParams {
 public:
  using Data_ = internal::HttpServer_GetPort_ResponseParams_Data;

  static HttpServer_GetPort_ResponseParamsPtr New();

  template <typename U>
  static HttpServer_GetPort_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpServer_GetPort_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpServer_GetPort_ResponseParams>::Convert(*this);
  }

  HttpServer_GetPort_ResponseParams();
  ~HttpServer_GetPort_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  HttpServer_GetPort_ResponseParamsPtr Clone() const;
  bool Equals(const HttpServer_GetPort_ResponseParams& other) const;

  uint16_t port;
};


      

class HttpHandler_HandleRequest_Params;

using HttpHandler_HandleRequest_ParamsPtr = mojo::StructPtr<HttpHandler_HandleRequest_Params>;


size_t GetSerializedSize_(const HttpHandler_HandleRequest_Params& input);
mojo::internal::ValidationError Serialize_(
    HttpHandler_HandleRequest_Params* input,
    mojo::internal::Buffer* buffer,
    internal::HttpHandler_HandleRequest_Params_Data** output);
void Deserialize_(internal::HttpHandler_HandleRequest_Params_Data* input,
                  HttpHandler_HandleRequest_Params* output);

class HttpHandler_HandleRequest_Params {
 public:
  using Data_ = internal::HttpHandler_HandleRequest_Params_Data;

  static HttpHandler_HandleRequest_ParamsPtr New();

  template <typename U>
  static HttpHandler_HandleRequest_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpHandler_HandleRequest_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpHandler_HandleRequest_Params>::Convert(*this);
  }

  HttpHandler_HandleRequest_Params();
  ~HttpHandler_HandleRequest_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const HttpHandler_HandleRequest_Params& other) const;

  http_server::HttpRequestPtr request;
};



class HttpHandler_HandleRequest_ResponseParams;

using HttpHandler_HandleRequest_ResponseParamsPtr = mojo::StructPtr<HttpHandler_HandleRequest_ResponseParams>;


size_t GetSerializedSize_(const HttpHandler_HandleRequest_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    HttpHandler_HandleRequest_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::HttpHandler_HandleRequest_ResponseParams_Data** output);
void Deserialize_(internal::HttpHandler_HandleRequest_ResponseParams_Data* input,
                  HttpHandler_HandleRequest_ResponseParams* output);

class HttpHandler_HandleRequest_ResponseParams {
 public:
  using Data_ = internal::HttpHandler_HandleRequest_ResponseParams_Data;

  static HttpHandler_HandleRequest_ResponseParamsPtr New();

  template <typename U>
  static HttpHandler_HandleRequest_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<HttpHandler_HandleRequest_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, HttpHandler_HandleRequest_ResponseParams>::Convert(*this);
  }

  HttpHandler_HandleRequest_ResponseParams();
  ~HttpHandler_HandleRequest_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const HttpHandler_HandleRequest_ResponseParams& other) const;

  http_server::HttpResponsePtr response;
};


}  // namespace http_server

#endif  // MOJO_SERVICES_HTTP_SERVER_INTERFACES_HTTP_SERVER_MOJOM_COMMON_H_
