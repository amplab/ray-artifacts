// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/native_viewport/interfaces/native_viewport.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
ViewportMetrics_Data* ViewportMetrics_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ViewportMetrics_Data))) ViewportMetrics_Data();
}

// static
mojo::internal::ValidationError ViewportMetrics_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ViewportMetrics_Data* object = static_cast<const ViewportMetrics_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->size.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null size field in ViewportMetrics struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->size.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Size::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->size.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ViewportMetrics_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->size, handles);
}

void ViewportMetrics_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->size, handles);
}

ViewportMetrics_Data::ViewportMetrics_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
SurfaceConfiguration_Data* SurfaceConfiguration_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(SurfaceConfiguration_Data))) SurfaceConfiguration_Data();
}

// static
mojo::internal::ValidationError SurfaceConfiguration_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SurfaceConfiguration_Data* object = static_cast<const SurfaceConfiguration_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void SurfaceConfiguration_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void SurfaceConfiguration_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

SurfaceConfiguration_Data::SurfaceConfiguration_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
NativeViewport_Create_Params_Data* NativeViewport_Create_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_Create_Params_Data))) NativeViewport_Create_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_Create_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_Create_Params_Data* object = static_cast<const NativeViewport_Create_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->size.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null size field in NativeViewport_Create_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->size.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Size::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->size.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->requested_configuration.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = SurfaceConfiguration::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->requested_configuration.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_Create_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->size, handles);
  mojo::internal::Encode(&this->requested_configuration, handles);
}

void NativeViewport_Create_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->size, handles);
  mojo::internal::Decode(&this->requested_configuration, handles);
}

NativeViewport_Create_Params_Data::NativeViewport_Create_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
NativeViewport_Create_ResponseParams_Data* NativeViewport_Create_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_Create_ResponseParams_Data))) NativeViewport_Create_ResponseParams_Data();
}

// static
mojo::internal::ValidationError NativeViewport_Create_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_Create_ResponseParams_Data* object = static_cast<const NativeViewport_Create_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->metrics.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null metrics field in NativeViewport_Create_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->metrics.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = ViewportMetrics::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->metrics.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_Create_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->metrics, handles);
}

void NativeViewport_Create_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->metrics, handles);
}

NativeViewport_Create_ResponseParams_Data::NativeViewport_Create_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NativeViewport_Show_Params_Data* NativeViewport_Show_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_Show_Params_Data))) NativeViewport_Show_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_Show_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_Show_Params_Data* object = static_cast<const NativeViewport_Show_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_Show_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void NativeViewport_Show_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

NativeViewport_Show_Params_Data::NativeViewport_Show_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NativeViewport_Hide_Params_Data* NativeViewport_Hide_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_Hide_Params_Data))) NativeViewport_Hide_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_Hide_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_Hide_Params_Data* object = static_cast<const NativeViewport_Hide_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_Hide_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void NativeViewport_Hide_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

NativeViewport_Hide_Params_Data::NativeViewport_Hide_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NativeViewport_Close_Params_Data* NativeViewport_Close_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_Close_Params_Data))) NativeViewport_Close_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_Close_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_Close_Params_Data* object = static_cast<const NativeViewport_Close_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_Close_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void NativeViewport_Close_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

NativeViewport_Close_Params_Data::NativeViewport_Close_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NativeViewport_SetSize_Params_Data* NativeViewport_SetSize_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_SetSize_Params_Data))) NativeViewport_SetSize_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_SetSize_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_SetSize_Params_Data* object = static_cast<const NativeViewport_SetSize_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->size.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null size field in NativeViewport_SetSize_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->size.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Size::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->size.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_SetSize_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->size, handles);
}

void NativeViewport_SetSize_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->size, handles);
}

NativeViewport_SetSize_Params_Data::NativeViewport_SetSize_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NativeViewport_SetEventDispatcher_Params_Data* NativeViewport_SetEventDispatcher_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_SetEventDispatcher_Params_Data))) NativeViewport_SetEventDispatcher_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_SetEventDispatcher_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_SetEventDispatcher_Params_Data* object = static_cast<const NativeViewport_SetEventDispatcher_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle dispatcher_handle = object->dispatcher.handle;
  if (dispatcher_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid dispatcher field in NativeViewport_SetEventDispatcher_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(dispatcher_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_SetEventDispatcher_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->dispatcher, handles);
}

void NativeViewport_SetEventDispatcher_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->dispatcher, handles);
}

NativeViewport_SetEventDispatcher_Params_Data::NativeViewport_SetEventDispatcher_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NativeViewport_GetContextProvider_Params_Data* NativeViewport_GetContextProvider_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_GetContextProvider_Params_Data))) NativeViewport_GetContextProvider_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_GetContextProvider_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_GetContextProvider_Params_Data* object = static_cast<const NativeViewport_GetContextProvider_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle provider_handle = object->provider;
  if (provider_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid provider field in NativeViewport_GetContextProvider_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(provider_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_GetContextProvider_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->provider, handles);
}

void NativeViewport_GetContextProvider_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->provider, handles);
}

NativeViewport_GetContextProvider_Params_Data::NativeViewport_GetContextProvider_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NativeViewport_RequestMetrics_Params_Data* NativeViewport_RequestMetrics_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_RequestMetrics_Params_Data))) NativeViewport_RequestMetrics_Params_Data();
}

// static
mojo::internal::ValidationError NativeViewport_RequestMetrics_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_RequestMetrics_Params_Data* object = static_cast<const NativeViewport_RequestMetrics_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_RequestMetrics_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void NativeViewport_RequestMetrics_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

NativeViewport_RequestMetrics_Params_Data::NativeViewport_RequestMetrics_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
NativeViewport_RequestMetrics_ResponseParams_Data* NativeViewport_RequestMetrics_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NativeViewport_RequestMetrics_ResponseParams_Data))) NativeViewport_RequestMetrics_ResponseParams_Data();
}

// static
mojo::internal::ValidationError NativeViewport_RequestMetrics_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NativeViewport_RequestMetrics_ResponseParams_Data* object = static_cast<const NativeViewport_RequestMetrics_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->metrics.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null metrics field in NativeViewport_RequestMetrics_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->metrics.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = ViewportMetrics::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->metrics.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NativeViewport_RequestMetrics_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->metrics, handles);
}

void NativeViewport_RequestMetrics_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->metrics, handles);
}

NativeViewport_RequestMetrics_ResponseParams_Data::NativeViewport_RequestMetrics_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError NativeViewportRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'NativeViewport', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::NativeViewport_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NativeViewport_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NativeViewport_Base::MessageOrdinals::Create: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_Create_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Show: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_Show_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Hide: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_Hide_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::Close: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_Close_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::SetSize: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_SetSize_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::SetEventDispatcher: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_SetEventDispatcher_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::GetContextProvider: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_GetContextProvider_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::RequestMetrics: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NativeViewport', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NativeViewport_RequestMetrics_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'NativeViewport'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError NativeViewportResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'NativeViewport', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'NativeViewport', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::NativeViewport_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NativeViewport_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NativeViewport_Base::MessageOrdinals::Create: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::NativeViewport_Create_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'NativeViewport',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NativeViewport_Base::MessageOrdinals::RequestMetrics: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::NativeViewport_RequestMetrics_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'NativeViewport',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'NativeViewport'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::NativeViewport_Base::Name_[] = "mojo::NativeViewport";
const uint32_t internal::NativeViewport_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
ViewportMetricsPtr ViewportMetrics::New() {
  ViewportMetricsPtr rv;
  mojo::internal::StructHelper<ViewportMetrics>::Initialize(&rv);
  return rv;
}

ViewportMetrics::ViewportMetrics()
    : size(),
      device_pixel_ratio(1.0f) {
}

ViewportMetrics::~ViewportMetrics() {
}


ViewportMetricsPtr ViewportMetrics::Clone() const {
  ViewportMetricsPtr rv(New());
  rv->size = size.Clone();
  rv->device_pixel_ratio = device_pixel_ratio;
  return rv;
}


bool ViewportMetrics::Equals(const ViewportMetrics& other) const {
  if (!mojo::internal::ValueTraits<mojo::SizePtr>::Equals(this->size, other.size))
    return false;
  if (!mojo::internal::ValueTraits<float>::Equals(this->device_pixel_ratio, other.device_pixel_ratio))
    return false;
  return true;
}


// static
SurfaceConfigurationPtr SurfaceConfiguration::New() {
  SurfaceConfigurationPtr rv;
  mojo::internal::StructHelper<SurfaceConfiguration>::Initialize(&rv);
  return rv;
}

SurfaceConfiguration::SurfaceConfiguration()
    : red_bits(8U),
      green_bits(8U),
      blue_bits(8U),
      alpha_bits(8U),
      depth_bits(),
      stencil_bits() {
}

SurfaceConfiguration::~SurfaceConfiguration() {
}


SurfaceConfigurationPtr SurfaceConfiguration::Clone() const {
  SurfaceConfigurationPtr rv(New());
  rv->red_bits = red_bits;
  rv->green_bits = green_bits;
  rv->blue_bits = blue_bits;
  rv->alpha_bits = alpha_bits;
  rv->depth_bits = depth_bits;
  rv->stencil_bits = stencil_bits;
  return rv;
}


bool SurfaceConfiguration::Equals(const SurfaceConfiguration& other) const {
  if (!mojo::internal::ValueTraits<uint8_t>::Equals(this->red_bits, other.red_bits))
    return false;
  if (!mojo::internal::ValueTraits<uint8_t>::Equals(this->green_bits, other.green_bits))
    return false;
  if (!mojo::internal::ValueTraits<uint8_t>::Equals(this->blue_bits, other.blue_bits))
    return false;
  if (!mojo::internal::ValueTraits<uint8_t>::Equals(this->alpha_bits, other.alpha_bits))
    return false;
  if (!mojo::internal::ValueTraits<uint8_t>::Equals(this->depth_bits, other.depth_bits))
    return false;
  if (!mojo::internal::ValueTraits<uint8_t>::Equals(this->stencil_bits, other.stencil_bits))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t ViewportMetrics::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ViewportMetrics::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ViewportMetrics_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ViewportMetrics::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ViewportMetrics_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ViewportMetrics::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ViewportMetrics_Data* input =
      static_cast<internal::ViewportMetrics_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ViewportMetrics& input) {
  size_t size = sizeof(internal::ViewportMetrics_Data);
  size += input.size.is_null()
              ? 0
              : GetSerializedSize_(*input.size);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ViewportMetrics* input,
    mojo::internal::Buffer* buf,
    internal::ViewportMetrics_Data** output) {
  if (input) {
    internal::ViewportMetrics_Data* result =
        internal::ViewportMetrics_Data::New(buf);
    {auto retval =Serialize_(input->size.get(),
                 buf,
                 &result->size.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->size.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null size in ViewportMetrics struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->device_pixel_ratio = input->device_pixel_ratio;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ViewportMetrics_Data* input,
                  ViewportMetrics* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->size.ptr) {
        result->size = mojo::Size::New();
        Deserialize_(input->size.ptr, result->size.get());
      }
      result->device_pixel_ratio = input->device_pixel_ratio;
    } while (false);
  }
}


size_t SurfaceConfiguration::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool SurfaceConfiguration::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::SurfaceConfiguration_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool SurfaceConfiguration::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::SurfaceConfiguration_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void SurfaceConfiguration::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::SurfaceConfiguration_Data* input =
      static_cast<internal::SurfaceConfiguration_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const SurfaceConfiguration& input) {
  size_t size = sizeof(internal::SurfaceConfiguration_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    SurfaceConfiguration* input,
    mojo::internal::Buffer* buf,
    internal::SurfaceConfiguration_Data** output) {
  if (input) {
    internal::SurfaceConfiguration_Data* result =
        internal::SurfaceConfiguration_Data::New(buf);
    result->red_bits = input->red_bits;
    result->green_bits = input->green_bits;
    result->blue_bits = input->blue_bits;
    result->alpha_bits = input->alpha_bits;
    result->depth_bits = input->depth_bits;
    result->stencil_bits = input->stencil_bits;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::SurfaceConfiguration_Data* input,
                  SurfaceConfiguration* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->red_bits = input->red_bits;
      result->green_bits = input->green_bits;
      result->blue_bits = input->blue_bits;
      result->alpha_bits = input->alpha_bits;
      result->depth_bits = input->depth_bits;
      result->stencil_bits = input->stencil_bits;
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
NativeViewport_Create_ParamsPtr NativeViewport_Create_Params::New() {
  NativeViewport_Create_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_Create_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_Create_Params::NativeViewport_Create_Params()
    : size(),
      requested_configuration() {
}

NativeViewport_Create_Params::~NativeViewport_Create_Params() {
}


NativeViewport_Create_ParamsPtr NativeViewport_Create_Params::Clone() const {
  NativeViewport_Create_ParamsPtr rv(New());
  rv->size = size.Clone();
  rv->requested_configuration = requested_configuration.Clone();
  return rv;
}


bool NativeViewport_Create_Params::Equals(const NativeViewport_Create_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::SizePtr>::Equals(this->size, other.size))
    return false;
  if (!mojo::internal::ValueTraits<SurfaceConfigurationPtr>::Equals(this->requested_configuration, other.requested_configuration))
    return false;
  return true;
}


size_t NativeViewport_Create_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_Create_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_Create_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_Create_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_Create_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_Create_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_Create_Params_Data* input =
      static_cast<internal::NativeViewport_Create_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_Create_Params& input) {
  size_t size = sizeof(internal::NativeViewport_Create_Params_Data);
  size += input.size.is_null()
              ? 0
              : GetSerializedSize_(*input.size);
  size += input.requested_configuration.is_null()
              ? 0
              : GetSerializedSize_(*input.requested_configuration);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_Create_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_Create_Params_Data** output) {
  if (input) {
    internal::NativeViewport_Create_Params_Data* result =
        internal::NativeViewport_Create_Params_Data::New(buf);
    {auto retval =Serialize_(input->size.get(),
                 buf,
                 &result->size.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->size.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null size in NativeViewport_Create_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->requested_configuration.get(),
                 buf,
                 &result->requested_configuration.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_Create_Params_Data* input,
                  NativeViewport_Create_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->size.ptr) {
        result->size = mojo::Size::New();
        Deserialize_(input->size.ptr, result->size.get());
      }
      if (input->requested_configuration.ptr) {
        result->requested_configuration = SurfaceConfiguration::New();
        Deserialize_(input->requested_configuration.ptr, result->requested_configuration.get());
      }
    } while (false);
  }
}


// static
NativeViewport_Create_ResponseParamsPtr NativeViewport_Create_ResponseParams::New() {
  NativeViewport_Create_ResponseParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_Create_ResponseParams>::Initialize(&rv);
  return rv;
}

NativeViewport_Create_ResponseParams::NativeViewport_Create_ResponseParams()
    : metrics() {
}

NativeViewport_Create_ResponseParams::~NativeViewport_Create_ResponseParams() {
}


NativeViewport_Create_ResponseParamsPtr NativeViewport_Create_ResponseParams::Clone() const {
  NativeViewport_Create_ResponseParamsPtr rv(New());
  rv->metrics = metrics.Clone();
  return rv;
}


bool NativeViewport_Create_ResponseParams::Equals(const NativeViewport_Create_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<ViewportMetricsPtr>::Equals(this->metrics, other.metrics))
    return false;
  return true;
}


size_t NativeViewport_Create_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_Create_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_Create_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_Create_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_Create_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_Create_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_Create_ResponseParams_Data* input =
      static_cast<internal::NativeViewport_Create_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_Create_ResponseParams& input) {
  size_t size = sizeof(internal::NativeViewport_Create_ResponseParams_Data);
  size += input.metrics.is_null()
              ? 0
              : GetSerializedSize_(*input.metrics);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_Create_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_Create_ResponseParams_Data** output) {
  if (input) {
    internal::NativeViewport_Create_ResponseParams_Data* result =
        internal::NativeViewport_Create_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->metrics.get(),
                 buf,
                 &result->metrics.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->metrics.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null metrics in NativeViewport_Create_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_Create_ResponseParams_Data* input,
                  NativeViewport_Create_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->metrics.ptr) {
        result->metrics = ViewportMetrics::New();
        Deserialize_(input->metrics.ptr, result->metrics.get());
      }
    } while (false);
  }
}



// static
NativeViewport_Show_ParamsPtr NativeViewport_Show_Params::New() {
  NativeViewport_Show_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_Show_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_Show_Params::NativeViewport_Show_Params() {
}

NativeViewport_Show_Params::~NativeViewport_Show_Params() {
}


NativeViewport_Show_ParamsPtr NativeViewport_Show_Params::Clone() const {
  NativeViewport_Show_ParamsPtr rv(New());
  return rv;
}


bool NativeViewport_Show_Params::Equals(const NativeViewport_Show_Params& other) const {
  return true;
}


size_t NativeViewport_Show_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_Show_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_Show_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_Show_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_Show_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_Show_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_Show_Params_Data* input =
      static_cast<internal::NativeViewport_Show_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_Show_Params& input) {
  size_t size = sizeof(internal::NativeViewport_Show_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_Show_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_Show_Params_Data** output) {
  if (input) {
    internal::NativeViewport_Show_Params_Data* result =
        internal::NativeViewport_Show_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_Show_Params_Data* input,
                  NativeViewport_Show_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
NativeViewport_Hide_ParamsPtr NativeViewport_Hide_Params::New() {
  NativeViewport_Hide_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_Hide_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_Hide_Params::NativeViewport_Hide_Params() {
}

NativeViewport_Hide_Params::~NativeViewport_Hide_Params() {
}


NativeViewport_Hide_ParamsPtr NativeViewport_Hide_Params::Clone() const {
  NativeViewport_Hide_ParamsPtr rv(New());
  return rv;
}


bool NativeViewport_Hide_Params::Equals(const NativeViewport_Hide_Params& other) const {
  return true;
}


size_t NativeViewport_Hide_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_Hide_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_Hide_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_Hide_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_Hide_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_Hide_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_Hide_Params_Data* input =
      static_cast<internal::NativeViewport_Hide_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_Hide_Params& input) {
  size_t size = sizeof(internal::NativeViewport_Hide_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_Hide_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_Hide_Params_Data** output) {
  if (input) {
    internal::NativeViewport_Hide_Params_Data* result =
        internal::NativeViewport_Hide_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_Hide_Params_Data* input,
                  NativeViewport_Hide_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
NativeViewport_Close_ParamsPtr NativeViewport_Close_Params::New() {
  NativeViewport_Close_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_Close_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_Close_Params::NativeViewport_Close_Params() {
}

NativeViewport_Close_Params::~NativeViewport_Close_Params() {
}


NativeViewport_Close_ParamsPtr NativeViewport_Close_Params::Clone() const {
  NativeViewport_Close_ParamsPtr rv(New());
  return rv;
}


bool NativeViewport_Close_Params::Equals(const NativeViewport_Close_Params& other) const {
  return true;
}


size_t NativeViewport_Close_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_Close_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_Close_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_Close_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_Close_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_Close_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_Close_Params_Data* input =
      static_cast<internal::NativeViewport_Close_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_Close_Params& input) {
  size_t size = sizeof(internal::NativeViewport_Close_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_Close_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_Close_Params_Data** output) {
  if (input) {
    internal::NativeViewport_Close_Params_Data* result =
        internal::NativeViewport_Close_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_Close_Params_Data* input,
                  NativeViewport_Close_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
NativeViewport_SetSize_ParamsPtr NativeViewport_SetSize_Params::New() {
  NativeViewport_SetSize_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_SetSize_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_SetSize_Params::NativeViewport_SetSize_Params()
    : size() {
}

NativeViewport_SetSize_Params::~NativeViewport_SetSize_Params() {
}


NativeViewport_SetSize_ParamsPtr NativeViewport_SetSize_Params::Clone() const {
  NativeViewport_SetSize_ParamsPtr rv(New());
  rv->size = size.Clone();
  return rv;
}


bool NativeViewport_SetSize_Params::Equals(const NativeViewport_SetSize_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::SizePtr>::Equals(this->size, other.size))
    return false;
  return true;
}


size_t NativeViewport_SetSize_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_SetSize_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_SetSize_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_SetSize_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_SetSize_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_SetSize_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_SetSize_Params_Data* input =
      static_cast<internal::NativeViewport_SetSize_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_SetSize_Params& input) {
  size_t size = sizeof(internal::NativeViewport_SetSize_Params_Data);
  size += input.size.is_null()
              ? 0
              : GetSerializedSize_(*input.size);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_SetSize_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_SetSize_Params_Data** output) {
  if (input) {
    internal::NativeViewport_SetSize_Params_Data* result =
        internal::NativeViewport_SetSize_Params_Data::New(buf);
    {auto retval =Serialize_(input->size.get(),
                 buf,
                 &result->size.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->size.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null size in NativeViewport_SetSize_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_SetSize_Params_Data* input,
                  NativeViewport_SetSize_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->size.ptr) {
        result->size = mojo::Size::New();
        Deserialize_(input->size.ptr, result->size.get());
      }
    } while (false);
  }
}



// static
NativeViewport_SetEventDispatcher_ParamsPtr NativeViewport_SetEventDispatcher_Params::New() {
  NativeViewport_SetEventDispatcher_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_SetEventDispatcher_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_SetEventDispatcher_Params::NativeViewport_SetEventDispatcher_Params()
    : dispatcher() {
}

NativeViewport_SetEventDispatcher_Params::~NativeViewport_SetEventDispatcher_Params() {
}



bool NativeViewport_SetEventDispatcher_Params::Equals(const NativeViewport_SetEventDispatcher_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<mojo::NativeViewportEventDispatcher>>::Equals(this->dispatcher, other.dispatcher))
    return false;
  return true;
}


size_t NativeViewport_SetEventDispatcher_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_SetEventDispatcher_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_SetEventDispatcher_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_SetEventDispatcher_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_SetEventDispatcher_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_SetEventDispatcher_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_SetEventDispatcher_Params_Data* input =
      static_cast<internal::NativeViewport_SetEventDispatcher_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_SetEventDispatcher_Params& input) {
  size_t size = sizeof(internal::NativeViewport_SetEventDispatcher_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_SetEventDispatcher_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_SetEventDispatcher_Params_Data** output) {
  if (input) {
    internal::NativeViewport_SetEventDispatcher_Params_Data* result =
        internal::NativeViewport_SetEventDispatcher_Params_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->dispatcher.Pass(),
                                          &result->dispatcher);
    if (!result->dispatcher.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid dispatcher in NativeViewport_SetEventDispatcher_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_SetEventDispatcher_Params_Data* input,
                  NativeViewport_SetEventDispatcher_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->dispatcher, &result->dispatcher);
    } while (false);
  }
}



// static
NativeViewport_GetContextProvider_ParamsPtr NativeViewport_GetContextProvider_Params::New() {
  NativeViewport_GetContextProvider_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_GetContextProvider_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_GetContextProvider_Params::NativeViewport_GetContextProvider_Params()
    : provider() {
}

NativeViewport_GetContextProvider_Params::~NativeViewport_GetContextProvider_Params() {
}



bool NativeViewport_GetContextProvider_Params::Equals(const NativeViewport_GetContextProvider_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::ContextProvider>>::Equals(this->provider, other.provider))
    return false;
  return true;
}


size_t NativeViewport_GetContextProvider_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_GetContextProvider_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_GetContextProvider_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_GetContextProvider_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_GetContextProvider_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_GetContextProvider_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_GetContextProvider_Params_Data* input =
      static_cast<internal::NativeViewport_GetContextProvider_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_GetContextProvider_Params& input) {
  size_t size = sizeof(internal::NativeViewport_GetContextProvider_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_GetContextProvider_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_GetContextProvider_Params_Data** output) {
  if (input) {
    internal::NativeViewport_GetContextProvider_Params_Data* result =
        internal::NativeViewport_GetContextProvider_Params_Data::New(buf);
    result->provider = input->provider.PassMessagePipe().release();
    if (!result->provider.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid provider in NativeViewport_GetContextProvider_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_GetContextProvider_Params_Data* input,
                  NativeViewport_GetContextProvider_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->provider.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->provider)));
    } while (false);
  }
}



// static
NativeViewport_RequestMetrics_ParamsPtr NativeViewport_RequestMetrics_Params::New() {
  NativeViewport_RequestMetrics_ParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_RequestMetrics_Params>::Initialize(&rv);
  return rv;
}

NativeViewport_RequestMetrics_Params::NativeViewport_RequestMetrics_Params() {
}

NativeViewport_RequestMetrics_Params::~NativeViewport_RequestMetrics_Params() {
}


NativeViewport_RequestMetrics_ParamsPtr NativeViewport_RequestMetrics_Params::Clone() const {
  NativeViewport_RequestMetrics_ParamsPtr rv(New());
  return rv;
}


bool NativeViewport_RequestMetrics_Params::Equals(const NativeViewport_RequestMetrics_Params& other) const {
  return true;
}


size_t NativeViewport_RequestMetrics_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_RequestMetrics_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_RequestMetrics_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_RequestMetrics_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_RequestMetrics_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_RequestMetrics_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_RequestMetrics_Params_Data* input =
      static_cast<internal::NativeViewport_RequestMetrics_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_RequestMetrics_Params& input) {
  size_t size = sizeof(internal::NativeViewport_RequestMetrics_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_RequestMetrics_Params* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_RequestMetrics_Params_Data** output) {
  if (input) {
    internal::NativeViewport_RequestMetrics_Params_Data* result =
        internal::NativeViewport_RequestMetrics_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_RequestMetrics_Params_Data* input,
                  NativeViewport_RequestMetrics_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
NativeViewport_RequestMetrics_ResponseParamsPtr NativeViewport_RequestMetrics_ResponseParams::New() {
  NativeViewport_RequestMetrics_ResponseParamsPtr rv;
  mojo::internal::StructHelper<NativeViewport_RequestMetrics_ResponseParams>::Initialize(&rv);
  return rv;
}

NativeViewport_RequestMetrics_ResponseParams::NativeViewport_RequestMetrics_ResponseParams()
    : metrics() {
}

NativeViewport_RequestMetrics_ResponseParams::~NativeViewport_RequestMetrics_ResponseParams() {
}


NativeViewport_RequestMetrics_ResponseParamsPtr NativeViewport_RequestMetrics_ResponseParams::Clone() const {
  NativeViewport_RequestMetrics_ResponseParamsPtr rv(New());
  rv->metrics = metrics.Clone();
  return rv;
}


bool NativeViewport_RequestMetrics_ResponseParams::Equals(const NativeViewport_RequestMetrics_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<ViewportMetricsPtr>::Equals(this->metrics, other.metrics))
    return false;
  return true;
}


size_t NativeViewport_RequestMetrics_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NativeViewport_RequestMetrics_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NativeViewport_RequestMetrics_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NativeViewport_RequestMetrics_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NativeViewport_RequestMetrics_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NativeViewport_RequestMetrics_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NativeViewport_RequestMetrics_ResponseParams_Data* input =
      static_cast<internal::NativeViewport_RequestMetrics_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NativeViewport_RequestMetrics_ResponseParams& input) {
  size_t size = sizeof(internal::NativeViewport_RequestMetrics_ResponseParams_Data);
  size += input.metrics.is_null()
              ? 0
              : GetSerializedSize_(*input.metrics);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NativeViewport_RequestMetrics_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::NativeViewport_RequestMetrics_ResponseParams_Data** output) {
  if (input) {
    internal::NativeViewport_RequestMetrics_ResponseParams_Data* result =
        internal::NativeViewport_RequestMetrics_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->metrics.get(),
                 buf,
                 &result->metrics.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->metrics.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null metrics in NativeViewport_RequestMetrics_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NativeViewport_RequestMetrics_ResponseParams_Data* input,
                  NativeViewport_RequestMetrics_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->metrics.ptr) {
        result->metrics = ViewportMetrics::New();
        Deserialize_(input->metrics.ptr, result->metrics.get());
      }
    } while (false);
  }
}

}  // namespace mojo
