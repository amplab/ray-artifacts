// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/network/network_error.mojom
//

package network_error

import (
	sort "sort"
	fmt "fmt"
	bindings "mojo/public/go/bindings"
)


type NetworkError struct {
	Code int32
	Description *string
}


func (s *NetworkError) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(s.Code); err != nil {
		return err
	}
	if s.Description == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.Description)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkError_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *NetworkError) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkError_Versions), func(i int) bool {
		return networkError_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkError_Versions) {
		if networkError_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkError_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Code = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Description = nil
		} else {
			s.Description = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.Description) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

