// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/files/interfaces/directory.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/files/interfaces/directory.mojom-internal.h"
#include "mojo/services/files/interfaces/directory.mojom-common.h"
namespace mojo {
namespace files {

// --- Interface definitions ---
Directory_SynchronousProxy::Directory_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool Directory_SynchronousProxy::Read(mojo::files::Error* out_error, mojo::Array<mojo::files::DirectoryEntryPtr>* out_directory_contents) {
  size_t size = sizeof(internal::Directory_Read_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Directory_Base::MessageOrdinals::Read);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Directory_Read_Params_Data* out_params =
      internal::Directory_Read_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Directory_Read_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Directory_Read_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    Deserialize_(response_params->directory_contents.ptr, &(*out_directory_contents));
  } while (false);
  return true;
}
bool Directory_SynchronousProxy::Stat(mojo::files::Error* out_error, mojo::files::FileInformationPtr* out_file_information) {
  size_t size = sizeof(internal::Directory_Stat_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::Directory_Base::MessageOrdinals::Stat);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Directory_Stat_Params_Data* out_params =
      internal::Directory_Stat_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Directory_Stat_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Directory_Stat_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
    if (response_params->file_information.ptr) {
      (*out_file_information) = mojo::files::FileInformation::New();
      Deserialize_(response_params->file_information.ptr, (*out_file_information).get());
    }
  } while (false);
  return true;
}
bool Directory_SynchronousProxy::Touch(mojo::files::TimespecOrNowPtr in_atime, mojo::files::TimespecOrNowPtr in_mtime, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::Directory_Touch_Params_Data);
  size += in_atime.is_null()
              ? 0
              : GetSerializedSize_(*in_atime);
  size += in_mtime.is_null()
              ? 0
              : GetSerializedSize_(*in_mtime);

  auto msg_name = static_cast<uint32_t>(internal::Directory_Base::MessageOrdinals::Touch);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Directory_Touch_Params_Data* out_params =
      internal::Directory_Touch_Params_Data::New(builder.buffer());
  {Serialize_(in_atime.get(),
               builder.buffer(),
               &out_params->atime.ptr);
  }
  {Serialize_(in_mtime.get(),
               builder.buffer(),
               &out_params->mtime.ptr);
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Directory_Touch_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Directory_Touch_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool Directory_SynchronousProxy::OpenFile(const mojo::String& in_path, mojo::InterfaceRequest<mojo::files::File> in_file, uint32_t in_open_flags, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::Directory_OpenFile_Params_Data);
  size += GetSerializedSize_(in_path);

  auto msg_name = static_cast<uint32_t>(internal::Directory_Base::MessageOrdinals::OpenFile);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Directory_OpenFile_Params_Data* out_params =
      internal::Directory_OpenFile_Params_Data::New(builder.buffer());
  SerializeString_(in_path, builder.buffer(), &out_params->path.ptr);
  if (!out_params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in {{interface.name}}::{{method.name}}");
  }
  out_params->file = in_file.PassMessagePipe().release();
  out_params->open_flags = in_open_flags;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Directory_OpenFile_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Directory_OpenFile_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool Directory_SynchronousProxy::OpenDirectory(const mojo::String& in_path, mojo::InterfaceRequest<Directory> in_directory, uint32_t in_open_flags, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::Directory_OpenDirectory_Params_Data);
  size += GetSerializedSize_(in_path);

  auto msg_name = static_cast<uint32_t>(internal::Directory_Base::MessageOrdinals::OpenDirectory);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Directory_OpenDirectory_Params_Data* out_params =
      internal::Directory_OpenDirectory_Params_Data::New(builder.buffer());
  SerializeString_(in_path, builder.buffer(), &out_params->path.ptr);
  if (!out_params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in {{interface.name}}::{{method.name}}");
  }
  out_params->directory = in_directory.PassMessagePipe().release();
  out_params->open_flags = in_open_flags;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Directory_OpenDirectory_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Directory_OpenDirectory_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool Directory_SynchronousProxy::Rename(const mojo::String& in_path, const mojo::String& in_new_path, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::Directory_Rename_Params_Data);
  size += GetSerializedSize_(in_path);
  size += GetSerializedSize_(in_new_path);

  auto msg_name = static_cast<uint32_t>(internal::Directory_Base::MessageOrdinals::Rename);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Directory_Rename_Params_Data* out_params =
      internal::Directory_Rename_Params_Data::New(builder.buffer());
  SerializeString_(in_path, builder.buffer(), &out_params->path.ptr);
  if (!out_params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in {{interface.name}}::{{method.name}}");
  }
  SerializeString_(in_new_path, builder.buffer(), &out_params->new_path.ptr);
  if (!out_params->new_path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null new_path in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Directory_Rename_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Directory_Rename_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
bool Directory_SynchronousProxy::Delete(const mojo::String& in_path, uint32_t in_delete_flags, mojo::files::Error* out_error) {
  size_t size = sizeof(internal::Directory_Delete_Params_Data);
  size += GetSerializedSize_(in_path);

  auto msg_name = static_cast<uint32_t>(internal::Directory_Base::MessageOrdinals::Delete);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::Directory_Delete_Params_Data* out_params =
      internal::Directory_Delete_Params_Data::New(builder.buffer());
  SerializeString_(in_path, builder.buffer(), &out_params->path.ptr);
  if (!out_params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in {{interface.name}}::{{method.name}}");
  }
  out_params->delete_flags = in_delete_flags;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::Directory_Delete_ResponseParams_Data*
      response_params = reinterpret_cast<internal::Directory_Delete_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    (*out_error) = static_cast<mojo::files::Error>(response_params->error);
  } while (false);
  return true;
}
}  // namespace files
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
