// NOTE: This file was generated by the Mojo bindings generator.
#include "shell/child_controller.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace shell {

// --- Interface definitions ---
class ChildController_StartApp_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ChildController_StartApp_ForwardToCallback(
      const ChildController::StartAppCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ChildController::StartAppCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ChildController_StartApp_ForwardToCallback);
};
bool ChildController_StartApp_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ChildController_StartApp_ResponseParams_Data* params =
      reinterpret_cast<internal::ChildController_StartApp_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  int32_t p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_result = params->result;
  } while (false);
  callback_.Run(p_result);
  return true;
}

ChildControllerProxy::ChildControllerProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ChildControllerProxy::StartApp(
    const mojo::String& in_app_path, mojo::InterfaceRequest<mojo::Application> in_application_request, const StartAppCallback& callback) {
  size_t size = sizeof(internal::ChildController_StartApp_Params_Data);
  size += GetSerializedSize_(in_app_path);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ChildController_Base::MessageOrdinals::StartApp), size);

  internal::ChildController_StartApp_Params_Data* params =
      internal::ChildController_StartApp_Params_Data::New(builder.buffer());
  SerializeString_(in_app_path, builder.buffer(), &params->app_path.ptr);
  if (!params->app_path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null app_path in ChildController.StartApp request");
  }
  params->application_request = in_application_request.PassMessagePipe().release();
  if (!params->application_request.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid application_request in ChildController.StartApp request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ChildController_StartApp_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ChildControllerProxy::ExitNow(
    int32_t in_exit_code) {
  size_t size = sizeof(internal::ChildController_ExitNow_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ChildController_Base::MessageOrdinals::ExitNow), size);

  internal::ChildController_ExitNow_Params_Data* params =
      internal::ChildController_ExitNow_Params_Data::New(builder.buffer());
  params->exit_code = in_exit_code;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ChildController_StartApp_ProxyToResponder
    : public ChildController::StartAppCallback::Runnable {
 public:
  ~ChildController_StartApp_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ChildController::StartApp(p_app_path, p_application_request.Pass(), callback) "
        "was never run.";
  }

  ChildController_StartApp_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(int32_t in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ChildController_StartApp_ProxyToResponder);
};

void ChildController_StartApp_ProxyToResponder::Run(
    int32_t in_result) const {
  size_t size = sizeof(internal::ChildController_StartApp_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ChildController_Base::MessageOrdinals::StartApp), size, request_id_);
  internal::ChildController_StartApp_ResponseParams_Data* params =
      internal::ChildController_StartApp_ResponseParams_Data::New(builder.buffer());
  params->result = in_result;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ChildControllerStub::ChildControllerStub()
    : sink_(nullptr),
      control_message_handler_(ChildController::Version_) {
}

ChildControllerStub::~ChildControllerStub() {}

bool ChildControllerStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ChildController_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ChildController_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ChildController_Base::MessageOrdinals::StartApp: {
      break;
    }
    case internal::ChildController_Base::MessageOrdinals::ExitNow: {
      internal::ChildController_ExitNow_Params_Data* params =
          reinterpret_cast<internal::ChildController_ExitNow_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_exit_code {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_exit_code = params->exit_code;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ExitNow(p_exit_code);
      return true;
    }
  }
  return false;
}

bool ChildControllerStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ChildController_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ChildController_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ChildController_Base::MessageOrdinals::StartApp: {
      internal::ChildController_StartApp_Params_Data* params =
          reinterpret_cast<internal::ChildController_StartApp_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ChildController::StartAppCallback::Runnable* runnable =
          new ChildController_StartApp_ProxyToResponder(
              message->request_id(), responder);
      ChildController::StartAppCallback callback(runnable);
      
      mojo::String p_app_path {};
      mojo::InterfaceRequest<mojo::Application> p_application_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->app_path.ptr, &p_app_path);
        p_application_request.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->application_request)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StartApp(p_app_path, p_application_request.Pass(), callback);
      return true;
    }
    case internal::ChildController_Base::MessageOrdinals::ExitNow: {
      break;
    }
  }
  return false;
}

}  // namespace shell
