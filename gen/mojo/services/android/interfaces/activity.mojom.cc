// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/android/interfaces/activity.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace activity {

// --- Interface definitions ---

ActivityProxy::ActivityProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ActivityProxy::GetUserFeedback(
    mojo::InterfaceRequest<UserFeedback> in_user_feedback) {
  size_t size = sizeof(internal::Activity_GetUserFeedback_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::GetUserFeedback), size);

  internal::Activity_GetUserFeedback_Params_Data* params =
      internal::Activity_GetUserFeedback_Params_Data::New(builder.buffer());
  params->user_feedback = in_user_feedback.PassMessagePipe().release();
  if (!params->user_feedback.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid user_feedback in Activity.GetUserFeedback request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ActivityProxy::StartActivity(
    IntentPtr in_intent) {
  size_t size = sizeof(internal::Activity_StartActivity_Params_Data);
  size += in_intent.is_null()
              ? 0
              : GetSerializedSize_(*in_intent);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::StartActivity), size);

  internal::Activity_StartActivity_Params_Data* params =
      internal::Activity_StartActivity_Params_Data::New(builder.buffer());
  {Serialize_(in_intent.get(),
               builder.buffer(),
               &params->intent.ptr);
  }
  if (!params->intent.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null intent in Activity.StartActivity request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ActivityProxy::FinishCurrentActivity(
    ) {
  size_t size = sizeof(internal::Activity_FinishCurrentActivity_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::FinishCurrentActivity), size);

  internal::Activity_FinishCurrentActivity_Params_Data* params =
      internal::Activity_FinishCurrentActivity_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ActivityProxy::SetTaskDescription(
    TaskDescriptionPtr in_description) {
  size_t size = sizeof(internal::Activity_SetTaskDescription_Params_Data);
  size += in_description.is_null()
              ? 0
              : GetSerializedSize_(*in_description);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::SetTaskDescription), size);

  internal::Activity_SetTaskDescription_Params_Data* params =
      internal::Activity_SetTaskDescription_Params_Data::New(builder.buffer());
  {Serialize_(in_description.get(),
               builder.buffer(),
               &params->description.ptr);
  }
  if (!params->description.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null description in Activity.SetTaskDescription request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ActivityProxy::SetSystemUIVisibility(
    SystemUIVisibility in_visibility) {
  size_t size = sizeof(internal::Activity_SetSystemUIVisibility_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::SetSystemUIVisibility), size);

  internal::Activity_SetSystemUIVisibility_Params_Data* params =
      internal::Activity_SetSystemUIVisibility_Params_Data::New(builder.buffer());
  params->visibility =
    static_cast<int32_t>(in_visibility);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ActivityProxy::SetRequestedOrientation(
    ScreenOrientation in_orientation) {
  size_t size = sizeof(internal::Activity_SetRequestedOrientation_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Activity_Base::MessageOrdinals::SetRequestedOrientation), size);

  internal::Activity_SetRequestedOrientation_Params_Data* params =
      internal::Activity_SetRequestedOrientation_Params_Data::New(builder.buffer());
  params->orientation =
    static_cast<int32_t>(in_orientation);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ActivityStub::ActivityStub()
    : sink_(nullptr),
      control_message_handler_(Activity::Version_) {
}

ActivityStub::~ActivityStub() {}

bool ActivityStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Activity_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Activity_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Activity_Base::MessageOrdinals::GetUserFeedback: {
      internal::Activity_GetUserFeedback_Params_Data* params =
          reinterpret_cast<internal::Activity_GetUserFeedback_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<UserFeedback> p_user_feedback {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_user_feedback.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->user_feedback)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetUserFeedback(p_user_feedback.Pass());
      return true;
    }
    case internal::Activity_Base::MessageOrdinals::StartActivity: {
      internal::Activity_StartActivity_Params_Data* params =
          reinterpret_cast<internal::Activity_StartActivity_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      IntentPtr p_intent {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->intent.ptr) {
          p_intent = Intent::New();
          Deserialize_(params->intent.ptr, p_intent.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->StartActivity(p_intent.Pass());
      return true;
    }
    case internal::Activity_Base::MessageOrdinals::FinishCurrentActivity: {
      internal::Activity_FinishCurrentActivity_Params_Data* params =
          reinterpret_cast<internal::Activity_FinishCurrentActivity_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->FinishCurrentActivity();
      return true;
    }
    case internal::Activity_Base::MessageOrdinals::SetTaskDescription: {
      internal::Activity_SetTaskDescription_Params_Data* params =
          reinterpret_cast<internal::Activity_SetTaskDescription_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      TaskDescriptionPtr p_description {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->description.ptr) {
          p_description = TaskDescription::New();
          Deserialize_(params->description.ptr, p_description.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetTaskDescription(p_description.Pass());
      return true;
    }
    case internal::Activity_Base::MessageOrdinals::SetSystemUIVisibility: {
      internal::Activity_SetSystemUIVisibility_Params_Data* params =
          reinterpret_cast<internal::Activity_SetSystemUIVisibility_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      SystemUIVisibility p_visibility {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_visibility = static_cast<SystemUIVisibility>(params->visibility);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetSystemUIVisibility(p_visibility);
      return true;
    }
    case internal::Activity_Base::MessageOrdinals::SetRequestedOrientation: {
      internal::Activity_SetRequestedOrientation_Params_Data* params =
          reinterpret_cast<internal::Activity_SetRequestedOrientation_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      ScreenOrientation p_orientation {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_orientation = static_cast<ScreenOrientation>(params->orientation);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetRequestedOrientation(p_orientation);
      return true;
    }
  }
  return false;
}

bool ActivityStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Activity_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Activity_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Activity_Base::MessageOrdinals::GetUserFeedback: {
      break;
    }
    case internal::Activity_Base::MessageOrdinals::StartActivity: {
      break;
    }
    case internal::Activity_Base::MessageOrdinals::FinishCurrentActivity: {
      break;
    }
    case internal::Activity_Base::MessageOrdinals::SetTaskDescription: {
      break;
    }
    case internal::Activity_Base::MessageOrdinals::SetSystemUIVisibility: {
      break;
    }
    case internal::Activity_Base::MessageOrdinals::SetRequestedOrientation: {
      break;
    }
  }
  return false;
}

class PathService_GetAppDataDir_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PathService_GetAppDataDir_ForwardToCallback(
      const PathService::GetAppDataDirCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PathService::GetAppDataDirCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PathService_GetAppDataDir_ForwardToCallback);
};
bool PathService_GetAppDataDir_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::PathService_GetAppDataDir_ResponseParams_Data* params =
      reinterpret_cast<internal::PathService_GetAppDataDir_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_path {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->path.ptr, &p_path);
  } while (false);
  callback_.Run(p_path);
  return true;
}
class PathService_GetFilesDir_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PathService_GetFilesDir_ForwardToCallback(
      const PathService::GetFilesDirCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PathService::GetFilesDirCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PathService_GetFilesDir_ForwardToCallback);
};
bool PathService_GetFilesDir_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::PathService_GetFilesDir_ResponseParams_Data* params =
      reinterpret_cast<internal::PathService_GetFilesDir_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_path {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->path.ptr, &p_path);
  } while (false);
  callback_.Run(p_path);
  return true;
}
class PathService_GetCacheDir_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PathService_GetCacheDir_ForwardToCallback(
      const PathService::GetCacheDirCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  PathService::GetCacheDirCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PathService_GetCacheDir_ForwardToCallback);
};
bool PathService_GetCacheDir_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::PathService_GetCacheDir_ResponseParams_Data* params =
      reinterpret_cast<internal::PathService_GetCacheDir_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_path {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->path.ptr, &p_path);
  } while (false);
  callback_.Run(p_path);
  return true;
}

PathServiceProxy::PathServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void PathServiceProxy::GetAppDataDir(
    const GetAppDataDirCallback& callback) {
  size_t size = sizeof(internal::PathService_GetAppDataDir_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetAppDataDir), size);

  internal::PathService_GetAppDataDir_Params_Data* params =
      internal::PathService_GetAppDataDir_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new PathService_GetAppDataDir_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PathServiceProxy::GetFilesDir(
    const GetFilesDirCallback& callback) {
  size_t size = sizeof(internal::PathService_GetFilesDir_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetFilesDir), size);

  internal::PathService_GetFilesDir_Params_Data* params =
      internal::PathService_GetFilesDir_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new PathService_GetFilesDir_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void PathServiceProxy::GetCacheDir(
    const GetCacheDirCallback& callback) {
  size_t size = sizeof(internal::PathService_GetCacheDir_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetCacheDir), size);

  internal::PathService_GetCacheDir_Params_Data* params =
      internal::PathService_GetCacheDir_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new PathService_GetCacheDir_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class PathService_GetAppDataDir_ProxyToResponder
    : public PathService::GetAppDataDirCallback::Runnable {
 public:
  ~PathService_GetAppDataDir_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "PathService::GetAppDataDir(callback) "
        "was never run.";
  }

  PathService_GetAppDataDir_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_path) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PathService_GetAppDataDir_ProxyToResponder);
};

void PathService_GetAppDataDir_ProxyToResponder::Run(
    const mojo::String& in_path) const {
  size_t size = sizeof(internal::PathService_GetAppDataDir_ResponseParams_Data);
  size += GetSerializedSize_(in_path);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetAppDataDir), size, request_id_);
  internal::PathService_GetAppDataDir_ResponseParams_Data* params =
      internal::PathService_GetAppDataDir_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_path, builder.buffer(), &params->path.ptr);
  if (!params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in PathService.GetAppDataDir response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class PathService_GetFilesDir_ProxyToResponder
    : public PathService::GetFilesDirCallback::Runnable {
 public:
  ~PathService_GetFilesDir_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "PathService::GetFilesDir(callback) "
        "was never run.";
  }

  PathService_GetFilesDir_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_path) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PathService_GetFilesDir_ProxyToResponder);
};

void PathService_GetFilesDir_ProxyToResponder::Run(
    const mojo::String& in_path) const {
  size_t size = sizeof(internal::PathService_GetFilesDir_ResponseParams_Data);
  size += GetSerializedSize_(in_path);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetFilesDir), size, request_id_);
  internal::PathService_GetFilesDir_ResponseParams_Data* params =
      internal::PathService_GetFilesDir_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_path, builder.buffer(), &params->path.ptr);
  if (!params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in PathService.GetFilesDir response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class PathService_GetCacheDir_ProxyToResponder
    : public PathService::GetCacheDirCallback::Runnable {
 public:
  ~PathService_GetCacheDir_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "PathService::GetCacheDir(callback) "
        "was never run.";
  }

  PathService_GetCacheDir_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_path) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(PathService_GetCacheDir_ProxyToResponder);
};

void PathService_GetCacheDir_ProxyToResponder::Run(
    const mojo::String& in_path) const {
  size_t size = sizeof(internal::PathService_GetCacheDir_ResponseParams_Data);
  size += GetSerializedSize_(in_path);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::PathService_Base::MessageOrdinals::GetCacheDir), size, request_id_);
  internal::PathService_GetCacheDir_ResponseParams_Data* params =
      internal::PathService_GetCacheDir_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_path, builder.buffer(), &params->path.ptr);
  if (!params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in PathService.GetCacheDir response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

PathServiceStub::PathServiceStub()
    : sink_(nullptr),
      control_message_handler_(PathService::Version_) {
}

PathServiceStub::~PathServiceStub() {}

bool PathServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::PathService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PathService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PathService_Base::MessageOrdinals::GetAppDataDir: {
      break;
    }
    case internal::PathService_Base::MessageOrdinals::GetFilesDir: {
      break;
    }
    case internal::PathService_Base::MessageOrdinals::GetCacheDir: {
      break;
    }
  }
  return false;
}

bool PathServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::PathService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PathService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PathService_Base::MessageOrdinals::GetAppDataDir: {
      internal::PathService_GetAppDataDir_Params_Data* params =
          reinterpret_cast<internal::PathService_GetAppDataDir_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      PathService::GetAppDataDirCallback::Runnable* runnable =
          new PathService_GetAppDataDir_ProxyToResponder(
              message->request_id(), responder);
      PathService::GetAppDataDirCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetAppDataDir(callback);
      return true;
    }
    case internal::PathService_Base::MessageOrdinals::GetFilesDir: {
      internal::PathService_GetFilesDir_Params_Data* params =
          reinterpret_cast<internal::PathService_GetFilesDir_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      PathService::GetFilesDirCallback::Runnable* runnable =
          new PathService_GetFilesDir_ProxyToResponder(
              message->request_id(), responder);
      PathService::GetFilesDirCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetFilesDir(callback);
      return true;
    }
    case internal::PathService_Base::MessageOrdinals::GetCacheDir: {
      internal::PathService_GetCacheDir_Params_Data* params =
          reinterpret_cast<internal::PathService_GetCacheDir_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      PathService::GetCacheDirCallback::Runnable* runnable =
          new PathService_GetCacheDir_ProxyToResponder(
              message->request_id(), responder);
      PathService::GetCacheDirCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetCacheDir(callback);
      return true;
    }
  }
  return false;
}


UserFeedbackProxy::UserFeedbackProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void UserFeedbackProxy::PerformHapticFeedback(
    HapticFeedbackType in_type) {
  size_t size = sizeof(internal::UserFeedback_PerformHapticFeedback_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::UserFeedback_Base::MessageOrdinals::PerformHapticFeedback), size);

  internal::UserFeedback_PerformHapticFeedback_Params_Data* params =
      internal::UserFeedback_PerformHapticFeedback_Params_Data::New(builder.buffer());
  params->type =
    static_cast<int32_t>(in_type);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void UserFeedbackProxy::PerformAuralFeedback(
    AuralFeedbackType in_type) {
  size_t size = sizeof(internal::UserFeedback_PerformAuralFeedback_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::UserFeedback_Base::MessageOrdinals::PerformAuralFeedback), size);

  internal::UserFeedback_PerformAuralFeedback_Params_Data* params =
      internal::UserFeedback_PerformAuralFeedback_Params_Data::New(builder.buffer());
  params->type =
    static_cast<int32_t>(in_type);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

UserFeedbackStub::UserFeedbackStub()
    : sink_(nullptr),
      control_message_handler_(UserFeedback::Version_) {
}

UserFeedbackStub::~UserFeedbackStub() {}

bool UserFeedbackStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::UserFeedback_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UserFeedback_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UserFeedback_Base::MessageOrdinals::PerformHapticFeedback: {
      internal::UserFeedback_PerformHapticFeedback_Params_Data* params =
          reinterpret_cast<internal::UserFeedback_PerformHapticFeedback_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      HapticFeedbackType p_type {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_type = static_cast<HapticFeedbackType>(params->type);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->PerformHapticFeedback(p_type);
      return true;
    }
    case internal::UserFeedback_Base::MessageOrdinals::PerformAuralFeedback: {
      internal::UserFeedback_PerformAuralFeedback_Params_Data* params =
          reinterpret_cast<internal::UserFeedback_PerformAuralFeedback_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      AuralFeedbackType p_type {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_type = static_cast<AuralFeedbackType>(params->type);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->PerformAuralFeedback(p_type);
      return true;
    }
  }
  return false;
}

bool UserFeedbackStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::UserFeedback_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UserFeedback_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UserFeedback_Base::MessageOrdinals::PerformHapticFeedback: {
      break;
    }
    case internal::UserFeedback_Base::MessageOrdinals::PerformAuralFeedback: {
      break;
    }
  }
  return false;
}

}  // namespace activity
