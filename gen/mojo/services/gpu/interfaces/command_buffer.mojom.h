// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_GPU_INTERFACES_COMMAND_BUFFER_MOJOM_H_
#define MOJO_SERVICES_GPU_INTERFACES_COMMAND_BUFFER_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/gpu/interfaces/command_buffer.mojom-common.h"
#include "mojo/services/gpu/interfaces/gpu_capabilities.mojom.h"
namespace mojo {

// --- Interface Forward Declarations ---

using CommandBufferSyncClientPtr = mojo::InterfacePtr<CommandBufferSyncClient>;

using CommandBufferSyncPointClientPtr = mojo::InterfacePtr<CommandBufferSyncPointClient>;

using CommandBufferLostContextObserverPtr = mojo::InterfacePtr<CommandBufferLostContextObserver>;

using CommandBufferPtr = mojo::InterfacePtr<CommandBuffer>;


// --- Interface Proxies ---


class CommandBufferSyncClientProxy
    : public CommandBufferSyncClient,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CommandBufferSyncClientProxy(mojo::MessageReceiverWithResponder* receiver);
  void DidInitialize(
      bool success, mojo::GpuCapabilitiesPtr capabilities
  ) override;
  void DidMakeProgress(
      CommandBufferStatePtr state
  ) override;
};


class CommandBufferSyncPointClientProxy
    : public CommandBufferSyncPointClient,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CommandBufferSyncPointClientProxy(mojo::MessageReceiverWithResponder* receiver);
  void DidInsertSyncPoint(
      uint32_t sync_point
  ) override;
};


class CommandBufferLostContextObserverProxy
    : public CommandBufferLostContextObserver,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CommandBufferLostContextObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  void DidLoseContext(
      int32_t context_lost_reason
  ) override;
};


class CommandBufferProxy
    : public CommandBuffer,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit CommandBufferProxy(mojo::MessageReceiverWithResponder* receiver);
  void Initialize(
      mojo::InterfaceHandle<CommandBufferSyncClient> sync_client, mojo::InterfaceHandle<CommandBufferSyncPointClient> sync_point_client, mojo::InterfaceHandle<CommandBufferLostContextObserver> lost_observer, mojo::ScopedSharedBufferHandle shared_state
  ) override;
  void SetGetBuffer(
      int32_t buffer
  ) override;
  void Flush(
      int32_t put_offset
  ) override;
  void MakeProgress(
      int32_t last_get_offset
  ) override;
  void RegisterTransferBuffer(
      int32_t id, mojo::ScopedSharedBufferHandle transfer_buffer, uint32_t size
  ) override;
  void DestroyTransferBuffer(
      int32_t id
  ) override;
  void InsertSyncPoint(
      bool retire
  ) override;
  void RetireSyncPoint(
      uint32_t sync_point
  ) override;
  void Echo(
      const EchoCallback& callback
  ) override;
};


// --- Interface Stubs ---

class CommandBufferSyncClientStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CommandBufferSyncClientStub();
  ~CommandBufferSyncClientStub() override;
  void set_sink(CommandBufferSyncClient* sink) { sink_ = sink; }
  CommandBufferSyncClient* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CommandBufferSyncClient* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class CommandBufferSyncPointClientStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CommandBufferSyncPointClientStub();
  ~CommandBufferSyncPointClientStub() override;
  void set_sink(CommandBufferSyncPointClient* sink) { sink_ = sink; }
  CommandBufferSyncPointClient* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CommandBufferSyncPointClient* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class CommandBufferLostContextObserverStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CommandBufferLostContextObserverStub();
  ~CommandBufferLostContextObserverStub() override;
  void set_sink(CommandBufferLostContextObserver* sink) { sink_ = sink; }
  CommandBufferLostContextObserver* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CommandBufferLostContextObserver* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class CommandBufferStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  CommandBufferStub();
  ~CommandBufferStub() override;
  void set_sink(CommandBuffer* sink) { sink_ = sink; }
  CommandBuffer* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  CommandBuffer* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_GPU_INTERFACES_COMMAND_BUFFER_MOJOM_H_
