// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/tracing/interfaces/tracing.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace tracing {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
TraceProvider_StartTracing_Params_Data* TraceProvider_StartTracing_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TraceProvider_StartTracing_Params_Data))) TraceProvider_StartTracing_Params_Data();
}

// static
mojo::internal::ValidationError TraceProvider_StartTracing_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraceProvider_StartTracing_Params_Data* object = static_cast<const TraceProvider_StartTracing_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->categories.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null categories field in TraceProvider_StartTracing_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->categories.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams categories_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->categories.offset),
          bounds_checker, &categories_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle recorder_handle = object->recorder.handle;
  if (recorder_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid recorder field in TraceProvider_StartTracing_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(recorder_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void TraceProvider_StartTracing_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->categories, handles);
  mojo::internal::EncodeHandle(&this->recorder, handles);
}

void TraceProvider_StartTracing_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->categories, handles);
  mojo::internal::DecodeHandle(&this->recorder, handles);
}

TraceProvider_StartTracing_Params_Data::TraceProvider_StartTracing_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
TraceProvider_StopTracing_Params_Data* TraceProvider_StopTracing_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TraceProvider_StopTracing_Params_Data))) TraceProvider_StopTracing_Params_Data();
}

// static
mojo::internal::ValidationError TraceProvider_StopTracing_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraceProvider_StopTracing_Params_Data* object = static_cast<const TraceProvider_StopTracing_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void TraceProvider_StopTracing_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void TraceProvider_StopTracing_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

TraceProvider_StopTracing_Params_Data::TraceProvider_StopTracing_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
TraceRecorder_Record_Params_Data* TraceRecorder_Record_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TraceRecorder_Record_Params_Data))) TraceRecorder_Record_Params_Data();
}

// static
mojo::internal::ValidationError TraceRecorder_Record_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraceRecorder_Record_Params_Data* object = static_cast<const TraceRecorder_Record_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->json.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null json field in TraceRecorder_Record_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->json.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams json_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->json.offset),
          bounds_checker, &json_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void TraceRecorder_Record_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->json, handles);
}

void TraceRecorder_Record_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->json, handles);
}

TraceRecorder_Record_Params_Data::TraceRecorder_Record_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
TraceCollector_Start_Params_Data* TraceCollector_Start_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TraceCollector_Start_Params_Data))) TraceCollector_Start_Params_Data();
}

// static
mojo::internal::ValidationError TraceCollector_Start_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraceCollector_Start_Params_Data* object = static_cast<const TraceCollector_Start_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle stream_handle = object->stream;
  if (stream_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid stream field in TraceCollector_Start_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(stream_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  if (!object->categories.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null categories field in TraceCollector_Start_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->categories.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams categories_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->categories.offset),
          bounds_checker, &categories_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void TraceCollector_Start_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->stream, handles);
  mojo::internal::Encode(&this->categories, handles);
}

void TraceCollector_Start_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->stream, handles);
  mojo::internal::Decode(&this->categories, handles);
}

TraceCollector_Start_Params_Data::TraceCollector_Start_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
TraceCollector_StopAndFlush_Params_Data* TraceCollector_StopAndFlush_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TraceCollector_StopAndFlush_Params_Data))) TraceCollector_StopAndFlush_Params_Data();
}

// static
mojo::internal::ValidationError TraceCollector_StopAndFlush_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TraceCollector_StopAndFlush_Params_Data* object = static_cast<const TraceCollector_StopAndFlush_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void TraceCollector_StopAndFlush_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void TraceCollector_StopAndFlush_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

TraceCollector_StopAndFlush_Params_Data::TraceCollector_StopAndFlush_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError TraceProviderRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'TraceProvider', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::TraceProvider_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceProvider_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceProvider_Base::MessageOrdinals::StartTracing: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TraceProvider', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TraceProvider_StartTracing_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TraceProvider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::TraceProvider_Base::MessageOrdinals::StopTracing: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TraceProvider', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TraceProvider_StopTracing_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TraceProvider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'TraceProvider'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError TraceRecorderRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'TraceRecorder', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::TraceRecorder_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceRecorder_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceRecorder_Base::MessageOrdinals::Record: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TraceRecorder', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TraceRecorder_Record_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TraceRecorder', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'TraceRecorder'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError TraceCollectorRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'TraceCollector', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::TraceCollector_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TraceCollector_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TraceCollector_Base::MessageOrdinals::Start: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TraceCollector', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TraceCollector_Start_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TraceCollector', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::TraceCollector_Base::MessageOrdinals::StopAndFlush: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'TraceCollector', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::TraceCollector_StopAndFlush_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'TraceCollector', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'TraceCollector'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::TraceProvider_Base::Name_[] = "tracing::TraceProvider";
const uint32_t internal::TraceProvider_Base::Version_;

// Constants

// Enums
const uint32_t internal::TraceRecorder_Base::Version_;

// Constants

// Enums
const char internal::TraceCollector_Base::Name_[] = "tracing::TraceCollector";
const uint32_t internal::TraceCollector_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
TraceProvider_StartTracing_ParamsPtr TraceProvider_StartTracing_Params::New() {
  TraceProvider_StartTracing_ParamsPtr rv;
  mojo::internal::StructHelper<TraceProvider_StartTracing_Params>::Initialize(&rv);
  return rv;
}

TraceProvider_StartTracing_Params::TraceProvider_StartTracing_Params()
    : categories(),
      recorder() {
}

TraceProvider_StartTracing_Params::~TraceProvider_StartTracing_Params() {
}



bool TraceProvider_StartTracing_Params::Equals(const TraceProvider_StartTracing_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->categories, other.categories))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<TraceRecorder>>::Equals(this->recorder, other.recorder))
    return false;
  return true;
}


size_t TraceProvider_StartTracing_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TraceProvider_StartTracing_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TraceProvider_StartTracing_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TraceProvider_StartTracing_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TraceProvider_StartTracing_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TraceProvider_StartTracing_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TraceProvider_StartTracing_Params_Data* input =
      static_cast<internal::TraceProvider_StartTracing_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TraceProvider_StartTracing_Params& input) {
  size_t size = sizeof(internal::TraceProvider_StartTracing_Params_Data);
  size += GetSerializedSize_(input.categories);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TraceProvider_StartTracing_Params* input,
    mojo::internal::Buffer* buf,
    internal::TraceProvider_StartTracing_Params_Data** output) {
  if (input) {
    internal::TraceProvider_StartTracing_Params_Data* result =
        internal::TraceProvider_StartTracing_Params_Data::New(buf);
    SerializeString_(input->categories, buf, &result->categories.ptr);
    if (!result->categories.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null categories in TraceProvider_StartTracing_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    mojo::internal::InterfaceHandleToData(input->recorder.Pass(),
                                          &result->recorder);
    if (!result->recorder.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid recorder in TraceProvider_StartTracing_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TraceProvider_StartTracing_Params_Data* input,
                  TraceProvider_StartTracing_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->categories.ptr, &result->categories);
      mojo::internal::InterfaceDataToHandle(&input->recorder, &result->recorder);
    } while (false);
  }
}



// static
TraceProvider_StopTracing_ParamsPtr TraceProvider_StopTracing_Params::New() {
  TraceProvider_StopTracing_ParamsPtr rv;
  mojo::internal::StructHelper<TraceProvider_StopTracing_Params>::Initialize(&rv);
  return rv;
}

TraceProvider_StopTracing_Params::TraceProvider_StopTracing_Params() {
}

TraceProvider_StopTracing_Params::~TraceProvider_StopTracing_Params() {
}


TraceProvider_StopTracing_ParamsPtr TraceProvider_StopTracing_Params::Clone() const {
  TraceProvider_StopTracing_ParamsPtr rv(New());
  return rv;
}


bool TraceProvider_StopTracing_Params::Equals(const TraceProvider_StopTracing_Params& other) const {
  return true;
}


size_t TraceProvider_StopTracing_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TraceProvider_StopTracing_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TraceProvider_StopTracing_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TraceProvider_StopTracing_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TraceProvider_StopTracing_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TraceProvider_StopTracing_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TraceProvider_StopTracing_Params_Data* input =
      static_cast<internal::TraceProvider_StopTracing_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TraceProvider_StopTracing_Params& input) {
  size_t size = sizeof(internal::TraceProvider_StopTracing_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TraceProvider_StopTracing_Params* input,
    mojo::internal::Buffer* buf,
    internal::TraceProvider_StopTracing_Params_Data** output) {
  if (input) {
    internal::TraceProvider_StopTracing_Params_Data* result =
        internal::TraceProvider_StopTracing_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TraceProvider_StopTracing_Params_Data* input,
                  TraceProvider_StopTracing_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
TraceRecorder_Record_ParamsPtr TraceRecorder_Record_Params::New() {
  TraceRecorder_Record_ParamsPtr rv;
  mojo::internal::StructHelper<TraceRecorder_Record_Params>::Initialize(&rv);
  return rv;
}

TraceRecorder_Record_Params::TraceRecorder_Record_Params()
    : json() {
}

TraceRecorder_Record_Params::~TraceRecorder_Record_Params() {
}


TraceRecorder_Record_ParamsPtr TraceRecorder_Record_Params::Clone() const {
  TraceRecorder_Record_ParamsPtr rv(New());
  rv->json = json;
  return rv;
}


bool TraceRecorder_Record_Params::Equals(const TraceRecorder_Record_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->json, other.json))
    return false;
  return true;
}


size_t TraceRecorder_Record_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TraceRecorder_Record_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TraceRecorder_Record_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TraceRecorder_Record_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TraceRecorder_Record_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TraceRecorder_Record_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TraceRecorder_Record_Params_Data* input =
      static_cast<internal::TraceRecorder_Record_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TraceRecorder_Record_Params& input) {
  size_t size = sizeof(internal::TraceRecorder_Record_Params_Data);
  size += GetSerializedSize_(input.json);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TraceRecorder_Record_Params* input,
    mojo::internal::Buffer* buf,
    internal::TraceRecorder_Record_Params_Data** output) {
  if (input) {
    internal::TraceRecorder_Record_Params_Data* result =
        internal::TraceRecorder_Record_Params_Data::New(buf);
    SerializeString_(input->json, buf, &result->json.ptr);
    if (!result->json.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null json in TraceRecorder_Record_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TraceRecorder_Record_Params_Data* input,
                  TraceRecorder_Record_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->json.ptr, &result->json);
    } while (false);
  }
}



// static
TraceCollector_Start_ParamsPtr TraceCollector_Start_Params::New() {
  TraceCollector_Start_ParamsPtr rv;
  mojo::internal::StructHelper<TraceCollector_Start_Params>::Initialize(&rv);
  return rv;
}

TraceCollector_Start_Params::TraceCollector_Start_Params()
    : stream(),
      categories() {
}

TraceCollector_Start_Params::~TraceCollector_Start_Params() {
}



bool TraceCollector_Start_Params::Equals(const TraceCollector_Start_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeProducerHandle>::Equals(this->stream, other.stream))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->categories, other.categories))
    return false;
  return true;
}


size_t TraceCollector_Start_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TraceCollector_Start_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TraceCollector_Start_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TraceCollector_Start_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TraceCollector_Start_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TraceCollector_Start_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TraceCollector_Start_Params_Data* input =
      static_cast<internal::TraceCollector_Start_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TraceCollector_Start_Params& input) {
  size_t size = sizeof(internal::TraceCollector_Start_Params_Data);
  size += GetSerializedSize_(input.categories);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TraceCollector_Start_Params* input,
    mojo::internal::Buffer* buf,
    internal::TraceCollector_Start_Params_Data** output) {
  if (input) {
    internal::TraceCollector_Start_Params_Data* result =
        internal::TraceCollector_Start_Params_Data::New(buf);
    result->stream = input->stream.release();
    if (!result->stream.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid stream in TraceCollector_Start_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    SerializeString_(input->categories, buf, &result->categories.ptr);
    if (!result->categories.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null categories in TraceCollector_Start_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TraceCollector_Start_Params_Data* input,
                  TraceCollector_Start_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->stream.reset(mojo::internal::FetchAndReset(&input->stream));
      Deserialize_(input->categories.ptr, &result->categories);
    } while (false);
  }
}



// static
TraceCollector_StopAndFlush_ParamsPtr TraceCollector_StopAndFlush_Params::New() {
  TraceCollector_StopAndFlush_ParamsPtr rv;
  mojo::internal::StructHelper<TraceCollector_StopAndFlush_Params>::Initialize(&rv);
  return rv;
}

TraceCollector_StopAndFlush_Params::TraceCollector_StopAndFlush_Params() {
}

TraceCollector_StopAndFlush_Params::~TraceCollector_StopAndFlush_Params() {
}


TraceCollector_StopAndFlush_ParamsPtr TraceCollector_StopAndFlush_Params::Clone() const {
  TraceCollector_StopAndFlush_ParamsPtr rv(New());
  return rv;
}


bool TraceCollector_StopAndFlush_Params::Equals(const TraceCollector_StopAndFlush_Params& other) const {
  return true;
}


size_t TraceCollector_StopAndFlush_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TraceCollector_StopAndFlush_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TraceCollector_StopAndFlush_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TraceCollector_StopAndFlush_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TraceCollector_StopAndFlush_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TraceCollector_StopAndFlush_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TraceCollector_StopAndFlush_Params_Data* input =
      static_cast<internal::TraceCollector_StopAndFlush_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TraceCollector_StopAndFlush_Params& input) {
  size_t size = sizeof(internal::TraceCollector_StopAndFlush_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TraceCollector_StopAndFlush_Params* input,
    mojo::internal::Buffer* buf,
    internal::TraceCollector_StopAndFlush_Params_Data** output) {
  if (input) {
    internal::TraceCollector_StopAndFlush_Params_Data* result =
        internal::TraceCollector_StopAndFlush_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TraceCollector_StopAndFlush_Params_Data* input,
                  TraceCollector_StopAndFlush_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}

}  // namespace tracing
