// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/services/keyboard/interfaces/keyboard.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/services/keyboard/interfaces/keyboard.mojom-internal.h"
#include "mojo/services/keyboard/interfaces/keyboard.mojom-common.h"
namespace keyboard {

// --- Interface definitions ---
KeyboardClient_SynchronousProxy::KeyboardClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool KeyboardClient_SynchronousProxy::CommitCompletion(CompletionDataPtr in_completion) const  {
  size_t size = sizeof(internal::KeyboardClient_CommitCompletion_Params_Data);
  size += in_completion.is_null()
              ? 0
              : GetSerializedSize_(*in_completion);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::CommitCompletion);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_CommitCompletion_Params_Data* out_params =
      internal::KeyboardClient_CommitCompletion_Params_Data::New(builder.buffer());
  {Serialize_(in_completion.get(),
               builder.buffer(),
               &out_params->completion.ptr);
  }
  if (!out_params->completion.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null completion in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardClient_SynchronousProxy::CommitCorrection(CorrectionDataPtr in_correction) const  {
  size_t size = sizeof(internal::KeyboardClient_CommitCorrection_Params_Data);
  size += in_correction.is_null()
              ? 0
              : GetSerializedSize_(*in_correction);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::CommitCorrection);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_CommitCorrection_Params_Data* out_params =
      internal::KeyboardClient_CommitCorrection_Params_Data::New(builder.buffer());
  {Serialize_(in_correction.get(),
               builder.buffer(),
               &out_params->correction.ptr);
  }
  if (!out_params->correction.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null correction in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardClient_SynchronousProxy::CommitText(const mojo::String& in_text, int32_t in_newCursorPosition) const  {
  size_t size = sizeof(internal::KeyboardClient_CommitText_Params_Data);
  size += GetSerializedSize_(in_text);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::CommitText);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_CommitText_Params_Data* out_params =
      internal::KeyboardClient_CommitText_Params_Data::New(builder.buffer());
  SerializeString_(in_text, builder.buffer(), &out_params->text.ptr);
  if (!out_params->text.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null text in {{interface.name}}::{{method.name}}");
  }
  out_params->newCursorPosition = in_newCursorPosition;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardClient_SynchronousProxy::DeleteSurroundingText(int32_t in_beforeLength, int32_t in_afterLength) const  {
  size_t size = sizeof(internal::KeyboardClient_DeleteSurroundingText_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::DeleteSurroundingText);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_DeleteSurroundingText_Params_Data* out_params =
      internal::KeyboardClient_DeleteSurroundingText_Params_Data::New(builder.buffer());
  out_params->beforeLength = in_beforeLength;
  out_params->afterLength = in_afterLength;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardClient_SynchronousProxy::SetComposingRegion(int32_t in_start, int32_t in_end) const  {
  size_t size = sizeof(internal::KeyboardClient_SetComposingRegion_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::SetComposingRegion);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_SetComposingRegion_Params_Data* out_params =
      internal::KeyboardClient_SetComposingRegion_Params_Data::New(builder.buffer());
  out_params->start = in_start;
  out_params->end = in_end;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardClient_SynchronousProxy::SetComposingText(const mojo::String& in_text, int32_t in_newCursorPosition) const  {
  size_t size = sizeof(internal::KeyboardClient_SetComposingText_Params_Data);
  size += GetSerializedSize_(in_text);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::SetComposingText);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_SetComposingText_Params_Data* out_params =
      internal::KeyboardClient_SetComposingText_Params_Data::New(builder.buffer());
  SerializeString_(in_text, builder.buffer(), &out_params->text.ptr);
  if (!out_params->text.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null text in {{interface.name}}::{{method.name}}");
  }
  out_params->newCursorPosition = in_newCursorPosition;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardClient_SynchronousProxy::SetSelection(int32_t in_start, int32_t in_end) const  {
  size_t size = sizeof(internal::KeyboardClient_SetSelection_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::SetSelection);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_SetSelection_Params_Data* out_params =
      internal::KeyboardClient_SetSelection_Params_Data::New(builder.buffer());
  out_params->start = in_start;
  out_params->end = in_end;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardClient_SynchronousProxy::Submit(SubmitAction in_action) const  {
  size_t size = sizeof(internal::KeyboardClient_Submit_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::Submit);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardClient_Submit_Params_Data* out_params =
      internal::KeyboardClient_Submit_Params_Data::New(builder.buffer());
  out_params->action =
    static_cast<int32_t>(in_action);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}KeyboardService_SynchronousProxy::KeyboardService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool KeyboardService_SynchronousProxy::Show(mojo::InterfaceHandle<KeyboardClient> in_client, KeyboardType in_type) const  {
  size_t size = sizeof(internal::KeyboardService_Show_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::Show);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardService_Show_Params_Data* out_params =
      internal::KeyboardService_Show_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_client.Pass(),
                                        &out_params->client);
  if (!out_params->client.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client in {{interface.name}}::{{method.name}}");
  }
  out_params->type =
    static_cast<int32_t>(in_type);
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardService_SynchronousProxy::ShowByRequest() const  {
  size_t size = sizeof(internal::KeyboardService_ShowByRequest_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::ShowByRequest);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardService_ShowByRequest_Params_Data* out_params =
      internal::KeyboardService_ShowByRequest_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardService_SynchronousProxy::Hide() const  {
  size_t size = sizeof(internal::KeyboardService_Hide_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::Hide);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardService_Hide_Params_Data* out_params =
      internal::KeyboardService_Hide_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardService_SynchronousProxy::SetText(const mojo::String& in_text) const  {
  size_t size = sizeof(internal::KeyboardService_SetText_Params_Data);
  size += GetSerializedSize_(in_text);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::SetText);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardService_SetText_Params_Data* out_params =
      internal::KeyboardService_SetText_Params_Data::New(builder.buffer());
  SerializeString_(in_text, builder.buffer(), &out_params->text.ptr);
  if (!out_params->text.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null text in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool KeyboardService_SynchronousProxy::SetSelection(int32_t in_start, int32_t in_end) const  {
  size_t size = sizeof(internal::KeyboardService_SetSelection_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::SetSelection);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardService_SetSelection_Params_Data* out_params =
      internal::KeyboardService_SetSelection_Params_Data::New(builder.buffer());
  out_params->start = in_start;
  out_params->end = in_end;
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}KeyboardServiceFactory_SynchronousProxy::KeyboardServiceFactory_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool KeyboardServiceFactory_SynchronousProxy::CreateKeyboardService(mojo::InterfaceRequest<mojo::NativeViewportEventDispatcher> in_keyEventDispatcher, mojo::InterfaceRequest<KeyboardService> in_serviceRequest) const  {
  size_t size = sizeof(internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::KeyboardServiceFactory_Base::MessageOrdinals::CreateKeyboardService);
  mojo::MessageBuilder builder(msg_name, size);

  internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data* out_params =
      internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data::New(builder.buffer());
  out_params->keyEventDispatcher = in_keyEventDispatcher.PassMessagePipe().release();
  if (!out_params->keyEventDispatcher.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid keyEventDispatcher in {{interface.name}}::{{method.name}}");
  }
  out_params->serviceRequest = in_serviceRequest.PassMessagePipe().release();
  if (!out_params->serviceRequest.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid serviceRequest in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
}  // namespace keyboard

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
