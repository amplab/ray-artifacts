// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/contacts/interfaces/contacts.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace contacts {

// --- Interface definitions ---
class ContactsService_GetCount_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ContactsService_GetCount_ForwardToCallback(
      const ContactsService::GetCountCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ContactsService::GetCountCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_GetCount_ForwardToCallback);
};
bool ContactsService_GetCount_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ContactsService_GetCount_ResponseParams_Data* params =
      reinterpret_cast<internal::ContactsService_GetCount_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint64_t p_count {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_count = params->count;
  } while (false);
  callback_.Run(p_count);
  return true;
}
class ContactsService_Get_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ContactsService_Get_ForwardToCallback(
      const ContactsService::GetCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ContactsService::GetCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_Get_ForwardToCallback);
};
bool ContactsService_Get_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ContactsService_Get_ResponseParams_Data* params =
      reinterpret_cast<internal::ContactsService_Get_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<ContactPtr> p_contacts {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->contacts.ptr, &p_contacts);
  } while (false);
  callback_.Run(p_contacts.Pass());
  return true;
}
class ContactsService_GetEmails_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ContactsService_GetEmails_ForwardToCallback(
      const ContactsService::GetEmailsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ContactsService::GetEmailsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_GetEmails_ForwardToCallback);
};
bool ContactsService_GetEmails_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ContactsService_GetEmails_ResponseParams_Data* params =
      reinterpret_cast<internal::ContactsService_GetEmails_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<mojo::String> p_emails {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->emails.ptr, &p_emails);
  } while (false);
  callback_.Run(p_emails.Pass());
  return true;
}
class ContactsService_GetPhoto_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ContactsService_GetPhoto_ForwardToCallback(
      const ContactsService::GetPhotoCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ContactsService::GetPhotoCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_GetPhoto_ForwardToCallback);
};
bool ContactsService_GetPhoto_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ContactsService_GetPhoto_ResponseParams_Data* params =
      reinterpret_cast<internal::ContactsService_GetPhoto_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_photo_url {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->photo_url.ptr, &p_photo_url);
  } while (false);
  callback_.Run(p_photo_url);
  return true;
}

ContactsServiceProxy::ContactsServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ContactsServiceProxy::GetCount(
    const mojo::String& in_filter, const GetCountCallback& callback) {
  size_t size = sizeof(internal::ContactsService_GetCount_Params_Data);
  size += GetSerializedSize_(in_filter);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetCount), size);

  internal::ContactsService_GetCount_Params_Data* params =
      internal::ContactsService_GetCount_Params_Data::New(builder.buffer());
  SerializeString_(in_filter, builder.buffer(), &params->filter.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ContactsService_GetCount_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ContactsServiceProxy::Get(
    const mojo::String& in_filter, uint32_t in_offset, uint32_t in_limit, const GetCallback& callback) {
  size_t size = sizeof(internal::ContactsService_Get_Params_Data);
  size += GetSerializedSize_(in_filter);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::Get), size);

  internal::ContactsService_Get_Params_Data* params =
      internal::ContactsService_Get_Params_Data::New(builder.buffer());
  SerializeString_(in_filter, builder.buffer(), &params->filter.ptr);
  params->offset = in_offset;
  params->limit = in_limit;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ContactsService_Get_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ContactsServiceProxy::GetEmails(
    int64_t in_id, const GetEmailsCallback& callback) {
  size_t size = sizeof(internal::ContactsService_GetEmails_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetEmails), size);

  internal::ContactsService_GetEmails_Params_Data* params =
      internal::ContactsService_GetEmails_Params_Data::New(builder.buffer());
  params->id = in_id;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ContactsService_GetEmails_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ContactsServiceProxy::GetPhoto(
    int64_t in_id, bool in_high_resolution, const GetPhotoCallback& callback) {
  size_t size = sizeof(internal::ContactsService_GetPhoto_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetPhoto), size);

  internal::ContactsService_GetPhoto_Params_Data* params =
      internal::ContactsService_GetPhoto_Params_Data::New(builder.buffer());
  params->id = in_id;
  params->high_resolution = in_high_resolution;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ContactsService_GetPhoto_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ContactsService_GetCount_ProxyToResponder
    : public ContactsService::GetCountCallback::Runnable {
 public:
  ~ContactsService_GetCount_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ContactsService::GetCount(p_filter, callback) "
        "was never run.";
  }

  ContactsService_GetCount_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint64_t in_count) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_GetCount_ProxyToResponder);
};

void ContactsService_GetCount_ProxyToResponder::Run(
    uint64_t in_count) const {
  size_t size = sizeof(internal::ContactsService_GetCount_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetCount), size, request_id_);
  internal::ContactsService_GetCount_ResponseParams_Data* params =
      internal::ContactsService_GetCount_ResponseParams_Data::New(builder.buffer());
  params->count = in_count;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ContactsService_Get_ProxyToResponder
    : public ContactsService::GetCallback::Runnable {
 public:
  ~ContactsService_Get_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ContactsService::Get(p_filter, p_offset, p_limit, callback) "
        "was never run.";
  }

  ContactsService_Get_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<ContactPtr> in_contacts) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_Get_ProxyToResponder);
};

void ContactsService_Get_ProxyToResponder::Run(
    mojo::Array<ContactPtr> in_contacts) const {
  size_t size = sizeof(internal::ContactsService_Get_ResponseParams_Data);
  size += GetSerializedSize_(in_contacts);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::Get), size, request_id_);
  internal::ContactsService_Get_ResponseParams_Data* params =
      internal::ContactsService_Get_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams contacts_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_contacts, builder.buffer(), &params->contacts.ptr,
                          &contacts_validate_params);
  }
  if (!params->contacts.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null contacts in ContactsService.Get response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ContactsService_GetEmails_ProxyToResponder
    : public ContactsService::GetEmailsCallback::Runnable {
 public:
  ~ContactsService_GetEmails_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ContactsService::GetEmails(p_id, callback) "
        "was never run.";
  }

  ContactsService_GetEmails_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<mojo::String> in_emails) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_GetEmails_ProxyToResponder);
};

void ContactsService_GetEmails_ProxyToResponder::Run(
    mojo::Array<mojo::String> in_emails) const {
  size_t size = sizeof(internal::ContactsService_GetEmails_ResponseParams_Data);
  size += GetSerializedSize_(in_emails);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetEmails), size, request_id_);
  internal::ContactsService_GetEmails_ResponseParams_Data* params =
      internal::ContactsService_GetEmails_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams emails_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_emails, builder.buffer(), &params->emails.ptr,
                          &emails_validate_params);
  }
  if (!params->emails.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null emails in ContactsService.GetEmails response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ContactsService_GetPhoto_ProxyToResponder
    : public ContactsService::GetPhotoCallback::Runnable {
 public:
  ~ContactsService_GetPhoto_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ContactsService::GetPhoto(p_id, p_high_resolution, callback) "
        "was never run.";
  }

  ContactsService_GetPhoto_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_photo_url) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ContactsService_GetPhoto_ProxyToResponder);
};

void ContactsService_GetPhoto_ProxyToResponder::Run(
    const mojo::String& in_photo_url) const {
  size_t size = sizeof(internal::ContactsService_GetPhoto_ResponseParams_Data);
  size += GetSerializedSize_(in_photo_url);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ContactsService_Base::MessageOrdinals::GetPhoto), size, request_id_);
  internal::ContactsService_GetPhoto_ResponseParams_Data* params =
      internal::ContactsService_GetPhoto_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_photo_url, builder.buffer(), &params->photo_url.ptr);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ContactsServiceStub::ContactsServiceStub()
    : sink_(nullptr),
      control_message_handler_(ContactsService::Version_) {
}

ContactsServiceStub::~ContactsServiceStub() {}

bool ContactsServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ContactsService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ContactsService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ContactsService_Base::MessageOrdinals::GetCount: {
      break;
    }
    case internal::ContactsService_Base::MessageOrdinals::Get: {
      break;
    }
    case internal::ContactsService_Base::MessageOrdinals::GetEmails: {
      break;
    }
    case internal::ContactsService_Base::MessageOrdinals::GetPhoto: {
      break;
    }
  }
  return false;
}

bool ContactsServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ContactsService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ContactsService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ContactsService_Base::MessageOrdinals::GetCount: {
      internal::ContactsService_GetCount_Params_Data* params =
          reinterpret_cast<internal::ContactsService_GetCount_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ContactsService::GetCountCallback::Runnable* runnable =
          new ContactsService_GetCount_ProxyToResponder(
              message->request_id(), responder);
      ContactsService::GetCountCallback callback(runnable);
      
      mojo::String p_filter {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->filter.ptr, &p_filter);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetCount(p_filter, callback);
      return true;
    }
    case internal::ContactsService_Base::MessageOrdinals::Get: {
      internal::ContactsService_Get_Params_Data* params =
          reinterpret_cast<internal::ContactsService_Get_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ContactsService::GetCallback::Runnable* runnable =
          new ContactsService_Get_ProxyToResponder(
              message->request_id(), responder);
      ContactsService::GetCallback callback(runnable);
      
      mojo::String p_filter {};
      uint32_t p_offset {};
      uint32_t p_limit {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->filter.ptr, &p_filter);
        p_offset = params->offset;
        p_limit = params->limit;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Get(p_filter, p_offset, p_limit, callback);
      return true;
    }
    case internal::ContactsService_Base::MessageOrdinals::GetEmails: {
      internal::ContactsService_GetEmails_Params_Data* params =
          reinterpret_cast<internal::ContactsService_GetEmails_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ContactsService::GetEmailsCallback::Runnable* runnable =
          new ContactsService_GetEmails_ProxyToResponder(
              message->request_id(), responder);
      ContactsService::GetEmailsCallback callback(runnable);
      
      int64_t p_id {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_id = params->id;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetEmails(p_id, callback);
      return true;
    }
    case internal::ContactsService_Base::MessageOrdinals::GetPhoto: {
      internal::ContactsService_GetPhoto_Params_Data* params =
          reinterpret_cast<internal::ContactsService_GetPhoto_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ContactsService::GetPhotoCallback::Runnable* runnable =
          new ContactsService_GetPhoto_ProxyToResponder(
              message->request_id(), responder);
      ContactsService::GetPhotoCallback callback(runnable);
      
      int64_t p_id {};
      bool p_high_resolution {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_id = params->id;
        p_high_resolution = params->high_resolution;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetPhoto(p_id, p_high_resolution, callback);
      return true;
    }
  }
  return false;
}

}  // namespace contacts
