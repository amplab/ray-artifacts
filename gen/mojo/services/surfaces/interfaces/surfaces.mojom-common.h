// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_COMMON_H_
#define MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/surfaces/interfaces/surfaces.mojom-internal.h"
#include "mojo/services/geometry/interfaces/geometry.mojom-common.h"
#include "mojo/services/surfaces/interfaces/quads.mojom-common.h"
#include "mojo/services/surfaces/interfaces/surface_id.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class ResourceReturner;
class ResourceReturnerRequestValidator;
class ResourceReturner_Synchronous;
class Surface;
class SurfaceRequestValidator;
class SurfaceResponseValidator;
class Surface_Synchronous;

// --- Struct Forward Declarations ---
class Mailbox;

using MailboxPtr = mojo::StructPtr<Mailbox>;


class MailboxHolder;

using MailboxHolderPtr = mojo::StructPtr<MailboxHolder>;


class TransferableResource;

using TransferableResourcePtr = mojo::StructPtr<TransferableResource>;


class ReturnedResource;

using ReturnedResourcePtr = mojo::InlinedStructPtr<ReturnedResource>;


class Frame;

using FramePtr = mojo::StructPtr<Frame>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---
  
enum class ResourceFormat : int32_t {
  RGBA_8888,
  RGBA_4444,
  BGRA_8888,
  ALPHA_8,
  LUMINANCE_8,
  RGB_565,
  ETC1,
};

bool ResourceFormat_IsValidValue(ResourceFormat value);
  
std::ostream& operator<<(std::ostream& stream, const ResourceFormat& val);

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class ResourceReturner_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ResourceReturnerRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = ResourceReturner_Synchronous;
  enum class MessageOrdinals : uint32_t {
    ReturnResources = 0,
  };


  virtual ~ResourceReturner_Base() {}
};

}  // namespace internal

// Async interface declaration

class ResourceReturnerProxy;
class ResourceReturnerStub;
class ResourceReturner_Synchronous;

class ResourceReturnerRequestValidator;

class ResourceReturner : public internal::ResourceReturner_Base {
 public:
  virtual ~ResourceReturner() override {}

  using Proxy_ = ResourceReturnerProxy;
  using Stub_ = ResourceReturnerStub;
  virtual void ReturnResources(mojo::Array<ReturnedResourcePtr> resources) = 0;
};

namespace internal {
class Surface_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = SurfaceRequestValidator;
  using ResponseValidator_ = SurfaceResponseValidator;
  using Synchronous_ = Surface_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetIdNamespace = 0,
    SetResourceReturner = 1,
    CreateSurface = 2,
    SubmitFrame = 3,
    DestroySurface = 4,
  };


  virtual ~Surface_Base() {}
};

}  // namespace internal

// Async interface declaration

class SurfaceProxy;
class SurfaceStub;
class Surface_Synchronous;

class SurfaceRequestValidator;
class SurfaceResponseValidator;

class Surface : public internal::Surface_Base {
 public:
  virtual ~Surface() override {}

  using Proxy_ = SurfaceProxy;
  using Stub_ = SurfaceStub;
  using GetIdNamespaceCallback = mojo::Callback<void(uint32_t)>;
  virtual void GetIdNamespace(const GetIdNamespaceCallback& callback) = 0;
  virtual void SetResourceReturner(mojo::InterfaceHandle<ResourceReturner> returner) = 0;
  virtual void CreateSurface(uint32_t id_local) = 0;
  using SubmitFrameCallback = mojo::Callback<void()>;
  virtual void SubmitFrame(uint32_t id_local, FramePtr frame, const SubmitFrameCallback& callback) = 0;
  virtual void DestroySurface(uint32_t id_local) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::MailboxPtr, true, false> {
  using DataType = mojo::internal::Mailbox_Data*;
};
template <>
struct WrapperTraits<mojo::MailboxHolderPtr, true, false> {
  using DataType = mojo::internal::MailboxHolder_Data*;
};
template <>
struct WrapperTraits<mojo::TransferableResourcePtr, true, false> {
  using DataType = mojo::internal::TransferableResource_Data*;
};
template <>
struct WrapperTraits<mojo::ReturnedResourcePtr, true, false> {
  using DataType = mojo::internal::ReturnedResource_Data*;
};
template <>
struct WrapperTraits<mojo::FramePtr, true, false> {
  using DataType = mojo::internal::Frame_Data*;
};

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class ResourceReturnerRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class SurfaceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class SurfaceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class ReturnedResource {
 public:
  using Data_ = internal::ReturnedResource_Data;

  static ReturnedResourcePtr New();

  template <typename U>
  static ReturnedResourcePtr From(const U& u) {
    return mojo::TypeConverter<ReturnedResourcePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ReturnedResource>::Convert(*this);
  }

  ReturnedResource();
  ~ReturnedResource();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ReturnedResourcePtr Clone() const;
  bool Equals(const ReturnedResource& other) const;

  uint32_t id;
  uint32_t sync_point;
  int32_t count;
  bool lost;
};



// --- Non-inlined structs ---
class Mailbox {
 public:
  using Data_ = internal::Mailbox_Data;

  static MailboxPtr New();

  template <typename U>
  static MailboxPtr From(const U& u) {
    return mojo::TypeConverter<MailboxPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Mailbox>::Convert(*this);
  }

  Mailbox();
  ~Mailbox();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  MailboxPtr Clone() const;
  bool Equals(const Mailbox& other) const;

  mojo::Array<int8_t> name;
};


class MailboxHolder {
 public:
  using Data_ = internal::MailboxHolder_Data;

  static MailboxHolderPtr New();

  template <typename U>
  static MailboxHolderPtr From(const U& u) {
    return mojo::TypeConverter<MailboxHolderPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MailboxHolder>::Convert(*this);
  }

  MailboxHolder();
  ~MailboxHolder();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  MailboxHolderPtr Clone() const;
  bool Equals(const MailboxHolder& other) const;

  MailboxPtr mailbox;
  uint32_t texture_target;
  uint32_t sync_point;
};


class TransferableResource {
 public:
  using Data_ = internal::TransferableResource_Data;

  static TransferableResourcePtr New();

  template <typename U>
  static TransferableResourcePtr From(const U& u) {
    return mojo::TypeConverter<TransferableResourcePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TransferableResource>::Convert(*this);
  }

  TransferableResource();
  ~TransferableResource();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TransferableResourcePtr Clone() const;
  bool Equals(const TransferableResource& other) const;

  uint32_t id;
  ResourceFormat format;
  uint32_t filter;
  mojo::SizePtr size;
  MailboxHolderPtr mailbox_holder;
  bool is_repeated;
  bool is_software;
};


class Frame {
 public:
  using Data_ = internal::Frame_Data;

  static FramePtr New();

  template <typename U>
  static FramePtr From(const U& u) {
    return mojo::TypeConverter<FramePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Frame>::Convert(*this);
  }

  Frame();
  ~Frame();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FramePtr Clone() const;
  bool Equals(const Frame& other) const;

  mojo::Array<TransferableResourcePtr> resources;
  mojo::Array<mojo::PassPtr> passes;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const Mailbox& input);
mojo::internal::ValidationError Serialize_(
    Mailbox* input,
    mojo::internal::Buffer* buffer,
    internal::Mailbox_Data** output);
void Deserialize_(internal::Mailbox_Data* input,
                  Mailbox* output);

size_t GetSerializedSize_(const MailboxHolder& input);
mojo::internal::ValidationError Serialize_(
    MailboxHolder* input,
    mojo::internal::Buffer* buffer,
    internal::MailboxHolder_Data** output);
void Deserialize_(internal::MailboxHolder_Data* input,
                  MailboxHolder* output);

size_t GetSerializedSize_(const TransferableResource& input);
mojo::internal::ValidationError Serialize_(
    TransferableResource* input,
    mojo::internal::Buffer* buffer,
    internal::TransferableResource_Data** output);
void Deserialize_(internal::TransferableResource_Data* input,
                  TransferableResource* output);

size_t GetSerializedSize_(const ReturnedResource& input);
mojo::internal::ValidationError Serialize_(
    ReturnedResource* input,
    mojo::internal::Buffer* buffer,
    internal::ReturnedResource_Data** output);
void Deserialize_(internal::ReturnedResource_Data* input,
                  ReturnedResource* output);

size_t GetSerializedSize_(const Frame& input);
mojo::internal::ValidationError Serialize_(
    Frame* input,
    mojo::internal::Buffer* buffer,
    internal::Frame_Data** output);
void Deserialize_(internal::Frame_Data* input,
                  Frame* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class ResourceReturner_ReturnResources_Params;

using ResourceReturner_ReturnResources_ParamsPtr = mojo::StructPtr<ResourceReturner_ReturnResources_Params>;


size_t GetSerializedSize_(const ResourceReturner_ReturnResources_Params& input);
mojo::internal::ValidationError Serialize_(
    ResourceReturner_ReturnResources_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ResourceReturner_ReturnResources_Params_Data** output);
void Deserialize_(internal::ResourceReturner_ReturnResources_Params_Data* input,
                  ResourceReturner_ReturnResources_Params* output);

class ResourceReturner_ReturnResources_Params {
 public:
  using Data_ = internal::ResourceReturner_ReturnResources_Params_Data;

  static ResourceReturner_ReturnResources_ParamsPtr New();

  template <typename U>
  static ResourceReturner_ReturnResources_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ResourceReturner_ReturnResources_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ResourceReturner_ReturnResources_Params>::Convert(*this);
  }

  ResourceReturner_ReturnResources_Params();
  ~ResourceReturner_ReturnResources_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ResourceReturner_ReturnResources_ParamsPtr Clone() const;
  bool Equals(const ResourceReturner_ReturnResources_Params& other) const;

  mojo::Array<ReturnedResourcePtr> resources;
};



      

class Surface_GetIdNamespace_Params;

using Surface_GetIdNamespace_ParamsPtr = mojo::InlinedStructPtr<Surface_GetIdNamespace_Params>;


size_t GetSerializedSize_(const Surface_GetIdNamespace_Params& input);
mojo::internal::ValidationError Serialize_(
    Surface_GetIdNamespace_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Surface_GetIdNamespace_Params_Data** output);
void Deserialize_(internal::Surface_GetIdNamespace_Params_Data* input,
                  Surface_GetIdNamespace_Params* output);

class Surface_GetIdNamespace_Params {
 public:
  using Data_ = internal::Surface_GetIdNamespace_Params_Data;

  static Surface_GetIdNamespace_ParamsPtr New();

  template <typename U>
  static Surface_GetIdNamespace_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Surface_GetIdNamespace_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Surface_GetIdNamespace_Params>::Convert(*this);
  }

  Surface_GetIdNamespace_Params();
  ~Surface_GetIdNamespace_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Surface_GetIdNamespace_ParamsPtr Clone() const;
  bool Equals(const Surface_GetIdNamespace_Params& other) const;

};



class Surface_GetIdNamespace_ResponseParams;

using Surface_GetIdNamespace_ResponseParamsPtr = mojo::InlinedStructPtr<Surface_GetIdNamespace_ResponseParams>;


size_t GetSerializedSize_(const Surface_GetIdNamespace_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Surface_GetIdNamespace_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Surface_GetIdNamespace_ResponseParams_Data** output);
void Deserialize_(internal::Surface_GetIdNamespace_ResponseParams_Data* input,
                  Surface_GetIdNamespace_ResponseParams* output);

class Surface_GetIdNamespace_ResponseParams {
 public:
  using Data_ = internal::Surface_GetIdNamespace_ResponseParams_Data;

  static Surface_GetIdNamespace_ResponseParamsPtr New();

  template <typename U>
  static Surface_GetIdNamespace_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Surface_GetIdNamespace_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Surface_GetIdNamespace_ResponseParams>::Convert(*this);
  }

  Surface_GetIdNamespace_ResponseParams();
  ~Surface_GetIdNamespace_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Surface_GetIdNamespace_ResponseParamsPtr Clone() const;
  bool Equals(const Surface_GetIdNamespace_ResponseParams& other) const;

  uint32_t id_namespace;
};



class Surface_SetResourceReturner_Params;

using Surface_SetResourceReturner_ParamsPtr = mojo::StructPtr<Surface_SetResourceReturner_Params>;


size_t GetSerializedSize_(const Surface_SetResourceReturner_Params& input);
mojo::internal::ValidationError Serialize_(
    Surface_SetResourceReturner_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Surface_SetResourceReturner_Params_Data** output);
void Deserialize_(internal::Surface_SetResourceReturner_Params_Data* input,
                  Surface_SetResourceReturner_Params* output);

class Surface_SetResourceReturner_Params {
 public:
  using Data_ = internal::Surface_SetResourceReturner_Params_Data;

  static Surface_SetResourceReturner_ParamsPtr New();

  template <typename U>
  static Surface_SetResourceReturner_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Surface_SetResourceReturner_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Surface_SetResourceReturner_Params>::Convert(*this);
  }

  Surface_SetResourceReturner_Params();
  ~Surface_SetResourceReturner_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Surface_SetResourceReturner_Params& other) const;

  mojo::InterfaceHandle<ResourceReturner> returner;
};




class Surface_CreateSurface_Params;

using Surface_CreateSurface_ParamsPtr = mojo::InlinedStructPtr<Surface_CreateSurface_Params>;


size_t GetSerializedSize_(const Surface_CreateSurface_Params& input);
mojo::internal::ValidationError Serialize_(
    Surface_CreateSurface_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Surface_CreateSurface_Params_Data** output);
void Deserialize_(internal::Surface_CreateSurface_Params_Data* input,
                  Surface_CreateSurface_Params* output);

class Surface_CreateSurface_Params {
 public:
  using Data_ = internal::Surface_CreateSurface_Params_Data;

  static Surface_CreateSurface_ParamsPtr New();

  template <typename U>
  static Surface_CreateSurface_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Surface_CreateSurface_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Surface_CreateSurface_Params>::Convert(*this);
  }

  Surface_CreateSurface_Params();
  ~Surface_CreateSurface_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Surface_CreateSurface_ParamsPtr Clone() const;
  bool Equals(const Surface_CreateSurface_Params& other) const;

  uint32_t id_local;
};




class Surface_SubmitFrame_Params;

using Surface_SubmitFrame_ParamsPtr = mojo::StructPtr<Surface_SubmitFrame_Params>;


size_t GetSerializedSize_(const Surface_SubmitFrame_Params& input);
mojo::internal::ValidationError Serialize_(
    Surface_SubmitFrame_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Surface_SubmitFrame_Params_Data** output);
void Deserialize_(internal::Surface_SubmitFrame_Params_Data* input,
                  Surface_SubmitFrame_Params* output);

class Surface_SubmitFrame_Params {
 public:
  using Data_ = internal::Surface_SubmitFrame_Params_Data;

  static Surface_SubmitFrame_ParamsPtr New();

  template <typename U>
  static Surface_SubmitFrame_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Surface_SubmitFrame_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Surface_SubmitFrame_Params>::Convert(*this);
  }

  Surface_SubmitFrame_Params();
  ~Surface_SubmitFrame_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Surface_SubmitFrame_ParamsPtr Clone() const;
  bool Equals(const Surface_SubmitFrame_Params& other) const;

  uint32_t id_local;
  FramePtr frame;
};



class Surface_SubmitFrame_ResponseParams;

using Surface_SubmitFrame_ResponseParamsPtr = mojo::InlinedStructPtr<Surface_SubmitFrame_ResponseParams>;


size_t GetSerializedSize_(const Surface_SubmitFrame_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Surface_SubmitFrame_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Surface_SubmitFrame_ResponseParams_Data** output);
void Deserialize_(internal::Surface_SubmitFrame_ResponseParams_Data* input,
                  Surface_SubmitFrame_ResponseParams* output);

class Surface_SubmitFrame_ResponseParams {
 public:
  using Data_ = internal::Surface_SubmitFrame_ResponseParams_Data;

  static Surface_SubmitFrame_ResponseParamsPtr New();

  template <typename U>
  static Surface_SubmitFrame_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Surface_SubmitFrame_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Surface_SubmitFrame_ResponseParams>::Convert(*this);
  }

  Surface_SubmitFrame_ResponseParams();
  ~Surface_SubmitFrame_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Surface_SubmitFrame_ResponseParamsPtr Clone() const;
  bool Equals(const Surface_SubmitFrame_ResponseParams& other) const;

};



class Surface_DestroySurface_Params;

using Surface_DestroySurface_ParamsPtr = mojo::InlinedStructPtr<Surface_DestroySurface_Params>;


size_t GetSerializedSize_(const Surface_DestroySurface_Params& input);
mojo::internal::ValidationError Serialize_(
    Surface_DestroySurface_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Surface_DestroySurface_Params_Data** output);
void Deserialize_(internal::Surface_DestroySurface_Params_Data* input,
                  Surface_DestroySurface_Params* output);

class Surface_DestroySurface_Params {
 public:
  using Data_ = internal::Surface_DestroySurface_Params_Data;

  static Surface_DestroySurface_ParamsPtr New();

  template <typename U>
  static Surface_DestroySurface_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Surface_DestroySurface_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Surface_DestroySurface_Params>::Convert(*this);
  }

  Surface_DestroySurface_Params();
  ~Surface_DestroySurface_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Surface_DestroySurface_ParamsPtr Clone() const;
  bool Equals(const Surface_DestroySurface_Params& other) const;

  uint32_t id_local;
};



}  // namespace mojo

#endif  // MOJO_SERVICES_SURFACES_INTERFACES_SURFACES_MOJOM_COMMON_H_
