// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/network/interfaces/http_connection.mojom-common.h"
#include "mojo/public/interfaces/network/network_error.mojom.h"
#include "mojo/services/network/interfaces/http_message.mojom.h"
#include "mojo/services/network/interfaces/web_socket.mojom.h"
namespace mojo {

// --- Interface Forward Declarations ---

using HttpConnectionPtr = mojo::InterfacePtr<HttpConnection>;

using HttpConnectionDelegatePtr = mojo::InterfacePtr<HttpConnectionDelegate>;


// --- Interface Proxies ---


class HttpConnectionProxy
    : public HttpConnection,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit HttpConnectionProxy(mojo::MessageReceiverWithResponder* receiver);
  void SetSendBufferSize(
      uint32_t size, const SetSendBufferSizeCallback& callback
  ) override;
  void SetReceiveBufferSize(
      uint32_t size, const SetReceiveBufferSizeCallback& callback
  ) override;
};


class HttpConnectionDelegateProxy
    : public HttpConnectionDelegate,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit HttpConnectionDelegateProxy(mojo::MessageReceiverWithResponder* receiver);
  void OnReceivedRequest(
      mojo::HttpRequestPtr request, const OnReceivedRequestCallback& callback
  ) override;
  void OnReceivedWebSocketRequest(
      mojo::HttpRequestPtr request, const OnReceivedWebSocketRequestCallback& callback
  ) override;
};


// --- Interface Stubs ---

class HttpConnectionStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  HttpConnectionStub();
  ~HttpConnectionStub() override;
  void set_sink(HttpConnection* sink) { sink_ = sink; }
  HttpConnection* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  HttpConnection* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class HttpConnectionDelegateStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  HttpConnectionDelegateStub();
  ~HttpConnectionDelegateStub() override;
  void set_sink(HttpConnectionDelegate* sink) { sink_ = sink; }
  HttpConnectionDelegate* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  HttpConnectionDelegate* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_HTTP_CONNECTION_MOJOM_H_
