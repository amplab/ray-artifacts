// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/files/interfaces/directory.mojom
//

package directory

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	types "mojo/services/files/interfaces/types"
	fmt "fmt"
	file "mojo/services/files/interfaces/file"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type Directory interface {
	Read() (outError types.Error, outDirectoryContents *[]types.DirectoryEntry, err error)
	Stat() (outError types.Error, outFileInformation *types.FileInformation, err error)
	Touch(inAtime *types.TimespecOrNow, inMtime *types.TimespecOrNow) (outError types.Error, err error)
	OpenFile(inPath string, inFile *file.File_Request, inOpenFlags uint32) (outError types.Error, err error)
	OpenDirectory(inPath string, inDirectory *Directory_Request, inOpenFlags uint32) (outError types.Error, err error)
	Rename(inPath string, inNewPath string) (outError types.Error, err error)
	Delete(inPath string, inDeleteFlags uint32) (outError types.Error, err error)
}




type Directory_Request bindings.InterfaceRequest



type Directory_Pointer bindings.InterfacePointer


type Directory_ServiceFactory struct{
	Delegate Directory_Factory
}

type Directory_Factory interface {
	Create(request Directory_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Directory_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Directory_ServiceDescription{}
}

func (f *Directory_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Directory_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForDirectory creates a message pipe for use with the
// Directory interface with a Directory_Request on one end and a Directory_Pointer on the other.
func CreateMessagePipeForDirectory() (Directory_Request, Directory_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Directory_Request(r), Directory_Pointer(p)
}

const directory_Read_Name uint32 = 0
const directory_Stat_Name uint32 = 1
const directory_Touch_Name uint32 = 2
const directory_OpenFile_Name uint32 = 3
const directory_OpenDirectory_Name uint32 = 4
const directory_Rename_Name uint32 = 5
const directory_Delete_Name uint32 = 6

type Directory_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewDirectoryProxy(p Directory_Pointer, waiter bindings.AsyncWaiter) *Directory_Proxy {
	return &Directory_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Directory_Proxy) Close_Proxy() {
	p.router.Close()
}

type directory_Read_Params struct {
}


func (s *directory_Read_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Read_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *directory_Read_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Read_Params_Versions), func(i int) bool {
		return directory_Read_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Read_Params_Versions) {
		if directory_Read_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Read_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type directory_Read_ResponseParams struct {
	outError types.Error
	outDirectoryContents *[]types.DirectoryEntry
}


func (s *directory_Read_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if s.outDirectoryContents == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.outDirectoryContents))), 64)
		for _, elem0 := range (*s.outDirectoryContents) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			if err := elem0.Encode(encoder); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Read_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *directory_Read_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Read_ResponseParams_Versions), func(i int) bool {
		return directory_Read_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Read_ResponseParams_Versions) {
		if directory_Read_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Read_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outDirectoryContents = nil
		} else {
			s.outDirectoryContents = new([]types.DirectoryEntry)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.outDirectoryContents) = make([]types.DirectoryEntry, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := (*s.outDirectoryContents)[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Directory_Proxy) Read() (outError types.Error, outDirectoryContents *[]types.DirectoryEntry, err error) {
	payload := &directory_Read_Params{
	}
	header := bindings.MessageHeader{
		Type: directory_Read_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, directory_Read_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response directory_Read_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	outDirectoryContents = response.outDirectoryContents
	return
}

type directory_Stat_Params struct {
}


func (s *directory_Stat_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Stat_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *directory_Stat_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Stat_Params_Versions), func(i int) bool {
		return directory_Stat_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Stat_Params_Versions) {
		if directory_Stat_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Stat_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type directory_Stat_ResponseParams struct {
	outError types.Error
	outFileInformation *types.FileInformation
}


func (s *directory_Stat_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if s.outFileInformation == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.outFileInformation).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Stat_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *directory_Stat_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Stat_ResponseParams_Versions), func(i int) bool {
		return directory_Stat_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Stat_ResponseParams_Versions) {
		if directory_Stat_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Stat_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outFileInformation = nil
		} else {
			s.outFileInformation = new(types.FileInformation)
			if err := (*s.outFileInformation).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Directory_Proxy) Stat() (outError types.Error, outFileInformation *types.FileInformation, err error) {
	payload := &directory_Stat_Params{
	}
	header := bindings.MessageHeader{
		Type: directory_Stat_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, directory_Stat_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response directory_Stat_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	outFileInformation = response.outFileInformation
	return
}

type directory_Touch_Params struct {
	inAtime *types.TimespecOrNow
	inMtime *types.TimespecOrNow
}


func (s *directory_Touch_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.inAtime == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.inAtime).Encode(encoder); err != nil {
			return err
		}
	}
	if s.inMtime == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.inMtime).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Touch_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *directory_Touch_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Touch_Params_Versions), func(i int) bool {
		return directory_Touch_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Touch_Params_Versions) {
		if directory_Touch_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Touch_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inAtime = nil
		} else {
			s.inAtime = new(types.TimespecOrNow)
			if err := (*s.inAtime).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inMtime = nil
		} else {
			s.inMtime = new(types.TimespecOrNow)
			if err := (*s.inMtime).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type directory_Touch_ResponseParams struct {
	outError types.Error
}


func (s *directory_Touch_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Touch_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *directory_Touch_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Touch_ResponseParams_Versions), func(i int) bool {
		return directory_Touch_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Touch_ResponseParams_Versions) {
		if directory_Touch_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Touch_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Directory_Proxy) Touch(inAtime *types.TimespecOrNow, inMtime *types.TimespecOrNow) (outError types.Error, err error) {
	payload := &directory_Touch_Params{
		inAtime,
		inMtime,
	}
	header := bindings.MessageHeader{
		Type: directory_Touch_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, directory_Touch_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response directory_Touch_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type directory_OpenFile_Params struct {
	inPath string
	inFile *file.File_Request
	inOpenFlags uint32
}


func (s *directory_OpenFile_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inPath); err != nil {
		return err
	}
	if s.inFile == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.inFile).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.WriteUint32(s.inOpenFlags); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_OpenFile_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *directory_OpenFile_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_OpenFile_Params_Versions), func(i int) bool {
		return directory_OpenFile_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_OpenFile_Params_Versions) {
		if directory_OpenFile_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_OpenFile_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inPath = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inFile = &file.File_Request{handleOwner}
		} else {
			s.inFile = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inOpenFlags = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type directory_OpenFile_ResponseParams struct {
	outError types.Error
}


func (s *directory_OpenFile_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_OpenFile_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *directory_OpenFile_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_OpenFile_ResponseParams_Versions), func(i int) bool {
		return directory_OpenFile_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_OpenFile_ResponseParams_Versions) {
		if directory_OpenFile_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_OpenFile_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Directory_Proxy) OpenFile(inPath string, inFile *file.File_Request, inOpenFlags uint32) (outError types.Error, err error) {
	payload := &directory_OpenFile_Params{
		inPath,
		inFile,
		inOpenFlags,
	}
	header := bindings.MessageHeader{
		Type: directory_OpenFile_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, directory_OpenFile_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response directory_OpenFile_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type directory_OpenDirectory_Params struct {
	inPath string
	inDirectory *Directory_Request
	inOpenFlags uint32
}


func (s *directory_OpenDirectory_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inPath); err != nil {
		return err
	}
	if s.inDirectory == nil {
		encoder.WriteInvalidHandle()
	} else {
		if err := encoder.WriteHandle((*s.inDirectory).PassMessagePipe()); err != nil {
			return err
		}
	}
	if err := encoder.WriteUint32(s.inOpenFlags); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_OpenDirectory_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *directory_OpenDirectory_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_OpenDirectory_Params_Versions), func(i int) bool {
		return directory_OpenDirectory_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_OpenDirectory_Params_Versions) {
		if directory_OpenDirectory_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_OpenDirectory_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inPath = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inDirectory = &Directory_Request{handleOwner}
		} else {
			s.inDirectory = nil
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inOpenFlags = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type directory_OpenDirectory_ResponseParams struct {
	outError types.Error
}


func (s *directory_OpenDirectory_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_OpenDirectory_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *directory_OpenDirectory_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_OpenDirectory_ResponseParams_Versions), func(i int) bool {
		return directory_OpenDirectory_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_OpenDirectory_ResponseParams_Versions) {
		if directory_OpenDirectory_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_OpenDirectory_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Directory_Proxy) OpenDirectory(inPath string, inDirectory *Directory_Request, inOpenFlags uint32) (outError types.Error, err error) {
	payload := &directory_OpenDirectory_Params{
		inPath,
		inDirectory,
		inOpenFlags,
	}
	header := bindings.MessageHeader{
		Type: directory_OpenDirectory_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, directory_OpenDirectory_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response directory_OpenDirectory_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type directory_Rename_Params struct {
	inPath string
	inNewPath string
}


func (s *directory_Rename_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inPath); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inNewPath); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Rename_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *directory_Rename_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Rename_Params_Versions), func(i int) bool {
		return directory_Rename_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Rename_Params_Versions) {
		if directory_Rename_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Rename_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inPath = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inNewPath = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type directory_Rename_ResponseParams struct {
	outError types.Error
}


func (s *directory_Rename_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Rename_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *directory_Rename_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Rename_ResponseParams_Versions), func(i int) bool {
		return directory_Rename_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Rename_ResponseParams_Versions) {
		if directory_Rename_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Rename_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Directory_Proxy) Rename(inPath string, inNewPath string) (outError types.Error, err error) {
	payload := &directory_Rename_Params{
		inPath,
		inNewPath,
	}
	header := bindings.MessageHeader{
		Type: directory_Rename_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, directory_Rename_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response directory_Rename_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type directory_Delete_Params struct {
	inPath string
	inDeleteFlags uint32
}


func (s *directory_Delete_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inPath); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inDeleteFlags); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Delete_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *directory_Delete_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Delete_Params_Versions), func(i int) bool {
		return directory_Delete_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Delete_Params_Versions) {
		if directory_Delete_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Delete_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inPath = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inDeleteFlags = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type directory_Delete_ResponseParams struct {
	outError types.Error
}


func (s *directory_Delete_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(int32(s.outError)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var directory_Delete_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *directory_Delete_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(directory_Delete_ResponseParams_Versions), func(i int) bool {
		return directory_Delete_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(directory_Delete_ResponseParams_Versions) {
		if directory_Delete_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := directory_Delete_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.outError = types.Error(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Directory_Proxy) Delete(inPath string, inDeleteFlags uint32) (outError types.Error, err error) {
	payload := &directory_Delete_Params{
		inPath,
		inDeleteFlags,
	}
	header := bindings.MessageHeader{
		Type: directory_Delete_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, directory_Delete_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response directory_Delete_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outError = response.outError
	return
}

type directory_Stub struct {
	connector *bindings.Connector
	impl Directory
}

func NewDirectoryStub(r Directory_Request, impl Directory, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &directory_Stub{connector, impl})
}


func (f *Directory_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Directory_ServiceDescription{}
}


type Directory_ServiceDescription struct{}

func (sd *Directory_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Directory_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Directory_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Directory_ServiceDescription)(nil)


func (s *directory_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case directory_Read_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request directory_Read_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response directory_Read_ResponseParams
		response.outError, 		response.outDirectoryContents, err = s.impl.Read()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: directory_Read_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case directory_Stat_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request directory_Stat_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response directory_Stat_ResponseParams
		response.outError, 		response.outFileInformation, err = s.impl.Stat()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: directory_Stat_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case directory_Touch_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request directory_Touch_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response directory_Touch_ResponseParams
		response.outError, err = s.impl.Touch(request.inAtime, request.inMtime)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: directory_Touch_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case directory_OpenFile_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request directory_OpenFile_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response directory_OpenFile_ResponseParams
		response.outError, err = s.impl.OpenFile(request.inPath, request.inFile, request.inOpenFlags)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: directory_OpenFile_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case directory_OpenDirectory_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request directory_OpenDirectory_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response directory_OpenDirectory_ResponseParams
		response.outError, err = s.impl.OpenDirectory(request.inPath, request.inDirectory, request.inOpenFlags)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: directory_OpenDirectory_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case directory_Rename_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request directory_Rename_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response directory_Rename_ResponseParams
		response.outError, err = s.impl.Rename(request.inPath, request.inNewPath)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: directory_Rename_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case directory_Delete_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request directory_Delete_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response directory_Delete_ResponseParams
		response.outError, err = s.impl.Delete(request.inPath, request.inDeleteFlags)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: directory_Delete_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

