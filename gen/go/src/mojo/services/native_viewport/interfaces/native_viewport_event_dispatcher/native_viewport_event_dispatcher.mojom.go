// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/native_viewport/interfaces/native_viewport_event_dispatcher.mojom
//

package native_viewport_event_dispatcher

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	input_events "mojo/services/input_events/interfaces/input_events"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type NativeViewportEventDispatcher interface {
	OnEvent(inEvent input_events.Event) (err error)
}




type NativeViewportEventDispatcher_Request bindings.InterfaceRequest



type NativeViewportEventDispatcher_Pointer bindings.InterfacePointer


type NativeViewportEventDispatcher_ServiceFactory struct{
	Delegate NativeViewportEventDispatcher_Factory
}

type NativeViewportEventDispatcher_Factory interface {
	Create(request NativeViewportEventDispatcher_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *NativeViewportEventDispatcher_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &NativeViewportEventDispatcher_ServiceDescription{}
}

func (f *NativeViewportEventDispatcher_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := NativeViewportEventDispatcher_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForNativeViewportEventDispatcher creates a message pipe for use with the
// NativeViewportEventDispatcher interface with a NativeViewportEventDispatcher_Request on one end and a NativeViewportEventDispatcher_Pointer on the other.
func CreateMessagePipeForNativeViewportEventDispatcher() (NativeViewportEventDispatcher_Request, NativeViewportEventDispatcher_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return NativeViewportEventDispatcher_Request(r), NativeViewportEventDispatcher_Pointer(p)
}

const nativeViewportEventDispatcher_OnEvent_Name uint32 = 0

type NativeViewportEventDispatcher_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewNativeViewportEventDispatcherProxy(p NativeViewportEventDispatcher_Pointer, waiter bindings.AsyncWaiter) *NativeViewportEventDispatcher_Proxy {
	return &NativeViewportEventDispatcher_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *NativeViewportEventDispatcher_Proxy) Close_Proxy() {
	p.router.Close()
}

type nativeViewportEventDispatcher_OnEvent_Params struct {
	inEvent input_events.Event
}


func (s *nativeViewportEventDispatcher_OnEvent_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inEvent.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewportEventDispatcher_OnEvent_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *nativeViewportEventDispatcher_OnEvent_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewportEventDispatcher_OnEvent_Params_Versions), func(i int) bool {
		return nativeViewportEventDispatcher_OnEvent_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewportEventDispatcher_OnEvent_Params_Versions) {
		if nativeViewportEventDispatcher_OnEvent_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewportEventDispatcher_OnEvent_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inEvent.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type nativeViewportEventDispatcher_OnEvent_ResponseParams struct {
}


func (s *nativeViewportEventDispatcher_OnEvent_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var nativeViewportEventDispatcher_OnEvent_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *nativeViewportEventDispatcher_OnEvent_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(nativeViewportEventDispatcher_OnEvent_ResponseParams_Versions), func(i int) bool {
		return nativeViewportEventDispatcher_OnEvent_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(nativeViewportEventDispatcher_OnEvent_ResponseParams_Versions) {
		if nativeViewportEventDispatcher_OnEvent_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := nativeViewportEventDispatcher_OnEvent_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NativeViewportEventDispatcher_Proxy) OnEvent(inEvent input_events.Event) (err error) {
	payload := &nativeViewportEventDispatcher_OnEvent_Params{
		inEvent,
	}
	header := bindings.MessageHeader{
		Type: nativeViewportEventDispatcher_OnEvent_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, nativeViewportEventDispatcher_OnEvent_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response nativeViewportEventDispatcher_OnEvent_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type nativeViewportEventDispatcher_Stub struct {
	connector *bindings.Connector
	impl NativeViewportEventDispatcher
}

func NewNativeViewportEventDispatcherStub(r NativeViewportEventDispatcher_Request, impl NativeViewportEventDispatcher, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &nativeViewportEventDispatcher_Stub{connector, impl})
}


func (f *NativeViewportEventDispatcher_Request) ServiceDescription() service_describer.ServiceDescription {
	return &NativeViewportEventDispatcher_ServiceDescription{}
}


type NativeViewportEventDispatcher_ServiceDescription struct{}

func (sd *NativeViewportEventDispatcher_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *NativeViewportEventDispatcher_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *NativeViewportEventDispatcher_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*NativeViewportEventDispatcher_ServiceDescription)(nil)


func (s *nativeViewportEventDispatcher_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case nativeViewportEventDispatcher_OnEvent_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request nativeViewportEventDispatcher_OnEvent_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response nativeViewportEventDispatcher_OnEvent_ResponseParams
		err = s.impl.OnEvent(request.inEvent)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: nativeViewportEventDispatcher_OnEvent_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

