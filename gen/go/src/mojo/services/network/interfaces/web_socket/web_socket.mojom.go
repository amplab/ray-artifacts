// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/network/interfaces/web_socket.mojom
//

package web_socket

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type WebSocket_MessageType int32

const (
	WebSocket_MessageType_Continuation WebSocket_MessageType = 0
	WebSocket_MessageType_Text = WebSocket_MessageType_Continuation + 1;
	WebSocket_MessageType_Binary = WebSocket_MessageType_Text + 1;
)


type WebSocket interface {
	Connect(inUrl string, inProtocols []string, inOrigin string, inSendStream system.ConsumerHandle, inClient WebSocketClient_Pointer) (err error)
	Send(inFin bool, inType WebSocket_MessageType, inNumBytes uint32) (err error)
	FlowControl(inQuota int64) (err error)
	Close(inCode uint16, inReason string) (err error)
}




type WebSocket_Request bindings.InterfaceRequest



type WebSocket_Pointer bindings.InterfacePointer


type WebSocket_ServiceFactory struct{
	Delegate WebSocket_Factory
}

type WebSocket_Factory interface {
	Create(request WebSocket_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *WebSocket_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &WebSocket_ServiceDescription{}
}

func (f *WebSocket_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := WebSocket_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForWebSocket creates a message pipe for use with the
// WebSocket interface with a WebSocket_Request on one end and a WebSocket_Pointer on the other.
func CreateMessagePipeForWebSocket() (WebSocket_Request, WebSocket_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return WebSocket_Request(r), WebSocket_Pointer(p)
}

const webSocket_Connect_Name uint32 = 0
const webSocket_Send_Name uint32 = 1
const webSocket_FlowControl_Name uint32 = 2
const webSocket_Close_Name uint32 = 3

type WebSocket_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewWebSocketProxy(p WebSocket_Pointer, waiter bindings.AsyncWaiter) *WebSocket_Proxy {
	return &WebSocket_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *WebSocket_Proxy) Close_Proxy() {
	p.router.Close()
}

type webSocket_Connect_Params struct {
	inUrl string
	inProtocols []string
	inOrigin string
	inSendStream system.ConsumerHandle
	inClient WebSocketClient_Pointer
}


func (s *webSocket_Connect_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(40, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inUrl); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.inProtocols)), 64)
	for _, elem0 := range s.inProtocols {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inOrigin); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inSendStream); err != nil {
		return err
	}
	if err := encoder.WriteInterface(s.inClient.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocket_Connect_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{48, 0},
}

func (s *webSocket_Connect_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocket_Connect_Params_Versions), func(i int) bool {
		return webSocket_Connect_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocket_Connect_Params_Versions) {
		if webSocket_Connect_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocket_Connect_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inUrl = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.inProtocols = make([]string, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					value1, err := decoder.ReadString()
					if err != nil {
						return err
					}
					s.inProtocols[i0] = value1
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inOrigin = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.inSendStream = handle0
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inClient = WebSocketClient_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocket_Proxy) Connect(inUrl string, inProtocols []string, inOrigin string, inSendStream system.ConsumerHandle, inClient WebSocketClient_Pointer) (err error) {
	payload := &webSocket_Connect_Params{
		inUrl,
		inProtocols,
		inOrigin,
		inSendStream,
		inClient,
	}
	header := bindings.MessageHeader{
		Type: webSocket_Connect_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocket_Send_Params struct {
	inFin bool
	inType WebSocket_MessageType
	inNumBytes uint32
}


func (s *webSocket_Send_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteBool(s.inFin); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.inType)); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inNumBytes); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocket_Send_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *webSocket_Send_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocket_Send_Params_Versions), func(i int) bool {
		return webSocket_Send_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocket_Send_Params_Versions) {
		if webSocket_Send_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocket_Send_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.inFin = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inType = WebSocket_MessageType(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inNumBytes = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocket_Proxy) Send(inFin bool, inType WebSocket_MessageType, inNumBytes uint32) (err error) {
	payload := &webSocket_Send_Params{
		inFin,
		inType,
		inNumBytes,
	}
	header := bindings.MessageHeader{
		Type: webSocket_Send_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocket_FlowControl_Params struct {
	inQuota int64
}


func (s *webSocket_FlowControl_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt64(s.inQuota); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocket_FlowControl_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *webSocket_FlowControl_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocket_FlowControl_Params_Versions), func(i int) bool {
		return webSocket_FlowControl_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocket_FlowControl_Params_Versions) {
		if webSocket_FlowControl_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocket_FlowControl_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inQuota = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocket_Proxy) FlowControl(inQuota int64) (err error) {
	payload := &webSocket_FlowControl_Params{
		inQuota,
	}
	header := bindings.MessageHeader{
		Type: webSocket_FlowControl_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocket_Close_Params struct {
	inCode uint16
	inReason string
}


func (s *webSocket_Close_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteUint16(s.inCode); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inReason); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocket_Close_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *webSocket_Close_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocket_Close_Params_Versions), func(i int) bool {
		return webSocket_Close_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocket_Close_Params_Versions) {
		if webSocket_Close_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocket_Close_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.inCode = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inReason = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocket_Proxy) Close(inCode uint16, inReason string) (err error) {
	payload := &webSocket_Close_Params{
		inCode,
		inReason,
	}
	header := bindings.MessageHeader{
		Type: webSocket_Close_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocket_Stub struct {
	connector *bindings.Connector
	impl WebSocket
}

func NewWebSocketStub(r WebSocket_Request, impl WebSocket, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &webSocket_Stub{connector, impl})
}


func (f *WebSocket_Request) ServiceDescription() service_describer.ServiceDescription {
	return &WebSocket_ServiceDescription{}
}


type WebSocket_ServiceDescription struct{}

func (sd *WebSocket_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *WebSocket_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *WebSocket_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*WebSocket_ServiceDescription)(nil)


func (s *webSocket_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case webSocket_Connect_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocket_Connect_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Connect(request.inUrl, request.inProtocols, request.inOrigin, request.inSendStream, request.inClient)
		if err != nil {
			return
		}
	case webSocket_Send_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocket_Send_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Send(request.inFin, request.inType, request.inNumBytes)
		if err != nil {
			return
		}
	case webSocket_FlowControl_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocket_FlowControl_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.FlowControl(request.inQuota)
		if err != nil {
			return
		}
	case webSocket_Close_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocket_Close_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Close(request.inCode, request.inReason)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type WebSocketClient interface {
	DidConnect(inSelectedSubprotocol string, inExtensions string, inReceiveStream system.ConsumerHandle) (err error)
	DidReceiveData(inFin bool, inType WebSocket_MessageType, inNumBytes uint32) (err error)
	DidReceiveFlowControl(inQuota int64) (err error)
	DidFail(inMessage string) (err error)
	DidClose(inWasClean bool, inCode uint16, inReason string) (err error)
}




type WebSocketClient_Request bindings.InterfaceRequest



type WebSocketClient_Pointer bindings.InterfacePointer


type WebSocketClient_ServiceFactory struct{
	Delegate WebSocketClient_Factory
}

type WebSocketClient_Factory interface {
	Create(request WebSocketClient_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *WebSocketClient_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &WebSocketClient_ServiceDescription{}
}

func (f *WebSocketClient_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := WebSocketClient_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForWebSocketClient creates a message pipe for use with the
// WebSocketClient interface with a WebSocketClient_Request on one end and a WebSocketClient_Pointer on the other.
func CreateMessagePipeForWebSocketClient() (WebSocketClient_Request, WebSocketClient_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return WebSocketClient_Request(r), WebSocketClient_Pointer(p)
}

const webSocketClient_DidConnect_Name uint32 = 0
const webSocketClient_DidReceiveData_Name uint32 = 1
const webSocketClient_DidReceiveFlowControl_Name uint32 = 2
const webSocketClient_DidFail_Name uint32 = 3
const webSocketClient_DidClose_Name uint32 = 4

type WebSocketClient_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewWebSocketClientProxy(p WebSocketClient_Pointer, waiter bindings.AsyncWaiter) *WebSocketClient_Proxy {
	return &WebSocketClient_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *WebSocketClient_Proxy) Close_Proxy() {
	p.router.Close()
}

type webSocketClient_DidConnect_Params struct {
	inSelectedSubprotocol string
	inExtensions string
	inReceiveStream system.ConsumerHandle
}


func (s *webSocketClient_DidConnect_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inSelectedSubprotocol); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inExtensions); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inReceiveStream); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocketClient_DidConnect_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *webSocketClient_DidConnect_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocketClient_DidConnect_Params_Versions), func(i int) bool {
		return webSocketClient_DidConnect_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocketClient_DidConnect_Params_Versions) {
		if webSocketClient_DidConnect_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocketClient_DidConnect_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inSelectedSubprotocol = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inExtensions = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.inReceiveStream = handle0
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocketClient_Proxy) DidConnect(inSelectedSubprotocol string, inExtensions string, inReceiveStream system.ConsumerHandle) (err error) {
	payload := &webSocketClient_DidConnect_Params{
		inSelectedSubprotocol,
		inExtensions,
		inReceiveStream,
	}
	header := bindings.MessageHeader{
		Type: webSocketClient_DidConnect_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocketClient_DidReceiveData_Params struct {
	inFin bool
	inType WebSocket_MessageType
	inNumBytes uint32
}


func (s *webSocketClient_DidReceiveData_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteBool(s.inFin); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.inType)); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.inNumBytes); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocketClient_DidReceiveData_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *webSocketClient_DidReceiveData_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocketClient_DidReceiveData_Params_Versions), func(i int) bool {
		return webSocketClient_DidReceiveData_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocketClient_DidReceiveData_Params_Versions) {
		if webSocketClient_DidReceiveData_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocketClient_DidReceiveData_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.inFin = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inType = WebSocket_MessageType(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.inNumBytes = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocketClient_Proxy) DidReceiveData(inFin bool, inType WebSocket_MessageType, inNumBytes uint32) (err error) {
	payload := &webSocketClient_DidReceiveData_Params{
		inFin,
		inType,
		inNumBytes,
	}
	header := bindings.MessageHeader{
		Type: webSocketClient_DidReceiveData_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocketClient_DidReceiveFlowControl_Params struct {
	inQuota int64
}


func (s *webSocketClient_DidReceiveFlowControl_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt64(s.inQuota); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocketClient_DidReceiveFlowControl_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *webSocketClient_DidReceiveFlowControl_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocketClient_DidReceiveFlowControl_Params_Versions), func(i int) bool {
		return webSocketClient_DidReceiveFlowControl_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocketClient_DidReceiveFlowControl_Params_Versions) {
		if webSocketClient_DidReceiveFlowControl_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocketClient_DidReceiveFlowControl_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.inQuota = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocketClient_Proxy) DidReceiveFlowControl(inQuota int64) (err error) {
	payload := &webSocketClient_DidReceiveFlowControl_Params{
		inQuota,
	}
	header := bindings.MessageHeader{
		Type: webSocketClient_DidReceiveFlowControl_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocketClient_DidFail_Params struct {
	inMessage string
}


func (s *webSocketClient_DidFail_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inMessage); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocketClient_DidFail_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *webSocketClient_DidFail_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocketClient_DidFail_Params_Versions), func(i int) bool {
		return webSocketClient_DidFail_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocketClient_DidFail_Params_Versions) {
		if webSocketClient_DidFail_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocketClient_DidFail_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inMessage = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocketClient_Proxy) DidFail(inMessage string) (err error) {
	payload := &webSocketClient_DidFail_Params{
		inMessage,
	}
	header := bindings.MessageHeader{
		Type: webSocketClient_DidFail_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocketClient_DidClose_Params struct {
	inWasClean bool
	inCode uint16
	inReason string
}


func (s *webSocketClient_DidClose_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteBool(s.inWasClean); err != nil {
		return err
	}
	if err := encoder.WriteUint16(s.inCode); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inReason); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var webSocketClient_DidClose_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *webSocketClient_DidClose_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(webSocketClient_DidClose_Params_Versions), func(i int) bool {
		return webSocketClient_DidClose_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(webSocketClient_DidClose_Params_Versions) {
		if webSocketClient_DidClose_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := webSocketClient_DidClose_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.inWasClean = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.inCode = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inReason = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *WebSocketClient_Proxy) DidClose(inWasClean bool, inCode uint16, inReason string) (err error) {
	payload := &webSocketClient_DidClose_Params{
		inWasClean,
		inCode,
		inReason,
	}
	header := bindings.MessageHeader{
		Type: webSocketClient_DidClose_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type webSocketClient_Stub struct {
	connector *bindings.Connector
	impl WebSocketClient
}

func NewWebSocketClientStub(r WebSocketClient_Request, impl WebSocketClient, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &webSocketClient_Stub{connector, impl})
}


func (f *WebSocketClient_Request) ServiceDescription() service_describer.ServiceDescription {
	return &WebSocketClient_ServiceDescription{}
}


type WebSocketClient_ServiceDescription struct{}

func (sd *WebSocketClient_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *WebSocketClient_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *WebSocketClient_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*WebSocketClient_ServiceDescription)(nil)


func (s *webSocketClient_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case webSocketClient_DidConnect_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocketClient_DidConnect_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.DidConnect(request.inSelectedSubprotocol, request.inExtensions, request.inReceiveStream)
		if err != nil {
			return
		}
	case webSocketClient_DidReceiveData_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocketClient_DidReceiveData_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.DidReceiveData(request.inFin, request.inType, request.inNumBytes)
		if err != nil {
			return
		}
	case webSocketClient_DidReceiveFlowControl_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocketClient_DidReceiveFlowControl_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.DidReceiveFlowControl(request.inQuota)
		if err != nil {
			return
		}
	case webSocketClient_DidFail_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocketClient_DidFail_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.DidFail(request.inMessage)
		if err != nil {
			return
		}
	case webSocketClient_DidClose_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request webSocketClient_DidClose_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.DidClose(request.inWasClean, request.inCode, request.inReason)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

