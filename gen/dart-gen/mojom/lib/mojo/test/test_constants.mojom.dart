// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library test_constants_mojom;
import 'dart:async';
import 'dart:collection';
import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/mojom_types.mojom.dart' as mojom_types;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
const bool kBoolValue = true;
const int kInt8Value = -2;
const int kUint8Value = 128;
const int kInt16Value = -233;
const int kUint16Value = 44204;
const int kInt32Value = -44204;
const int kUint32Value = 4294967295;
const int kInt64Value = -9223372036854775807;
const int kUint64Value = 9999999999999999999;
const double kDoubleValue = 3.14159;
const double kDoubleInfinity = double.INFINITY;
const double kDoubleNegativeInfinity = double.NEGATIVE_INFINITY;
const double kDoubleNaN = double.NAN;
const double kFloatValue = 2.71828;
const double kFloatInfinity = double.INFINITY;
const double kFloatNegativeInfinity = double.NEGATIVE_INFINITY;
const double kFloatNaN = double.NAN;



class StructWithConstants extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];
  static const int kInt8Value = 5;
  static const double kFloatValue = 765.432;

  StructWithConstants() : super(kVersions.last.size);

  StructWithConstants.init(
  ) : super(kVersions.last.size);

  static StructWithConstants deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static StructWithConstants decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    StructWithConstants result = new StructWithConstants();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "StructWithConstants";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "StructWithConstants("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _InterfaceWithConstantsServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class InterfaceWithConstants {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _InterfaceWithConstantsServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static InterfaceWithConstantsProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    InterfaceWithConstantsProxy p = new InterfaceWithConstantsProxy.unbound();
    String name = serviceName ?? InterfaceWithConstants.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  static const int kUint32Value = 20100722;
  static const double kDoubleValue = 12.34567;
}

abstract class InterfaceWithConstantsInterface
    implements bindings.MojoInterface<InterfaceWithConstants>,
               InterfaceWithConstants {
  factory InterfaceWithConstantsInterface([InterfaceWithConstants impl]) =>
      new InterfaceWithConstantsStub.unbound(impl);

  factory InterfaceWithConstantsInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [InterfaceWithConstants impl]) =>
      new InterfaceWithConstantsStub.fromEndpoint(endpoint, impl);

  factory InterfaceWithConstantsInterface.fromMock(
      InterfaceWithConstants mock) =>
      new InterfaceWithConstantsProxy.fromMock(mock);
}

abstract class InterfaceWithConstantsInterfaceRequest
    implements bindings.MojoInterface<InterfaceWithConstants>,
               InterfaceWithConstants {
  factory InterfaceWithConstantsInterfaceRequest() =>
      new InterfaceWithConstantsProxy.unbound();
}

class _InterfaceWithConstantsProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<InterfaceWithConstants> {
  InterfaceWithConstants impl;

  _InterfaceWithConstantsProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _InterfaceWithConstantsProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _InterfaceWithConstantsProxyControl.unbound() : super.unbound();

  String get serviceName => InterfaceWithConstants.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_InterfaceWithConstantsProxyControl($superString)";
  }
}

class InterfaceWithConstantsProxy
    extends bindings.Proxy<InterfaceWithConstants>
    implements InterfaceWithConstants,
               InterfaceWithConstantsInterface,
               InterfaceWithConstantsInterfaceRequest {
  InterfaceWithConstantsProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _InterfaceWithConstantsProxyControl.fromEndpoint(endpoint));

  InterfaceWithConstantsProxy.fromHandle(core.MojoHandle handle)
      : super(new _InterfaceWithConstantsProxyControl.fromHandle(handle));

  InterfaceWithConstantsProxy.unbound()
      : super(new _InterfaceWithConstantsProxyControl.unbound());

  factory InterfaceWithConstantsProxy.fromMock(InterfaceWithConstants mock) {
    InterfaceWithConstantsProxy newMockedProxy =
        new InterfaceWithConstantsProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static InterfaceWithConstantsProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For InterfaceWithConstantsProxy"));
    return new InterfaceWithConstantsProxy.fromEndpoint(endpoint);
  }


}

class _InterfaceWithConstantsStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<InterfaceWithConstants> {
  InterfaceWithConstants _impl;

  _InterfaceWithConstantsStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [InterfaceWithConstants impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _InterfaceWithConstantsStubControl.fromHandle(
      core.MojoHandle handle, [InterfaceWithConstants impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _InterfaceWithConstantsStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => InterfaceWithConstants.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  InterfaceWithConstants get impl => _impl;
  set impl(InterfaceWithConstants d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_InterfaceWithConstantsStubControl($superString)";
  }

  int get version => 0;
}

class InterfaceWithConstantsStub
    extends bindings.Stub<InterfaceWithConstants>
    implements InterfaceWithConstants,
               InterfaceWithConstantsInterface,
               InterfaceWithConstantsInterfaceRequest {
  InterfaceWithConstantsStub.unbound([InterfaceWithConstants impl])
      : super(new _InterfaceWithConstantsStubControl.unbound(impl));

  InterfaceWithConstantsStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [InterfaceWithConstants impl])
      : super(new _InterfaceWithConstantsStubControl.fromEndpoint(endpoint, impl));

  InterfaceWithConstantsStub.fromHandle(
      core.MojoHandle handle, [InterfaceWithConstants impl])
      : super(new _InterfaceWithConstantsStubControl.fromHandle(handle, impl));

  static InterfaceWithConstantsStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For InterfaceWithConstantsStub"));
    return new InterfaceWithConstantsStub.fromEndpoint(endpoint);
  }


}


mojom_types.RuntimeTypeInfo getRuntimeTypeInfo() => _runtimeTypeInfo ??
    _initRuntimeTypeInfo();

Map<String, mojom_types.UserDefinedType> getAllMojomTypeDefinitions() {
  return getRuntimeTypeInfo().typeMap;
}

var _runtimeTypeInfo;
mojom_types.RuntimeTypeInfo  _initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this
  // file. The string contains the base64 encoding of the gzip-compressed bytes.
  var serializedRuntimeTypeInfo = "H4sIAAAJbogC/5JggAABKG0ApdHFYTQHGo2urgNJnAlJ3AFKGwKxJhCHRAa4xnu7Rlrl5mfl65WkFpfoeeaVpBalJSanhmeWZDjn5xWXJOaVFEP16QGxGnZ9wSVFpcklaJo0kOxnRnMnI8j9TBC+BlRcgQEVHGBE5TugycPCyQNK/4eCBCj/App6OSAWA2JcntSAuoFQcKCHNyg8uYA4DojDgFg/Iz83Vb8gOTe/KLOkSr8osVI3Ob8oVb+4KFkfZLZ+QWlSTmayfibM9GL9pMy8lMy89GJ9kLUQMj4ZZp8eSFMuIvwYsMQ/cjzDwsMOiM1IiWe97FCgm4yNwhJzSlPJ0u+SD/RaKlQ/selXAS0dw+IdRlMa79JALAzEWBMpEKgCsSxKvGNXie4fHSBmH4TxbglNk8TlU71sYGRaQKMMDKyA2IgE/W45+YklSAZwoOdztPhF9wcgAAD//y786BIABQAA";

  // Deserialize RuntimeTypeInfo
  var bytes = BASE64.decode(serializedRuntimeTypeInfo);
  var unzippedBytes = new ZLibDecoder().convert(bytes);
  var bdata = new ByteData.view(unzippedBytes.buffer);
  var message = new bindings.Message(bdata, null, unzippedBytes.length, 0);
  _runtimeTypeInfo = mojom_types.RuntimeTypeInfo.deserialize(message);
  return _runtimeTypeInfo;
}
