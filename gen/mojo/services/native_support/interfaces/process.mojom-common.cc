// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/native_support/interfaces/process.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace native_support {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
Process_Spawn_Params_Data* Process_Spawn_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Process_Spawn_Params_Data))) Process_Spawn_Params_Data();
}

// static
mojo::internal::ValidationError Process_Spawn_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Process_Spawn_Params_Data* object = static_cast<const Process_Spawn_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 64 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->path.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null path field in Process_Spawn_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->path.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->path.offset),
          bounds_checker, &path_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->argv.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams argv_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));
  auto validate_retval =
      mojo::Array<mojo::Array<uint8_t> >::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->argv.offset),
          bounds_checker, &argv_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->envp.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams envp_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));
  auto validate_retval =
      mojo::Array<mojo::Array<uint8_t> >::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->envp.offset),
          bounds_checker, &envp_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle stdin_file_handle = object->stdin_file.handle;
  if (!bounds_checker->ClaimHandle(stdin_file_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle stdout_file_handle = object->stdout_file.handle;
  if (!bounds_checker->ClaimHandle(stdout_file_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle stderr_file_handle = object->stderr_file.handle;
  if (!bounds_checker->ClaimHandle(stderr_file_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle process_controller_handle = object->process_controller;
  if (process_controller_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid process_controller field in Process_Spawn_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(process_controller_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Process_Spawn_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->path, handles);
  mojo::internal::Encode(&this->argv, handles);
  mojo::internal::Encode(&this->envp, handles);
  mojo::internal::EncodeHandle(&this->stdin_file, handles);
  mojo::internal::EncodeHandle(&this->stdout_file, handles);
  mojo::internal::EncodeHandle(&this->stderr_file, handles);
  mojo::internal::EncodeHandle(&this->process_controller, handles);
}

void Process_Spawn_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->path, handles);
  mojo::internal::Decode(&this->argv, handles);
  mojo::internal::Decode(&this->envp, handles);
  mojo::internal::DecodeHandle(&this->stdin_file, handles);
  mojo::internal::DecodeHandle(&this->stdout_file, handles);
  mojo::internal::DecodeHandle(&this->stderr_file, handles);
  mojo::internal::DecodeHandle(&this->process_controller, handles);
}

Process_Spawn_Params_Data::Process_Spawn_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Process_Spawn_ResponseParams_Data* Process_Spawn_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Process_Spawn_ResponseParams_Data))) Process_Spawn_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Process_Spawn_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Process_Spawn_ResponseParams_Data* object = static_cast<const Process_Spawn_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Process_Spawn_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Process_Spawn_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Process_Spawn_ResponseParams_Data::Process_Spawn_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Process_SpawnWithTerminal_Params_Data* Process_SpawnWithTerminal_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Process_SpawnWithTerminal_Params_Data))) Process_SpawnWithTerminal_Params_Data();
}

// static
mojo::internal::ValidationError Process_SpawnWithTerminal_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Process_SpawnWithTerminal_Params_Data* object = static_cast<const Process_SpawnWithTerminal_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 48 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->path.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null path field in Process_SpawnWithTerminal_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->path.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<uint8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->path.offset),
          bounds_checker, &path_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->argv.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams argv_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));
  auto validate_retval =
      mojo::Array<mojo::Array<uint8_t> >::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->argv.offset),
          bounds_checker, &argv_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->envp.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams envp_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));
  auto validate_retval =
      mojo::Array<mojo::Array<uint8_t> >::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->envp.offset),
          bounds_checker, &envp_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle terminal_file_handle = object->terminal_file.handle;
  if (terminal_file_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid terminal_file field in Process_SpawnWithTerminal_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(terminal_file_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle process_controller_handle = object->process_controller;
  if (process_controller_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid process_controller field in Process_SpawnWithTerminal_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(process_controller_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Process_SpawnWithTerminal_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->path, handles);
  mojo::internal::Encode(&this->argv, handles);
  mojo::internal::Encode(&this->envp, handles);
  mojo::internal::EncodeHandle(&this->terminal_file, handles);
  mojo::internal::EncodeHandle(&this->process_controller, handles);
}

void Process_SpawnWithTerminal_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->path, handles);
  mojo::internal::Decode(&this->argv, handles);
  mojo::internal::Decode(&this->envp, handles);
  mojo::internal::DecodeHandle(&this->terminal_file, handles);
  mojo::internal::DecodeHandle(&this->process_controller, handles);
}

Process_SpawnWithTerminal_Params_Data::Process_SpawnWithTerminal_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Process_SpawnWithTerminal_ResponseParams_Data* Process_SpawnWithTerminal_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Process_SpawnWithTerminal_ResponseParams_Data))) Process_SpawnWithTerminal_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Process_SpawnWithTerminal_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Process_SpawnWithTerminal_ResponseParams_Data* object = static_cast<const Process_SpawnWithTerminal_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Process_SpawnWithTerminal_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Process_SpawnWithTerminal_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Process_SpawnWithTerminal_ResponseParams_Data::Process_SpawnWithTerminal_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
ProcessController_Wait_Params_Data* ProcessController_Wait_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ProcessController_Wait_Params_Data))) ProcessController_Wait_Params_Data();
}

// static
mojo::internal::ValidationError ProcessController_Wait_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ProcessController_Wait_Params_Data* object = static_cast<const ProcessController_Wait_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ProcessController_Wait_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ProcessController_Wait_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ProcessController_Wait_Params_Data::ProcessController_Wait_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ProcessController_Wait_ResponseParams_Data* ProcessController_Wait_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ProcessController_Wait_ResponseParams_Data))) ProcessController_Wait_ResponseParams_Data();
}

// static
mojo::internal::ValidationError ProcessController_Wait_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ProcessController_Wait_ResponseParams_Data* object = static_cast<const ProcessController_Wait_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ProcessController_Wait_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ProcessController_Wait_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ProcessController_Wait_ResponseParams_Data::ProcessController_Wait_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
ProcessController_Kill_Params_Data* ProcessController_Kill_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ProcessController_Kill_Params_Data))) ProcessController_Kill_Params_Data();
}

// static
mojo::internal::ValidationError ProcessController_Kill_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ProcessController_Kill_Params_Data* object = static_cast<const ProcessController_Kill_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ProcessController_Kill_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ProcessController_Kill_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ProcessController_Kill_Params_Data::ProcessController_Kill_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ProcessController_Kill_ResponseParams_Data* ProcessController_Kill_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ProcessController_Kill_ResponseParams_Data))) ProcessController_Kill_ResponseParams_Data();
}

// static
mojo::internal::ValidationError ProcessController_Kill_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ProcessController_Kill_ResponseParams_Data* object = static_cast<const ProcessController_Kill_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ProcessController_Kill_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ProcessController_Kill_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ProcessController_Kill_ResponseParams_Data::ProcessController_Kill_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError ProcessRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'Process', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::Process_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Process_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Process_Base::MessageOrdinals::Spawn: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Process', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Process_Spawn_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Process', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Process_Base::MessageOrdinals::SpawnWithTerminal: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Process', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Process_SpawnWithTerminal_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Process', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'Process'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError ProcessResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'Process', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Process', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::Process_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Process_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Process_Base::MessageOrdinals::Spawn: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Process_Spawn_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Process',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Process_Base::MessageOrdinals::SpawnWithTerminal: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Process_SpawnWithTerminal_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Process',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'Process'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError ProcessControllerRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'ProcessController', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::ProcessController_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ProcessController_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ProcessController_Base::MessageOrdinals::Wait: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'ProcessController', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::ProcessController_Wait_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'ProcessController', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::ProcessController_Base::MessageOrdinals::Kill: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'ProcessController', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::ProcessController_Kill_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'ProcessController', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'ProcessController'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError ProcessControllerResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'ProcessController', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'ProcessController', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::ProcessController_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ProcessController_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ProcessController_Base::MessageOrdinals::Wait: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::ProcessController_Wait_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'ProcessController',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::ProcessController_Base::MessageOrdinals::Kill: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::ProcessController_Kill_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'ProcessController',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'ProcessController'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::Process_Base::Name_[] = "native_support::Process";
const uint32_t internal::Process_Base::Version_;

// Constants

// Enums
const uint32_t internal::ProcessController_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
Process_Spawn_ParamsPtr Process_Spawn_Params::New() {
  Process_Spawn_ParamsPtr rv;
  mojo::internal::StructHelper<Process_Spawn_Params>::Initialize(&rv);
  return rv;
}

Process_Spawn_Params::Process_Spawn_Params()
    : path(),
      argv(),
      envp(),
      stdin_file(),
      stdout_file(),
      stderr_file(),
      process_controller() {
}

Process_Spawn_Params::~Process_Spawn_Params() {
}



bool Process_Spawn_Params::Equals(const Process_Spawn_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->path, other.path))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::Array<uint8_t> >>::Equals(this->argv, other.argv))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::Array<uint8_t> >>::Equals(this->envp, other.envp))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<mojo::files::File>>::Equals(this->stdin_file, other.stdin_file))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<mojo::files::File>>::Equals(this->stdout_file, other.stdout_file))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<mojo::files::File>>::Equals(this->stderr_file, other.stderr_file))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<ProcessController>>::Equals(this->process_controller, other.process_controller))
    return false;
  return true;
}


size_t Process_Spawn_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Process_Spawn_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Process_Spawn_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Process_Spawn_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Process_Spawn_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Process_Spawn_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Process_Spawn_Params_Data* input =
      static_cast<internal::Process_Spawn_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Process_Spawn_Params& input) {
  size_t size = sizeof(internal::Process_Spawn_Params_Data);
  size += GetSerializedSize_(input.path);
  size += GetSerializedSize_(input.argv);
  size += GetSerializedSize_(input.envp);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Process_Spawn_Params* input,
    mojo::internal::Buffer* buf,
    internal::Process_Spawn_Params_Data** output) {
  if (input) {
    internal::Process_Spawn_Params_Data* result =
        internal::Process_Spawn_Params_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams path_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->path, buf, &result->path.ptr,
                            &path_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->path.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Process_Spawn_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams argv_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));auto retval =mojo::SerializeArray_(&input->argv, buf, &result->argv.ptr,
                            &argv_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams envp_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));auto retval =mojo::SerializeArray_(&input->envp, buf, &result->envp.ptr,
                            &envp_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    mojo::internal::InterfaceHandleToData(input->stdin_file.Pass(),
                                          &result->stdin_file);
    mojo::internal::InterfaceHandleToData(input->stdout_file.Pass(),
                                          &result->stdout_file);
    mojo::internal::InterfaceHandleToData(input->stderr_file.Pass(),
                                          &result->stderr_file);
    result->process_controller = input->process_controller.PassMessagePipe().release();
    if (!result->process_controller.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid process_controller in Process_Spawn_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Process_Spawn_Params_Data* input,
                  Process_Spawn_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->path.ptr, &result->path);
      Deserialize_(input->argv.ptr, &result->argv);
      Deserialize_(input->envp.ptr, &result->envp);
      mojo::internal::InterfaceDataToHandle(&input->stdin_file, &result->stdin_file);
      mojo::internal::InterfaceDataToHandle(&input->stdout_file, &result->stdout_file);
      mojo::internal::InterfaceDataToHandle(&input->stderr_file, &result->stderr_file);
      result->process_controller.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->process_controller)));
    } while (false);
  }
}


// static
Process_Spawn_ResponseParamsPtr Process_Spawn_ResponseParams::New() {
  Process_Spawn_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Process_Spawn_ResponseParams>::Initialize(&rv);
  return rv;
}

Process_Spawn_ResponseParams::Process_Spawn_ResponseParams()
    : error() {
}

Process_Spawn_ResponseParams::~Process_Spawn_ResponseParams() {
}


Process_Spawn_ResponseParamsPtr Process_Spawn_ResponseParams::Clone() const {
  Process_Spawn_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool Process_Spawn_ResponseParams::Equals(const Process_Spawn_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t Process_Spawn_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Process_Spawn_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Process_Spawn_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Process_Spawn_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Process_Spawn_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Process_Spawn_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Process_Spawn_ResponseParams_Data* input =
      static_cast<internal::Process_Spawn_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Process_Spawn_ResponseParams& input) {
  size_t size = sizeof(internal::Process_Spawn_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Process_Spawn_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Process_Spawn_ResponseParams_Data** output) {
  if (input) {
    internal::Process_Spawn_ResponseParams_Data* result =
        internal::Process_Spawn_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Process_Spawn_ResponseParams_Data* input,
                  Process_Spawn_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
Process_SpawnWithTerminal_ParamsPtr Process_SpawnWithTerminal_Params::New() {
  Process_SpawnWithTerminal_ParamsPtr rv;
  mojo::internal::StructHelper<Process_SpawnWithTerminal_Params>::Initialize(&rv);
  return rv;
}

Process_SpawnWithTerminal_Params::Process_SpawnWithTerminal_Params()
    : path(),
      argv(),
      envp(),
      terminal_file(),
      process_controller() {
}

Process_SpawnWithTerminal_Params::~Process_SpawnWithTerminal_Params() {
}



bool Process_SpawnWithTerminal_Params::Equals(const Process_SpawnWithTerminal_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<uint8_t>>::Equals(this->path, other.path))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::Array<uint8_t> >>::Equals(this->argv, other.argv))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::Array<uint8_t> >>::Equals(this->envp, other.envp))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<mojo::files::File>>::Equals(this->terminal_file, other.terminal_file))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<ProcessController>>::Equals(this->process_controller, other.process_controller))
    return false;
  return true;
}


size_t Process_SpawnWithTerminal_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Process_SpawnWithTerminal_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Process_SpawnWithTerminal_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Process_SpawnWithTerminal_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Process_SpawnWithTerminal_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Process_SpawnWithTerminal_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Process_SpawnWithTerminal_Params_Data* input =
      static_cast<internal::Process_SpawnWithTerminal_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Process_SpawnWithTerminal_Params& input) {
  size_t size = sizeof(internal::Process_SpawnWithTerminal_Params_Data);
  size += GetSerializedSize_(input.path);
  size += GetSerializedSize_(input.argv);
  size += GetSerializedSize_(input.envp);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Process_SpawnWithTerminal_Params* input,
    mojo::internal::Buffer* buf,
    internal::Process_SpawnWithTerminal_Params_Data** output) {
  if (input) {
    internal::Process_SpawnWithTerminal_Params_Data* result =
        internal::Process_SpawnWithTerminal_Params_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams path_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->path, buf, &result->path.ptr,
                            &path_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->path.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Process_SpawnWithTerminal_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams argv_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));auto retval =mojo::SerializeArray_(&input->argv, buf, &result->argv.ptr,
                            &argv_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {
      const mojo::internal::ArrayValidateParams envp_validate_params(
        0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));auto retval =mojo::SerializeArray_(&input->envp, buf, &result->envp.ptr,
                            &envp_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    mojo::internal::InterfaceHandleToData(input->terminal_file.Pass(),
                                          &result->terminal_file);
    if (!result->terminal_file.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid terminal_file in Process_SpawnWithTerminal_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->process_controller = input->process_controller.PassMessagePipe().release();
    if (!result->process_controller.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid process_controller in Process_SpawnWithTerminal_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Process_SpawnWithTerminal_Params_Data* input,
                  Process_SpawnWithTerminal_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->path.ptr, &result->path);
      Deserialize_(input->argv.ptr, &result->argv);
      Deserialize_(input->envp.ptr, &result->envp);
      mojo::internal::InterfaceDataToHandle(&input->terminal_file, &result->terminal_file);
      result->process_controller.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->process_controller)));
    } while (false);
  }
}


// static
Process_SpawnWithTerminal_ResponseParamsPtr Process_SpawnWithTerminal_ResponseParams::New() {
  Process_SpawnWithTerminal_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Process_SpawnWithTerminal_ResponseParams>::Initialize(&rv);
  return rv;
}

Process_SpawnWithTerminal_ResponseParams::Process_SpawnWithTerminal_ResponseParams()
    : error() {
}

Process_SpawnWithTerminal_ResponseParams::~Process_SpawnWithTerminal_ResponseParams() {
}


Process_SpawnWithTerminal_ResponseParamsPtr Process_SpawnWithTerminal_ResponseParams::Clone() const {
  Process_SpawnWithTerminal_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool Process_SpawnWithTerminal_ResponseParams::Equals(const Process_SpawnWithTerminal_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t Process_SpawnWithTerminal_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Process_SpawnWithTerminal_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Process_SpawnWithTerminal_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Process_SpawnWithTerminal_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Process_SpawnWithTerminal_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Process_SpawnWithTerminal_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Process_SpawnWithTerminal_ResponseParams_Data* input =
      static_cast<internal::Process_SpawnWithTerminal_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Process_SpawnWithTerminal_ResponseParams& input) {
  size_t size = sizeof(internal::Process_SpawnWithTerminal_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Process_SpawnWithTerminal_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Process_SpawnWithTerminal_ResponseParams_Data** output) {
  if (input) {
    internal::Process_SpawnWithTerminal_ResponseParams_Data* result =
        internal::Process_SpawnWithTerminal_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Process_SpawnWithTerminal_ResponseParams_Data* input,
                  Process_SpawnWithTerminal_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}



// static
ProcessController_Wait_ParamsPtr ProcessController_Wait_Params::New() {
  ProcessController_Wait_ParamsPtr rv;
  mojo::internal::StructHelper<ProcessController_Wait_Params>::Initialize(&rv);
  return rv;
}

ProcessController_Wait_Params::ProcessController_Wait_Params() {
}

ProcessController_Wait_Params::~ProcessController_Wait_Params() {
}


ProcessController_Wait_ParamsPtr ProcessController_Wait_Params::Clone() const {
  ProcessController_Wait_ParamsPtr rv(New());
  return rv;
}


bool ProcessController_Wait_Params::Equals(const ProcessController_Wait_Params& other) const {
  return true;
}


size_t ProcessController_Wait_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ProcessController_Wait_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ProcessController_Wait_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ProcessController_Wait_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ProcessController_Wait_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ProcessController_Wait_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ProcessController_Wait_Params_Data* input =
      static_cast<internal::ProcessController_Wait_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ProcessController_Wait_Params& input) {
  size_t size = sizeof(internal::ProcessController_Wait_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ProcessController_Wait_Params* input,
    mojo::internal::Buffer* buf,
    internal::ProcessController_Wait_Params_Data** output) {
  if (input) {
    internal::ProcessController_Wait_Params_Data* result =
        internal::ProcessController_Wait_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ProcessController_Wait_Params_Data* input,
                  ProcessController_Wait_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
ProcessController_Wait_ResponseParamsPtr ProcessController_Wait_ResponseParams::New() {
  ProcessController_Wait_ResponseParamsPtr rv;
  mojo::internal::StructHelper<ProcessController_Wait_ResponseParams>::Initialize(&rv);
  return rv;
}

ProcessController_Wait_ResponseParams::ProcessController_Wait_ResponseParams()
    : error(),
      exit_status() {
}

ProcessController_Wait_ResponseParams::~ProcessController_Wait_ResponseParams() {
}


ProcessController_Wait_ResponseParamsPtr ProcessController_Wait_ResponseParams::Clone() const {
  ProcessController_Wait_ResponseParamsPtr rv(New());
  rv->error = error;
  rv->exit_status = exit_status;
  return rv;
}


bool ProcessController_Wait_ResponseParams::Equals(const ProcessController_Wait_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->exit_status, other.exit_status))
    return false;
  return true;
}


size_t ProcessController_Wait_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ProcessController_Wait_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ProcessController_Wait_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ProcessController_Wait_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ProcessController_Wait_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ProcessController_Wait_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ProcessController_Wait_ResponseParams_Data* input =
      static_cast<internal::ProcessController_Wait_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ProcessController_Wait_ResponseParams& input) {
  size_t size = sizeof(internal::ProcessController_Wait_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ProcessController_Wait_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::ProcessController_Wait_ResponseParams_Data** output) {
  if (input) {
    internal::ProcessController_Wait_ResponseParams_Data* result =
        internal::ProcessController_Wait_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    result->exit_status = input->exit_status;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ProcessController_Wait_ResponseParams_Data* input,
                  ProcessController_Wait_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
      result->exit_status = input->exit_status;
    } while (false);
  }
}



// static
ProcessController_Kill_ParamsPtr ProcessController_Kill_Params::New() {
  ProcessController_Kill_ParamsPtr rv;
  mojo::internal::StructHelper<ProcessController_Kill_Params>::Initialize(&rv);
  return rv;
}

ProcessController_Kill_Params::ProcessController_Kill_Params()
    : signal() {
}

ProcessController_Kill_Params::~ProcessController_Kill_Params() {
}


ProcessController_Kill_ParamsPtr ProcessController_Kill_Params::Clone() const {
  ProcessController_Kill_ParamsPtr rv(New());
  rv->signal = signal;
  return rv;
}


bool ProcessController_Kill_Params::Equals(const ProcessController_Kill_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->signal, other.signal))
    return false;
  return true;
}


size_t ProcessController_Kill_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ProcessController_Kill_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ProcessController_Kill_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ProcessController_Kill_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ProcessController_Kill_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ProcessController_Kill_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ProcessController_Kill_Params_Data* input =
      static_cast<internal::ProcessController_Kill_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ProcessController_Kill_Params& input) {
  size_t size = sizeof(internal::ProcessController_Kill_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ProcessController_Kill_Params* input,
    mojo::internal::Buffer* buf,
    internal::ProcessController_Kill_Params_Data** output) {
  if (input) {
    internal::ProcessController_Kill_Params_Data* result =
        internal::ProcessController_Kill_Params_Data::New(buf);
    result->signal = input->signal;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ProcessController_Kill_Params_Data* input,
                  ProcessController_Kill_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->signal = input->signal;
    } while (false);
  }
}


// static
ProcessController_Kill_ResponseParamsPtr ProcessController_Kill_ResponseParams::New() {
  ProcessController_Kill_ResponseParamsPtr rv;
  mojo::internal::StructHelper<ProcessController_Kill_ResponseParams>::Initialize(&rv);
  return rv;
}

ProcessController_Kill_ResponseParams::ProcessController_Kill_ResponseParams()
    : error() {
}

ProcessController_Kill_ResponseParams::~ProcessController_Kill_ResponseParams() {
}


ProcessController_Kill_ResponseParamsPtr ProcessController_Kill_ResponseParams::Clone() const {
  ProcessController_Kill_ResponseParamsPtr rv(New());
  rv->error = error;
  return rv;
}


bool ProcessController_Kill_ResponseParams::Equals(const ProcessController_Kill_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::files::Error>::Equals(this->error, other.error))
    return false;
  return true;
}


size_t ProcessController_Kill_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ProcessController_Kill_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ProcessController_Kill_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ProcessController_Kill_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ProcessController_Kill_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ProcessController_Kill_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ProcessController_Kill_ResponseParams_Data* input =
      static_cast<internal::ProcessController_Kill_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ProcessController_Kill_ResponseParams& input) {
  size_t size = sizeof(internal::ProcessController_Kill_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ProcessController_Kill_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::ProcessController_Kill_ResponseParams_Data** output) {
  if (input) {
    internal::ProcessController_Kill_ResponseParams_Data* result =
        internal::ProcessController_Kill_ResponseParams_Data::New(buf);
    result->error =
      static_cast<int32_t>(input->error);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ProcessController_Kill_ResponseParams_Data* input,
                  ProcessController_Kill_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->error = static_cast<mojo::files::Error>(input->error);
    } while (false);
  }
}

}  // namespace native_support
