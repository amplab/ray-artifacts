// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_COMMON_H_
#define MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/flog/interfaces/flog.mojom-internal.h"
namespace mojo {
namespace flog {

// --- Interface Forward Declarations ---
class FlogService;
class FlogServiceRequestValidator;
class FlogServiceResponseValidator;
class FlogService_Synchronous;
class FlogLogger;
class FlogLoggerRequestValidator;
class FlogLogger_Synchronous;
class FlogReader;
class FlogReaderRequestValidator;
class FlogReaderResponseValidator;
class FlogReader_Synchronous;

// --- Struct Forward Declarations ---
class FlogDescription;

using FlogDescriptionPtr = mojo::InlinedStructPtr<FlogDescription>;


class FlogEntry;

using FlogEntryPtr = mojo::StructPtr<FlogEntry>;


class FlogChannelCreationEntryDetails;

using FlogChannelCreationEntryDetailsPtr = mojo::InlinedStructPtr<FlogChannelCreationEntryDetails>;


class FlogChannelMessageEntryDetails;

using FlogChannelMessageEntryDetailsPtr = mojo::StructPtr<FlogChannelMessageEntryDetails>;


class FlogChannelDeletionEntryDetails;

using FlogChannelDeletionEntryDetailsPtr = mojo::InlinedStructPtr<FlogChannelDeletionEntryDetails>;



// --- Union Forward Declarations ---
class FlogEntryDetails;
typedef mojo::StructPtr<FlogEntryDetails> FlogEntryDetailsPtr;

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class FlogService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = FlogServiceRequestValidator;
  using ResponseValidator_ = FlogServiceResponseValidator;
  using Synchronous_ = FlogService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    CreateLogger = 0,
    GetLogDescriptions = 1,
    CreateReader = 2,
  };


  virtual ~FlogService_Base() {}
};

}  // namespace internal

// Async interface declaration

class FlogServiceProxy;
class FlogServiceStub;
class FlogService_Synchronous;

class FlogServiceRequestValidator;
class FlogServiceResponseValidator;

class FlogService : public internal::FlogService_Base {
 public:
  virtual ~FlogService() override {}

  using Proxy_ = FlogServiceProxy;
  using Stub_ = FlogServiceStub;
  virtual void CreateLogger(mojo::InterfaceRequest<FlogLogger> logger, const mojo::String& label) = 0;
  using GetLogDescriptionsCallback = mojo::Callback<void(mojo::Array<FlogDescriptionPtr>)>;
  virtual void GetLogDescriptions(const GetLogDescriptionsCallback& callback) = 0;
  virtual void CreateReader(mojo::InterfaceRequest<FlogReader> reader, uint32_t log_id) = 0;
};

namespace internal {
class FlogLogger_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = FlogLoggerRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = FlogLogger_Synchronous;
  enum class MessageOrdinals : uint32_t {
    LogChannelCreation = 0,
    LogChannelMessage = 1,
    LogChannelDeletion = 2,
  };


  virtual ~FlogLogger_Base() {}
};

}  // namespace internal

// Async interface declaration

class FlogLoggerProxy;
class FlogLoggerStub;
class FlogLogger_Synchronous;

class FlogLoggerRequestValidator;

class FlogLogger : public internal::FlogLogger_Base {
 public:
  virtual ~FlogLogger() override {}

  using Proxy_ = FlogLoggerProxy;
  using Stub_ = FlogLoggerStub;
  virtual void LogChannelCreation(int64_t time_us, uint32_t channel_id, const mojo::String& type_name) = 0;
  virtual void LogChannelMessage(int64_t time_us, uint32_t channel_id, mojo::Array<uint8_t> data) = 0;
  virtual void LogChannelDeletion(int64_t time_us, uint32_t channel_id) = 0;
};

namespace internal {
class FlogReader_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = FlogReaderRequestValidator;
  using ResponseValidator_ = FlogReaderResponseValidator;
  using Synchronous_ = FlogReader_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetEntries = 0,
  };


  virtual ~FlogReader_Base() {}
};

}  // namespace internal

// Async interface declaration

class FlogReaderProxy;
class FlogReaderStub;
class FlogReader_Synchronous;

class FlogReaderRequestValidator;
class FlogReaderResponseValidator;

class FlogReader : public internal::FlogReader_Base {
 public:
  virtual ~FlogReader() override {}

  using Proxy_ = FlogReaderProxy;
  using Stub_ = FlogReaderStub;
  using GetEntriesCallback = mojo::Callback<void(mojo::Array<FlogEntryPtr>)>;
  virtual void GetEntries(uint32_t start_index, uint32_t max_count, const GetEntriesCallback& callback) = 0;
};

}  // namespace flog
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::flog::FlogDescriptionPtr, true, false> {
  using DataType = mojo::flog::internal::FlogDescription_Data*;
};
template <>
struct WrapperTraits<mojo::flog::FlogEntryPtr, true, false> {
  using DataType = mojo::flog::internal::FlogEntry_Data*;
};
template <>
struct WrapperTraits<mojo::flog::FlogChannelCreationEntryDetailsPtr, true, false> {
  using DataType = mojo::flog::internal::FlogChannelCreationEntryDetails_Data*;
};
template <>
struct WrapperTraits<mojo::flog::FlogChannelMessageEntryDetailsPtr, true, false> {
  using DataType = mojo::flog::internal::FlogChannelMessageEntryDetails_Data*;
};
template <>
struct WrapperTraits<mojo::flog::FlogChannelDeletionEntryDetailsPtr, true, false> {
  using DataType = mojo::flog::internal::FlogChannelDeletionEntryDetails_Data*;
};

}  // internal
}  // mojo
namespace mojo {
namespace flog {

// --- Interface Request Validators ---
class FlogServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class FlogLoggerRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class FlogReaderRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class FlogServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class FlogReaderResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.
class FlogEntryDetails {
 public:
  using Data_ = internal::FlogEntryDetails_Data;
  using Tag = Data_::FlogEntryDetails_Tag;

  static FlogEntryDetailsPtr New();

  template <typename U>
  static FlogEntryDetailsPtr From(const U& u) {
    return mojo::TypeConverter<FlogEntryDetailsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogEntryDetails>::Convert(*this);
  }

  FlogEntryDetails();
  ~FlogEntryDetails();


  FlogEntryDetailsPtr Clone() const;
  bool Equals(const FlogEntryDetails& other) const;

  Tag which() const {
    return tag_;
  }


  bool is_channel_creation() const;
  FlogChannelCreationEntryDetailsPtr& get_channel_creation() const;
  void set_channel_creation(FlogChannelCreationEntryDetailsPtr channel_creation);
  bool is_channel_message() const;
  FlogChannelMessageEntryDetailsPtr& get_channel_message() const;
  void set_channel_message(FlogChannelMessageEntryDetailsPtr channel_message);
  bool is_channel_deletion() const;
  FlogChannelDeletionEntryDetailsPtr& get_channel_deletion() const;
  void set_channel_deletion(FlogChannelDeletionEntryDetailsPtr channel_deletion);
  bool has_unknown_tag() const;

 private:
  friend class mojo::internal::UnionAccessor<FlogEntryDetails>;
  union Union_ {
    Union_() {}
    ~Union_() {}

FlogChannelCreationEntryDetailsPtr* channel_creation;

FlogChannelMessageEntryDetailsPtr* channel_message;

FlogChannelDeletionEntryDetailsPtr* channel_deletion;

  };
  void SwitchActive(Tag new_active);
  void SetActive(Tag new_active);
  void DestroyActive();
  Tag tag_;
  Union_ data_;
};


// --- Inlined structs ---
class FlogDescription {
 public:
  using Data_ = internal::FlogDescription_Data;

  static FlogDescriptionPtr New();

  template <typename U>
  static FlogDescriptionPtr From(const U& u) {
    return mojo::TypeConverter<FlogDescriptionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogDescription>::Convert(*this);
  }

  FlogDescription();
  ~FlogDescription();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogDescriptionPtr Clone() const;
  bool Equals(const FlogDescription& other) const;

  uint32_t log_id;
  mojo::String label;
  bool open;
};


class FlogChannelCreationEntryDetails {
 public:
  using Data_ = internal::FlogChannelCreationEntryDetails_Data;

  static FlogChannelCreationEntryDetailsPtr New();

  template <typename U>
  static FlogChannelCreationEntryDetailsPtr From(const U& u) {
    return mojo::TypeConverter<FlogChannelCreationEntryDetailsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogChannelCreationEntryDetails>::Convert(*this);
  }

  FlogChannelCreationEntryDetails();
  ~FlogChannelCreationEntryDetails();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogChannelCreationEntryDetailsPtr Clone() const;
  bool Equals(const FlogChannelCreationEntryDetails& other) const;

  mojo::String type_name;
};


class FlogChannelDeletionEntryDetails {
 public:
  using Data_ = internal::FlogChannelDeletionEntryDetails_Data;

  static FlogChannelDeletionEntryDetailsPtr New();

  template <typename U>
  static FlogChannelDeletionEntryDetailsPtr From(const U& u) {
    return mojo::TypeConverter<FlogChannelDeletionEntryDetailsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogChannelDeletionEntryDetails>::Convert(*this);
  }

  FlogChannelDeletionEntryDetails();
  ~FlogChannelDeletionEntryDetails();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogChannelDeletionEntryDetailsPtr Clone() const;
  bool Equals(const FlogChannelDeletionEntryDetails& other) const;

};



// --- Non-inlined structs ---
class FlogEntry {
 public:
  using Data_ = internal::FlogEntry_Data;

  static FlogEntryPtr New();

  template <typename U>
  static FlogEntryPtr From(const U& u) {
    return mojo::TypeConverter<FlogEntryPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogEntry>::Convert(*this);
  }

  FlogEntry();
  ~FlogEntry();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogEntryPtr Clone() const;
  bool Equals(const FlogEntry& other) const;

  int64_t time_us;
  uint32_t log_id;
  uint32_t channel_id;
  FlogEntryDetailsPtr details;
};


class FlogChannelMessageEntryDetails {
 public:
  using Data_ = internal::FlogChannelMessageEntryDetails_Data;

  static FlogChannelMessageEntryDetailsPtr New();

  template <typename U>
  static FlogChannelMessageEntryDetailsPtr From(const U& u) {
    return mojo::TypeConverter<FlogChannelMessageEntryDetailsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogChannelMessageEntryDetails>::Convert(*this);
  }

  FlogChannelMessageEntryDetails();
  ~FlogChannelMessageEntryDetails();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogChannelMessageEntryDetailsPtr Clone() const;
  bool Equals(const FlogChannelMessageEntryDetails& other) const;

  mojo::Array<uint8_t> data;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const FlogDescription& input);
mojo::internal::ValidationError Serialize_(
    FlogDescription* input,
    mojo::internal::Buffer* buffer,
    internal::FlogDescription_Data** output);
void Deserialize_(internal::FlogDescription_Data* input,
                  FlogDescription* output);

size_t GetSerializedSize_(const FlogEntry& input);
mojo::internal::ValidationError Serialize_(
    FlogEntry* input,
    mojo::internal::Buffer* buffer,
    internal::FlogEntry_Data** output);
void Deserialize_(internal::FlogEntry_Data* input,
                  FlogEntry* output);

size_t GetSerializedSize_(const FlogChannelCreationEntryDetails& input);
mojo::internal::ValidationError Serialize_(
    FlogChannelCreationEntryDetails* input,
    mojo::internal::Buffer* buffer,
    internal::FlogChannelCreationEntryDetails_Data** output);
void Deserialize_(internal::FlogChannelCreationEntryDetails_Data* input,
                  FlogChannelCreationEntryDetails* output);

size_t GetSerializedSize_(const FlogChannelMessageEntryDetails& input);
mojo::internal::ValidationError Serialize_(
    FlogChannelMessageEntryDetails* input,
    mojo::internal::Buffer* buffer,
    internal::FlogChannelMessageEntryDetails_Data** output);
void Deserialize_(internal::FlogChannelMessageEntryDetails_Data* input,
                  FlogChannelMessageEntryDetails* output);

size_t GetSerializedSize_(const FlogChannelDeletionEntryDetails& input);
mojo::internal::ValidationError Serialize_(
    FlogChannelDeletionEntryDetails* input,
    mojo::internal::Buffer* buffer,
    internal::FlogChannelDeletionEntryDetails_Data** output);
void Deserialize_(internal::FlogChannelDeletionEntryDetails_Data* input,
                  FlogChannelDeletionEntryDetails* output);


// --- Union serialization helpers ---
size_t GetSerializedSize_(const FlogEntryDetailsPtr& input);
mojo::internal::ValidationError SerializeUnion_(
    FlogEntryDetails* input,
    mojo::internal::Buffer* buffer,
    internal::FlogEntryDetails_Data** output);
void Deserialize_(internal::FlogEntryDetails_Data* input,
                  FlogEntryDetails* output);


// --- Request and response parameter structs for Interface methods ---
      

class FlogService_CreateLogger_Params;

using FlogService_CreateLogger_ParamsPtr = mojo::StructPtr<FlogService_CreateLogger_Params>;


size_t GetSerializedSize_(const FlogService_CreateLogger_Params& input);
mojo::internal::ValidationError Serialize_(
    FlogService_CreateLogger_Params* input,
    mojo::internal::Buffer* buffer,
    internal::FlogService_CreateLogger_Params_Data** output);
void Deserialize_(internal::FlogService_CreateLogger_Params_Data* input,
                  FlogService_CreateLogger_Params* output);

class FlogService_CreateLogger_Params {
 public:
  using Data_ = internal::FlogService_CreateLogger_Params_Data;

  static FlogService_CreateLogger_ParamsPtr New();

  template <typename U>
  static FlogService_CreateLogger_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogService_CreateLogger_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogService_CreateLogger_Params>::Convert(*this);
  }

  FlogService_CreateLogger_Params();
  ~FlogService_CreateLogger_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const FlogService_CreateLogger_Params& other) const;

  mojo::InterfaceRequest<FlogLogger> logger;
  mojo::String label;
};




class FlogService_GetLogDescriptions_Params;

using FlogService_GetLogDescriptions_ParamsPtr = mojo::InlinedStructPtr<FlogService_GetLogDescriptions_Params>;


size_t GetSerializedSize_(const FlogService_GetLogDescriptions_Params& input);
mojo::internal::ValidationError Serialize_(
    FlogService_GetLogDescriptions_Params* input,
    mojo::internal::Buffer* buffer,
    internal::FlogService_GetLogDescriptions_Params_Data** output);
void Deserialize_(internal::FlogService_GetLogDescriptions_Params_Data* input,
                  FlogService_GetLogDescriptions_Params* output);

class FlogService_GetLogDescriptions_Params {
 public:
  using Data_ = internal::FlogService_GetLogDescriptions_Params_Data;

  static FlogService_GetLogDescriptions_ParamsPtr New();

  template <typename U>
  static FlogService_GetLogDescriptions_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogService_GetLogDescriptions_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogService_GetLogDescriptions_Params>::Convert(*this);
  }

  FlogService_GetLogDescriptions_Params();
  ~FlogService_GetLogDescriptions_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogService_GetLogDescriptions_ParamsPtr Clone() const;
  bool Equals(const FlogService_GetLogDescriptions_Params& other) const;

};



class FlogService_GetLogDescriptions_ResponseParams;

using FlogService_GetLogDescriptions_ResponseParamsPtr = mojo::StructPtr<FlogService_GetLogDescriptions_ResponseParams>;


size_t GetSerializedSize_(const FlogService_GetLogDescriptions_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    FlogService_GetLogDescriptions_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::FlogService_GetLogDescriptions_ResponseParams_Data** output);
void Deserialize_(internal::FlogService_GetLogDescriptions_ResponseParams_Data* input,
                  FlogService_GetLogDescriptions_ResponseParams* output);

class FlogService_GetLogDescriptions_ResponseParams {
 public:
  using Data_ = internal::FlogService_GetLogDescriptions_ResponseParams_Data;

  static FlogService_GetLogDescriptions_ResponseParamsPtr New();

  template <typename U>
  static FlogService_GetLogDescriptions_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogService_GetLogDescriptions_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogService_GetLogDescriptions_ResponseParams>::Convert(*this);
  }

  FlogService_GetLogDescriptions_ResponseParams();
  ~FlogService_GetLogDescriptions_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogService_GetLogDescriptions_ResponseParamsPtr Clone() const;
  bool Equals(const FlogService_GetLogDescriptions_ResponseParams& other) const;

  mojo::Array<FlogDescriptionPtr> descriptions;
};



class FlogService_CreateReader_Params;

using FlogService_CreateReader_ParamsPtr = mojo::StructPtr<FlogService_CreateReader_Params>;


size_t GetSerializedSize_(const FlogService_CreateReader_Params& input);
mojo::internal::ValidationError Serialize_(
    FlogService_CreateReader_Params* input,
    mojo::internal::Buffer* buffer,
    internal::FlogService_CreateReader_Params_Data** output);
void Deserialize_(internal::FlogService_CreateReader_Params_Data* input,
                  FlogService_CreateReader_Params* output);

class FlogService_CreateReader_Params {
 public:
  using Data_ = internal::FlogService_CreateReader_Params_Data;

  static FlogService_CreateReader_ParamsPtr New();

  template <typename U>
  static FlogService_CreateReader_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogService_CreateReader_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogService_CreateReader_Params>::Convert(*this);
  }

  FlogService_CreateReader_Params();
  ~FlogService_CreateReader_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const FlogService_CreateReader_Params& other) const;

  mojo::InterfaceRequest<FlogReader> reader;
  uint32_t log_id;
};



      

class FlogLogger_LogChannelCreation_Params;

using FlogLogger_LogChannelCreation_ParamsPtr = mojo::InlinedStructPtr<FlogLogger_LogChannelCreation_Params>;


size_t GetSerializedSize_(const FlogLogger_LogChannelCreation_Params& input);
mojo::internal::ValidationError Serialize_(
    FlogLogger_LogChannelCreation_Params* input,
    mojo::internal::Buffer* buffer,
    internal::FlogLogger_LogChannelCreation_Params_Data** output);
void Deserialize_(internal::FlogLogger_LogChannelCreation_Params_Data* input,
                  FlogLogger_LogChannelCreation_Params* output);

class FlogLogger_LogChannelCreation_Params {
 public:
  using Data_ = internal::FlogLogger_LogChannelCreation_Params_Data;

  static FlogLogger_LogChannelCreation_ParamsPtr New();

  template <typename U>
  static FlogLogger_LogChannelCreation_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogLogger_LogChannelCreation_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogLogger_LogChannelCreation_Params>::Convert(*this);
  }

  FlogLogger_LogChannelCreation_Params();
  ~FlogLogger_LogChannelCreation_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogLogger_LogChannelCreation_ParamsPtr Clone() const;
  bool Equals(const FlogLogger_LogChannelCreation_Params& other) const;

  int64_t time_us;
  uint32_t channel_id;
  mojo::String type_name;
};




class FlogLogger_LogChannelMessage_Params;

using FlogLogger_LogChannelMessage_ParamsPtr = mojo::StructPtr<FlogLogger_LogChannelMessage_Params>;


size_t GetSerializedSize_(const FlogLogger_LogChannelMessage_Params& input);
mojo::internal::ValidationError Serialize_(
    FlogLogger_LogChannelMessage_Params* input,
    mojo::internal::Buffer* buffer,
    internal::FlogLogger_LogChannelMessage_Params_Data** output);
void Deserialize_(internal::FlogLogger_LogChannelMessage_Params_Data* input,
                  FlogLogger_LogChannelMessage_Params* output);

class FlogLogger_LogChannelMessage_Params {
 public:
  using Data_ = internal::FlogLogger_LogChannelMessage_Params_Data;

  static FlogLogger_LogChannelMessage_ParamsPtr New();

  template <typename U>
  static FlogLogger_LogChannelMessage_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogLogger_LogChannelMessage_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogLogger_LogChannelMessage_Params>::Convert(*this);
  }

  FlogLogger_LogChannelMessage_Params();
  ~FlogLogger_LogChannelMessage_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogLogger_LogChannelMessage_ParamsPtr Clone() const;
  bool Equals(const FlogLogger_LogChannelMessage_Params& other) const;

  int64_t time_us;
  uint32_t channel_id;
  mojo::Array<uint8_t> data;
};




class FlogLogger_LogChannelDeletion_Params;

using FlogLogger_LogChannelDeletion_ParamsPtr = mojo::InlinedStructPtr<FlogLogger_LogChannelDeletion_Params>;


size_t GetSerializedSize_(const FlogLogger_LogChannelDeletion_Params& input);
mojo::internal::ValidationError Serialize_(
    FlogLogger_LogChannelDeletion_Params* input,
    mojo::internal::Buffer* buffer,
    internal::FlogLogger_LogChannelDeletion_Params_Data** output);
void Deserialize_(internal::FlogLogger_LogChannelDeletion_Params_Data* input,
                  FlogLogger_LogChannelDeletion_Params* output);

class FlogLogger_LogChannelDeletion_Params {
 public:
  using Data_ = internal::FlogLogger_LogChannelDeletion_Params_Data;

  static FlogLogger_LogChannelDeletion_ParamsPtr New();

  template <typename U>
  static FlogLogger_LogChannelDeletion_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogLogger_LogChannelDeletion_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogLogger_LogChannelDeletion_Params>::Convert(*this);
  }

  FlogLogger_LogChannelDeletion_Params();
  ~FlogLogger_LogChannelDeletion_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogLogger_LogChannelDeletion_ParamsPtr Clone() const;
  bool Equals(const FlogLogger_LogChannelDeletion_Params& other) const;

  int64_t time_us;
  uint32_t channel_id;
};



      

class FlogReader_GetEntries_Params;

using FlogReader_GetEntries_ParamsPtr = mojo::InlinedStructPtr<FlogReader_GetEntries_Params>;


size_t GetSerializedSize_(const FlogReader_GetEntries_Params& input);
mojo::internal::ValidationError Serialize_(
    FlogReader_GetEntries_Params* input,
    mojo::internal::Buffer* buffer,
    internal::FlogReader_GetEntries_Params_Data** output);
void Deserialize_(internal::FlogReader_GetEntries_Params_Data* input,
                  FlogReader_GetEntries_Params* output);

class FlogReader_GetEntries_Params {
 public:
  using Data_ = internal::FlogReader_GetEntries_Params_Data;

  static FlogReader_GetEntries_ParamsPtr New();

  template <typename U>
  static FlogReader_GetEntries_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogReader_GetEntries_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogReader_GetEntries_Params>::Convert(*this);
  }

  FlogReader_GetEntries_Params();
  ~FlogReader_GetEntries_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogReader_GetEntries_ParamsPtr Clone() const;
  bool Equals(const FlogReader_GetEntries_Params& other) const;

  uint32_t start_index;
  uint32_t max_count;
};



class FlogReader_GetEntries_ResponseParams;

using FlogReader_GetEntries_ResponseParamsPtr = mojo::StructPtr<FlogReader_GetEntries_ResponseParams>;


size_t GetSerializedSize_(const FlogReader_GetEntries_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    FlogReader_GetEntries_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::FlogReader_GetEntries_ResponseParams_Data** output);
void Deserialize_(internal::FlogReader_GetEntries_ResponseParams_Data* input,
                  FlogReader_GetEntries_ResponseParams* output);

class FlogReader_GetEntries_ResponseParams {
 public:
  using Data_ = internal::FlogReader_GetEntries_ResponseParams_Data;

  static FlogReader_GetEntries_ResponseParamsPtr New();

  template <typename U>
  static FlogReader_GetEntries_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<FlogReader_GetEntries_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FlogReader_GetEntries_ResponseParams>::Convert(*this);
  }

  FlogReader_GetEntries_ResponseParams();
  ~FlogReader_GetEntries_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FlogReader_GetEntries_ResponseParamsPtr Clone() const;
  bool Equals(const FlogReader_GetEntries_ResponseParams& other) const;

  mojo::Array<FlogEntryPtr> entries;
};


}  // namespace flog
}  // namespace mojo

#endif  // MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_COMMON_H_
