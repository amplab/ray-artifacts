// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_COMMON_H_
#define MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/sensors/interfaces/sensors.mojom-internal.h"
namespace sensors {

// --- Interface Forward Declarations ---
class SensorListener;
class SensorListenerRequestValidator;
class SensorListener_Synchronous;
class SensorService;
class SensorServiceRequestValidator;
class SensorService_Synchronous;

// --- Struct Forward Declarations ---
class SensorData;

using SensorDataPtr = mojo::StructPtr<SensorData>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---
  
enum class SensorType : int32_t {
  ACCELEROMETER,
  AMBIENT_TEMPERATURE,
  GAME_ROTATION_VECTOR,
  GEOMAGNETIC_ROTATION_VECTOR,
  GRAVITY,
  GYROSCOPE,
  GYROSCOPE_UNCALIBRATED,
  HEART_RATE,
  LIGHT,
  LINEAR_ACCELERATION,
  MAGNETIC_FIELD,
  MAGNETIC_FIELD_UNCALIBRATED,
  PRESSURE,
  PROXIMITY,
  RELATIVE_HUMIDITY,
  ROTATION_VECTOR,
  SIGNIFICANT_MOTION,
  STEP_COUNTER,
  STEP_DETECTOR,
};

bool SensorType_IsValidValue(SensorType value);
  
std::ostream& operator<<(std::ostream& stream, const SensorType& val);

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class SensorListener_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = SensorListenerRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = SensorListener_Synchronous;
  enum class MessageOrdinals : uint32_t {
    OnAccuracyChanged = 0,
    OnSensorChanged = 1,
  };


  virtual ~SensorListener_Base() {}
};

}  // namespace internal

// Async interface declaration

class SensorListenerProxy;
class SensorListenerStub;
class SensorListener_Synchronous;

class SensorListenerRequestValidator;

class SensorListener : public internal::SensorListener_Base {
 public:
  virtual ~SensorListener() override {}

  using Proxy_ = SensorListenerProxy;
  using Stub_ = SensorListenerStub;
  virtual void OnAccuracyChanged(int32_t accuracy) = 0;
  virtual void OnSensorChanged(SensorDataPtr data) = 0;
};

namespace internal {
class SensorService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = SensorServiceRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = SensorService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    AddListener = 0,
  };


  virtual ~SensorService_Base() {}
};

}  // namespace internal

// Async interface declaration

class SensorServiceProxy;
class SensorServiceStub;
class SensorService_Synchronous;

class SensorServiceRequestValidator;

class SensorService : public internal::SensorService_Base {
 public:
  virtual ~SensorService() override {}

  using Proxy_ = SensorServiceProxy;
  using Stub_ = SensorServiceStub;
  virtual void AddListener(SensorType type, mojo::InterfaceHandle<SensorListener> listener) = 0;
};

}  // namespace sensors

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<sensors::SensorDataPtr, true, false> {
  using DataType = sensors::internal::SensorData_Data*;
};

}  // internal
}  // mojo
namespace sensors {

// --- Interface Request Validators ---
class SensorListenerRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class SensorServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class SensorData {
 public:
  using Data_ = internal::SensorData_Data;

  static SensorDataPtr New();

  template <typename U>
  static SensorDataPtr From(const U& u) {
    return mojo::TypeConverter<SensorDataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SensorData>::Convert(*this);
  }

  SensorData();
  ~SensorData();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  SensorDataPtr Clone() const;
  bool Equals(const SensorData& other) const;

  int32_t accuracy;
  int64_t time_stamp;
  mojo::Array<float> values;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const SensorData& input);
mojo::internal::ValidationError Serialize_(
    SensorData* input,
    mojo::internal::Buffer* buffer,
    internal::SensorData_Data** output);
void Deserialize_(internal::SensorData_Data* input,
                  SensorData* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class SensorListener_OnAccuracyChanged_Params;

using SensorListener_OnAccuracyChanged_ParamsPtr = mojo::InlinedStructPtr<SensorListener_OnAccuracyChanged_Params>;


size_t GetSerializedSize_(const SensorListener_OnAccuracyChanged_Params& input);
mojo::internal::ValidationError Serialize_(
    SensorListener_OnAccuracyChanged_Params* input,
    mojo::internal::Buffer* buffer,
    internal::SensorListener_OnAccuracyChanged_Params_Data** output);
void Deserialize_(internal::SensorListener_OnAccuracyChanged_Params_Data* input,
                  SensorListener_OnAccuracyChanged_Params* output);

class SensorListener_OnAccuracyChanged_Params {
 public:
  using Data_ = internal::SensorListener_OnAccuracyChanged_Params_Data;

  static SensorListener_OnAccuracyChanged_ParamsPtr New();

  template <typename U>
  static SensorListener_OnAccuracyChanged_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<SensorListener_OnAccuracyChanged_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SensorListener_OnAccuracyChanged_Params>::Convert(*this);
  }

  SensorListener_OnAccuracyChanged_Params();
  ~SensorListener_OnAccuracyChanged_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  SensorListener_OnAccuracyChanged_ParamsPtr Clone() const;
  bool Equals(const SensorListener_OnAccuracyChanged_Params& other) const;

  int32_t accuracy;
};




class SensorListener_OnSensorChanged_Params;

using SensorListener_OnSensorChanged_ParamsPtr = mojo::StructPtr<SensorListener_OnSensorChanged_Params>;


size_t GetSerializedSize_(const SensorListener_OnSensorChanged_Params& input);
mojo::internal::ValidationError Serialize_(
    SensorListener_OnSensorChanged_Params* input,
    mojo::internal::Buffer* buffer,
    internal::SensorListener_OnSensorChanged_Params_Data** output);
void Deserialize_(internal::SensorListener_OnSensorChanged_Params_Data* input,
                  SensorListener_OnSensorChanged_Params* output);

class SensorListener_OnSensorChanged_Params {
 public:
  using Data_ = internal::SensorListener_OnSensorChanged_Params_Data;

  static SensorListener_OnSensorChanged_ParamsPtr New();

  template <typename U>
  static SensorListener_OnSensorChanged_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<SensorListener_OnSensorChanged_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SensorListener_OnSensorChanged_Params>::Convert(*this);
  }

  SensorListener_OnSensorChanged_Params();
  ~SensorListener_OnSensorChanged_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  SensorListener_OnSensorChanged_ParamsPtr Clone() const;
  bool Equals(const SensorListener_OnSensorChanged_Params& other) const;

  SensorDataPtr data;
};



      

class SensorService_AddListener_Params;

using SensorService_AddListener_ParamsPtr = mojo::StructPtr<SensorService_AddListener_Params>;


size_t GetSerializedSize_(const SensorService_AddListener_Params& input);
mojo::internal::ValidationError Serialize_(
    SensorService_AddListener_Params* input,
    mojo::internal::Buffer* buffer,
    internal::SensorService_AddListener_Params_Data** output);
void Deserialize_(internal::SensorService_AddListener_Params_Data* input,
                  SensorService_AddListener_Params* output);

class SensorService_AddListener_Params {
 public:
  using Data_ = internal::SensorService_AddListener_Params_Data;

  static SensorService_AddListener_ParamsPtr New();

  template <typename U>
  static SensorService_AddListener_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<SensorService_AddListener_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SensorService_AddListener_Params>::Convert(*this);
  }

  SensorService_AddListener_Params();
  ~SensorService_AddListener_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const SensorService_AddListener_Params& other) const;

  SensorType type;
  mojo::InterfaceHandle<SensorListener> listener;
};



}  // namespace sensors

#endif  // MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_COMMON_H_
