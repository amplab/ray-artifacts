// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/bindings/tests/ping_service.mojom
//

package ping_service

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	ioutil "io/ioutil"
	base64 "encoding/base64"
	fmt "fmt"
	bytes "bytes"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	gzip "compress/gzip"
)

// This global variable contains a mojom_types.RuntimeTypeInfo struct
// describing the types defined in this file and all of its imports as
// well as the top-level interfaces defined in this file.
var runtimeTypeInfo__ = mojom_types.RuntimeTypeInfo{}

func getRuntimeTypeInfo() mojom_types.RuntimeTypeInfo {
  if runtimeTypeInfo__.TypeMap == nil {
    initRuntimeTypeInfo()
  }
  return runtimeTypeInfo__
}

func initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this file.
  // The string contains the base64 encoding of the gzip-compressed bytes.
  serializedRuntimeTypeInfo := "H4sIAAAJbogC/9RTTUvDQBRMVTD4AYIKvSg9iZfm5eypl568BPRSEEq7PnXFZONuKuiv7c/wpu+RDW6fCfRSwYFhutv9mJlt+1GNI6+pVznfaCxUrhsF416w7oJ4TrydZOPp9XhylZtnk1ToqiTTxeMN2jetsD6v5/dvB/svvQ4igd7qcCS+TsX8l0cWteOYuE9cMUU4I54SO2z/6mGXuEe848xEeDI5QqlyY3X1AXb2PlTGIjirgM+EcjF/0Qp0UaF9mCl0MNfFPd3hgK9zUNLnqasvTHhL3tZ/Mz4Q1cj3kH0uvX6u2WcU9BmeJ8E+dnyfbX7Zz9Yf9DQQ/SyFrpOTkXbkPPFZOefQ4uuCvLTlbbDpvHHHu/eFj1j8DjbVD/93Dn/6caUpHP6jfr4DAAD//zQMB0IoBQAA"

  // Deserialize RuntimeTypeInfo
  compressedBytes, err := base64.StdEncoding.DecodeString(serializedRuntimeTypeInfo)
  if err != nil {
    panic(fmt.Sprintf("Error while base64Decoding runtimeTypeInfo: %s", err.Error()))
  }
  reader, err := gzip.NewReader(bytes.NewBuffer(compressedBytes))
  if err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  uncompressedBytes, err := ioutil.ReadAll(reader)
  if err != nil {
     panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  if err = reader.Close(); err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  decoder := bindings.NewDecoder(uncompressedBytes, nil)
  runtimeTypeInfo__.Decode(decoder)

}
func GetAllMojomTypeDefinitions() map[string]mojom_types.UserDefinedType {
  return getRuntimeTypeInfo().TypeMap
}

type PingService interface {
	Ping() (err error)
}


// PingServiceMojomType returns the UserDefinedType that describes the Mojom
// type of PingService. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func PingServiceMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:mojo.test.PingService"]
}




type PingService_Request bindings.InterfaceRequest


// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*PingService_Request) MojomType() mojom_types.UserDefinedType {
	return PingServiceMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*PingService_Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


type PingService_Pointer bindings.InterfacePointer


type PingService_ServiceFactory struct{
	Delegate PingService_Factory
}

type PingService_Factory interface {
	Create(request PingService_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *PingService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &PingService_ServiceDescription{}
}

func (f *PingService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := PingService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForPingService creates a message pipe for use with the
// PingService interface with a PingService_Request on one end and a PingService_Pointer on the other.
func CreateMessagePipeForPingService() (PingService_Request, PingService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return PingService_Request(r), PingService_Pointer(p)
}

const pingService_Ping_Name uint32 = 0

type PingService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewPingServiceProxy(p PingService_Pointer, waiter bindings.AsyncWaiter) *PingService_Proxy {
	return &PingService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *PingService_Proxy) Close_Proxy() {
	p.router.Close()
}

type pingService_Ping_Params struct {
}


func (s *pingService_Ping_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingService_Ping_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *pingService_Ping_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingService_Ping_Params_Versions), func(i int) bool {
		return pingService_Ping_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingService_Ping_Params_Versions) {
		if pingService_Ping_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingService_Ping_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type pingService_Ping_ResponseParams struct {
}


func (s *pingService_Ping_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingService_Ping_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *pingService_Ping_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingService_Ping_ResponseParams_Versions), func(i int) bool {
		return pingService_Ping_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingService_Ping_ResponseParams_Versions) {
		if pingService_Ping_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingService_Ping_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingService_Proxy) Ping() (err error) {
	payload := &pingService_Ping_Params{
	}
	header := bindings.MessageHeader{
		Type: pingService_Ping_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, pingService_Ping_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response pingService_Ping_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type pingService_Stub struct {
	connector *bindings.Connector
	impl PingService
}

func NewPingServiceStub(r PingService_Request, impl PingService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &pingService_Stub{connector, impl})
}


func (f *PingService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &PingService_ServiceDescription{}
}


type PingService_ServiceDescription struct{}

func (sd *PingService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *PingService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *PingService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*PingService_ServiceDescription)(nil)


func (s *pingService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case pingService_Ping_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingService_Ping_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response pingService_Ping_ResponseParams
		err = s.impl.Ping()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: pingService_Ping_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

