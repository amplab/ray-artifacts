// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/js/test/pingpong_service.mojom
//

package pingpong_service

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type PingPongService interface {
	SetClient(inClient PingPongClient_Pointer) (err error)
	Ping(inPingValue uint16) (err error)
	PingTargetUrl(inUrl string, inCount uint16) (outOk bool, err error)
	PingTargetService(inService PingPongService_Pointer, inCount uint16) (outOk bool, err error)
	GetPingPongService(inService PingPongService_Request) (err error)
	Quit() (err error)
}



var pingPongService_Name = "js::PingPongService"

type PingPongService_Request bindings.InterfaceRequest

func (r *PingPongService_Request) Name() string {
	return pingPongService_Name
}


type PingPongService_Pointer bindings.InterfacePointer

func (p *PingPongService_Pointer) Name() string {
	return pingPongService_Name
}

type PingPongService_ServiceFactory struct{
	Delegate PingPongService_Factory
}

type PingPongService_Factory interface {
	Create(request PingPongService_Request)
}

func (f *PingPongService_ServiceFactory) Name() string {
	return pingPongService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *PingPongService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &PingPongService_ServiceDescription{}
}

func (f *PingPongService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := PingPongService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForPingPongService creates a message pipe for use with the
// PingPongService interface with a PingPongService_Request on one end and a PingPongService_Pointer on the other.
func CreateMessagePipeForPingPongService() (PingPongService_Request, PingPongService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return PingPongService_Request(r), PingPongService_Pointer(p)
}

const pingPongService_SetClient_Name uint32 = 0
const pingPongService_Ping_Name uint32 = 1
const pingPongService_PingTargetUrl_Name uint32 = 2
const pingPongService_PingTargetService_Name uint32 = 3
const pingPongService_GetPingPongService_Name uint32 = 4
const pingPongService_Quit_Name uint32 = 5

type PingPongService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewPingPongServiceProxy(p PingPongService_Pointer, waiter bindings.AsyncWaiter) *PingPongService_Proxy {
	return &PingPongService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *PingPongService_Proxy) Close_Proxy() {
	p.router.Close()
}

type pingPongService_SetClient_Params struct {
	inClient PingPongClient_Pointer
}


func (s *pingPongService_SetClient_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInterface(s.inClient.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_SetClient_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *pingPongService_SetClient_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_SetClient_Params_Versions), func(i int) bool {
		return pingPongService_SetClient_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_SetClient_Params_Versions) {
		if pingPongService_SetClient_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_SetClient_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inClient = PingPongClient_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingPongService_Proxy) SetClient(inClient PingPongClient_Pointer) (err error) {
	payload := &pingPongService_SetClient_Params{
		inClient,
	}
	header := bindings.MessageHeader{
		Type: pingPongService_SetClient_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type pingPongService_Ping_Params struct {
	inPingValue uint16
}


func (s *pingPongService_Ping_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint16(s.inPingValue); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_Ping_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *pingPongService_Ping_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_Ping_Params_Versions), func(i int) bool {
		return pingPongService_Ping_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_Ping_Params_Versions) {
		if pingPongService_Ping_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_Ping_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.inPingValue = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingPongService_Proxy) Ping(inPingValue uint16) (err error) {
	payload := &pingPongService_Ping_Params{
		inPingValue,
	}
	header := bindings.MessageHeader{
		Type: pingPongService_Ping_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type pingPongService_PingTargetURL_Params struct {
	inUrl string
	inCount uint16
}


func (s *pingPongService_PingTargetURL_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inUrl); err != nil {
		return err
	}
	if err := encoder.WriteUint16(s.inCount); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_PingTargetURL_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *pingPongService_PingTargetURL_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_PingTargetURL_Params_Versions), func(i int) bool {
		return pingPongService_PingTargetURL_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_PingTargetURL_Params_Versions) {
		if pingPongService_PingTargetURL_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_PingTargetURL_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inUrl = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.inCount = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type pingPongService_PingTargetURL_ResponseParams struct {
	outOk bool
}


func (s *pingPongService_PingTargetURL_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteBool(s.outOk); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_PingTargetURL_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *pingPongService_PingTargetURL_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_PingTargetURL_ResponseParams_Versions), func(i int) bool {
		return pingPongService_PingTargetURL_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_PingTargetURL_ResponseParams_Versions) {
		if pingPongService_PingTargetURL_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_PingTargetURL_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.outOk = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingPongService_Proxy) PingTargetUrl(inUrl string, inCount uint16) (outOk bool, err error) {
	payload := &pingPongService_PingTargetURL_Params{
		inUrl,
		inCount,
	}
	header := bindings.MessageHeader{
		Type: pingPongService_PingTargetUrl_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, pingPongService_PingTargetUrl_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response pingPongService_PingTargetURL_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outOk = response.outOk
	return
}

type pingPongService_PingTargetService_Params struct {
	inService PingPongService_Pointer
	inCount uint16
}


func (s *pingPongService_PingTargetService_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInterface(s.inService.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.WriteUint16(s.inCount); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_PingTargetService_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *pingPongService_PingTargetService_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_PingTargetService_Params_Versions), func(i int) bool {
		return pingPongService_PingTargetService_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_PingTargetService_Params_Versions) {
		if pingPongService_PingTargetService_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_PingTargetService_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inService = PingPongService_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.inCount = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type pingPongService_PingTargetService_ResponseParams struct {
	outOk bool
}


func (s *pingPongService_PingTargetService_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteBool(s.outOk); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_PingTargetService_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *pingPongService_PingTargetService_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_PingTargetService_ResponseParams_Versions), func(i int) bool {
		return pingPongService_PingTargetService_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_PingTargetService_ResponseParams_Versions) {
		if pingPongService_PingTargetService_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_PingTargetService_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.outOk = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingPongService_Proxy) PingTargetService(inService PingPongService_Pointer, inCount uint16) (outOk bool, err error) {
	payload := &pingPongService_PingTargetService_Params{
		inService,
		inCount,
	}
	header := bindings.MessageHeader{
		Type: pingPongService_PingTargetService_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, pingPongService_PingTargetService_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response pingPongService_PingTargetService_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outOk = response.outOk
	return
}

type pingPongService_GetPingPongService_Params struct {
	inService PingPongService_Request
}


func (s *pingPongService_GetPingPongService_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inService.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_GetPingPongService_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *pingPongService_GetPingPongService_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_GetPingPongService_Params_Versions), func(i int) bool {
		return pingPongService_GetPingPongService_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_GetPingPongService_Params_Versions) {
		if pingPongService_GetPingPongService_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_GetPingPongService_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inService = PingPongService_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingPongService_Proxy) GetPingPongService(inService PingPongService_Request) (err error) {
	payload := &pingPongService_GetPingPongService_Params{
		inService,
	}
	header := bindings.MessageHeader{
		Type: pingPongService_GetPingPongService_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type pingPongService_Quit_Params struct {
}


func (s *pingPongService_Quit_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongService_Quit_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *pingPongService_Quit_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongService_Quit_Params_Versions), func(i int) bool {
		return pingPongService_Quit_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongService_Quit_Params_Versions) {
		if pingPongService_Quit_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongService_Quit_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingPongService_Proxy) Quit() (err error) {
	payload := &pingPongService_Quit_Params{
	}
	header := bindings.MessageHeader{
		Type: pingPongService_Quit_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type pingPongService_Stub struct {
	connector *bindings.Connector
	impl PingPongService
}

func NewPingPongServiceStub(r PingPongService_Request, impl PingPongService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &pingPongService_Stub{connector, impl})
}


func (f *PingPongService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &PingPongService_ServiceDescription{}
}


type PingPongService_ServiceDescription struct{}

func (sd *PingPongService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *PingPongService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *PingPongService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*PingPongService_ServiceDescription)(nil)


func (s *pingPongService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case pingPongService_SetClient_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingPongService_SetClient_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.SetClient(request.inClient)
		if err != nil {
			return
		}
	case pingPongService_Ping_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingPongService_Ping_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Ping(request.inPingValue)
		if err != nil {
			return
		}
	case pingPongService_PingTargetUrl_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingPongService_PingTargetURL_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response pingPongService_PingTargetURL_ResponseParams
		response.outOk, err = s.impl.PingTargetUrl(request.inUrl, request.inCount)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: pingPongService_PingTargetUrl_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case pingPongService_PingTargetService_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingPongService_PingTargetService_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response pingPongService_PingTargetService_ResponseParams
		response.outOk, err = s.impl.PingTargetService(request.inService, request.inCount)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: pingPongService_PingTargetService_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case pingPongService_GetPingPongService_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingPongService_GetPingPongService_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.GetPingPongService(request.inService)
		if err != nil {
			return
		}
	case pingPongService_Quit_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingPongService_Quit_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Quit()
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type PingPongClient interface {
	Pong(inPongValue uint16) (err error)
}




type PingPongClient_Request bindings.InterfaceRequest



type PingPongClient_Pointer bindings.InterfacePointer


type PingPongClient_ServiceFactory struct{
	Delegate PingPongClient_Factory
}

type PingPongClient_Factory interface {
	Create(request PingPongClient_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *PingPongClient_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &PingPongClient_ServiceDescription{}
}

func (f *PingPongClient_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := PingPongClient_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForPingPongClient creates a message pipe for use with the
// PingPongClient interface with a PingPongClient_Request on one end and a PingPongClient_Pointer on the other.
func CreateMessagePipeForPingPongClient() (PingPongClient_Request, PingPongClient_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return PingPongClient_Request(r), PingPongClient_Pointer(p)
}

const pingPongClient_Pong_Name uint32 = 0

type PingPongClient_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewPingPongClientProxy(p PingPongClient_Pointer, waiter bindings.AsyncWaiter) *PingPongClient_Proxy {
	return &PingPongClient_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *PingPongClient_Proxy) Close_Proxy() {
	p.router.Close()
}

type pingPongClient_Pong_Params struct {
	inPongValue uint16
}


func (s *pingPongClient_Pong_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint16(s.inPongValue); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pingPongClient_Pong_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *pingPongClient_Pong_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pingPongClient_Pong_Params_Versions), func(i int) bool {
		return pingPongClient_Pong_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pingPongClient_Pong_Params_Versions) {
		if pingPongClient_Pong_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pingPongClient_Pong_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint16()
		if err != nil {
			return err
		}
		s.inPongValue = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *PingPongClient_Proxy) Pong(inPongValue uint16) (err error) {
	payload := &pingPongClient_Pong_Params{
		inPongValue,
	}
	header := bindings.MessageHeader{
		Type: pingPongClient_Pong_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type pingPongClient_Stub struct {
	connector *bindings.Connector
	impl PingPongClient
}

func NewPingPongClientStub(r PingPongClient_Request, impl PingPongClient, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &pingPongClient_Stub{connector, impl})
}


func (f *PingPongClient_Request) ServiceDescription() service_describer.ServiceDescription {
	return &PingPongClient_ServiceDescription{}
}


type PingPongClient_ServiceDescription struct{}

func (sd *PingPongClient_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *PingPongClient_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *PingPongClient_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*PingPongClient_ServiceDescription)(nil)


func (s *pingPongClient_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case pingPongClient_Pong_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request pingPongClient_Pong_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Pong(request.inPongValue)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

