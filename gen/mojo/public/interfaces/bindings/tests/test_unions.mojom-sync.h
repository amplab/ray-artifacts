// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_SYNC_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/interfaces/bindings/tests/test_unions.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/test_unions.mojom-common.h"
#include "mojo/public/interfaces/bindings/tests/test_included_unions.mojom.h"


namespace mojo {
namespace test {

// --- Synchronous interface declaration ---

class SmallCache_SynchronousProxy;
class SmallCache_Synchronous
  : public internal::SmallCache_Base {
 public:
  virtual ~SmallCache_Synchronous() override {}
  
  using Proxy_ = SmallCache_SynchronousProxy;
  virtual bool SetIntValue(
      int64_t in_int_value)const= 0;
  virtual bool GetIntValue(
      int64_t* out_int_value)= 0;
};

class SmallCache_SynchronousProxy
    : public SmallCache_Synchronous {
 public:
  explicit SmallCache_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool SetIntValue(int64_t in_int_value) const  override;
  bool GetIntValue(int64_t* out_int_value) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class UnionInterface_SynchronousProxy;
class UnionInterface_Synchronous
  : public internal::UnionInterface_Base {
 public:
  virtual ~UnionInterface_Synchronous() override {}
  
  using Proxy_ = UnionInterface_SynchronousProxy;
  virtual bool Echo(
      PodUnionPtr in_in_val, PodUnionPtr* out_out_val)= 0;
};

class UnionInterface_SynchronousProxy
    : public UnionInterface_Synchronous {
 public:
  explicit UnionInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Echo(PodUnionPtr in_in_val, PodUnionPtr* out_out_val) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_SYNC_H_
