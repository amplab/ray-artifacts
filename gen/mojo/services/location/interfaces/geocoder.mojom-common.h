// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_LOCATION_INTERFACES_GEOCODER_MOJOM_COMMON_H_
#define MOJO_SERVICES_LOCATION_INTERFACES_GEOCODER_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/location/interfaces/geocoder.mojom-internal.h"
#include "mojo/services/location/interfaces/location.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class Geocoder;
class GeocoderRequestValidator;
class GeocoderResponseValidator;
class Geocoder_Synchronous;

// --- Struct Forward Declarations ---
class LocationType;

using LocationTypePtr = mojo::InlinedStructPtr<LocationType>;


class Bounds;

using BoundsPtr = mojo::StructPtr<Bounds>;


class ComponentRestrictions;

using ComponentRestrictionsPtr = mojo::StructPtr<ComponentRestrictions>;


class Options;

using OptionsPtr = mojo::StructPtr<Options>;


class Geometry;

using GeometryPtr = mojo::StructPtr<Geometry>;


class Result;

using ResultPtr = mojo::StructPtr<Result>;


class Status;

using StatusPtr = mojo::InlinedStructPtr<Status>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Geocoder_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = GeocoderRequestValidator;
  using ResponseValidator_ = GeocoderResponseValidator;
  using Synchronous_ = Geocoder_Synchronous;
  enum class MessageOrdinals : uint32_t {
    AddressToLocation = 0,
    LocationToAddress = 1,
  };


  virtual ~Geocoder_Base() {}
};

}  // namespace internal

// Async interface declaration

class GeocoderProxy;
class GeocoderStub;
class Geocoder_Synchronous;

class GeocoderRequestValidator;
class GeocoderResponseValidator;

class Geocoder : public internal::Geocoder_Base {
 public:
  virtual ~Geocoder() override {}

  using Proxy_ = GeocoderProxy;
  using Stub_ = GeocoderStub;
  using AddressToLocationCallback = mojo::Callback<void(mojo::String, mojo::Array<ResultPtr>)>;
  virtual void AddressToLocation(const mojo::String& address, OptionsPtr options, const AddressToLocationCallback& callback) = 0;
  using LocationToAddressCallback = mojo::Callback<void(mojo::String, mojo::Array<ResultPtr>)>;
  virtual void LocationToAddress(mojo::LocationPtr location, OptionsPtr options, const LocationToAddressCallback& callback) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::LocationTypePtr, true, false> {
  using DataType = mojo::internal::LocationType_Data*;
};
template <>
struct WrapperTraits<mojo::BoundsPtr, true, false> {
  using DataType = mojo::internal::Bounds_Data*;
};
template <>
struct WrapperTraits<mojo::ComponentRestrictionsPtr, true, false> {
  using DataType = mojo::internal::ComponentRestrictions_Data*;
};
template <>
struct WrapperTraits<mojo::OptionsPtr, true, false> {
  using DataType = mojo::internal::Options_Data*;
};
template <>
struct WrapperTraits<mojo::GeometryPtr, true, false> {
  using DataType = mojo::internal::Geometry_Data*;
};
template <>
struct WrapperTraits<mojo::ResultPtr, true, false> {
  using DataType = mojo::internal::Result_Data*;
};
template <>
struct WrapperTraits<mojo::StatusPtr, true, false> {
  using DataType = mojo::internal::Status_Data*;
};

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class GeocoderRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class GeocoderResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class LocationType {
 public:
  using Data_ = internal::LocationType_Data;
  static const char* ROOFTOP;
  static const char* RANGE_INTERPOLATED;
  static const char* GEOMETRIC_CENTER;
  static const char* APPROXIMATE;

  static LocationTypePtr New();

  template <typename U>
  static LocationTypePtr From(const U& u) {
    return mojo::TypeConverter<LocationTypePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, LocationType>::Convert(*this);
  }

  LocationType();
  ~LocationType();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  LocationTypePtr Clone() const;
  bool Equals(const LocationType& other) const;

};


class Status {
 public:
  using Data_ = internal::Status_Data;
  static const char* OK;
  static const char* ZERO_RESULTS;
  static const char* OVER_QUERY_LIMIT;
  static const char* REQUEST_DENIED;
  static const char* INVALID_REQUEST;

  static StatusPtr New();

  template <typename U>
  static StatusPtr From(const U& u) {
    return mojo::TypeConverter<StatusPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Status>::Convert(*this);
  }

  Status();
  ~Status();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  StatusPtr Clone() const;
  bool Equals(const Status& other) const;

};



// --- Non-inlined structs ---
class Bounds {
 public:
  using Data_ = internal::Bounds_Data;

  static BoundsPtr New();

  template <typename U>
  static BoundsPtr From(const U& u) {
    return mojo::TypeConverter<BoundsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Bounds>::Convert(*this);
  }

  Bounds();
  ~Bounds();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  BoundsPtr Clone() const;
  bool Equals(const Bounds& other) const;

  mojo::LocationPtr northeast;
  mojo::LocationPtr southwest;
};


class ComponentRestrictions {
 public:
  using Data_ = internal::ComponentRestrictions_Data;

  static ComponentRestrictionsPtr New();

  template <typename U>
  static ComponentRestrictionsPtr From(const U& u) {
    return mojo::TypeConverter<ComponentRestrictionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ComponentRestrictions>::Convert(*this);
  }

  ComponentRestrictions();
  ~ComponentRestrictions();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ComponentRestrictionsPtr Clone() const;
  bool Equals(const ComponentRestrictions& other) const;

  mojo::String administrative_area;
  mojo::String country;
  mojo::String locality;
  mojo::String postal_code;
  mojo::String route;
};


class Options {
 public:
  using Data_ = internal::Options_Data;

  static OptionsPtr New();

  template <typename U>
  static OptionsPtr From(const U& u) {
    return mojo::TypeConverter<OptionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Options>::Convert(*this);
  }

  Options();
  ~Options();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  OptionsPtr Clone() const;
  bool Equals(const Options& other) const;

  ComponentRestrictionsPtr restrictions;
  mojo::LocationPtr location;
  mojo::String region;
};


class Geometry {
 public:
  using Data_ = internal::Geometry_Data;

  static GeometryPtr New();

  template <typename U>
  static GeometryPtr From(const U& u) {
    return mojo::TypeConverter<GeometryPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Geometry>::Convert(*this);
  }

  Geometry();
  ~Geometry();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  GeometryPtr Clone() const;
  bool Equals(const Geometry& other) const;

  mojo::LocationPtr location;
  LocationTypePtr location_type;
  BoundsPtr viewport;
  BoundsPtr bounds;
};


class Result {
 public:
  using Data_ = internal::Result_Data;

  static ResultPtr New();

  template <typename U>
  static ResultPtr From(const U& u) {
    return mojo::TypeConverter<ResultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Result>::Convert(*this);
  }

  Result();
  ~Result();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ResultPtr Clone() const;
  bool Equals(const Result& other) const;

  bool partial_match;
  GeometryPtr geometry;
  mojo::String formatted_address;
  mojo::Array<mojo::String> types;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const LocationType& input);
mojo::internal::ValidationError Serialize_(
    LocationType* input,
    mojo::internal::Buffer* buffer,
    internal::LocationType_Data** output);
void Deserialize_(internal::LocationType_Data* input,
                  LocationType* output);

size_t GetSerializedSize_(const Bounds& input);
mojo::internal::ValidationError Serialize_(
    Bounds* input,
    mojo::internal::Buffer* buffer,
    internal::Bounds_Data** output);
void Deserialize_(internal::Bounds_Data* input,
                  Bounds* output);

size_t GetSerializedSize_(const ComponentRestrictions& input);
mojo::internal::ValidationError Serialize_(
    ComponentRestrictions* input,
    mojo::internal::Buffer* buffer,
    internal::ComponentRestrictions_Data** output);
void Deserialize_(internal::ComponentRestrictions_Data* input,
                  ComponentRestrictions* output);

size_t GetSerializedSize_(const Options& input);
mojo::internal::ValidationError Serialize_(
    Options* input,
    mojo::internal::Buffer* buffer,
    internal::Options_Data** output);
void Deserialize_(internal::Options_Data* input,
                  Options* output);

size_t GetSerializedSize_(const Geometry& input);
mojo::internal::ValidationError Serialize_(
    Geometry* input,
    mojo::internal::Buffer* buffer,
    internal::Geometry_Data** output);
void Deserialize_(internal::Geometry_Data* input,
                  Geometry* output);

size_t GetSerializedSize_(const Result& input);
mojo::internal::ValidationError Serialize_(
    Result* input,
    mojo::internal::Buffer* buffer,
    internal::Result_Data** output);
void Deserialize_(internal::Result_Data* input,
                  Result* output);

size_t GetSerializedSize_(const Status& input);
mojo::internal::ValidationError Serialize_(
    Status* input,
    mojo::internal::Buffer* buffer,
    internal::Status_Data** output);
void Deserialize_(internal::Status_Data* input,
                  Status* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class Geocoder_AddressToLocation_Params;

using Geocoder_AddressToLocation_ParamsPtr = mojo::StructPtr<Geocoder_AddressToLocation_Params>;


size_t GetSerializedSize_(const Geocoder_AddressToLocation_Params& input);
mojo::internal::ValidationError Serialize_(
    Geocoder_AddressToLocation_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Geocoder_AddressToLocation_Params_Data** output);
void Deserialize_(internal::Geocoder_AddressToLocation_Params_Data* input,
                  Geocoder_AddressToLocation_Params* output);

class Geocoder_AddressToLocation_Params {
 public:
  using Data_ = internal::Geocoder_AddressToLocation_Params_Data;

  static Geocoder_AddressToLocation_ParamsPtr New();

  template <typename U>
  static Geocoder_AddressToLocation_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Geocoder_AddressToLocation_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Geocoder_AddressToLocation_Params>::Convert(*this);
  }

  Geocoder_AddressToLocation_Params();
  ~Geocoder_AddressToLocation_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Geocoder_AddressToLocation_ParamsPtr Clone() const;
  bool Equals(const Geocoder_AddressToLocation_Params& other) const;

  mojo::String address;
  OptionsPtr options;
};



class Geocoder_AddressToLocation_ResponseParams;

using Geocoder_AddressToLocation_ResponseParamsPtr = mojo::StructPtr<Geocoder_AddressToLocation_ResponseParams>;


size_t GetSerializedSize_(const Geocoder_AddressToLocation_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Geocoder_AddressToLocation_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Geocoder_AddressToLocation_ResponseParams_Data** output);
void Deserialize_(internal::Geocoder_AddressToLocation_ResponseParams_Data* input,
                  Geocoder_AddressToLocation_ResponseParams* output);

class Geocoder_AddressToLocation_ResponseParams {
 public:
  using Data_ = internal::Geocoder_AddressToLocation_ResponseParams_Data;

  static Geocoder_AddressToLocation_ResponseParamsPtr New();

  template <typename U>
  static Geocoder_AddressToLocation_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Geocoder_AddressToLocation_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Geocoder_AddressToLocation_ResponseParams>::Convert(*this);
  }

  Geocoder_AddressToLocation_ResponseParams();
  ~Geocoder_AddressToLocation_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Geocoder_AddressToLocation_ResponseParamsPtr Clone() const;
  bool Equals(const Geocoder_AddressToLocation_ResponseParams& other) const;

  mojo::String status;
  mojo::Array<ResultPtr> results;
};



class Geocoder_LocationToAddress_Params;

using Geocoder_LocationToAddress_ParamsPtr = mojo::StructPtr<Geocoder_LocationToAddress_Params>;


size_t GetSerializedSize_(const Geocoder_LocationToAddress_Params& input);
mojo::internal::ValidationError Serialize_(
    Geocoder_LocationToAddress_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Geocoder_LocationToAddress_Params_Data** output);
void Deserialize_(internal::Geocoder_LocationToAddress_Params_Data* input,
                  Geocoder_LocationToAddress_Params* output);

class Geocoder_LocationToAddress_Params {
 public:
  using Data_ = internal::Geocoder_LocationToAddress_Params_Data;

  static Geocoder_LocationToAddress_ParamsPtr New();

  template <typename U>
  static Geocoder_LocationToAddress_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Geocoder_LocationToAddress_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Geocoder_LocationToAddress_Params>::Convert(*this);
  }

  Geocoder_LocationToAddress_Params();
  ~Geocoder_LocationToAddress_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Geocoder_LocationToAddress_ParamsPtr Clone() const;
  bool Equals(const Geocoder_LocationToAddress_Params& other) const;

  mojo::LocationPtr location;
  OptionsPtr options;
};



class Geocoder_LocationToAddress_ResponseParams;

using Geocoder_LocationToAddress_ResponseParamsPtr = mojo::StructPtr<Geocoder_LocationToAddress_ResponseParams>;


size_t GetSerializedSize_(const Geocoder_LocationToAddress_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Geocoder_LocationToAddress_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Geocoder_LocationToAddress_ResponseParams_Data** output);
void Deserialize_(internal::Geocoder_LocationToAddress_ResponseParams_Data* input,
                  Geocoder_LocationToAddress_ResponseParams* output);

class Geocoder_LocationToAddress_ResponseParams {
 public:
  using Data_ = internal::Geocoder_LocationToAddress_ResponseParams_Data;

  static Geocoder_LocationToAddress_ResponseParamsPtr New();

  template <typename U>
  static Geocoder_LocationToAddress_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Geocoder_LocationToAddress_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Geocoder_LocationToAddress_ResponseParams>::Convert(*this);
  }

  Geocoder_LocationToAddress_ResponseParams();
  ~Geocoder_LocationToAddress_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Geocoder_LocationToAddress_ResponseParamsPtr Clone() const;
  bool Equals(const Geocoder_LocationToAddress_ResponseParams& other) const;

  mojo::String status;
  mojo::Array<ResultPtr> results;
};


}  // namespace mojo

#endif  // MOJO_SERVICES_LOCATION_INTERFACES_GEOCODER_MOJOM_COMMON_H_
