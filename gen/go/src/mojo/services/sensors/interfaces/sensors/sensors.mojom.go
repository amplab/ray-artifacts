// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/sensors/interfaces/sensors.mojom
//

package sensors

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type SensorType int32

const (
	SensorType_Accelerometer SensorType = 0
	SensorType_AmbientTemperature = SensorType_Accelerometer + 1;
	SensorType_GameRotationVector = SensorType_AmbientTemperature + 1;
	SensorType_GeomagneticRotationVector = SensorType_GameRotationVector + 1;
	SensorType_Gravity = SensorType_GeomagneticRotationVector + 1;
	SensorType_Gyroscope = SensorType_Gravity + 1;
	SensorType_GyroscopeUncalibrated = SensorType_Gyroscope + 1;
	SensorType_HeartRate = SensorType_GyroscopeUncalibrated + 1;
	SensorType_Light = SensorType_HeartRate + 1;
	SensorType_LinearAcceleration = SensorType_Light + 1;
	SensorType_MagneticField = SensorType_LinearAcceleration + 1;
	SensorType_MagneticFieldUncalibrated = SensorType_MagneticField + 1;
	SensorType_Pressure = SensorType_MagneticFieldUncalibrated + 1;
	SensorType_Proximity = SensorType_Pressure + 1;
	SensorType_RelativeHumidity = SensorType_Proximity + 1;
	SensorType_RotationVector = SensorType_RelativeHumidity + 1;
	SensorType_SignificantMotion = SensorType_RotationVector + 1;
	SensorType_StepCounter = SensorType_SignificantMotion + 1;
	SensorType_StepDetector = SensorType_StepCounter + 1;
)


type SensorListener interface {
	OnAccuracyChanged(inAccuracy int32) (err error)
	OnSensorChanged(inData SensorData) (err error)
}




type SensorListener_Request bindings.InterfaceRequest



type SensorListener_Pointer bindings.InterfacePointer


type SensorListener_ServiceFactory struct{
	Delegate SensorListener_Factory
}

type SensorListener_Factory interface {
	Create(request SensorListener_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *SensorListener_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &SensorListener_ServiceDescription{}
}

func (f *SensorListener_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := SensorListener_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForSensorListener creates a message pipe for use with the
// SensorListener interface with a SensorListener_Request on one end and a SensorListener_Pointer on the other.
func CreateMessagePipeForSensorListener() (SensorListener_Request, SensorListener_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return SensorListener_Request(r), SensorListener_Pointer(p)
}

const sensorListener_OnAccuracyChanged_Name uint32 = 0
const sensorListener_OnSensorChanged_Name uint32 = 1

type SensorListener_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewSensorListenerProxy(p SensorListener_Pointer, waiter bindings.AsyncWaiter) *SensorListener_Proxy {
	return &SensorListener_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *SensorListener_Proxy) Close_Proxy() {
	p.router.Close()
}

type sensorListener_OnAccuracyChanged_Params struct {
	inAccuracy int32
}


func (s *sensorListener_OnAccuracyChanged_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(s.inAccuracy); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var sensorListener_OnAccuracyChanged_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *sensorListener_OnAccuracyChanged_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(sensorListener_OnAccuracyChanged_Params_Versions), func(i int) bool {
		return sensorListener_OnAccuracyChanged_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(sensorListener_OnAccuracyChanged_Params_Versions) {
		if sensorListener_OnAccuracyChanged_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := sensorListener_OnAccuracyChanged_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inAccuracy = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *SensorListener_Proxy) OnAccuracyChanged(inAccuracy int32) (err error) {
	payload := &sensorListener_OnAccuracyChanged_Params{
		inAccuracy,
	}
	header := bindings.MessageHeader{
		Type: sensorListener_OnAccuracyChanged_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type sensorListener_OnSensorChanged_Params struct {
	inData SensorData
}


func (s *sensorListener_OnSensorChanged_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inData.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var sensorListener_OnSensorChanged_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *sensorListener_OnSensorChanged_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(sensorListener_OnSensorChanged_Params_Versions), func(i int) bool {
		return sensorListener_OnSensorChanged_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(sensorListener_OnSensorChanged_Params_Versions) {
		if sensorListener_OnSensorChanged_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := sensorListener_OnSensorChanged_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inData.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *SensorListener_Proxy) OnSensorChanged(inData SensorData) (err error) {
	payload := &sensorListener_OnSensorChanged_Params{
		inData,
	}
	header := bindings.MessageHeader{
		Type: sensorListener_OnSensorChanged_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type sensorListener_Stub struct {
	connector *bindings.Connector
	impl SensorListener
}

func NewSensorListenerStub(r SensorListener_Request, impl SensorListener, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &sensorListener_Stub{connector, impl})
}


func (f *SensorListener_Request) ServiceDescription() service_describer.ServiceDescription {
	return &SensorListener_ServiceDescription{}
}


type SensorListener_ServiceDescription struct{}

func (sd *SensorListener_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *SensorListener_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *SensorListener_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*SensorListener_ServiceDescription)(nil)


func (s *sensorListener_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case sensorListener_OnAccuracyChanged_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request sensorListener_OnAccuracyChanged_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.OnAccuracyChanged(request.inAccuracy)
		if err != nil {
			return
		}
	case sensorListener_OnSensorChanged_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request sensorListener_OnSensorChanged_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.OnSensorChanged(request.inData)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type SensorService interface {
	AddListener(inType SensorType, inListener SensorListener_Pointer) (err error)
}



var sensorService_Name = "sensors::SensorService"

type SensorService_Request bindings.InterfaceRequest

func (r *SensorService_Request) Name() string {
	return sensorService_Name
}


type SensorService_Pointer bindings.InterfacePointer

func (p *SensorService_Pointer) Name() string {
	return sensorService_Name
}

type SensorService_ServiceFactory struct{
	Delegate SensorService_Factory
}

type SensorService_Factory interface {
	Create(request SensorService_Request)
}

func (f *SensorService_ServiceFactory) Name() string {
	return sensorService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *SensorService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &SensorService_ServiceDescription{}
}

func (f *SensorService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := SensorService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForSensorService creates a message pipe for use with the
// SensorService interface with a SensorService_Request on one end and a SensorService_Pointer on the other.
func CreateMessagePipeForSensorService() (SensorService_Request, SensorService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return SensorService_Request(r), SensorService_Pointer(p)
}

const sensorService_AddListener_Name uint32 = 0

type SensorService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewSensorServiceProxy(p SensorService_Pointer, waiter bindings.AsyncWaiter) *SensorService_Proxy {
	return &SensorService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *SensorService_Proxy) Close_Proxy() {
	p.router.Close()
}

type sensorService_AddListener_Params struct {
	inType SensorType
	inListener SensorListener_Pointer
}


func (s *sensorService_AddListener_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteInt32(int32(s.inType)); err != nil {
		return err
	}
	if err := encoder.WriteInterface(s.inListener.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var sensorService_AddListener_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *sensorService_AddListener_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(sensorService_AddListener_Params_Versions), func(i int) bool {
		return sensorService_AddListener_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(sensorService_AddListener_Params_Versions) {
		if sensorService_AddListener_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := sensorService_AddListener_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inType = SensorType(value0)
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inListener = SensorListener_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *SensorService_Proxy) AddListener(inType SensorType, inListener SensorListener_Pointer) (err error) {
	payload := &sensorService_AddListener_Params{
		inType,
		inListener,
	}
	header := bindings.MessageHeader{
		Type: sensorService_AddListener_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type sensorService_Stub struct {
	connector *bindings.Connector
	impl SensorService
}

func NewSensorServiceStub(r SensorService_Request, impl SensorService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &sensorService_Stub{connector, impl})
}


func (f *SensorService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &SensorService_ServiceDescription{}
}


type SensorService_ServiceDescription struct{}

func (sd *SensorService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *SensorService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *SensorService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*SensorService_ServiceDescription)(nil)


func (s *sensorService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case sensorService_AddListener_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request sensorService_AddListener_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.AddListener(request.inType, request.inListener)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type SensorData struct {
	Accuracy int32
	TimeStamp int64
	Values []float32
}


func (s *SensorData) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WriteInt32(s.Accuracy); err != nil {
		return err
	}
	if err := encoder.WriteInt64(s.TimeStamp); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.Values)), 32)
	for _, elem0 := range s.Values {
		if err := encoder.WriteFloat32(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var sensorData_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *SensorData) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(sensorData_Versions), func(i int) bool {
		return sensorData_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(sensorData_Versions) {
		if sensorData_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := sensorData_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Accuracy = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.TimeStamp = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(32)
			if err != nil {
				return err
			}
			s.Values = make([]float32, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadFloat32()
				if err != nil {
					return err
				}
				s.Values[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

