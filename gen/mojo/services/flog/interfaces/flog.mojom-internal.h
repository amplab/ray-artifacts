// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace flog {

class FlogDescription;
class FlogEntry;
class FlogChannelCreationEntryDetails;
class FlogChannelMessageEntryDetails;
class FlogChannelDeletionEntryDetails;

class FlogEntryDetails;

namespace internal {

class FlogDescription_Data;
class FlogEntry_Data;
class FlogChannelCreationEntryDetails_Data;
class FlogChannelMessageEntryDetails_Data;
class FlogChannelDeletionEntryDetails_Data;


class FlogEntryDetails_Data;

#pragma pack(push, 1)



class FlogEntryDetails_Data {
 public:
  // Used to identify Mojom Union Data Classes.
  typedef void MojomUnionDataType;
  static FlogEntryDetails_Data* New(mojo::internal::Buffer* buf);
  FlogEntryDetails_Data();
  // Do nothing in the destructor since it won't be called.
  ~FlogEntryDetails_Data() {}

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      bool inlined,
      std::string* err);

  bool is_null() const {
    return size == 0;
  }

  void set_null();

  enum class FlogEntryDetails_Tag : uint32_t {

    CHANNEL_CREATION,
    CHANNEL_MESSAGE,
    CHANNEL_DELETION,
    __UNKNOWN__ = 0xFFFFFFFF,
  };

  // A note on layout:
  // "Each non-static data member is allocated as if it were the sole member of
  // a struct." - Section 9.5.2 ISO/IEC 14882:2011 (The C++ Spec)
  union MOJO_ALIGNAS(8) Union_ {
    mojo::internal::StructPointer<internal::FlogChannelCreationEntryDetails_Data> f_channel_creation;
    mojo::internal::StructPointer<internal::FlogChannelMessageEntryDetails_Data> f_channel_message;
    mojo::internal::StructPointer<internal::FlogChannelDeletionEntryDetails_Data> f_channel_deletion;
    uint64_t unknown;
  };

  uint32_t size;
  FlogEntryDetails_Tag tag;
  Union_ data;

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);
};
static_assert(sizeof(FlogEntryDetails_Data) == 16,
              "Bad sizeof(FlogEntryDetails_Data)");
static_assert(sizeof(FlogEntryDetails_Data::Union_) == 8,
              "Bad sizeof(FlogEntryDetails_Data::Union_)");


class FlogDescription_Data {
 public:
  static FlogDescription_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t log_id;
  uint8_t open : 1;
  uint8_t pad1_[3];
  mojo::internal::StringPointer label;

 private:
  FlogDescription_Data();
  ~FlogDescription_Data() = delete;
};
static_assert(sizeof(FlogDescription_Data) == 24,
              "Bad sizeof(FlogDescription_Data)");

class FlogEntry_Data {
 public:
  static FlogEntry_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t time_us;
  uint32_t log_id;
  uint32_t channel_id;
  internal::FlogEntryDetails_Data details;

 private:
  FlogEntry_Data();
  ~FlogEntry_Data() = delete;
};
static_assert(sizeof(FlogEntry_Data) == 40,
              "Bad sizeof(FlogEntry_Data)");

class FlogChannelCreationEntryDetails_Data {
 public:
  static FlogChannelCreationEntryDetails_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer type_name;

 private:
  FlogChannelCreationEntryDetails_Data();
  ~FlogChannelCreationEntryDetails_Data() = delete;
};
static_assert(sizeof(FlogChannelCreationEntryDetails_Data) == 16,
              "Bad sizeof(FlogChannelCreationEntryDetails_Data)");

class FlogChannelMessageEntryDetails_Data {
 public:
  static FlogChannelMessageEntryDetails_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<uint8_t> data;

 private:
  FlogChannelMessageEntryDetails_Data();
  ~FlogChannelMessageEntryDetails_Data() = delete;
};
static_assert(sizeof(FlogChannelMessageEntryDetails_Data) == 16,
              "Bad sizeof(FlogChannelMessageEntryDetails_Data)");

class FlogChannelDeletionEntryDetails_Data {
 public:
  static FlogChannelDeletionEntryDetails_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  FlogChannelDeletionEntryDetails_Data();
  ~FlogChannelDeletionEntryDetails_Data() = delete;
};
static_assert(sizeof(FlogChannelDeletionEntryDetails_Data) == 8,
              "Bad sizeof(FlogChannelDeletionEntryDetails_Data)");


class FlogService_CreateLogger_Params_Data {
 public:
  static FlogService_CreateLogger_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle logger;
  uint8_t pad0_[4];
  mojo::internal::StringPointer label;

 private:
  FlogService_CreateLogger_Params_Data();
  ~FlogService_CreateLogger_Params_Data() = delete;
};
static_assert(sizeof(FlogService_CreateLogger_Params_Data) == 24,
              "Bad sizeof(FlogService_CreateLogger_Params_Data)");


class FlogService_GetLogDescriptions_Params_Data {
 public:
  static FlogService_GetLogDescriptions_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  FlogService_GetLogDescriptions_Params_Data();
  ~FlogService_GetLogDescriptions_Params_Data() = delete;
};
static_assert(sizeof(FlogService_GetLogDescriptions_Params_Data) == 8,
              "Bad sizeof(FlogService_GetLogDescriptions_Params_Data)");

class FlogService_GetLogDescriptions_ResponseParams_Data {
 public:
  static FlogService_GetLogDescriptions_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<internal::FlogDescription_Data*> descriptions;

 private:
  FlogService_GetLogDescriptions_ResponseParams_Data();
  ~FlogService_GetLogDescriptions_ResponseParams_Data() = delete;
};
static_assert(sizeof(FlogService_GetLogDescriptions_ResponseParams_Data) == 16,
              "Bad sizeof(FlogService_GetLogDescriptions_ResponseParams_Data)");


class FlogService_CreateReader_Params_Data {
 public:
  static FlogService_CreateReader_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle reader;
  uint32_t log_id;

 private:
  FlogService_CreateReader_Params_Data();
  ~FlogService_CreateReader_Params_Data() = delete;
};
static_assert(sizeof(FlogService_CreateReader_Params_Data) == 16,
              "Bad sizeof(FlogService_CreateReader_Params_Data)");


class FlogLogger_LogChannelCreation_Params_Data {
 public:
  static FlogLogger_LogChannelCreation_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t time_us;
  uint32_t channel_id;
  uint8_t pad1_[4];
  mojo::internal::StringPointer type_name;

 private:
  FlogLogger_LogChannelCreation_Params_Data();
  ~FlogLogger_LogChannelCreation_Params_Data() = delete;
};
static_assert(sizeof(FlogLogger_LogChannelCreation_Params_Data) == 32,
              "Bad sizeof(FlogLogger_LogChannelCreation_Params_Data)");


class FlogLogger_LogChannelMessage_Params_Data {
 public:
  static FlogLogger_LogChannelMessage_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t time_us;
  uint32_t channel_id;
  uint8_t pad1_[4];
  mojo::internal::ArrayPointer<uint8_t> data;

 private:
  FlogLogger_LogChannelMessage_Params_Data();
  ~FlogLogger_LogChannelMessage_Params_Data() = delete;
};
static_assert(sizeof(FlogLogger_LogChannelMessage_Params_Data) == 32,
              "Bad sizeof(FlogLogger_LogChannelMessage_Params_Data)");


class FlogLogger_LogChannelDeletion_Params_Data {
 public:
  static FlogLogger_LogChannelDeletion_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t time_us;
  uint32_t channel_id;
  uint8_t padfinal_[4];

 private:
  FlogLogger_LogChannelDeletion_Params_Data();
  ~FlogLogger_LogChannelDeletion_Params_Data() = delete;
};
static_assert(sizeof(FlogLogger_LogChannelDeletion_Params_Data) == 24,
              "Bad sizeof(FlogLogger_LogChannelDeletion_Params_Data)");


class FlogReader_GetEntries_Params_Data {
 public:
  static FlogReader_GetEntries_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t start_index;
  uint32_t max_count;

 private:
  FlogReader_GetEntries_Params_Data();
  ~FlogReader_GetEntries_Params_Data() = delete;
};
static_assert(sizeof(FlogReader_GetEntries_Params_Data) == 16,
              "Bad sizeof(FlogReader_GetEntries_Params_Data)");

class FlogReader_GetEntries_ResponseParams_Data {
 public:
  static FlogReader_GetEntries_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<internal::FlogEntry_Data*> entries;

 private:
  FlogReader_GetEntries_ResponseParams_Data();
  ~FlogReader_GetEntries_ResponseParams_Data() = delete;
};
static_assert(sizeof(FlogReader_GetEntries_ResponseParams_Data) == 16,
              "Bad sizeof(FlogReader_GetEntries_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace flog
}  // namespace mojo

#endif  // MOJO_SERVICES_FLOG_INTERFACES_FLOG_MOJOM_INTERNAL_H_
