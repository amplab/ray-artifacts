// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/gpu/interfaces/viewport_parameter_listener.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---

ViewportParameterListenerProxy::ViewportParameterListenerProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ViewportParameterListenerProxy::OnVSyncParametersUpdated(
    int64_t in_timebase, int64_t in_interval) {
  size_t size = sizeof(internal::ViewportParameterListener_OnVSyncParametersUpdated_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ViewportParameterListener_Base::MessageOrdinals::OnVSyncParametersUpdated), size);

  internal::ViewportParameterListener_OnVSyncParametersUpdated_Params_Data* params =
      internal::ViewportParameterListener_OnVSyncParametersUpdated_Params_Data::New(builder.buffer());
  params->timebase = in_timebase;
  params->interval = in_interval;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ViewportParameterListenerStub::ViewportParameterListenerStub()
    : sink_(nullptr),
      control_message_handler_(ViewportParameterListener::Version_) {
}

ViewportParameterListenerStub::~ViewportParameterListenerStub() {}

bool ViewportParameterListenerStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ViewportParameterListener_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ViewportParameterListener_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ViewportParameterListener_Base::MessageOrdinals::OnVSyncParametersUpdated: {
      internal::ViewportParameterListener_OnVSyncParametersUpdated_Params_Data* params =
          reinterpret_cast<internal::ViewportParameterListener_OnVSyncParametersUpdated_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int64_t p_timebase {};
      int64_t p_interval {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_timebase = params->timebase;
        p_interval = params->interval;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnVSyncParametersUpdated(p_timebase, p_interval);
      return true;
    }
  }
  return false;
}

bool ViewportParameterListenerStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ViewportParameterListener_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ViewportParameterListener_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ViewportParameterListener_Base::MessageOrdinals::OnVSyncParametersUpdated: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
