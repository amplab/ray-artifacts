// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/application/application.mojom
//

package application

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	service_provider "mojo/public/interfaces/application/service_provider"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	shell "mojo/public/interfaces/application/shell"
)


type Application interface {
	Initialize(inShell shell.Shell_Pointer, inArgs *[]string, inUrl string) (err error)
	AcceptConnection(inRequestorUrl string, inResolvedUrl string, inServices service_provider.ServiceProvider_Request) (err error)
	RequestQuit() (err error)
}




type Application_Request bindings.InterfaceRequest



type Application_Pointer bindings.InterfacePointer


type Application_ServiceFactory struct{
	Delegate Application_Factory
}

type Application_Factory interface {
	Create(request Application_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Application_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Application_ServiceDescription{}
}

func (f *Application_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Application_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForApplication creates a message pipe for use with the
// Application interface with a Application_Request on one end and a Application_Pointer on the other.
func CreateMessagePipeForApplication() (Application_Request, Application_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Application_Request(r), Application_Pointer(p)
}

const application_Initialize_Name uint32 = 0
const application_AcceptConnection_Name uint32 = 1
const application_RequestQuit_Name uint32 = 2

type Application_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewApplicationProxy(p Application_Pointer, waiter bindings.AsyncWaiter) *Application_Proxy {
	return &Application_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Application_Proxy) Close_Proxy() {
	p.router.Close()
}

type application_Initialize_Params struct {
	inShell shell.Shell_Pointer
	inArgs *[]string
	inUrl string
}


func (s *application_Initialize_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WriteInterface(s.inShell.PassMessagePipe()); err != nil {
		return err
	}
	if s.inArgs == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.inArgs))), 64)
		for _, elem0 := range (*s.inArgs) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			if err := encoder.WriteString(elem0); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inUrl); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var application_Initialize_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *application_Initialize_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(application_Initialize_Params_Versions), func(i int) bool {
		return application_Initialize_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(application_Initialize_Params_Versions) {
		if application_Initialize_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := application_Initialize_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inShell = shell.Shell_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inArgs = nil
		} else {
			s.inArgs = new([]string)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.inArgs) = make([]string, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					value1, err := decoder.ReadString()
					if err != nil {
						return err
					}
					(*s.inArgs)[i0] = value1
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inUrl = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Application_Proxy) Initialize(inShell shell.Shell_Pointer, inArgs *[]string, inUrl string) (err error) {
	payload := &application_Initialize_Params{
		inShell,
		inArgs,
		inUrl,
	}
	header := bindings.MessageHeader{
		Type: application_Initialize_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type application_AcceptConnection_Params struct {
	inRequestorUrl string
	inResolvedUrl string
	inServices service_provider.ServiceProvider_Request
}


func (s *application_AcceptConnection_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inRequestorUrl); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inResolvedUrl); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inServices.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var application_AcceptConnection_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *application_AcceptConnection_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(application_AcceptConnection_Params_Versions), func(i int) bool {
		return application_AcceptConnection_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(application_AcceptConnection_Params_Versions) {
		if application_AcceptConnection_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := application_AcceptConnection_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inRequestorUrl = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inResolvedUrl = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inServices = service_provider.ServiceProvider_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Application_Proxy) AcceptConnection(inRequestorUrl string, inResolvedUrl string, inServices service_provider.ServiceProvider_Request) (err error) {
	payload := &application_AcceptConnection_Params{
		inRequestorUrl,
		inResolvedUrl,
		inServices,
	}
	header := bindings.MessageHeader{
		Type: application_AcceptConnection_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type application_RequestQuit_Params struct {
}


func (s *application_RequestQuit_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var application_RequestQuit_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *application_RequestQuit_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(application_RequestQuit_Params_Versions), func(i int) bool {
		return application_RequestQuit_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(application_RequestQuit_Params_Versions) {
		if application_RequestQuit_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := application_RequestQuit_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Application_Proxy) RequestQuit() (err error) {
	payload := &application_RequestQuit_Params{
	}
	header := bindings.MessageHeader{
		Type: application_RequestQuit_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type application_Stub struct {
	connector *bindings.Connector
	impl Application
}

func NewApplicationStub(r Application_Request, impl Application, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &application_Stub{connector, impl})
}


func (f *Application_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Application_ServiceDescription{}
}


type Application_ServiceDescription struct{}

func (sd *Application_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Application_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Application_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Application_ServiceDescription)(nil)


func (s *application_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case application_Initialize_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request application_Initialize_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.Initialize(request.inShell, request.inArgs, request.inUrl)
		if err != nil {
			return
		}
	case application_AcceptConnection_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request application_AcceptConnection_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.AcceptConnection(request.inRequestorUrl, request.inResolvedUrl, request.inServices)
		if err != nil {
			return
		}
	case application_RequestQuit_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request application_RequestQuit_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.RequestQuit()
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

