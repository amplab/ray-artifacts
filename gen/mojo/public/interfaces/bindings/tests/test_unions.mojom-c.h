// This file was auto-generated by the C bindings generator.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_C_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.
#include "mojo/public/interfaces/bindings/tests/test_included_unions.mojom-c.h"


// Forward declarations for structs.
struct mojo_test_StructOfUnions;
union mojo_test_StructOfUnionsPtr {
  struct mojo_test_StructOfUnions* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_StructOfUnionsPtr) == 8,
              "union mojo_test_StructOfUnionsPtr must be 8 bytes");

struct mojo_test_WrapperStruct;
union mojo_test_WrapperStructPtr {
  struct mojo_test_WrapperStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_WrapperStructPtr) == 8,
              "union mojo_test_WrapperStructPtr must be 8 bytes");

struct mojo_test_DummyStruct;
union mojo_test_DummyStructPtr {
  struct mojo_test_DummyStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_DummyStructPtr) == 8,
              "union mojo_test_DummyStructPtr must be 8 bytes");

struct mojo_test_SmallStruct;
union mojo_test_SmallStructPtr {
  struct mojo_test_SmallStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_SmallStructPtr) == 8,
              "union mojo_test_SmallStructPtr must be 8 bytes");

struct mojo_test_SmallStructNonNullableUnion;
union mojo_test_SmallStructNonNullableUnionPtr {
  struct mojo_test_SmallStructNonNullableUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_SmallStructNonNullableUnionPtr) == 8,
              "union mojo_test_SmallStructNonNullableUnionPtr must be 8 bytes");

struct mojo_test_StructNullObjectUnion;
union mojo_test_StructNullObjectUnionPtr {
  struct mojo_test_StructNullObjectUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_StructNullObjectUnionPtr) == 8,
              "union mojo_test_StructNullObjectUnionPtr must be 8 bytes");

struct mojo_test_SmallObjStruct;
union mojo_test_SmallObjStructPtr {
  struct mojo_test_SmallObjStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_SmallObjStructPtr) == 8,
              "union mojo_test_SmallObjStructPtr must be 8 bytes");

struct mojo_test_TryNonNullStruct;
union mojo_test_TryNonNullStructPtr {
  struct mojo_test_TryNonNullStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_TryNonNullStructPtr) == 8,
              "union mojo_test_TryNonNullStructPtr must be 8 bytes");

struct mojo_test_IncludingStruct;
union mojo_test_IncludingStructPtr {
  struct mojo_test_IncludingStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_IncludingStructPtr) == 8,
              "union mojo_test_IncludingStructPtr must be 8 bytes");

// Forward declarations for unions.
struct mojo_test_PodUnion;
union mojo_test_PodUnionPtr {
  struct mojo_test_PodUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_PodUnionPtr) == 8,
             "union mojo_test_PodUnion must be 8 bytes");

struct mojo_test_UnionOfUnions;
union mojo_test_UnionOfUnionsPtr {
  struct mojo_test_UnionOfUnions* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_UnionOfUnionsPtr) == 8,
             "union mojo_test_UnionOfUnions must be 8 bytes");

struct mojo_test_ObjectUnion;
union mojo_test_ObjectUnionPtr {
  struct mojo_test_ObjectUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_ObjectUnionPtr) == 8,
             "union mojo_test_ObjectUnion must be 8 bytes");

struct mojo_test_HandleUnion;
union mojo_test_HandleUnionPtr {
  struct mojo_test_HandleUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_HandleUnionPtr) == 8,
             "union mojo_test_HandleUnion must be 8 bytes");

struct mojo_test_ObjectOnlyUnion;
union mojo_test_ObjectOnlyUnionPtr {
  struct mojo_test_ObjectOnlyUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_ObjectOnlyUnionPtr) == 8,
             "union mojo_test_ObjectOnlyUnion must be 8 bytes");

struct mojo_test_OldUnion;
union mojo_test_OldUnionPtr {
  struct mojo_test_OldUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_OldUnionPtr) == 8,
             "union mojo_test_OldUnion must be 8 bytes");

struct mojo_test_NewUnion;
union mojo_test_NewUnionPtr {
  struct mojo_test_NewUnion* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_test_NewUnionPtr) == 8,
             "union mojo_test_NewUnion must be 8 bytes");

// Top level constants.


// Top level enums.
typedef uint32_t mojo_test_AnEnum;
enum mojo_test_AnEnum_Enum {
  mojo_test_AnEnum_FIRST = 0,
  mojo_test_AnEnum_SECOND = 1,
  
  mojo_test_AnEnum__UNKNOWN__ = 0xFFFFFFFF,
};



// Union definitions.
// -- mojo_test_PodUnion --
// Enum describing the union tags.
typedef uint32_t mojo_test_PodUnion_Tag;
enum mojo_test_PodUnion_Tag_Enum {
  mojo_test_PodUnion_Tag_f_int8 = 0,
  mojo_test_PodUnion_Tag_f_int8_other = 1,
  mojo_test_PodUnion_Tag_f_uint8 = 2,
  mojo_test_PodUnion_Tag_f_int16 = 3,
  mojo_test_PodUnion_Tag_f_uint16 = 4,
  mojo_test_PodUnion_Tag_f_int32 = 5,
  mojo_test_PodUnion_Tag_f_uint32 = 6,
  mojo_test_PodUnion_Tag_f_int64 = 7,
  mojo_test_PodUnion_Tag_f_uint64 = 8,
  mojo_test_PodUnion_Tag_f_float = 9,
  mojo_test_PodUnion_Tag_f_double = 10,
  mojo_test_PodUnion_Tag_f_bool = 11,
  mojo_test_PodUnion_Tag_f_enum = 12,
  
  mojo_test_PodUnion_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_PodUnion {
  uint32_t size;
  mojo_test_PodUnion_Tag tag;
  
  union {
    int8_t f_f_int8;
    int8_t f_f_int8_other;
    uint8_t f_f_uint8;
    int16_t f_f_int16;
    uint16_t f_f_uint16;
    int32_t f_f_int32;
    uint32_t f_f_uint32;
    int64_t f_f_int64;
    uint64_t f_f_uint64;
    float f_f_float;
    double f_f_double;
    bool f_bool : 1;
    mojo_test_AnEnum f_f_enum;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_PodUnion) == 16,
             "struct mojo_test_PodUnion must be 16 bytes");

// -- mojo_test_UnionOfUnions --
// Enum describing the union tags.
typedef uint32_t mojo_test_UnionOfUnions_Tag;
enum mojo_test_UnionOfUnions_Tag_Enum {
  mojo_test_UnionOfUnions_Tag_u = 0,
  mojo_test_UnionOfUnions_Tag_a_ou = 1,
  mojo_test_UnionOfUnions_Tag_a_hu = 2,
  mojo_test_UnionOfUnions_Tag_m_ou = 3,
  mojo_test_UnionOfUnions_Tag_m_hu = 4,
  
  mojo_test_UnionOfUnions_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_UnionOfUnions {
  uint32_t size;
  mojo_test_UnionOfUnions_Tag tag;
  
  union {
    union mojo_test_ObjectUnionPtr f_u;
    union MojomArrayPtr f_a_ou;
    union MojomArrayPtr f_a_hu;
    union MojomMapPtr f_m_ou;
    union MojomMapPtr f_m_hu;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_UnionOfUnions) == 16,
             "struct mojo_test_UnionOfUnions must be 16 bytes");

// -- mojo_test_ObjectUnion --
// Enum describing the union tags.
typedef uint32_t mojo_test_ObjectUnion_Tag;
enum mojo_test_ObjectUnion_Tag_Enum {
  mojo_test_ObjectUnion_Tag_f_int8 = 0,
  mojo_test_ObjectUnion_Tag_f_string = 1,
  mojo_test_ObjectUnion_Tag_f_dummy = 2,
  mojo_test_ObjectUnion_Tag_f_nullable = 3,
  mojo_test_ObjectUnion_Tag_f_array_int8 = 4,
  mojo_test_ObjectUnion_Tag_f_map_int8 = 5,
  mojo_test_ObjectUnion_Tag_f_pod_union = 6,
  
  mojo_test_ObjectUnion_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_ObjectUnion {
  uint32_t size;
  mojo_test_ObjectUnion_Tag tag;
  
  union {
    int8_t f_f_int8;
    union MojomStringPtr f_f_string;
    union mojo_test_DummyStructPtr f_f_dummy;
    union mojo_test_DummyStructPtr f_f_nullable;
    union MojomArrayPtr f_f_array_int8;
    union MojomMapPtr f_f_map_int8;
    union mojo_test_PodUnionPtr f_f_pod_union;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_ObjectUnion) == 16,
             "struct mojo_test_ObjectUnion must be 16 bytes");

// -- mojo_test_HandleUnion --
// Enum describing the union tags.
typedef uint32_t mojo_test_HandleUnion_Tag;
enum mojo_test_HandleUnion_Tag_Enum {
  mojo_test_HandleUnion_Tag_f_handle = 0,
  mojo_test_HandleUnion_Tag_f_message_pipe = 1,
  mojo_test_HandleUnion_Tag_f_data_pipe_consumer = 2,
  mojo_test_HandleUnion_Tag_f_data_pipe_producer = 3,
  mojo_test_HandleUnion_Tag_f_shared_buffer = 4,
  mojo_test_HandleUnion_Tag_f_small_cache = 5,
  
  mojo_test_HandleUnion_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_HandleUnion {
  uint32_t size;
  mojo_test_HandleUnion_Tag tag;
  
  union {
    MojoHandle f_f_handle;
    MojoHandle f_f_message_pipe;
    MojoHandle f_f_data_pipe_consumer;
    MojoHandle f_f_data_pipe_producer;
    MojoHandle f_f_shared_buffer;
    struct MojomInterfaceData f_f_small_cache;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_HandleUnion) == 16,
             "struct mojo_test_HandleUnion must be 16 bytes");

// -- mojo_test_ObjectOnlyUnion --
// Enum describing the union tags.
typedef uint32_t mojo_test_ObjectOnlyUnion_Tag;
enum mojo_test_ObjectOnlyUnion_Tag_Enum {
  mojo_test_ObjectOnlyUnion_Tag_dummy1 = 0,
  
  mojo_test_ObjectOnlyUnion_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_ObjectOnlyUnion {
  uint32_t size;
  mojo_test_ObjectOnlyUnion_Tag tag;
  
  union {
    union mojo_test_DummyStructPtr f_dummy1;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_ObjectOnlyUnion) == 16,
             "struct mojo_test_ObjectOnlyUnion must be 16 bytes");

// -- mojo_test_OldUnion --
// Enum describing the union tags.
typedef uint32_t mojo_test_OldUnion_Tag;
enum mojo_test_OldUnion_Tag_Enum {
  mojo_test_OldUnion_Tag_f_int8 = 0,
  
  mojo_test_OldUnion_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_OldUnion {
  uint32_t size;
  mojo_test_OldUnion_Tag tag;
  
  union {
    int8_t f_f_int8;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_OldUnion) == 16,
             "struct mojo_test_OldUnion must be 16 bytes");

// -- mojo_test_NewUnion --
// Enum describing the union tags.
typedef uint32_t mojo_test_NewUnion_Tag;
enum mojo_test_NewUnion_Tag_Enum {
  mojo_test_NewUnion_Tag_f_int8 = 0,
  mojo_test_NewUnion_Tag_f_int16 = 1,
  
  mojo_test_NewUnion_Tag__UNKNOWN__ = 0xFFFFFFFF,
};


struct mojo_test_NewUnion {
  uint32_t size;
  mojo_test_NewUnion_Tag tag;
  
  union {
    int8_t f_f_int8;
    int16_t f_f_int16;
    
    uint64_t unknown;
  } data;
};

MOJO_STATIC_ASSERT(sizeof(struct mojo_test_NewUnion) == 16,
             "struct mojo_test_NewUnion must be 16 bytes");



// Struct definitions.
// -- mojo_test_StructOfUnions --
// Enums
// Constants
// Struct definition
struct mojo_test_StructOfUnions {
  struct MojomStructHeader header_;
  struct mojo_test_ObjectUnion u;  // offset,bit = 0,0
  union MojomArrayPtr a_ou;  // offset,bit = 16,0
  union MojomArrayPtr a_hu;  // offset,bit = 24,0
  union MojomMapPtr m_ou;  // offset,bit = 32,0
  union MojomMapPtr m_hu;  // offset,bit = 40,0
  
};

struct mojo_test_StructOfUnions* mojo_test_StructOfUnions_New(struct MojomBuffer* in_buffer);

void mojo_test_StructOfUnions_Init(
  struct mojo_test_StructOfUnions* in_data);

void mojo_test_StructOfUnions_CloseAllHandles(
  struct mojo_test_StructOfUnions* in_data);

struct mojo_test_StructOfUnions* mojo_test_StructOfUnions_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_StructOfUnions* in_data);

size_t mojo_test_StructOfUnions_ComputeSerializedSize(
  const struct mojo_test_StructOfUnions* in_data);

MojomValidationResult mojo_test_StructOfUnions_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_StructOfUnions_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_StructOfUnions_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_WrapperStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_WrapperStruct {
  struct MojomStructHeader header_;
  struct mojo_test_ObjectUnion object_union;  // offset,bit = 0,0
  uint8_t pad0_[8];  // padding
  struct mojo_test_PodUnion pod_union;  // offset,bit = 16,0
  uint8_t pad1_[8];  // padding
  struct mojo_test_HandleUnion handle_union;  // offset,bit = 32,0
  
};

struct mojo_test_WrapperStruct* mojo_test_WrapperStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_WrapperStruct_Init(
  struct mojo_test_WrapperStruct* in_data);

void mojo_test_WrapperStruct_CloseAllHandles(
  struct mojo_test_WrapperStruct* in_data);

struct mojo_test_WrapperStruct* mojo_test_WrapperStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_WrapperStruct* in_data);

size_t mojo_test_WrapperStruct_ComputeSerializedSize(
  const struct mojo_test_WrapperStruct* in_data);

MojomValidationResult mojo_test_WrapperStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_WrapperStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_WrapperStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_DummyStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_DummyStruct {
  struct MojomStructHeader header_;
  int8_t f_int8;  // offset,bit = 0,0
  
};

struct mojo_test_DummyStruct* mojo_test_DummyStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_DummyStruct_Init(
  struct mojo_test_DummyStruct* in_data);

void mojo_test_DummyStruct_CloseAllHandles(
  struct mojo_test_DummyStruct* in_data);

struct mojo_test_DummyStruct* mojo_test_DummyStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_DummyStruct* in_data);

size_t mojo_test_DummyStruct_ComputeSerializedSize(
  const struct mojo_test_DummyStruct* in_data);

MojomValidationResult mojo_test_DummyStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_DummyStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_DummyStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_SmallStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_SmallStruct {
  struct MojomStructHeader header_;
  union mojo_test_DummyStructPtr dummy_struct;  // offset,bit = 0,0
  struct mojo_test_PodUnion pod_union;  // offset,bit = 8,0
  uint8_t pad1_[8];  // padding
  union MojomArrayPtr pod_union_array;  // offset,bit = 24,0
  union MojomArrayPtr nullable_pod_union_array;  // offset,bit = 32,0
  union MojomArrayPtr s_array;  // offset,bit = 40,0
  union MojomMapPtr pod_union_map;  // offset,bit = 48,0
  union MojomMapPtr nullable_pod_union_map;  // offset,bit = 56,0
  
};

struct mojo_test_SmallStruct* mojo_test_SmallStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_SmallStruct_Init(
  struct mojo_test_SmallStruct* in_data);

void mojo_test_SmallStruct_CloseAllHandles(
  struct mojo_test_SmallStruct* in_data);

struct mojo_test_SmallStruct* mojo_test_SmallStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SmallStruct* in_data);

size_t mojo_test_SmallStruct_ComputeSerializedSize(
  const struct mojo_test_SmallStruct* in_data);

MojomValidationResult mojo_test_SmallStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SmallStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SmallStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_SmallStructNonNullableUnion --
// Enums
// Constants
// Struct definition
struct mojo_test_SmallStructNonNullableUnion {
  struct MojomStructHeader header_;
  struct mojo_test_PodUnion pod_union;  // offset,bit = 0,0
  
};

struct mojo_test_SmallStructNonNullableUnion* mojo_test_SmallStructNonNullableUnion_New(struct MojomBuffer* in_buffer);

void mojo_test_SmallStructNonNullableUnion_Init(
  struct mojo_test_SmallStructNonNullableUnion* in_data);

void mojo_test_SmallStructNonNullableUnion_CloseAllHandles(
  struct mojo_test_SmallStructNonNullableUnion* in_data);

struct mojo_test_SmallStructNonNullableUnion* mojo_test_SmallStructNonNullableUnion_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SmallStructNonNullableUnion* in_data);

size_t mojo_test_SmallStructNonNullableUnion_ComputeSerializedSize(
  const struct mojo_test_SmallStructNonNullableUnion* in_data);

MojomValidationResult mojo_test_SmallStructNonNullableUnion_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SmallStructNonNullableUnion_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SmallStructNonNullableUnion_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_StructNullObjectUnion --
// Enums
// Constants
// Struct definition
struct mojo_test_StructNullObjectUnion {
  struct MojomStructHeader header_;
  struct mojo_test_ObjectOnlyUnion obj_union;  // offset,bit = 0,0
  
};

struct mojo_test_StructNullObjectUnion* mojo_test_StructNullObjectUnion_New(struct MojomBuffer* in_buffer);

void mojo_test_StructNullObjectUnion_Init(
  struct mojo_test_StructNullObjectUnion* in_data);

void mojo_test_StructNullObjectUnion_CloseAllHandles(
  struct mojo_test_StructNullObjectUnion* in_data);

struct mojo_test_StructNullObjectUnion* mojo_test_StructNullObjectUnion_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_StructNullObjectUnion* in_data);

size_t mojo_test_StructNullObjectUnion_ComputeSerializedSize(
  const struct mojo_test_StructNullObjectUnion* in_data);

MojomValidationResult mojo_test_StructNullObjectUnion_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_StructNullObjectUnion_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_StructNullObjectUnion_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_SmallObjStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_SmallObjStruct {
  struct MojomStructHeader header_;
  struct mojo_test_ObjectUnion obj_union;  // offset,bit = 0,0
  int8_t f_int8;  // offset,bit = 16,0
  
};

struct mojo_test_SmallObjStruct* mojo_test_SmallObjStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_SmallObjStruct_Init(
  struct mojo_test_SmallObjStruct* in_data);

void mojo_test_SmallObjStruct_CloseAllHandles(
  struct mojo_test_SmallObjStruct* in_data);

struct mojo_test_SmallObjStruct* mojo_test_SmallObjStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SmallObjStruct* in_data);

size_t mojo_test_SmallObjStruct_ComputeSerializedSize(
  const struct mojo_test_SmallObjStruct* in_data);

MojomValidationResult mojo_test_SmallObjStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SmallObjStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SmallObjStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_TryNonNullStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_TryNonNullStruct {
  struct MojomStructHeader header_;
  union mojo_test_DummyStructPtr nullable;  // offset,bit = 0,0
  union mojo_test_DummyStructPtr non_nullable;  // offset,bit = 8,0
  
};

struct mojo_test_TryNonNullStruct* mojo_test_TryNonNullStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_TryNonNullStruct_Init(
  struct mojo_test_TryNonNullStruct* in_data);

void mojo_test_TryNonNullStruct_CloseAllHandles(
  struct mojo_test_TryNonNullStruct* in_data);

struct mojo_test_TryNonNullStruct* mojo_test_TryNonNullStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_TryNonNullStruct* in_data);

size_t mojo_test_TryNonNullStruct_ComputeSerializedSize(
  const struct mojo_test_TryNonNullStruct* in_data);

MojomValidationResult mojo_test_TryNonNullStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_TryNonNullStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_TryNonNullStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_test_IncludingStruct --
// Enums
// Constants
// Struct definition
struct mojo_test_IncludingStruct {
  struct MojomStructHeader header_;
  struct mojo_test_IncludedUnion a;  // offset,bit = 0,0
  
};

struct mojo_test_IncludingStruct* mojo_test_IncludingStruct_New(struct MojomBuffer* in_buffer);

void mojo_test_IncludingStruct_Init(
  struct mojo_test_IncludingStruct* in_data);

void mojo_test_IncludingStruct_CloseAllHandles(
  struct mojo_test_IncludingStruct* in_data);

struct mojo_test_IncludingStruct* mojo_test_IncludingStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_IncludingStruct* in_data);

size_t mojo_test_IncludingStruct_ComputeSerializedSize(
  const struct mojo_test_IncludingStruct* in_data);

MojomValidationResult mojo_test_IncludingStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_IncludingStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_IncludingStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.
// --- mojo_test_SmallCache ---
#define mojo_test_SmallCache__ServiceName ((const char*)"")
#define mojo_test_SmallCache__CurrentVersion ((uint32_t)0)

// Enums
// Constants


// Message: GetIntValue

#define mojo_test_SmallCache_GetIntValue__Ordinal \
    ((uint32_t)1)
#define mojo_test_SmallCache_GetIntValue__MinVersion \
    ((uint32_t)0)

struct mojo_test_SmallCache_GetIntValue_Request;
// -- mojo_test_SmallCache_GetIntValue_Request --
// Enums
// Constants
// Struct definition
struct mojo_test_SmallCache_GetIntValue_Request {
  struct MojomStructHeader header_;
  
};

struct mojo_test_SmallCache_GetIntValue_Request* mojo_test_SmallCache_GetIntValue_Request_New(struct MojomBuffer* in_buffer);

void mojo_test_SmallCache_GetIntValue_Request_Init(
  struct mojo_test_SmallCache_GetIntValue_Request* in_data);

void mojo_test_SmallCache_GetIntValue_Request_CloseAllHandles(
  struct mojo_test_SmallCache_GetIntValue_Request* in_data);

struct mojo_test_SmallCache_GetIntValue_Request* mojo_test_SmallCache_GetIntValue_Request_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SmallCache_GetIntValue_Request* in_data);

size_t mojo_test_SmallCache_GetIntValue_Request_ComputeSerializedSize(
  const struct mojo_test_SmallCache_GetIntValue_Request* in_data);

MojomValidationResult mojo_test_SmallCache_GetIntValue_Request_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SmallCache_GetIntValue_Request_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SmallCache_GetIntValue_Request_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


struct mojo_test_SmallCache_GetIntValue_Response;
// -- mojo_test_SmallCache_GetIntValue_Response --
// Enums
// Constants
// Struct definition
struct mojo_test_SmallCache_GetIntValue_Response {
  struct MojomStructHeader header_;
  int64_t int_value;  // offset,bit = 0,0
  
};

struct mojo_test_SmallCache_GetIntValue_Response* mojo_test_SmallCache_GetIntValue_Response_New(struct MojomBuffer* in_buffer);

void mojo_test_SmallCache_GetIntValue_Response_Init(
  struct mojo_test_SmallCache_GetIntValue_Response* in_data);

void mojo_test_SmallCache_GetIntValue_Response_CloseAllHandles(
  struct mojo_test_SmallCache_GetIntValue_Response* in_data);

struct mojo_test_SmallCache_GetIntValue_Response* mojo_test_SmallCache_GetIntValue_Response_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SmallCache_GetIntValue_Response* in_data);

size_t mojo_test_SmallCache_GetIntValue_Response_ComputeSerializedSize(
  const struct mojo_test_SmallCache_GetIntValue_Response* in_data);

MojomValidationResult mojo_test_SmallCache_GetIntValue_Response_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SmallCache_GetIntValue_Response_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SmallCache_GetIntValue_Response_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);



// Message: SetIntValue

#define mojo_test_SmallCache_SetIntValue__Ordinal \
    ((uint32_t)0)
#define mojo_test_SmallCache_SetIntValue__MinVersion \
    ((uint32_t)0)

struct mojo_test_SmallCache_SetIntValue_Request;
// -- mojo_test_SmallCache_SetIntValue_Request --
// Enums
// Constants
// Struct definition
struct mojo_test_SmallCache_SetIntValue_Request {
  struct MojomStructHeader header_;
  int64_t int_value;  // offset,bit = 0,0
  
};

struct mojo_test_SmallCache_SetIntValue_Request* mojo_test_SmallCache_SetIntValue_Request_New(struct MojomBuffer* in_buffer);

void mojo_test_SmallCache_SetIntValue_Request_Init(
  struct mojo_test_SmallCache_SetIntValue_Request* in_data);

void mojo_test_SmallCache_SetIntValue_Request_CloseAllHandles(
  struct mojo_test_SmallCache_SetIntValue_Request* in_data);

struct mojo_test_SmallCache_SetIntValue_Request* mojo_test_SmallCache_SetIntValue_Request_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_SmallCache_SetIntValue_Request* in_data);

size_t mojo_test_SmallCache_SetIntValue_Request_ComputeSerializedSize(
  const struct mojo_test_SmallCache_SetIntValue_Request* in_data);

MojomValidationResult mojo_test_SmallCache_SetIntValue_Request_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_SmallCache_SetIntValue_Request_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_SmallCache_SetIntValue_Request_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);





// --- mojo_test_UnionInterface ---
#define mojo_test_UnionInterface__ServiceName ((const char*)"")
#define mojo_test_UnionInterface__CurrentVersion ((uint32_t)0)

// Enums
// Constants


// Message: Echo

#define mojo_test_UnionInterface_Echo__Ordinal \
    ((uint32_t)0)
#define mojo_test_UnionInterface_Echo__MinVersion \
    ((uint32_t)0)

struct mojo_test_UnionInterface_Echo_Request;
// -- mojo_test_UnionInterface_Echo_Request --
// Enums
// Constants
// Struct definition
struct mojo_test_UnionInterface_Echo_Request {
  struct MojomStructHeader header_;
  struct mojo_test_PodUnion in_val;  // offset,bit = 0,0
  
};

struct mojo_test_UnionInterface_Echo_Request* mojo_test_UnionInterface_Echo_Request_New(struct MojomBuffer* in_buffer);

void mojo_test_UnionInterface_Echo_Request_Init(
  struct mojo_test_UnionInterface_Echo_Request* in_data);

void mojo_test_UnionInterface_Echo_Request_CloseAllHandles(
  struct mojo_test_UnionInterface_Echo_Request* in_data);

struct mojo_test_UnionInterface_Echo_Request* mojo_test_UnionInterface_Echo_Request_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_UnionInterface_Echo_Request* in_data);

size_t mojo_test_UnionInterface_Echo_Request_ComputeSerializedSize(
  const struct mojo_test_UnionInterface_Echo_Request* in_data);

MojomValidationResult mojo_test_UnionInterface_Echo_Request_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_UnionInterface_Echo_Request_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_UnionInterface_Echo_Request_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


struct mojo_test_UnionInterface_Echo_Response;
// -- mojo_test_UnionInterface_Echo_Response --
// Enums
// Constants
// Struct definition
struct mojo_test_UnionInterface_Echo_Response {
  struct MojomStructHeader header_;
  struct mojo_test_PodUnion out_val;  // offset,bit = 0,0
  
};

struct mojo_test_UnionInterface_Echo_Response* mojo_test_UnionInterface_Echo_Response_New(struct MojomBuffer* in_buffer);

void mojo_test_UnionInterface_Echo_Response_Init(
  struct mojo_test_UnionInterface_Echo_Response* in_data);

void mojo_test_UnionInterface_Echo_Response_CloseAllHandles(
  struct mojo_test_UnionInterface_Echo_Response* in_data);

struct mojo_test_UnionInterface_Echo_Response* mojo_test_UnionInterface_Echo_Response_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_test_UnionInterface_Echo_Response* in_data);

size_t mojo_test_UnionInterface_Echo_Response_ComputeSerializedSize(
  const struct mojo_test_UnionInterface_Echo_Response* in_data);

MojomValidationResult mojo_test_UnionInterface_Echo_Response_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_test_UnionInterface_Echo_Response_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_test_UnionInterface_Echo_Response_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);







// Type tables declarations for structs and unions.

extern struct MojomPointerTableUnionEntry mojo_test_PodUnion__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_test_UnionOfUnions__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_test_ObjectUnion__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_test_HandleUnion__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_test_ObjectOnlyUnion__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_test_OldUnion__PointerTable[];
extern struct MojomPointerTableUnionEntry mojo_test_NewUnion__PointerTable[];


extern struct MojomPointerTableStructEntry mojo_test_StructOfUnions__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_WrapperStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_DummyStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SmallStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SmallStructNonNullableUnion__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_StructNullObjectUnion__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SmallObjStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_TryNonNullStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_IncludingStruct__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SmallCache_SetIntValue_Request__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SmallCache_GetIntValue_Request__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_SmallCache_GetIntValue_Response__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_UnionInterface_Echo_Request__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_test_UnionInterface_Echo_Response__PointerTable[];


#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_UNIONS_MOJOM_C_H_