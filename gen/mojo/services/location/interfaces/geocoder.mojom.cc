// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/location/interfaces/geocoder.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class Geocoder_AddressToLocation_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Geocoder_AddressToLocation_ForwardToCallback(
      const Geocoder::AddressToLocationCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Geocoder::AddressToLocationCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Geocoder_AddressToLocation_ForwardToCallback);
};
bool Geocoder_AddressToLocation_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Geocoder_AddressToLocation_ResponseParams_Data* params =
      reinterpret_cast<internal::Geocoder_AddressToLocation_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_status {};
  mojo::Array<ResultPtr> p_results {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->status.ptr, &p_status);
    Deserialize_(params->results.ptr, &p_results);
  } while (false);
  callback_.Run(p_status, p_results.Pass());
  return true;
}
class Geocoder_LocationToAddress_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Geocoder_LocationToAddress_ForwardToCallback(
      const Geocoder::LocationToAddressCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Geocoder::LocationToAddressCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Geocoder_LocationToAddress_ForwardToCallback);
};
bool Geocoder_LocationToAddress_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Geocoder_LocationToAddress_ResponseParams_Data* params =
      reinterpret_cast<internal::Geocoder_LocationToAddress_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::String p_status {};
  mojo::Array<ResultPtr> p_results {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->status.ptr, &p_status);
    Deserialize_(params->results.ptr, &p_results);
  } while (false);
  callback_.Run(p_status, p_results.Pass());
  return true;
}

GeocoderProxy::GeocoderProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void GeocoderProxy::AddressToLocation(
    const mojo::String& in_address, OptionsPtr in_options, const AddressToLocationCallback& callback) {
  size_t size = sizeof(internal::Geocoder_AddressToLocation_Params_Data);
  size += GetSerializedSize_(in_address);
  size += in_options.is_null()
              ? 0
              : GetSerializedSize_(*in_options);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Geocoder_Base::MessageOrdinals::AddressToLocation), size);

  internal::Geocoder_AddressToLocation_Params_Data* params =
      internal::Geocoder_AddressToLocation_Params_Data::New(builder.buffer());
  SerializeString_(in_address, builder.buffer(), &params->address.ptr);
  if (!params->address.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null address in Geocoder.AddressToLocation request");
  }
  {Serialize_(in_options.get(),
               builder.buffer(),
               &params->options.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Geocoder_AddressToLocation_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void GeocoderProxy::LocationToAddress(
    mojo::LocationPtr in_location, OptionsPtr in_options, const LocationToAddressCallback& callback) {
  size_t size = sizeof(internal::Geocoder_LocationToAddress_Params_Data);
  size += in_location.is_null()
              ? 0
              : GetSerializedSize_(*in_location);
  size += in_options.is_null()
              ? 0
              : GetSerializedSize_(*in_options);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Geocoder_Base::MessageOrdinals::LocationToAddress), size);

  internal::Geocoder_LocationToAddress_Params_Data* params =
      internal::Geocoder_LocationToAddress_Params_Data::New(builder.buffer());
  {Serialize_(in_location.get(),
               builder.buffer(),
               &params->location.ptr);
  }
  if (!params->location.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null location in Geocoder.LocationToAddress request");
  }
  {Serialize_(in_options.get(),
               builder.buffer(),
               &params->options.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Geocoder_LocationToAddress_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Geocoder_AddressToLocation_ProxyToResponder
    : public Geocoder::AddressToLocationCallback::Runnable {
 public:
  ~Geocoder_AddressToLocation_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Geocoder::AddressToLocation(p_address, p_options.Pass(), callback) "
        "was never run.";
  }

  Geocoder_AddressToLocation_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_status, mojo::Array<ResultPtr> in_results) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Geocoder_AddressToLocation_ProxyToResponder);
};

void Geocoder_AddressToLocation_ProxyToResponder::Run(
    const mojo::String& in_status, mojo::Array<ResultPtr> in_results) const {
  size_t size = sizeof(internal::Geocoder_AddressToLocation_ResponseParams_Data);
  size += GetSerializedSize_(in_status);
  size += GetSerializedSize_(in_results);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Geocoder_Base::MessageOrdinals::AddressToLocation), size, request_id_);
  internal::Geocoder_AddressToLocation_ResponseParams_Data* params =
      internal::Geocoder_AddressToLocation_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_status, builder.buffer(), &params->status.ptr);
  if (!params->status.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null status in Geocoder.AddressToLocation response");
  }
  {
    const mojo::internal::ArrayValidateParams results_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_results, builder.buffer(), &params->results.ptr,
                          &results_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Geocoder_LocationToAddress_ProxyToResponder
    : public Geocoder::LocationToAddressCallback::Runnable {
 public:
  ~Geocoder_LocationToAddress_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Geocoder::LocationToAddress(p_location.Pass(), p_options.Pass(), callback) "
        "was never run.";
  }

  Geocoder_LocationToAddress_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(const mojo::String& in_status, mojo::Array<ResultPtr> in_results) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Geocoder_LocationToAddress_ProxyToResponder);
};

void Geocoder_LocationToAddress_ProxyToResponder::Run(
    const mojo::String& in_status, mojo::Array<ResultPtr> in_results) const {
  size_t size = sizeof(internal::Geocoder_LocationToAddress_ResponseParams_Data);
  size += GetSerializedSize_(in_status);
  size += GetSerializedSize_(in_results);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Geocoder_Base::MessageOrdinals::LocationToAddress), size, request_id_);
  internal::Geocoder_LocationToAddress_ResponseParams_Data* params =
      internal::Geocoder_LocationToAddress_ResponseParams_Data::New(builder.buffer());
  SerializeString_(in_status, builder.buffer(), &params->status.ptr);
  if (!params->status.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null status in Geocoder.LocationToAddress response");
  }
  {
    const mojo::internal::ArrayValidateParams results_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_results, builder.buffer(), &params->results.ptr,
                          &results_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

GeocoderStub::GeocoderStub()
    : sink_(nullptr),
      control_message_handler_(Geocoder::Version_) {
}

GeocoderStub::~GeocoderStub() {}

bool GeocoderStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Geocoder_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Geocoder_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Geocoder_Base::MessageOrdinals::AddressToLocation: {
      break;
    }
    case internal::Geocoder_Base::MessageOrdinals::LocationToAddress: {
      break;
    }
  }
  return false;
}

bool GeocoderStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Geocoder_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Geocoder_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Geocoder_Base::MessageOrdinals::AddressToLocation: {
      internal::Geocoder_AddressToLocation_Params_Data* params =
          reinterpret_cast<internal::Geocoder_AddressToLocation_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Geocoder::AddressToLocationCallback::Runnable* runnable =
          new Geocoder_AddressToLocation_ProxyToResponder(
              message->request_id(), responder);
      Geocoder::AddressToLocationCallback callback(runnable);
      
      mojo::String p_address {};
      OptionsPtr p_options {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->address.ptr, &p_address);
        if (params->options.ptr) {
          p_options = Options::New();
          Deserialize_(params->options.ptr, p_options.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AddressToLocation(p_address, p_options.Pass(), callback);
      return true;
    }
    case internal::Geocoder_Base::MessageOrdinals::LocationToAddress: {
      internal::Geocoder_LocationToAddress_Params_Data* params =
          reinterpret_cast<internal::Geocoder_LocationToAddress_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Geocoder::LocationToAddressCallback::Runnable* runnable =
          new Geocoder_LocationToAddress_ProxyToResponder(
              message->request_id(), responder);
      Geocoder::LocationToAddressCallback callback(runnable);
      
      mojo::LocationPtr p_location {};
      OptionsPtr p_options {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->location.ptr) {
          p_location = mojo::Location::New();
          Deserialize_(params->location.ptr, p_location.get());
        }
        if (params->options.ptr) {
          p_options = Options::New();
          Deserialize_(params->options.ptr, p_options.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->LocationToAddress(p_location.Pass(), p_options.Pass(), callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
