// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/http_connection.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class HttpConnection_SetSendBufferSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HttpConnection_SetSendBufferSize_ForwardToCallback(
      const HttpConnection::SetSendBufferSizeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HttpConnection::SetSendBufferSizeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnection_SetSendBufferSize_ForwardToCallback);
};
bool HttpConnection_SetSendBufferSize_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HttpConnection_SetSendBufferSize_ResponseParams_Data* params =
      reinterpret_cast<internal::HttpConnection_SetSendBufferSize_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}
class HttpConnection_SetReceiveBufferSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HttpConnection_SetReceiveBufferSize_ForwardToCallback(
      const HttpConnection::SetReceiveBufferSizeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HttpConnection::SetReceiveBufferSizeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnection_SetReceiveBufferSize_ForwardToCallback);
};
bool HttpConnection_SetReceiveBufferSize_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data* params =
      reinterpret_cast<internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}

HttpConnectionProxy::HttpConnectionProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void HttpConnectionProxy::SetSendBufferSize(
    uint32_t in_size, const SetSendBufferSizeCallback& callback) {
  size_t size = sizeof(internal::HttpConnection_SetSendBufferSize_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnection_Base::MessageOrdinals::SetSendBufferSize), size);

  internal::HttpConnection_SetSendBufferSize_Params_Data* params =
      internal::HttpConnection_SetSendBufferSize_Params_Data::New(builder.buffer());
  params->size = in_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HttpConnection_SetSendBufferSize_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void HttpConnectionProxy::SetReceiveBufferSize(
    uint32_t in_size, const SetReceiveBufferSizeCallback& callback) {
  size_t size = sizeof(internal::HttpConnection_SetReceiveBufferSize_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnection_Base::MessageOrdinals::SetReceiveBufferSize), size);

  internal::HttpConnection_SetReceiveBufferSize_Params_Data* params =
      internal::HttpConnection_SetReceiveBufferSize_Params_Data::New(builder.buffer());
  params->size = in_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HttpConnection_SetReceiveBufferSize_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HttpConnection_SetSendBufferSize_ProxyToResponder
    : public HttpConnection::SetSendBufferSizeCallback::Runnable {
 public:
  ~HttpConnection_SetSendBufferSize_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HttpConnection::SetSendBufferSize(p_size, callback) "
        "was never run.";
  }

  HttpConnection_SetSendBufferSize_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnection_SetSendBufferSize_ProxyToResponder);
};

void HttpConnection_SetSendBufferSize_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::HttpConnection_SetSendBufferSize_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnection_Base::MessageOrdinals::SetSendBufferSize), size, request_id_);
  internal::HttpConnection_SetSendBufferSize_ResponseParams_Data* params =
      internal::HttpConnection_SetSendBufferSize_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in HttpConnection.SetSendBufferSize response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HttpConnection_SetReceiveBufferSize_ProxyToResponder
    : public HttpConnection::SetReceiveBufferSizeCallback::Runnable {
 public:
  ~HttpConnection_SetReceiveBufferSize_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HttpConnection::SetReceiveBufferSize(p_size, callback) "
        "was never run.";
  }

  HttpConnection_SetReceiveBufferSize_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnection_SetReceiveBufferSize_ProxyToResponder);
};

void HttpConnection_SetReceiveBufferSize_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnection_Base::MessageOrdinals::SetReceiveBufferSize), size, request_id_);
  internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data* params =
      internal::HttpConnection_SetReceiveBufferSize_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in HttpConnection.SetReceiveBufferSize response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

HttpConnectionStub::HttpConnectionStub()
    : sink_(nullptr),
      control_message_handler_(HttpConnection::Version_) {
}

HttpConnectionStub::~HttpConnectionStub() {}

bool HttpConnectionStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::HttpConnection_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HttpConnection_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HttpConnection_Base::MessageOrdinals::SetSendBufferSize: {
      break;
    }
    case internal::HttpConnection_Base::MessageOrdinals::SetReceiveBufferSize: {
      break;
    }
  }
  return false;
}

bool HttpConnectionStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::HttpConnection_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HttpConnection_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HttpConnection_Base::MessageOrdinals::SetSendBufferSize: {
      internal::HttpConnection_SetSendBufferSize_Params_Data* params =
          reinterpret_cast<internal::HttpConnection_SetSendBufferSize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HttpConnection::SetSendBufferSizeCallback::Runnable* runnable =
          new HttpConnection_SetSendBufferSize_ProxyToResponder(
              message->request_id(), responder);
      HttpConnection::SetSendBufferSizeCallback callback(runnable);
      
      uint32_t p_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_size = params->size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetSendBufferSize(p_size, callback);
      return true;
    }
    case internal::HttpConnection_Base::MessageOrdinals::SetReceiveBufferSize: {
      internal::HttpConnection_SetReceiveBufferSize_Params_Data* params =
          reinterpret_cast<internal::HttpConnection_SetReceiveBufferSize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HttpConnection::SetReceiveBufferSizeCallback::Runnable* runnable =
          new HttpConnection_SetReceiveBufferSize_ProxyToResponder(
              message->request_id(), responder);
      HttpConnection::SetReceiveBufferSizeCallback callback(runnable);
      
      uint32_t p_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_size = params->size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetReceiveBufferSize(p_size, callback);
      return true;
    }
  }
  return false;
}

class HttpConnectionDelegate_OnReceivedRequest_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HttpConnectionDelegate_OnReceivedRequest_ForwardToCallback(
      const HttpConnectionDelegate::OnReceivedRequestCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HttpConnectionDelegate::OnReceivedRequestCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnectionDelegate_OnReceivedRequest_ForwardToCallback);
};
bool HttpConnectionDelegate_OnReceivedRequest_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data* params =
      reinterpret_cast<internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::HttpResponsePtr p_response {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->response.ptr) {
      p_response = mojo::HttpResponse::New();
      Deserialize_(params->response.ptr, p_response.get());
    }
  } while (false);
  callback_.Run(p_response.Pass());
  return true;
}
class HttpConnectionDelegate_OnReceivedWebSocketRequest_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HttpConnectionDelegate_OnReceivedWebSocketRequest_ForwardToCallback(
      const HttpConnectionDelegate::OnReceivedWebSocketRequestCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HttpConnectionDelegate::OnReceivedWebSocketRequestCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnectionDelegate_OnReceivedWebSocketRequest_ForwardToCallback);
};
bool HttpConnectionDelegate_OnReceivedWebSocketRequest_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data* params =
      reinterpret_cast<internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::InterfaceRequest<mojo::WebSocket> p_web_socket {};
  mojo::ScopedDataPipeConsumerHandle p_send_stream {};
  mojo::InterfaceHandle<mojo::WebSocketClient> p_client {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_web_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->web_socket)));
    p_send_stream.reset(mojo::internal::FetchAndReset(&params->send_stream));
    mojo::internal::InterfaceDataToHandle(&params->client, &p_client);
  } while (false);
  callback_.Run(p_web_socket.Pass(), p_send_stream.Pass(), p_client.Pass());
  return true;
}

HttpConnectionDelegateProxy::HttpConnectionDelegateProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void HttpConnectionDelegateProxy::OnReceivedRequest(
    mojo::HttpRequestPtr in_request, const OnReceivedRequestCallback& callback) {
  size_t size = sizeof(internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data);
  size += in_request.is_null()
              ? 0
              : GetSerializedSize_(*in_request);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedRequest), size);

  internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data* params =
      internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data::New(builder.buffer());
  {Serialize_(in_request.get(),
               builder.buffer(),
               &params->request.ptr);
  }
  if (!params->request.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null request in HttpConnectionDelegate.OnReceivedRequest request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HttpConnectionDelegate_OnReceivedRequest_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void HttpConnectionDelegateProxy::OnReceivedWebSocketRequest(
    mojo::HttpRequestPtr in_request, const OnReceivedWebSocketRequestCallback& callback) {
  size_t size = sizeof(internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data);
  size += in_request.is_null()
              ? 0
              : GetSerializedSize_(*in_request);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedWebSocketRequest), size);

  internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data* params =
      internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data::New(builder.buffer());
  {Serialize_(in_request.get(),
               builder.buffer(),
               &params->request.ptr);
  }
  if (!params->request.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null request in HttpConnectionDelegate.OnReceivedWebSocketRequest request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HttpConnectionDelegate_OnReceivedWebSocketRequest_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HttpConnectionDelegate_OnReceivedRequest_ProxyToResponder
    : public HttpConnectionDelegate::OnReceivedRequestCallback::Runnable {
 public:
  ~HttpConnectionDelegate_OnReceivedRequest_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HttpConnectionDelegate::OnReceivedRequest(p_request.Pass(), callback) "
        "was never run.";
  }

  HttpConnectionDelegate_OnReceivedRequest_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::HttpResponsePtr in_response) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnectionDelegate_OnReceivedRequest_ProxyToResponder);
};

void HttpConnectionDelegate_OnReceivedRequest_ProxyToResponder::Run(
    mojo::HttpResponsePtr in_response) const {
  size_t size = sizeof(internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data);
  size += in_response.is_null()
              ? 0
              : GetSerializedSize_(*in_response);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedRequest), size, request_id_);
  internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data* params =
      internal::HttpConnectionDelegate_OnReceivedRequest_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_response.get(),
               builder.buffer(),
               &params->response.ptr);
  }
  if (!params->response.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in HttpConnectionDelegate.OnReceivedRequest response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HttpConnectionDelegate_OnReceivedWebSocketRequest_ProxyToResponder
    : public HttpConnectionDelegate::OnReceivedWebSocketRequestCallback::Runnable {
 public:
  ~HttpConnectionDelegate_OnReceivedWebSocketRequest_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HttpConnectionDelegate::OnReceivedWebSocketRequest(p_request.Pass(), callback) "
        "was never run.";
  }

  HttpConnectionDelegate_OnReceivedWebSocketRequest_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::InterfaceRequest<mojo::WebSocket> in_web_socket, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::InterfaceHandle<mojo::WebSocketClient> in_client) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HttpConnectionDelegate_OnReceivedWebSocketRequest_ProxyToResponder);
};

void HttpConnectionDelegate_OnReceivedWebSocketRequest_ProxyToResponder::Run(
    mojo::InterfaceRequest<mojo::WebSocket> in_web_socket, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::InterfaceHandle<mojo::WebSocketClient> in_client) const {
  size_t size = sizeof(internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedWebSocketRequest), size, request_id_);
  internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data* params =
      internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_ResponseParams_Data::New(builder.buffer());
  params->web_socket = in_web_socket.PassMessagePipe().release();
  params->send_stream = in_send_stream.release();
  mojo::internal::InterfaceHandleToData(in_client.Pass(),
                                        &params->client);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

HttpConnectionDelegateStub::HttpConnectionDelegateStub()
    : sink_(nullptr),
      control_message_handler_(HttpConnectionDelegate::Version_) {
}

HttpConnectionDelegateStub::~HttpConnectionDelegateStub() {}

bool HttpConnectionDelegateStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::HttpConnectionDelegate_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HttpConnectionDelegate_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedRequest: {
      break;
    }
    case internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedWebSocketRequest: {
      break;
    }
  }
  return false;
}

bool HttpConnectionDelegateStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::HttpConnectionDelegate_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HttpConnectionDelegate_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedRequest: {
      internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data* params =
          reinterpret_cast<internal::HttpConnectionDelegate_OnReceivedRequest_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HttpConnectionDelegate::OnReceivedRequestCallback::Runnable* runnable =
          new HttpConnectionDelegate_OnReceivedRequest_ProxyToResponder(
              message->request_id(), responder);
      HttpConnectionDelegate::OnReceivedRequestCallback callback(runnable);
      
      mojo::HttpRequestPtr p_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->request.ptr) {
          p_request = mojo::HttpRequest::New();
          Deserialize_(params->request.ptr, p_request.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnReceivedRequest(p_request.Pass(), callback);
      return true;
    }
    case internal::HttpConnectionDelegate_Base::MessageOrdinals::OnReceivedWebSocketRequest: {
      internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data* params =
          reinterpret_cast<internal::HttpConnectionDelegate_OnReceivedWebSocketRequest_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HttpConnectionDelegate::OnReceivedWebSocketRequestCallback::Runnable* runnable =
          new HttpConnectionDelegate_OnReceivedWebSocketRequest_ProxyToResponder(
              message->request_id(), responder);
      HttpConnectionDelegate::OnReceivedWebSocketRequestCallback callback(runnable);
      
      mojo::HttpRequestPtr p_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->request.ptr) {
          p_request = mojo::HttpRequest::New();
          Deserialize_(params->request.ptr, p_request.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnReceivedWebSocketRequest(p_request.Pass(), callback);
      return true;
    }
  }
  return false;
}

}  // namespace mojo
