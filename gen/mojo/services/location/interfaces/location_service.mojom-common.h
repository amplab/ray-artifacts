// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_LOCATION_INTERFACES_LOCATION_SERVICE_MOJOM_COMMON_H_
#define MOJO_SERVICES_LOCATION_INTERFACES_LOCATION_SERVICE_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/location/interfaces/location_service.mojom-internal.h"
#include "mojo/services/location/interfaces/location.mojom-common.h"
namespace mojo {

// --- Interface Forward Declarations ---
class LocationService;
class LocationServiceRequestValidator;
class LocationServiceResponseValidator;
class LocationService_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class LocationService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = LocationServiceRequestValidator;
  using ResponseValidator_ = LocationServiceResponseValidator;
  using Synchronous_ = LocationService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetNextLocation = 0,
  };

  
  enum class UpdatePriority : int32_t {
    PRIORITY_BALANCED_POWER_ACCURACY,
    PRIORITY_HIGH_ACCURACY,
    PRIORITY_LOW_POWER,
    PRIORITY_NO_POWER,
  };
  
  static bool UpdatePriority_IsValidValue(UpdatePriority value);

  virtual ~LocationService_Base() {}
};

}  // namespace internal

// Async interface declaration

class LocationServiceProxy;
class LocationServiceStub;
class LocationService_Synchronous;

class LocationServiceRequestValidator;
class LocationServiceResponseValidator;

class LocationService : public internal::LocationService_Base {
 public:
  virtual ~LocationService() override {}

  using Proxy_ = LocationServiceProxy;
  using Stub_ = LocationServiceStub;
  using GetNextLocationCallback = mojo::Callback<void(mojo::LocationPtr)>;
  virtual void GetNextLocation(LocationService::UpdatePriority priority, const GetNextLocationCallback& callback) = 0;
};

}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---
class LocationServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class LocationServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---
  
std::ostream& operator<<(std::ostream& stream,
                         const internal::LocationService_Base::UpdatePriority& val);

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class LocationService_GetNextLocation_Params;

using LocationService_GetNextLocation_ParamsPtr = mojo::InlinedStructPtr<LocationService_GetNextLocation_Params>;


size_t GetSerializedSize_(const LocationService_GetNextLocation_Params& input);
mojo::internal::ValidationError Serialize_(
    LocationService_GetNextLocation_Params* input,
    mojo::internal::Buffer* buffer,
    internal::LocationService_GetNextLocation_Params_Data** output);
void Deserialize_(internal::LocationService_GetNextLocation_Params_Data* input,
                  LocationService_GetNextLocation_Params* output);

class LocationService_GetNextLocation_Params {
 public:
  using Data_ = internal::LocationService_GetNextLocation_Params_Data;

  static LocationService_GetNextLocation_ParamsPtr New();

  template <typename U>
  static LocationService_GetNextLocation_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<LocationService_GetNextLocation_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, LocationService_GetNextLocation_Params>::Convert(*this);
  }

  LocationService_GetNextLocation_Params();
  ~LocationService_GetNextLocation_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  LocationService_GetNextLocation_ParamsPtr Clone() const;
  bool Equals(const LocationService_GetNextLocation_Params& other) const;

  LocationService::UpdatePriority priority;
};



class LocationService_GetNextLocation_ResponseParams;

using LocationService_GetNextLocation_ResponseParamsPtr = mojo::StructPtr<LocationService_GetNextLocation_ResponseParams>;


size_t GetSerializedSize_(const LocationService_GetNextLocation_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    LocationService_GetNextLocation_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::LocationService_GetNextLocation_ResponseParams_Data** output);
void Deserialize_(internal::LocationService_GetNextLocation_ResponseParams_Data* input,
                  LocationService_GetNextLocation_ResponseParams* output);

class LocationService_GetNextLocation_ResponseParams {
 public:
  using Data_ = internal::LocationService_GetNextLocation_ResponseParams_Data;

  static LocationService_GetNextLocation_ResponseParamsPtr New();

  template <typename U>
  static LocationService_GetNextLocation_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<LocationService_GetNextLocation_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, LocationService_GetNextLocation_ResponseParams>::Convert(*this);
  }

  LocationService_GetNextLocation_ResponseParams();
  ~LocationService_GetNextLocation_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  LocationService_GetNextLocation_ResponseParamsPtr Clone() const;
  bool Equals(const LocationService_GetNextLocation_ResponseParams& other) const;

  mojo::LocationPtr location;
};


}  // namespace mojo

#endif  // MOJO_SERVICES_LOCATION_INTERFACES_LOCATION_SERVICE_MOJOM_COMMON_H_
