// NOTE: This file was generated by the Mojo bindings generator.
#ifndef EXAMPLES_SERIALIZATION_SERIALIZATION_MOJOM_INTERNAL_H_
#define EXAMPLES_SERIALIZATION_SERIALIZATION_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace examples {

class MyStruct;


namespace internal {

class MyStruct_Data;



#pragma pack(push, 1)


class MyStruct_Data {
 public:
  static MyStruct_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t a;
  float b;
  mojo::internal::StringPointer c;

 private:
  MyStruct_Data();
  ~MyStruct_Data() = delete;
};
static_assert(sizeof(MyStruct_Data) == 24,
              "Bad sizeof(MyStruct_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace examples

#endif  // EXAMPLES_SERIALIZATION_SERIALIZATION_MOJOM_INTERNAL_H_
