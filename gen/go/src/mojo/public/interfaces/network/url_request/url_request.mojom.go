// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/network/url_request.mojom
//

package url_request

import (
	sort "sort"
	fmt "fmt"
	bindings "mojo/public/go/bindings"
	http_header "mojo/public/interfaces/network/http_header"
	system "mojo/public/go/system"
)


type UrlRequest_CacheMode int32

const (
	UrlRequest_CacheMode_Default UrlRequest_CacheMode = 0
	UrlRequest_CacheMode_BypassCache = UrlRequest_CacheMode_Default + 1;
	UrlRequest_CacheMode_OnlyFromCache = UrlRequest_CacheMode_BypassCache + 1;
)


type UrlRequest struct {
	Url string
	Method string
	Headers *[]http_header.HttpHeader
	Body *[]system.ConsumerHandle
	ResponseBodyBufferSize uint32
	AutoFollowRedirects bool
	CacheMode UrlRequest_CacheMode
}


func (s *UrlRequest) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(48, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.Url); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.Method); err != nil {
		return err
	}
	if s.Headers == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.Headers))), 64)
		for _, elem0 := range (*s.Headers) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			if err := elem0.Encode(encoder); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if s.Body == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.Body))), 32)
		for _, elem0 := range (*s.Body) {
			if err := encoder.WriteHandle(elem0); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.WriteUint32(s.ResponseBodyBufferSize); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.AutoFollowRedirects); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.CacheMode)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var uRLRequest_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{56, 0},
}

func (s *UrlRequest) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(uRLRequest_Versions), func(i int) bool {
		return uRLRequest_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(uRLRequest_Versions) {
		if uRLRequest_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := uRLRequest_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.Url = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.Method = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Headers = nil
		} else {
			s.Headers = new([]http_header.HttpHeader)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.Headers) = make([]http_header.HttpHeader, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := (*s.Headers)[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.Body = nil
		} else {
			s.Body = new([]system.ConsumerHandle)
			len0, err := decoder.StartArray(32)
			if err != nil {
				return err
			}
			(*s.Body) = make([]system.ConsumerHandle, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				handle1, err := decoder.ReadConsumerHandle()
				if err != nil {
					return err
				}
				if handle1.IsValid() {
					(*s.Body)[i0] = handle1
				} else {
					return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.ResponseBodyBufferSize = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.AutoFollowRedirects = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.CacheMode = UrlRequest_CacheMode(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

