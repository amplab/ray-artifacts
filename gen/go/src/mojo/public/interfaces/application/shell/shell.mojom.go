// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/application/shell.mojom
//

package shell

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	service_provider "mojo/public/interfaces/application/service_provider"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	application_connector "mojo/public/interfaces/application/application_connector"
)


type Shell interface {
	ConnectToApplication(inApplicationUrl string, inServices service_provider.ServiceProvider_Request) (err error)
	CreateApplicationConnector(inApplicationConnectorRequest application_connector.ApplicationConnector_Request) (err error)
}




type Shell_Request bindings.InterfaceRequest



type Shell_Pointer bindings.InterfacePointer


type Shell_ServiceFactory struct{
	Delegate Shell_Factory
}

type Shell_Factory interface {
	Create(request Shell_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *Shell_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &Shell_ServiceDescription{}
}

func (f *Shell_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := Shell_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForShell creates a message pipe for use with the
// Shell interface with a Shell_Request on one end and a Shell_Pointer on the other.
func CreateMessagePipeForShell() (Shell_Request, Shell_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return Shell_Request(r), Shell_Pointer(p)
}

const shell_ConnectToApplication_Name uint32 = 0
const shell_CreateApplicationConnector_Name uint32 = 1

type Shell_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewShellProxy(p Shell_Pointer, waiter bindings.AsyncWaiter) *Shell_Proxy {
	return &Shell_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *Shell_Proxy) Close_Proxy() {
	p.router.Close()
}

type shell_ConnectToApplication_Params struct {
	inApplicationUrl string
	inServices service_provider.ServiceProvider_Request
}


func (s *shell_ConnectToApplication_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inApplicationUrl); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inServices.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var shell_ConnectToApplication_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *shell_ConnectToApplication_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(shell_ConnectToApplication_Params_Versions), func(i int) bool {
		return shell_ConnectToApplication_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(shell_ConnectToApplication_Params_Versions) {
		if shell_ConnectToApplication_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := shell_ConnectToApplication_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inApplicationUrl = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inServices = service_provider.ServiceProvider_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Shell_Proxy) ConnectToApplication(inApplicationUrl string, inServices service_provider.ServiceProvider_Request) (err error) {
	payload := &shell_ConnectToApplication_Params{
		inApplicationUrl,
		inServices,
	}
	header := bindings.MessageHeader{
		Type: shell_ConnectToApplication_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type shell_CreateApplicationConnector_Params struct {
	inApplicationConnectorRequest application_connector.ApplicationConnector_Request
}


func (s *shell_CreateApplicationConnector_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inApplicationConnectorRequest.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var shell_CreateApplicationConnector_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *shell_CreateApplicationConnector_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(shell_CreateApplicationConnector_Params_Versions), func(i int) bool {
		return shell_CreateApplicationConnector_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(shell_CreateApplicationConnector_Params_Versions) {
		if shell_CreateApplicationConnector_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := shell_CreateApplicationConnector_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inApplicationConnectorRequest = application_connector.ApplicationConnector_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *Shell_Proxy) CreateApplicationConnector(inApplicationConnectorRequest application_connector.ApplicationConnector_Request) (err error) {
	payload := &shell_CreateApplicationConnector_Params{
		inApplicationConnectorRequest,
	}
	header := bindings.MessageHeader{
		Type: shell_CreateApplicationConnector_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type shell_Stub struct {
	connector *bindings.Connector
	impl Shell
}

func NewShellStub(r Shell_Request, impl Shell, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &shell_Stub{connector, impl})
}


func (f *Shell_Request) ServiceDescription() service_describer.ServiceDescription {
	return &Shell_ServiceDescription{}
}


type Shell_ServiceDescription struct{}

func (sd *Shell_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *Shell_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *Shell_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*Shell_ServiceDescription)(nil)


func (s *shell_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case shell_ConnectToApplication_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request shell_ConnectToApplication_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.ConnectToApplication(request.inApplicationUrl, request.inServices)
		if err != nil {
			return
		}
	case shell_CreateApplicationConnector_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request shell_CreateApplicationConnector_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateApplicationConnector(request.inApplicationConnectorRequest)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

