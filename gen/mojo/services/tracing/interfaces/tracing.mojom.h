// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_H_
#define MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/tracing/interfaces/tracing.mojom-common.h"
namespace tracing {

// --- Interface Forward Declarations ---

using TraceProviderPtr = mojo::InterfacePtr<TraceProvider>;

using TraceRecorderPtr = mojo::InterfacePtr<TraceRecorder>;

using TraceCollectorPtr = mojo::InterfacePtr<TraceCollector>;


// --- Interface Proxies ---


class TraceProviderProxy
    : public TraceProvider,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TraceProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  void StartTracing(
      const mojo::String& categories, mojo::InterfaceHandle<TraceRecorder> recorder
  ) override;
  void StopTracing(
      
  ) override;
};


class TraceRecorderProxy
    : public TraceRecorder,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TraceRecorderProxy(mojo::MessageReceiverWithResponder* receiver);
  void Record(
      const mojo::String& json
  ) override;
};


class TraceCollectorProxy
    : public TraceCollector,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit TraceCollectorProxy(mojo::MessageReceiverWithResponder* receiver);
  void Start(
      mojo::ScopedDataPipeProducerHandle stream, const mojo::String& categories
  ) override;
  void StopAndFlush(
      
  ) override;
};


// --- Interface Stubs ---

class TraceProviderStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TraceProviderStub();
  ~TraceProviderStub() override;
  void set_sink(TraceProvider* sink) { sink_ = sink; }
  TraceProvider* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TraceProvider* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class TraceRecorderStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TraceRecorderStub();
  ~TraceRecorderStub() override;
  void set_sink(TraceRecorder* sink) { sink_ = sink; }
  TraceRecorder* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TraceRecorder* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class TraceCollectorStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  TraceCollectorStub();
  ~TraceCollectorStub() override;
  void set_sink(TraceCollector* sink) { sink_ = sink; }
  TraceCollector* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  TraceCollector* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace tracing

#endif  // MOJO_SERVICES_TRACING_INTERFACES_TRACING_MOJOM_H_
