// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/navigation/interfaces/navigation.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---

NavigatorHostProxy::NavigatorHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void NavigatorHostProxy::RequestNavigate(
    Target in_target, mojo::URLRequestPtr in_request) {
  size_t size = sizeof(internal::NavigatorHost_RequestNavigate_Params_Data);
  size += in_request.is_null()
              ? 0
              : GetSerializedSize_(*in_request);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NavigatorHost_Base::MessageOrdinals::RequestNavigate), size);

  internal::NavigatorHost_RequestNavigate_Params_Data* params =
      internal::NavigatorHost_RequestNavigate_Params_Data::New(builder.buffer());
  params->target =
    static_cast<int32_t>(in_target);
  {Serialize_(in_request.get(),
               builder.buffer(),
               &params->request.ptr);
  }
  if (!params->request.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null request in NavigatorHost.RequestNavigate request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NavigatorHostProxy::RequestNavigateHistory(
    int32_t in_delta) {
  size_t size = sizeof(internal::NavigatorHost_RequestNavigateHistory_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NavigatorHost_Base::MessageOrdinals::RequestNavigateHistory), size);

  internal::NavigatorHost_RequestNavigateHistory_Params_Data* params =
      internal::NavigatorHost_RequestNavigateHistory_Params_Data::New(builder.buffer());
  params->delta = in_delta;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void NavigatorHostProxy::DidNavigateLocally(
    const mojo::String& in_url) {
  size_t size = sizeof(internal::NavigatorHost_DidNavigateLocally_Params_Data);
  size += GetSerializedSize_(in_url);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::NavigatorHost_Base::MessageOrdinals::DidNavigateLocally), size);

  internal::NavigatorHost_DidNavigateLocally_Params_Data* params =
      internal::NavigatorHost_DidNavigateLocally_Params_Data::New(builder.buffer());
  SerializeString_(in_url, builder.buffer(), &params->url.ptr);
  if (!params->url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in NavigatorHost.DidNavigateLocally request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

NavigatorHostStub::NavigatorHostStub()
    : sink_(nullptr),
      control_message_handler_(NavigatorHost::Version_) {
}

NavigatorHostStub::~NavigatorHostStub() {}

bool NavigatorHostStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::NavigatorHost_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NavigatorHost_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NavigatorHost_Base::MessageOrdinals::RequestNavigate: {
      internal::NavigatorHost_RequestNavigate_Params_Data* params =
          reinterpret_cast<internal::NavigatorHost_RequestNavigate_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      Target p_target {};
      mojo::URLRequestPtr p_request {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_target = static_cast<Target>(params->target);
        if (params->request.ptr) {
          p_request = mojo::URLRequest::New();
          Deserialize_(params->request.ptr, p_request.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->RequestNavigate(p_target, p_request.Pass());
      return true;
    }
    case internal::NavigatorHost_Base::MessageOrdinals::RequestNavigateHistory: {
      internal::NavigatorHost_RequestNavigateHistory_Params_Data* params =
          reinterpret_cast<internal::NavigatorHost_RequestNavigateHistory_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_delta {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_delta = params->delta;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->RequestNavigateHistory(p_delta);
      return true;
    }
    case internal::NavigatorHost_Base::MessageOrdinals::DidNavigateLocally: {
      internal::NavigatorHost_DidNavigateLocally_Params_Data* params =
          reinterpret_cast<internal::NavigatorHost_DidNavigateLocally_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_url {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->url.ptr, &p_url);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->DidNavigateLocally(p_url);
      return true;
    }
  }
  return false;
}

bool NavigatorHostStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::NavigatorHost_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NavigatorHost_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NavigatorHost_Base::MessageOrdinals::RequestNavigate: {
      break;
    }
    case internal::NavigatorHost_Base::MessageOrdinals::RequestNavigateHistory: {
      break;
    }
    case internal::NavigatorHost_Base::MessageOrdinals::DidNavigateLocally: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
