// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
URLLoaderInterceptorResponse_Data* URLLoaderInterceptorResponse_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptorResponse_Data))) URLLoaderInterceptorResponse_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptorResponse_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptorResponse_Data* object = static_cast<const URLLoaderInterceptorResponse_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->request.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::URLRequest::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->request.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->response.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::URLResponse::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->response.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptorResponse_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->request, handles);
  mojo::internal::Encode(&this->response, handles);
}

void URLLoaderInterceptorResponse_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->request, handles);
  mojo::internal::Decode(&this->response, handles);
}

URLLoaderInterceptorResponse_Data::URLLoaderInterceptorResponse_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
URLLoaderInterceptorFactory_Create_Params_Data* URLLoaderInterceptorFactory_Create_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptorFactory_Create_Params_Data))) URLLoaderInterceptorFactory_Create_Params_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptorFactory_Create_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptorFactory_Create_Params_Data* object = static_cast<const URLLoaderInterceptorFactory_Create_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle interceptor_handle = object->interceptor;
  if (interceptor_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid interceptor field in URLLoaderInterceptorFactory_Create_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(interceptor_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptorFactory_Create_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->interceptor, handles);
}

void URLLoaderInterceptorFactory_Create_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->interceptor, handles);
}

URLLoaderInterceptorFactory_Create_Params_Data::URLLoaderInterceptorFactory_Create_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
URLLoaderInterceptor_InterceptRequest_Params_Data* URLLoaderInterceptor_InterceptRequest_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptor_InterceptRequest_Params_Data))) URLLoaderInterceptor_InterceptRequest_Params_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptor_InterceptRequest_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptor_InterceptRequest_Params_Data* object = static_cast<const URLLoaderInterceptor_InterceptRequest_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->request.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null request field in URLLoaderInterceptor_InterceptRequest_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->request.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::URLRequest::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->request.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptor_InterceptRequest_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->request, handles);
}

void URLLoaderInterceptor_InterceptRequest_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->request, handles);
}

URLLoaderInterceptor_InterceptRequest_Params_Data::URLLoaderInterceptor_InterceptRequest_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
URLLoaderInterceptor_InterceptRequest_ResponseParams_Data* URLLoaderInterceptor_InterceptRequest_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptor_InterceptRequest_ResponseParams_Data))) URLLoaderInterceptor_InterceptRequest_ResponseParams_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptor_InterceptRequest_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptor_InterceptRequest_ResponseParams_Data* object = static_cast<const URLLoaderInterceptor_InterceptRequest_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->response.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null response field in URLLoaderInterceptor_InterceptRequest_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->response.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = URLLoaderInterceptorResponse::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->response.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptor_InterceptRequest_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->response, handles);
}

void URLLoaderInterceptor_InterceptRequest_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->response, handles);
}

URLLoaderInterceptor_InterceptRequest_ResponseParams_Data::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
URLLoaderInterceptor_InterceptFollowRedirect_Params_Data* URLLoaderInterceptor_InterceptFollowRedirect_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptor_InterceptFollowRedirect_Params_Data))) URLLoaderInterceptor_InterceptFollowRedirect_Params_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptor_InterceptFollowRedirect_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptor_InterceptFollowRedirect_Params_Data* object = static_cast<const URLLoaderInterceptor_InterceptFollowRedirect_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptor_InterceptFollowRedirect_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void URLLoaderInterceptor_InterceptFollowRedirect_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

URLLoaderInterceptor_InterceptFollowRedirect_Params_Data::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data* URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data))) URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data* object = static_cast<const URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->response.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = URLLoaderInterceptorResponse::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->response.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->response, handles);
}

void URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->response, handles);
}

URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
URLLoaderInterceptor_InterceptResponse_Params_Data* URLLoaderInterceptor_InterceptResponse_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptor_InterceptResponse_Params_Data))) URLLoaderInterceptor_InterceptResponse_Params_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptor_InterceptResponse_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptor_InterceptResponse_Params_Data* object = static_cast<const URLLoaderInterceptor_InterceptResponse_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->response.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null response field in URLLoaderInterceptor_InterceptResponse_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->response.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::URLResponse::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->response.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptor_InterceptResponse_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->response, handles);
}

void URLLoaderInterceptor_InterceptResponse_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->response, handles);
}

URLLoaderInterceptor_InterceptResponse_Params_Data::URLLoaderInterceptor_InterceptResponse_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
URLLoaderInterceptor_InterceptResponse_ResponseParams_Data* URLLoaderInterceptor_InterceptResponse_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(URLLoaderInterceptor_InterceptResponse_ResponseParams_Data))) URLLoaderInterceptor_InterceptResponse_ResponseParams_Data();
}

// static
mojo::internal::ValidationError URLLoaderInterceptor_InterceptResponse_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const URLLoaderInterceptor_InterceptResponse_ResponseParams_Data* object = static_cast<const URLLoaderInterceptor_InterceptResponse_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->response.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = URLLoaderInterceptorResponse::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->response.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void URLLoaderInterceptor_InterceptResponse_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->response, handles);
}

void URLLoaderInterceptor_InterceptResponse_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->response, handles);
}

URLLoaderInterceptor_InterceptResponse_ResponseParams_Data::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError URLLoaderInterceptorFactoryRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'URLLoaderInterceptorFactory', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::URLLoaderInterceptorFactory_Base::MessageOrdinals method_ordinal =
      static_cast<internal::URLLoaderInterceptorFactory_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::URLLoaderInterceptorFactory_Base::MessageOrdinals::Create: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'URLLoaderInterceptorFactory', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::URLLoaderInterceptorFactory_Create_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'URLLoaderInterceptorFactory', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'URLLoaderInterceptorFactory'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError URLLoaderInterceptorRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'URLLoaderInterceptor', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::URLLoaderInterceptor_Base::MessageOrdinals method_ordinal =
      static_cast<internal::URLLoaderInterceptor_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::URLLoaderInterceptor_Base::MessageOrdinals::InterceptRequest: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'URLLoaderInterceptor', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::URLLoaderInterceptor_InterceptRequest_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'URLLoaderInterceptor', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::URLLoaderInterceptor_Base::MessageOrdinals::InterceptFollowRedirect: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'URLLoaderInterceptor', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'URLLoaderInterceptor', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::URLLoaderInterceptor_Base::MessageOrdinals::InterceptResponse: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'URLLoaderInterceptor', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::URLLoaderInterceptor_InterceptResponse_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'URLLoaderInterceptor', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'URLLoaderInterceptor'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError URLLoaderInterceptorResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'URLLoaderInterceptor', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'URLLoaderInterceptor', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::URLLoaderInterceptor_Base::MessageOrdinals method_ordinal =
      static_cast<internal::URLLoaderInterceptor_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::URLLoaderInterceptor_Base::MessageOrdinals::InterceptRequest: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'URLLoaderInterceptor',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::URLLoaderInterceptor_Base::MessageOrdinals::InterceptFollowRedirect: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'URLLoaderInterceptor',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::URLLoaderInterceptor_Base::MessageOrdinals::InterceptResponse: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'URLLoaderInterceptor',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'URLLoaderInterceptor'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::URLLoaderInterceptorFactory_Base::Version_;

// Constants

// Enums
const uint32_t internal::URLLoaderInterceptor_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
URLLoaderInterceptorResponsePtr URLLoaderInterceptorResponse::New() {
  URLLoaderInterceptorResponsePtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptorResponse>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptorResponse::URLLoaderInterceptorResponse()
    : request(),
      response() {
}

URLLoaderInterceptorResponse::~URLLoaderInterceptorResponse() {
}



bool URLLoaderInterceptorResponse::Equals(const URLLoaderInterceptorResponse& other) const {
  if (!mojo::internal::ValueTraits<mojo::URLRequestPtr>::Equals(this->request, other.request))
    return false;
  if (!mojo::internal::ValueTraits<mojo::URLResponsePtr>::Equals(this->response, other.response))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t URLLoaderInterceptorResponse::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptorResponse::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptorResponse_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptorResponse::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptorResponse_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptorResponse::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptorResponse_Data* input =
      static_cast<internal::URLLoaderInterceptorResponse_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptorResponse& input) {
  size_t size = sizeof(internal::URLLoaderInterceptorResponse_Data);
  size += input.request.is_null()
              ? 0
              : GetSerializedSize_(*input.request);
  size += input.response.is_null()
              ? 0
              : GetSerializedSize_(*input.response);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptorResponse* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptorResponse_Data** output) {
  if (input) {
    internal::URLLoaderInterceptorResponse_Data* result =
        internal::URLLoaderInterceptorResponse_Data::New(buf);
    {auto retval =Serialize_(input->request.get(),
                 buf,
                 &result->request.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    {auto retval =Serialize_(input->response.get(),
                 buf,
                 &result->response.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptorResponse_Data* input,
                  URLLoaderInterceptorResponse* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->request.ptr) {
        result->request = mojo::URLRequest::New();
        Deserialize_(input->request.ptr, result->request.get());
      }
      if (input->response.ptr) {
        result->response = mojo::URLResponse::New();
        Deserialize_(input->response.ptr, result->response.get());
      }
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
URLLoaderInterceptorFactory_Create_ParamsPtr URLLoaderInterceptorFactory_Create_Params::New() {
  URLLoaderInterceptorFactory_Create_ParamsPtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptorFactory_Create_Params>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptorFactory_Create_Params::URLLoaderInterceptorFactory_Create_Params()
    : interceptor() {
}

URLLoaderInterceptorFactory_Create_Params::~URLLoaderInterceptorFactory_Create_Params() {
}



bool URLLoaderInterceptorFactory_Create_Params::Equals(const URLLoaderInterceptorFactory_Create_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<URLLoaderInterceptor>>::Equals(this->interceptor, other.interceptor))
    return false;
  return true;
}


size_t URLLoaderInterceptorFactory_Create_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptorFactory_Create_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptorFactory_Create_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptorFactory_Create_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptorFactory_Create_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptorFactory_Create_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptorFactory_Create_Params_Data* input =
      static_cast<internal::URLLoaderInterceptorFactory_Create_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptorFactory_Create_Params& input) {
  size_t size = sizeof(internal::URLLoaderInterceptorFactory_Create_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptorFactory_Create_Params* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptorFactory_Create_Params_Data** output) {
  if (input) {
    internal::URLLoaderInterceptorFactory_Create_Params_Data* result =
        internal::URLLoaderInterceptorFactory_Create_Params_Data::New(buf);
    result->interceptor = input->interceptor.PassMessagePipe().release();
    if (!result->interceptor.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid interceptor in URLLoaderInterceptorFactory_Create_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptorFactory_Create_Params_Data* input,
                  URLLoaderInterceptorFactory_Create_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->interceptor.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->interceptor)));
    } while (false);
  }
}



// static
URLLoaderInterceptor_InterceptRequest_ParamsPtr URLLoaderInterceptor_InterceptRequest_Params::New() {
  URLLoaderInterceptor_InterceptRequest_ParamsPtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptor_InterceptRequest_Params>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptor_InterceptRequest_Params::URLLoaderInterceptor_InterceptRequest_Params()
    : request() {
}

URLLoaderInterceptor_InterceptRequest_Params::~URLLoaderInterceptor_InterceptRequest_Params() {
}



bool URLLoaderInterceptor_InterceptRequest_Params::Equals(const URLLoaderInterceptor_InterceptRequest_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::URLRequestPtr>::Equals(this->request, other.request))
    return false;
  return true;
}


size_t URLLoaderInterceptor_InterceptRequest_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptor_InterceptRequest_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptor_InterceptRequest_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptor_InterceptRequest_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptor_InterceptRequest_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptor_InterceptRequest_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptor_InterceptRequest_Params_Data* input =
      static_cast<internal::URLLoaderInterceptor_InterceptRequest_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptRequest_Params& input) {
  size_t size = sizeof(internal::URLLoaderInterceptor_InterceptRequest_Params_Data);
  size += input.request.is_null()
              ? 0
              : GetSerializedSize_(*input.request);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptRequest_Params* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptor_InterceptRequest_Params_Data** output) {
  if (input) {
    internal::URLLoaderInterceptor_InterceptRequest_Params_Data* result =
        internal::URLLoaderInterceptor_InterceptRequest_Params_Data::New(buf);
    {auto retval =Serialize_(input->request.get(),
                 buf,
                 &result->request.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->request.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null request in URLLoaderInterceptor_InterceptRequest_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptor_InterceptRequest_Params_Data* input,
                  URLLoaderInterceptor_InterceptRequest_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->request.ptr) {
        result->request = mojo::URLRequest::New();
        Deserialize_(input->request.ptr, result->request.get());
      }
    } while (false);
  }
}


// static
URLLoaderInterceptor_InterceptRequest_ResponseParamsPtr URLLoaderInterceptor_InterceptRequest_ResponseParams::New() {
  URLLoaderInterceptor_InterceptRequest_ResponseParamsPtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptor_InterceptRequest_ResponseParams>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptor_InterceptRequest_ResponseParams::URLLoaderInterceptor_InterceptRequest_ResponseParams()
    : response() {
}

URLLoaderInterceptor_InterceptRequest_ResponseParams::~URLLoaderInterceptor_InterceptRequest_ResponseParams() {
}



bool URLLoaderInterceptor_InterceptRequest_ResponseParams::Equals(const URLLoaderInterceptor_InterceptRequest_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<URLLoaderInterceptorResponsePtr>::Equals(this->response, other.response))
    return false;
  return true;
}


size_t URLLoaderInterceptor_InterceptRequest_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptor_InterceptRequest_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptor_InterceptRequest_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptor_InterceptRequest_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data* input =
      static_cast<internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptRequest_ResponseParams& input) {
  size_t size = sizeof(internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data);
  size += input.response.is_null()
              ? 0
              : GetSerializedSize_(*input.response);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptRequest_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data** output) {
  if (input) {
    internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data* result =
        internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->response.get(),
                 buf,
                 &result->response.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->response.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in URLLoaderInterceptor_InterceptRequest_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptor_InterceptRequest_ResponseParams_Data* input,
                  URLLoaderInterceptor_InterceptRequest_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->response.ptr) {
        result->response = URLLoaderInterceptorResponse::New();
        Deserialize_(input->response.ptr, result->response.get());
      }
    } while (false);
  }
}



// static
URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr URLLoaderInterceptor_InterceptFollowRedirect_Params::New() {
  URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptor_InterceptFollowRedirect_Params>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptor_InterceptFollowRedirect_Params::URLLoaderInterceptor_InterceptFollowRedirect_Params() {
}

URLLoaderInterceptor_InterceptFollowRedirect_Params::~URLLoaderInterceptor_InterceptFollowRedirect_Params() {
}


URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr URLLoaderInterceptor_InterceptFollowRedirect_Params::Clone() const {
  URLLoaderInterceptor_InterceptFollowRedirect_ParamsPtr rv(New());
  return rv;
}


bool URLLoaderInterceptor_InterceptFollowRedirect_Params::Equals(const URLLoaderInterceptor_InterceptFollowRedirect_Params& other) const {
  return true;
}


size_t URLLoaderInterceptor_InterceptFollowRedirect_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptor_InterceptFollowRedirect_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptor_InterceptFollowRedirect_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptor_InterceptFollowRedirect_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data* input =
      static_cast<internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptFollowRedirect_Params& input) {
  size_t size = sizeof(internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptFollowRedirect_Params* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data** output) {
  if (input) {
    internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data* result =
        internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptor_InterceptFollowRedirect_Params_Data* input,
                  URLLoaderInterceptor_InterceptFollowRedirect_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
URLLoaderInterceptor_InterceptFollowRedirect_ResponseParamsPtr URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::New() {
  URLLoaderInterceptor_InterceptFollowRedirect_ResponseParamsPtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams()
    : response() {
}

URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::~URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams() {
}



bool URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::Equals(const URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<URLLoaderInterceptorResponsePtr>::Equals(this->response, other.response))
    return false;
  return true;
}


size_t URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data* input =
      static_cast<internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams& input) {
  size_t size = sizeof(internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data);
  size += input.response.is_null()
              ? 0
              : GetSerializedSize_(*input.response);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data** output) {
  if (input) {
    internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data* result =
        internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->response.get(),
                 buf,
                 &result->response.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams_Data* input,
                  URLLoaderInterceptor_InterceptFollowRedirect_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->response.ptr) {
        result->response = URLLoaderInterceptorResponse::New();
        Deserialize_(input->response.ptr, result->response.get());
      }
    } while (false);
  }
}



// static
URLLoaderInterceptor_InterceptResponse_ParamsPtr URLLoaderInterceptor_InterceptResponse_Params::New() {
  URLLoaderInterceptor_InterceptResponse_ParamsPtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptor_InterceptResponse_Params>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptor_InterceptResponse_Params::URLLoaderInterceptor_InterceptResponse_Params()
    : response() {
}

URLLoaderInterceptor_InterceptResponse_Params::~URLLoaderInterceptor_InterceptResponse_Params() {
}



bool URLLoaderInterceptor_InterceptResponse_Params::Equals(const URLLoaderInterceptor_InterceptResponse_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::URLResponsePtr>::Equals(this->response, other.response))
    return false;
  return true;
}


size_t URLLoaderInterceptor_InterceptResponse_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptor_InterceptResponse_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptor_InterceptResponse_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptor_InterceptResponse_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptor_InterceptResponse_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptor_InterceptResponse_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptor_InterceptResponse_Params_Data* input =
      static_cast<internal::URLLoaderInterceptor_InterceptResponse_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptResponse_Params& input) {
  size_t size = sizeof(internal::URLLoaderInterceptor_InterceptResponse_Params_Data);
  size += input.response.is_null()
              ? 0
              : GetSerializedSize_(*input.response);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptResponse_Params* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptor_InterceptResponse_Params_Data** output) {
  if (input) {
    internal::URLLoaderInterceptor_InterceptResponse_Params_Data* result =
        internal::URLLoaderInterceptor_InterceptResponse_Params_Data::New(buf);
    {auto retval =Serialize_(input->response.get(),
                 buf,
                 &result->response.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->response.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null response in URLLoaderInterceptor_InterceptResponse_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptor_InterceptResponse_Params_Data* input,
                  URLLoaderInterceptor_InterceptResponse_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->response.ptr) {
        result->response = mojo::URLResponse::New();
        Deserialize_(input->response.ptr, result->response.get());
      }
    } while (false);
  }
}


// static
URLLoaderInterceptor_InterceptResponse_ResponseParamsPtr URLLoaderInterceptor_InterceptResponse_ResponseParams::New() {
  URLLoaderInterceptor_InterceptResponse_ResponseParamsPtr rv;
  mojo::internal::StructHelper<URLLoaderInterceptor_InterceptResponse_ResponseParams>::Initialize(&rv);
  return rv;
}

URLLoaderInterceptor_InterceptResponse_ResponseParams::URLLoaderInterceptor_InterceptResponse_ResponseParams()
    : response() {
}

URLLoaderInterceptor_InterceptResponse_ResponseParams::~URLLoaderInterceptor_InterceptResponse_ResponseParams() {
}



bool URLLoaderInterceptor_InterceptResponse_ResponseParams::Equals(const URLLoaderInterceptor_InterceptResponse_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<URLLoaderInterceptorResponsePtr>::Equals(this->response, other.response))
    return false;
  return true;
}


size_t URLLoaderInterceptor_InterceptResponse_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool URLLoaderInterceptor_InterceptResponse_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool URLLoaderInterceptor_InterceptResponse_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void URLLoaderInterceptor_InterceptResponse_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data* input =
      static_cast<internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const URLLoaderInterceptor_InterceptResponse_ResponseParams& input) {
  size_t size = sizeof(internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data);
  size += input.response.is_null()
              ? 0
              : GetSerializedSize_(*input.response);
  return size;
}

mojo::internal::ValidationError Serialize_(
    URLLoaderInterceptor_InterceptResponse_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data** output) {
  if (input) {
    internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data* result =
        internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->response.get(),
                 buf,
                 &result->response.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::URLLoaderInterceptor_InterceptResponse_ResponseParams_Data* input,
                  URLLoaderInterceptor_InterceptResponse_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->response.ptr) {
        result->response = URLLoaderInterceptorResponse::New();
        Deserialize_(input->response.ptr, result->response.get());
      }
    } while (false);
  }
}

}  // namespace mojo
