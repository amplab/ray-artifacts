// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/bindings/service_describer.mojom
//

package service_describer

import (
	sort "sort"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	fmt "fmt"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type ServiceDescriber interface {
	DescribeService(inInterfaceName string, inDescriptionRequest ServiceDescription_Request) (err error)
}



var serviceDescriber_Name = "mojo::bindings::types::ServiceDescriber"

type ServiceDescriber_Request bindings.InterfaceRequest

func (r *ServiceDescriber_Request) Name() string {
	return serviceDescriber_Name
}


type ServiceDescriber_Pointer bindings.InterfacePointer

func (p *ServiceDescriber_Pointer) Name() string {
	return serviceDescriber_Name
}

type ServiceDescriber_ServiceFactory struct{
	Delegate ServiceDescriber_Factory
}

type ServiceDescriber_Factory interface {
	Create(request ServiceDescriber_Request)
}

func (f *ServiceDescriber_ServiceFactory) Name() string {
	return serviceDescriber_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *ServiceDescriber_ServiceFactory) ServiceDescription() ServiceDescription {
	return &ServiceDescriber_ServiceDescription{}
}

func (f *ServiceDescriber_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := ServiceDescriber_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForServiceDescriber creates a message pipe for use with the
// ServiceDescriber interface with a ServiceDescriber_Request on one end and a ServiceDescriber_Pointer on the other.
func CreateMessagePipeForServiceDescriber() (ServiceDescriber_Request, ServiceDescriber_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return ServiceDescriber_Request(r), ServiceDescriber_Pointer(p)
}

const serviceDescriber_DescribeService_Name uint32 = 0

type ServiceDescriber_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewServiceDescriberProxy(p ServiceDescriber_Pointer, waiter bindings.AsyncWaiter) *ServiceDescriber_Proxy {
	return &ServiceDescriber_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *ServiceDescriber_Proxy) Close_Proxy() {
	p.router.Close()
}

type serviceDescriber_DescribeService_Params struct {
	inInterfaceName string
	inDescriptionRequest ServiceDescription_Request
}


func (s *serviceDescriber_DescribeService_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inInterfaceName); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inDescriptionRequest.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceDescriber_DescribeService_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *serviceDescriber_DescribeService_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceDescriber_DescribeService_Params_Versions), func(i int) bool {
		return serviceDescriber_DescribeService_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceDescriber_DescribeService_Params_Versions) {
		if serviceDescriber_DescribeService_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceDescriber_DescribeService_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inInterfaceName = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inDescriptionRequest = ServiceDescription_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDescriber_Proxy) DescribeService(inInterfaceName string, inDescriptionRequest ServiceDescription_Request) (err error) {
	payload := &serviceDescriber_DescribeService_Params{
		inInterfaceName,
		inDescriptionRequest,
	}
	header := bindings.MessageHeader{
		Type: serviceDescriber_DescribeService_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type serviceDescriber_Stub struct {
	connector *bindings.Connector
	impl ServiceDescriber
}

func NewServiceDescriberStub(r ServiceDescriber_Request, impl ServiceDescriber, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &serviceDescriber_Stub{connector, impl})
}


func (f *ServiceDescriber_Request) ServiceDescription() ServiceDescription {
	return &ServiceDescriber_ServiceDescription{}
}


type ServiceDescriber_ServiceDescription struct{}

func (sd *ServiceDescriber_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *ServiceDescriber_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *ServiceDescriber_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ ServiceDescription = (*ServiceDescriber_ServiceDescription)(nil)


func (s *serviceDescriber_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case serviceDescriber_DescribeService_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request serviceDescriber_DescribeService_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.DescribeService(request.inInterfaceName, request.inDescriptionRequest)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type ServiceDescription interface {
	GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error)
	GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error)
	GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error)
}




type ServiceDescription_Request bindings.InterfaceRequest



type ServiceDescription_Pointer bindings.InterfacePointer


type ServiceDescription_ServiceFactory struct{
	Delegate ServiceDescription_Factory
}

type ServiceDescription_Factory interface {
	Create(request ServiceDescription_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *ServiceDescription_ServiceFactory) ServiceDescription() ServiceDescription {
	return &ServiceDescription_ServiceDescription{}
}

func (f *ServiceDescription_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := ServiceDescription_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForServiceDescription creates a message pipe for use with the
// ServiceDescription interface with a ServiceDescription_Request on one end and a ServiceDescription_Pointer on the other.
func CreateMessagePipeForServiceDescription() (ServiceDescription_Request, ServiceDescription_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return ServiceDescription_Request(r), ServiceDescription_Pointer(p)
}

const serviceDescription_GetTopLevelInterface_Name uint32 = 0
const serviceDescription_GetTypeDefinition_Name uint32 = 1
const serviceDescription_GetAllTypeDefinitions_Name uint32 = 2

type ServiceDescription_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewServiceDescriptionProxy(p ServiceDescription_Pointer, waiter bindings.AsyncWaiter) *ServiceDescription_Proxy {
	return &ServiceDescription_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *ServiceDescription_Proxy) Close_Proxy() {
	p.router.Close()
}

type serviceDescription_GetTopLevelInterface_Params struct {
}


func (s *serviceDescription_GetTopLevelInterface_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceDescription_GetTopLevelInterface_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *serviceDescription_GetTopLevelInterface_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceDescription_GetTopLevelInterface_Params_Versions), func(i int) bool {
		return serviceDescription_GetTopLevelInterface_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceDescription_GetTopLevelInterface_Params_Versions) {
		if serviceDescription_GetTopLevelInterface_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceDescription_GetTopLevelInterface_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type serviceDescription_GetTopLevelInterface_ResponseParams struct {
	outMojomInterface mojom_types.MojomInterface
}


func (s *serviceDescription_GetTopLevelInterface_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outMojomInterface.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceDescription_GetTopLevelInterface_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *serviceDescription_GetTopLevelInterface_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceDescription_GetTopLevelInterface_ResponseParams_Versions), func(i int) bool {
		return serviceDescription_GetTopLevelInterface_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceDescription_GetTopLevelInterface_ResponseParams_Versions) {
		if serviceDescription_GetTopLevelInterface_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceDescription_GetTopLevelInterface_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outMojomInterface.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDescription_Proxy) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	payload := &serviceDescription_GetTopLevelInterface_Params{
	}
	header := bindings.MessageHeader{
		Type: serviceDescription_GetTopLevelInterface_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, serviceDescription_GetTopLevelInterface_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response serviceDescription_GetTopLevelInterface_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outMojomInterface = response.outMojomInterface
	return
}

type serviceDescription_GetTypeDefinition_Params struct {
	inTypeKey string
}


func (s *serviceDescription_GetTypeDefinition_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inTypeKey); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceDescription_GetTypeDefinition_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *serviceDescription_GetTypeDefinition_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceDescription_GetTypeDefinition_Params_Versions), func(i int) bool {
		return serviceDescription_GetTypeDefinition_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceDescription_GetTypeDefinition_Params_Versions) {
		if serviceDescription_GetTypeDefinition_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceDescription_GetTypeDefinition_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inTypeKey = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type serviceDescription_GetTypeDefinition_ResponseParams struct {
	outType mojom_types.UserDefinedType
}


func (s *serviceDescription_GetTypeDefinition_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.outType == nil {
		encoder.WriteNullUnion()
	} else {
		if err := s.outType.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceDescription_GetTypeDefinition_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *serviceDescription_GetTypeDefinition_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceDescription_GetTypeDefinition_ResponseParams_Versions), func(i int) bool {
		return serviceDescription_GetTypeDefinition_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceDescription_GetTypeDefinition_ResponseParams_Versions) {
		if serviceDescription_GetTypeDefinition_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceDescription_GetTypeDefinition_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		var err error
		s.outType, err = mojom_types.DecodeUserDefinedType(decoder)
		if err != nil {
			return err
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDescription_Proxy) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	payload := &serviceDescription_GetTypeDefinition_Params{
		inTypeKey,
	}
	header := bindings.MessageHeader{
		Type: serviceDescription_GetTypeDefinition_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, serviceDescription_GetTypeDefinition_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response serviceDescription_GetTypeDefinition_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outType = response.outType
	return
}

type serviceDescription_GetAllTypeDefinitions_Params struct {
}


func (s *serviceDescription_GetAllTypeDefinitions_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceDescription_GetAllTypeDefinitions_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *serviceDescription_GetAllTypeDefinitions_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceDescription_GetAllTypeDefinitions_Params_Versions), func(i int) bool {
		return serviceDescription_GetAllTypeDefinitions_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceDescription_GetAllTypeDefinitions_Params_Versions) {
		if serviceDescription_GetAllTypeDefinitions_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceDescription_GetAllTypeDefinitions_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type serviceDescription_GetAllTypeDefinitions_ResponseParams struct {
	outDefinitions *map[string]mojom_types.UserDefinedType
}


func (s *serviceDescription_GetAllTypeDefinitions_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.outDefinitions == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartMap()
		{
			var keys0 []string
			var values0 []mojom_types.UserDefinedType
			if encoder.Deterministic() {
			  for key0, _ := range (*s.outDefinitions) {
				keys0 = append(keys0, key0)
			  }
			  bindings.SortMapKeys(&keys0)
			  values0 = make([]mojom_types.UserDefinedType, len(keys0))
			  for i, key := range keys0 {
			    values0[i] = (*s.outDefinitions)[key]
			  }
			} else {
			  for key0, value0 := range (*s.outDefinitions) {
				keys0 = append(keys0, key0)
				values0 = append(values0, value0)
			  }
			}
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(keys0)), 64)
			for _, elem1 := range keys0 {
				if err := encoder.WritePointer(); err != nil {
					return err
				}
				if err := encoder.WriteString(elem1); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			encoder.StartArray(uint32(len(values0)), 128)
			for _, elem1 := range values0 {
				if elem1 == nil {
					return &bindings.ValidationError{bindings.UnexpectedNullUnion, "unexpected null union"}
				}
				if err := elem1.Encode(encoder); err != nil {
					return err
				}
			}
			if err := encoder.Finish(); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var serviceDescription_GetAllTypeDefinitions_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *serviceDescription_GetAllTypeDefinitions_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(serviceDescription_GetAllTypeDefinitions_ResponseParams_Versions), func(i int) bool {
		return serviceDescription_GetAllTypeDefinitions_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(serviceDescription_GetAllTypeDefinitions_ResponseParams_Versions) {
		if serviceDescription_GetAllTypeDefinitions_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := serviceDescription_GetAllTypeDefinitions_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outDefinitions = nil
		} else {
			s.outDefinitions = new(map[string]mojom_types.UserDefinedType)
			if err := decoder.StartMap(); err != nil {
				return err
			}
			var keys0 []string
			{
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(64)
					if err != nil {
						return err
					}
					keys0 = make([]string, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						pointer2, err := decoder.ReadPointer()
						if err != nil {
							return err
						}
						if pointer2 == 0 {
							return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
						} else {
							value2, err := decoder.ReadString()
							if err != nil {
								return err
							}
							keys0[i1] = value2
						}
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			var values0 []mojom_types.UserDefinedType
			{
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					len1, err := decoder.StartArray(128)
					if err != nil {
						return err
					}
					values0 = make([]mojom_types.UserDefinedType, len1)
					for i1 := uint32(0); i1 < len1; i1++ {
						var err error
						values0[i1], err = mojom_types.DecodeUserDefinedType(decoder)
						if err != nil {
							return err
						}
						if values0[i1] == nil {
							return &bindings.ValidationError{bindings.UnexpectedNullUnion, "unexpected null union"}
						}
					}
					if err := decoder.Finish(); err != nil {
						return err
					}
				}
			}
			if len(keys0) != len(values0) {
				return &bindings.ValidationError{bindings.DifferentSizedArraysInMap,
					fmt.Sprintf("Number of keys %d is different from number of values %d", len(keys0), len(values0)),
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
			len0 := len(keys0)
			map0 := make(map[string]mojom_types.UserDefinedType)
			for i0 := 0; i0 < len0; i0++ {
				map0[keys0[i0]] = values0[i0]
			}
			(*s.outDefinitions) = map0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *ServiceDescription_Proxy) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	payload := &serviceDescription_GetAllTypeDefinitions_Params{
	}
	header := bindings.MessageHeader{
		Type: serviceDescription_GetAllTypeDefinitions_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, serviceDescription_GetAllTypeDefinitions_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response serviceDescription_GetAllTypeDefinitions_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outDefinitions = response.outDefinitions
	return
}

type serviceDescription_Stub struct {
	connector *bindings.Connector
	impl ServiceDescription
}

func NewServiceDescriptionStub(r ServiceDescription_Request, impl ServiceDescription, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &serviceDescription_Stub{connector, impl})
}


func (f *ServiceDescription_Request) ServiceDescription() ServiceDescription {
	return &ServiceDescription_ServiceDescription{}
}


type ServiceDescription_ServiceDescription struct{}

func (sd *ServiceDescription_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *ServiceDescription_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *ServiceDescription_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ ServiceDescription = (*ServiceDescription_ServiceDescription)(nil)


func (s *serviceDescription_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case serviceDescription_GetTopLevelInterface_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request serviceDescription_GetTopLevelInterface_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response serviceDescription_GetTopLevelInterface_ResponseParams
		response.outMojomInterface, err = s.impl.GetTopLevelInterface()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: serviceDescription_GetTopLevelInterface_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case serviceDescription_GetTypeDefinition_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request serviceDescription_GetTypeDefinition_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response serviceDescription_GetTypeDefinition_ResponseParams
		response.outType, err = s.impl.GetTypeDefinition(request.inTypeKey)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: serviceDescription_GetTypeDefinition_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case serviceDescription_GetAllTypeDefinitions_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request serviceDescription_GetAllTypeDefinitions_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response serviceDescription_GetAllTypeDefinitions_ResponseParams
		response.outDefinitions, err = s.impl.GetAllTypeDefinitions()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: serviceDescription_GetAllTypeDefinitions_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

