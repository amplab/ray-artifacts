// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_VANADIUM_SECURITY_INTERFACES_PRINCIPAL_MOJOM_COMMON_H_
#define MOJO_SERVICES_VANADIUM_SECURITY_INTERFACES_PRINCIPAL_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/vanadium/security/interfaces/principal.mojom-internal.h"
namespace vanadium {

// --- Interface Forward Declarations ---
class PrincipalService;
class PrincipalServiceRequestValidator;
class PrincipalServiceResponseValidator;
class PrincipalService_Synchronous;

// --- Struct Forward Declarations ---
class AppInstanceName;

using AppInstanceNamePtr = mojo::InlinedStructPtr<AppInstanceName>;


class User;

using UserPtr = mojo::StructPtr<User>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class PrincipalService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = PrincipalServiceRequestValidator;
  using ResponseValidator_ = PrincipalServiceResponseValidator;
  using Synchronous_ = PrincipalService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Login = 0,
    Logout = 1,
    GetUser = 2,
    SetUser = 3,
    GetLoggedInUsers = 4,
  };


  virtual ~PrincipalService_Base() {}
};

}  // namespace internal

// Async interface declaration

class PrincipalServiceProxy;
class PrincipalServiceStub;
class PrincipalService_Synchronous;

class PrincipalServiceRequestValidator;
class PrincipalServiceResponseValidator;

class PrincipalService : public internal::PrincipalService_Base {
 public:
  virtual ~PrincipalService() override {}

  using Proxy_ = PrincipalServiceProxy;
  using Stub_ = PrincipalServiceStub;
  using LoginCallback = mojo::Callback<void(UserPtr)>;
  virtual void Login(const LoginCallback& callback) = 0;
  virtual void Logout() = 0;
  using GetUserCallback = mojo::Callback<void(UserPtr)>;
  virtual void GetUser(AppInstanceNamePtr app, const GetUserCallback& callback) = 0;
  using SetUserCallback = mojo::Callback<void(mojo::String)>;
  virtual void SetUser(UserPtr user, const SetUserCallback& callback) = 0;
  using GetLoggedInUsersCallback = mojo::Callback<void(mojo::Array<UserPtr>)>;
  virtual void GetLoggedInUsers(const GetLoggedInUsersCallback& callback) = 0;
};

}  // namespace vanadium

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<vanadium::AppInstanceNamePtr, true, false> {
  using DataType = vanadium::internal::AppInstanceName_Data*;
};
template <>
struct WrapperTraits<vanadium::UserPtr, true, false> {
  using DataType = vanadium::internal::User_Data*;
};

}  // internal
}  // mojo
namespace vanadium {

// --- Interface Request Validators ---
class PrincipalServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class PrincipalServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class AppInstanceName {
 public:
  using Data_ = internal::AppInstanceName_Data;

  static AppInstanceNamePtr New();

  template <typename U>
  static AppInstanceNamePtr From(const U& u) {
    return mojo::TypeConverter<AppInstanceNamePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AppInstanceName>::Convert(*this);
  }

  AppInstanceName();
  ~AppInstanceName();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  AppInstanceNamePtr Clone() const;
  bool Equals(const AppInstanceName& other) const;

  mojo::String url;
  mojo::String qualifier;
};



// --- Non-inlined structs ---
class User {
 public:
  using Data_ = internal::User_Data;

  static UserPtr New();

  template <typename U>
  static UserPtr From(const U& u) {
    return mojo::TypeConverter<UserPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, User>::Convert(*this);
  }

  User();
  ~User();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  UserPtr Clone() const;
  bool Equals(const User& other) const;

  mojo::String email;
  mojo::Array<uint8_t> blessing;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const AppInstanceName& input);
mojo::internal::ValidationError Serialize_(
    AppInstanceName* input,
    mojo::internal::Buffer* buffer,
    internal::AppInstanceName_Data** output);
void Deserialize_(internal::AppInstanceName_Data* input,
                  AppInstanceName* output);

size_t GetSerializedSize_(const User& input);
mojo::internal::ValidationError Serialize_(
    User* input,
    mojo::internal::Buffer* buffer,
    internal::User_Data** output);
void Deserialize_(internal::User_Data* input,
                  User* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class PrincipalService_Login_Params;

using PrincipalService_Login_ParamsPtr = mojo::InlinedStructPtr<PrincipalService_Login_Params>;


size_t GetSerializedSize_(const PrincipalService_Login_Params& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_Login_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_Login_Params_Data** output);
void Deserialize_(internal::PrincipalService_Login_Params_Data* input,
                  PrincipalService_Login_Params* output);

class PrincipalService_Login_Params {
 public:
  using Data_ = internal::PrincipalService_Login_Params_Data;

  static PrincipalService_Login_ParamsPtr New();

  template <typename U>
  static PrincipalService_Login_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_Login_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_Login_Params>::Convert(*this);
  }

  PrincipalService_Login_Params();
  ~PrincipalService_Login_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_Login_ParamsPtr Clone() const;
  bool Equals(const PrincipalService_Login_Params& other) const;

};



class PrincipalService_Login_ResponseParams;

using PrincipalService_Login_ResponseParamsPtr = mojo::StructPtr<PrincipalService_Login_ResponseParams>;


size_t GetSerializedSize_(const PrincipalService_Login_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_Login_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_Login_ResponseParams_Data** output);
void Deserialize_(internal::PrincipalService_Login_ResponseParams_Data* input,
                  PrincipalService_Login_ResponseParams* output);

class PrincipalService_Login_ResponseParams {
 public:
  using Data_ = internal::PrincipalService_Login_ResponseParams_Data;

  static PrincipalService_Login_ResponseParamsPtr New();

  template <typename U>
  static PrincipalService_Login_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_Login_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_Login_ResponseParams>::Convert(*this);
  }

  PrincipalService_Login_ResponseParams();
  ~PrincipalService_Login_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_Login_ResponseParamsPtr Clone() const;
  bool Equals(const PrincipalService_Login_ResponseParams& other) const;

  UserPtr user;
};



class PrincipalService_Logout_Params;

using PrincipalService_Logout_ParamsPtr = mojo::InlinedStructPtr<PrincipalService_Logout_Params>;


size_t GetSerializedSize_(const PrincipalService_Logout_Params& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_Logout_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_Logout_Params_Data** output);
void Deserialize_(internal::PrincipalService_Logout_Params_Data* input,
                  PrincipalService_Logout_Params* output);

class PrincipalService_Logout_Params {
 public:
  using Data_ = internal::PrincipalService_Logout_Params_Data;

  static PrincipalService_Logout_ParamsPtr New();

  template <typename U>
  static PrincipalService_Logout_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_Logout_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_Logout_Params>::Convert(*this);
  }

  PrincipalService_Logout_Params();
  ~PrincipalService_Logout_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_Logout_ParamsPtr Clone() const;
  bool Equals(const PrincipalService_Logout_Params& other) const;

};




class PrincipalService_GetUser_Params;

using PrincipalService_GetUser_ParamsPtr = mojo::StructPtr<PrincipalService_GetUser_Params>;


size_t GetSerializedSize_(const PrincipalService_GetUser_Params& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_GetUser_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_GetUser_Params_Data** output);
void Deserialize_(internal::PrincipalService_GetUser_Params_Data* input,
                  PrincipalService_GetUser_Params* output);

class PrincipalService_GetUser_Params {
 public:
  using Data_ = internal::PrincipalService_GetUser_Params_Data;

  static PrincipalService_GetUser_ParamsPtr New();

  template <typename U>
  static PrincipalService_GetUser_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_GetUser_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_GetUser_Params>::Convert(*this);
  }

  PrincipalService_GetUser_Params();
  ~PrincipalService_GetUser_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_GetUser_ParamsPtr Clone() const;
  bool Equals(const PrincipalService_GetUser_Params& other) const;

  AppInstanceNamePtr app;
};



class PrincipalService_GetUser_ResponseParams;

using PrincipalService_GetUser_ResponseParamsPtr = mojo::StructPtr<PrincipalService_GetUser_ResponseParams>;


size_t GetSerializedSize_(const PrincipalService_GetUser_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_GetUser_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_GetUser_ResponseParams_Data** output);
void Deserialize_(internal::PrincipalService_GetUser_ResponseParams_Data* input,
                  PrincipalService_GetUser_ResponseParams* output);

class PrincipalService_GetUser_ResponseParams {
 public:
  using Data_ = internal::PrincipalService_GetUser_ResponseParams_Data;

  static PrincipalService_GetUser_ResponseParamsPtr New();

  template <typename U>
  static PrincipalService_GetUser_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_GetUser_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_GetUser_ResponseParams>::Convert(*this);
  }

  PrincipalService_GetUser_ResponseParams();
  ~PrincipalService_GetUser_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_GetUser_ResponseParamsPtr Clone() const;
  bool Equals(const PrincipalService_GetUser_ResponseParams& other) const;

  UserPtr user;
};



class PrincipalService_SetUser_Params;

using PrincipalService_SetUser_ParamsPtr = mojo::StructPtr<PrincipalService_SetUser_Params>;


size_t GetSerializedSize_(const PrincipalService_SetUser_Params& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_SetUser_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_SetUser_Params_Data** output);
void Deserialize_(internal::PrincipalService_SetUser_Params_Data* input,
                  PrincipalService_SetUser_Params* output);

class PrincipalService_SetUser_Params {
 public:
  using Data_ = internal::PrincipalService_SetUser_Params_Data;

  static PrincipalService_SetUser_ParamsPtr New();

  template <typename U>
  static PrincipalService_SetUser_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_SetUser_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_SetUser_Params>::Convert(*this);
  }

  PrincipalService_SetUser_Params();
  ~PrincipalService_SetUser_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_SetUser_ParamsPtr Clone() const;
  bool Equals(const PrincipalService_SetUser_Params& other) const;

  UserPtr user;
};



class PrincipalService_SetUser_ResponseParams;

using PrincipalService_SetUser_ResponseParamsPtr = mojo::InlinedStructPtr<PrincipalService_SetUser_ResponseParams>;


size_t GetSerializedSize_(const PrincipalService_SetUser_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_SetUser_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_SetUser_ResponseParams_Data** output);
void Deserialize_(internal::PrincipalService_SetUser_ResponseParams_Data* input,
                  PrincipalService_SetUser_ResponseParams* output);

class PrincipalService_SetUser_ResponseParams {
 public:
  using Data_ = internal::PrincipalService_SetUser_ResponseParams_Data;

  static PrincipalService_SetUser_ResponseParamsPtr New();

  template <typename U>
  static PrincipalService_SetUser_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_SetUser_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_SetUser_ResponseParams>::Convert(*this);
  }

  PrincipalService_SetUser_ResponseParams();
  ~PrincipalService_SetUser_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_SetUser_ResponseParamsPtr Clone() const;
  bool Equals(const PrincipalService_SetUser_ResponseParams& other) const;

  mojo::String error;
};



class PrincipalService_GetLoggedInUsers_Params;

using PrincipalService_GetLoggedInUsers_ParamsPtr = mojo::InlinedStructPtr<PrincipalService_GetLoggedInUsers_Params>;


size_t GetSerializedSize_(const PrincipalService_GetLoggedInUsers_Params& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_GetLoggedInUsers_Params* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_GetLoggedInUsers_Params_Data** output);
void Deserialize_(internal::PrincipalService_GetLoggedInUsers_Params_Data* input,
                  PrincipalService_GetLoggedInUsers_Params* output);

class PrincipalService_GetLoggedInUsers_Params {
 public:
  using Data_ = internal::PrincipalService_GetLoggedInUsers_Params_Data;

  static PrincipalService_GetLoggedInUsers_ParamsPtr New();

  template <typename U>
  static PrincipalService_GetLoggedInUsers_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_GetLoggedInUsers_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_GetLoggedInUsers_Params>::Convert(*this);
  }

  PrincipalService_GetLoggedInUsers_Params();
  ~PrincipalService_GetLoggedInUsers_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_GetLoggedInUsers_ParamsPtr Clone() const;
  bool Equals(const PrincipalService_GetLoggedInUsers_Params& other) const;

};



class PrincipalService_GetLoggedInUsers_ResponseParams;

using PrincipalService_GetLoggedInUsers_ResponseParamsPtr = mojo::StructPtr<PrincipalService_GetLoggedInUsers_ResponseParams>;


size_t GetSerializedSize_(const PrincipalService_GetLoggedInUsers_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    PrincipalService_GetLoggedInUsers_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data** output);
void Deserialize_(internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data* input,
                  PrincipalService_GetLoggedInUsers_ResponseParams* output);

class PrincipalService_GetLoggedInUsers_ResponseParams {
 public:
  using Data_ = internal::PrincipalService_GetLoggedInUsers_ResponseParams_Data;

  static PrincipalService_GetLoggedInUsers_ResponseParamsPtr New();

  template <typename U>
  static PrincipalService_GetLoggedInUsers_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<PrincipalService_GetLoggedInUsers_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PrincipalService_GetLoggedInUsers_ResponseParams>::Convert(*this);
  }

  PrincipalService_GetLoggedInUsers_ResponseParams();
  ~PrincipalService_GetLoggedInUsers_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  PrincipalService_GetLoggedInUsers_ResponseParamsPtr Clone() const;
  bool Equals(const PrincipalService_GetLoggedInUsers_ResponseParams& other) const;

  mojo::Array<UserPtr> ids;
};


}  // namespace vanadium

#endif  // MOJO_SERVICES_VANADIUM_SECURITY_INTERFACES_PRINCIPAL_MOJOM_COMMON_H_
