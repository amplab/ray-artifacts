// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_APPLICATION_APPLICATION_MOJOM_SYNC_H_
#define MOJO_PUBLIC_INTERFACES_APPLICATION_APPLICATION_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/interfaces/application/application.mojom-internal.h"
#include "mojo/public/interfaces/application/application.mojom-common.h"
#include "mojo/public/interfaces/application/service_provider.mojom.h"
#include "mojo/public/interfaces/application/shell.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class Application_SynchronousProxy;
class Application_Synchronous
  : public internal::Application_Base {
 public:
  virtual ~Application_Synchronous() override {}
  
  using Proxy_ = Application_SynchronousProxy;
  virtual bool Initialize(
      mojo::InterfaceHandle<mojo::Shell> in_shell, mojo::Array<mojo::String> in_args, const mojo::String& in_url)const= 0;
  virtual bool AcceptConnection(
      const mojo::String& in_requestor_url, const mojo::String& in_resolved_url, mojo::InterfaceRequest<mojo::ServiceProvider> in_services)const= 0;
  virtual bool RequestQuit(
      )const= 0;
};

class Application_SynchronousProxy
    : public Application_Synchronous {
 public:
  explicit Application_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Initialize(mojo::InterfaceHandle<mojo::Shell> in_shell, mojo::Array<mojo::String> in_args, const mojo::String& in_url) const  override;
  bool AcceptConnection(const mojo::String& in_requestor_url, const mojo::String& in_resolved_url, mojo::InterfaceRequest<mojo::ServiceProvider> in_services) const  override;
  bool RequestQuit() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_APPLICATION_APPLICATION_MOJOM_SYNC_H_
