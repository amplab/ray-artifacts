// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/network/network_error.mojom-internal.h"
#include "mojo/services/network/interfaces/cookie_store.mojom-internal.h"
#include "mojo/services/network/interfaces/host_resolver.mojom-internal.h"
#include "mojo/services/network/interfaces/http_server.mojom-internal.h"
#include "mojo/services/network/interfaces/net_address.mojom-internal.h"
#include "mojo/services/network/interfaces/tcp_bound_socket.mojom-internal.h"
#include "mojo/services/network/interfaces/tcp_connected_socket.mojom-internal.h"
#include "mojo/services/network/interfaces/udp_socket.mojom-internal.h"
#include "mojo/services/network/interfaces/url_loader.mojom-internal.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom-internal.h"
#include "mojo/services/network/interfaces/web_socket.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {



namespace internal {




#pragma pack(push, 1)



class NetworkService_CreateURLLoader_Params_Data {
 public:
  static NetworkService_CreateURLLoader_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle loader;
  uint8_t padfinal_[4];

 private:
  NetworkService_CreateURLLoader_Params_Data();
  ~NetworkService_CreateURLLoader_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateURLLoader_Params_Data) == 16,
              "Bad sizeof(NetworkService_CreateURLLoader_Params_Data)");


class NetworkService_GetCookieStore_Params_Data {
 public:
  static NetworkService_GetCookieStore_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle cookie_store;
  uint8_t padfinal_[4];

 private:
  NetworkService_GetCookieStore_Params_Data();
  ~NetworkService_GetCookieStore_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_GetCookieStore_Params_Data) == 16,
              "Bad sizeof(NetworkService_GetCookieStore_Params_Data)");


class NetworkService_CreateWebSocket_Params_Data {
 public:
  static NetworkService_CreateWebSocket_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle socket;
  uint8_t padfinal_[4];

 private:
  NetworkService_CreateWebSocket_Params_Data();
  ~NetworkService_CreateWebSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateWebSocket_Params_Data) == 16,
              "Bad sizeof(NetworkService_CreateWebSocket_Params_Data)");


class NetworkService_CreateTCPBoundSocket_Params_Data {
 public:
  static NetworkService_CreateTCPBoundSocket_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> local_address;
  mojo::MessagePipeHandle bound_socket;
  uint8_t padfinal_[4];

 private:
  NetworkService_CreateTCPBoundSocket_Params_Data();
  ~NetworkService_CreateTCPBoundSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateTCPBoundSocket_Params_Data) == 24,
              "Bad sizeof(NetworkService_CreateTCPBoundSocket_Params_Data)");

class NetworkService_CreateTCPBoundSocket_ResponseParams_Data {
 public:
  static NetworkService_CreateTCPBoundSocket_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> bound_to;

 private:
  NetworkService_CreateTCPBoundSocket_ResponseParams_Data();
  ~NetworkService_CreateTCPBoundSocket_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateTCPBoundSocket_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkService_CreateTCPBoundSocket_ResponseParams_Data)");


class NetworkService_CreateTCPConnectedSocket_Params_Data {
 public:
  static NetworkService_CreateTCPConnectedSocket_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> remote_address;
  mojo::DataPipeConsumerHandle send_stream;
  mojo::DataPipeProducerHandle receive_stream;
  mojo::MessagePipeHandle client_socket;
  uint8_t padfinal_[4];

 private:
  NetworkService_CreateTCPConnectedSocket_Params_Data();
  ~NetworkService_CreateTCPConnectedSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateTCPConnectedSocket_Params_Data) == 32,
              "Bad sizeof(NetworkService_CreateTCPConnectedSocket_Params_Data)");

class NetworkService_CreateTCPConnectedSocket_ResponseParams_Data {
 public:
  static NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> local_address;

 private:
  NetworkService_CreateTCPConnectedSocket_ResponseParams_Data();
  ~NetworkService_CreateTCPConnectedSocket_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateTCPConnectedSocket_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkService_CreateTCPConnectedSocket_ResponseParams_Data)");


class NetworkService_CreateUDPSocket_Params_Data {
 public:
  static NetworkService_CreateUDPSocket_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle socket;
  uint8_t padfinal_[4];

 private:
  NetworkService_CreateUDPSocket_Params_Data();
  ~NetworkService_CreateUDPSocket_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateUDPSocket_Params_Data) == 16,
              "Bad sizeof(NetworkService_CreateUDPSocket_Params_Data)");


class NetworkService_CreateHttpServer_Params_Data {
 public:
  static NetworkService_CreateHttpServer_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> local_address;
  mojo::internal::Interface_Data delegate;

 private:
  NetworkService_CreateHttpServer_Params_Data();
  ~NetworkService_CreateHttpServer_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateHttpServer_Params_Data) == 24,
              "Bad sizeof(NetworkService_CreateHttpServer_Params_Data)");

class NetworkService_CreateHttpServer_ResponseParams_Data {
 public:
  static NetworkService_CreateHttpServer_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::NetworkError_Data> result;
  mojo::internal::StructPointer<mojo::internal::NetAddress_Data> bound_to;

 private:
  NetworkService_CreateHttpServer_ResponseParams_Data();
  ~NetworkService_CreateHttpServer_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateHttpServer_ResponseParams_Data) == 24,
              "Bad sizeof(NetworkService_CreateHttpServer_ResponseParams_Data)");


class NetworkService_RegisterURLLoaderInterceptor_Params_Data {
 public:
  static NetworkService_RegisterURLLoaderInterceptor_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data factory;

 private:
  NetworkService_RegisterURLLoaderInterceptor_Params_Data();
  ~NetworkService_RegisterURLLoaderInterceptor_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_RegisterURLLoaderInterceptor_Params_Data) == 16,
              "Bad sizeof(NetworkService_RegisterURLLoaderInterceptor_Params_Data)");


class NetworkService_CreateHostResolver_Params_Data {
 public:
  static NetworkService_CreateHostResolver_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle host_resolver;
  uint8_t padfinal_[4];

 private:
  NetworkService_CreateHostResolver_Params_Data();
  ~NetworkService_CreateHostResolver_Params_Data() = delete;
};
static_assert(sizeof(NetworkService_CreateHostResolver_Params_Data) == 16,
              "Bad sizeof(NetworkService_CreateHostResolver_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_INTERNAL_H_
