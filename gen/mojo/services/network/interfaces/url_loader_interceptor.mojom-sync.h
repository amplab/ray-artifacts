// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_SYNC_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom-internal.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom-common.h"
#include "mojo/public/interfaces/network/url_request.mojom.h"
#include "mojo/public/interfaces/network/url_response.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class URLLoaderInterceptorFactory_SynchronousProxy;
class URLLoaderInterceptorFactory_Synchronous
  : public internal::URLLoaderInterceptorFactory_Base {
 public:
  virtual ~URLLoaderInterceptorFactory_Synchronous() override {}
  
  using Proxy_ = URLLoaderInterceptorFactory_SynchronousProxy;
  virtual bool Create(
      mojo::InterfaceRequest<URLLoaderInterceptor> in_interceptor)const= 0;
};

class URLLoaderInterceptorFactory_SynchronousProxy
    : public URLLoaderInterceptorFactory_Synchronous {
 public:
  explicit URLLoaderInterceptorFactory_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Create(mojo::InterfaceRequest<URLLoaderInterceptor> in_interceptor) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class URLLoaderInterceptor_SynchronousProxy;
class URLLoaderInterceptor_Synchronous
  : public internal::URLLoaderInterceptor_Base {
 public:
  virtual ~URLLoaderInterceptor_Synchronous() override {}
  
  using Proxy_ = URLLoaderInterceptor_SynchronousProxy;
  virtual bool InterceptRequest(
      mojo::URLRequestPtr in_request, URLLoaderInterceptorResponsePtr* out_response)= 0;
  virtual bool InterceptFollowRedirect(
      URLLoaderInterceptorResponsePtr* out_response)= 0;
  virtual bool InterceptResponse(
      mojo::URLResponsePtr in_response, URLLoaderInterceptorResponsePtr* out_response)= 0;
};

class URLLoaderInterceptor_SynchronousProxy
    : public URLLoaderInterceptor_Synchronous {
 public:
  explicit URLLoaderInterceptor_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool InterceptRequest(mojo::URLRequestPtr in_request, URLLoaderInterceptorResponsePtr* out_response) override;
  bool InterceptFollowRedirect(URLLoaderInterceptorResponsePtr* out_response) override;
  bool InterceptResponse(mojo::URLResponsePtr in_response, URLLoaderInterceptorResponsePtr* out_response) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_URL_LOADER_INTERCEPTOR_MOJOM_SYNC_H_
