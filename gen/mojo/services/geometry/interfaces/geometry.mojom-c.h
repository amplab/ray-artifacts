// This file was auto-generated by the C bindings generator.

#ifndef MOJO_SERVICES_GEOMETRY_INTERFACES_GEOMETRY_MOJOM_C_H_
#define MOJO_SERVICES_GEOMETRY_INTERFACES_GEOMETRY_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.


// Forward declarations for structs.
struct mojo_Point;
union mojo_PointPtr {
  struct mojo_Point* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_PointPtr) == 8,
              "union mojo_PointPtr must be 8 bytes");

struct mojo_PointF;
union mojo_PointFPtr {
  struct mojo_PointF* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_PointFPtr) == 8,
              "union mojo_PointFPtr must be 8 bytes");

struct mojo_Size;
union mojo_SizePtr {
  struct mojo_Size* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_SizePtr) == 8,
              "union mojo_SizePtr must be 8 bytes");

struct mojo_Rect;
union mojo_RectPtr {
  struct mojo_Rect* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_RectPtr) == 8,
              "union mojo_RectPtr must be 8 bytes");

struct mojo_RectF;
union mojo_RectFPtr {
  struct mojo_RectF* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_RectFPtr) == 8,
              "union mojo_RectFPtr must be 8 bytes");

struct mojo_RRectF;
union mojo_RRectFPtr {
  struct mojo_RRectF* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_RRectFPtr) == 8,
              "union mojo_RRectFPtr must be 8 bytes");

struct mojo_Transform;
union mojo_TransformPtr {
  struct mojo_Transform* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_TransformPtr) == 8,
              "union mojo_TransformPtr must be 8 bytes");

// Forward declarations for unions.
// Top level constants.


// Top level enums.


// Union definitions.


// Struct definitions.
// -- mojo_Point --
// Enums
// Constants
// Struct definition
struct mojo_Point {
  struct MojomStructHeader header_;
  int32_t x;  // offset,bit = 0,0
  int32_t y;  // offset,bit = 4,0
  uint8_t pad1_[4];  // padding
  
};

struct mojo_Point* mojo_Point_New(struct MojomBuffer* in_buffer);

void mojo_Point_Init(
  struct mojo_Point* in_data);

void mojo_Point_CloseAllHandles(
  struct mojo_Point* in_data);

struct mojo_Point* mojo_Point_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Point* in_data);

size_t mojo_Point_ComputeSerializedSize(
  const struct mojo_Point* in_data);

MojomValidationResult mojo_Point_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Point_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Point_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_PointF --
// Enums
// Constants
// Struct definition
struct mojo_PointF {
  struct MojomStructHeader header_;
  float x;  // offset,bit = 0,0
  float y;  // offset,bit = 4,0
  uint8_t pad1_[4];  // padding
  
};

struct mojo_PointF* mojo_PointF_New(struct MojomBuffer* in_buffer);

void mojo_PointF_Init(
  struct mojo_PointF* in_data);

void mojo_PointF_CloseAllHandles(
  struct mojo_PointF* in_data);

struct mojo_PointF* mojo_PointF_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_PointF* in_data);

size_t mojo_PointF_ComputeSerializedSize(
  const struct mojo_PointF* in_data);

MojomValidationResult mojo_PointF_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_PointF_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_PointF_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_Size --
// Enums
// Constants
// Struct definition
struct mojo_Size {
  struct MojomStructHeader header_;
  int32_t width;  // offset,bit = 0,0
  int32_t height;  // offset,bit = 4,0
  uint8_t pad1_[4];  // padding
  
};

struct mojo_Size* mojo_Size_New(struct MojomBuffer* in_buffer);

void mojo_Size_Init(
  struct mojo_Size* in_data);

void mojo_Size_CloseAllHandles(
  struct mojo_Size* in_data);

struct mojo_Size* mojo_Size_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Size* in_data);

size_t mojo_Size_ComputeSerializedSize(
  const struct mojo_Size* in_data);

MojomValidationResult mojo_Size_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Size_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Size_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_Rect --
// Enums
// Constants
// Struct definition
struct mojo_Rect {
  struct MojomStructHeader header_;
  int32_t x;  // offset,bit = 0,0
  int32_t y;  // offset,bit = 4,0
  int32_t width;  // offset,bit = 8,0
  int32_t height;  // offset,bit = 12,0
  uint8_t pad3_[4];  // padding
  
};

struct mojo_Rect* mojo_Rect_New(struct MojomBuffer* in_buffer);

void mojo_Rect_Init(
  struct mojo_Rect* in_data);

void mojo_Rect_CloseAllHandles(
  struct mojo_Rect* in_data);

struct mojo_Rect* mojo_Rect_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Rect* in_data);

size_t mojo_Rect_ComputeSerializedSize(
  const struct mojo_Rect* in_data);

MojomValidationResult mojo_Rect_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Rect_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Rect_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_RectF --
// Enums
// Constants
// Struct definition
struct mojo_RectF {
  struct MojomStructHeader header_;
  float x;  // offset,bit = 0,0
  float y;  // offset,bit = 4,0
  float width;  // offset,bit = 8,0
  float height;  // offset,bit = 12,0
  uint8_t pad3_[4];  // padding
  
};

struct mojo_RectF* mojo_RectF_New(struct MojomBuffer* in_buffer);

void mojo_RectF_Init(
  struct mojo_RectF* in_data);

void mojo_RectF_CloseAllHandles(
  struct mojo_RectF* in_data);

struct mojo_RectF* mojo_RectF_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_RectF* in_data);

size_t mojo_RectF_ComputeSerializedSize(
  const struct mojo_RectF* in_data);

MojomValidationResult mojo_RectF_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_RectF_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_RectF_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_RRectF --
// Enums
// Constants
// Struct definition
struct mojo_RRectF {
  struct MojomStructHeader header_;
  float x;  // offset,bit = 0,0
  float y;  // offset,bit = 4,0
  float width;  // offset,bit = 8,0
  float height;  // offset,bit = 12,0
  float top_left_radius_x;  // offset,bit = 16,0
  float top_left_radius_y;  // offset,bit = 20,0
  float top_right_radius_x;  // offset,bit = 24,0
  float top_right_radius_y;  // offset,bit = 28,0
  float bottom_left_radius_x;  // offset,bit = 32,0
  float bottom_left_radius_y;  // offset,bit = 36,0
  float bottom_right_radius_x;  // offset,bit = 40,0
  float bottom_right_radius_y;  // offset,bit = 44,0
  uint8_t pad11_[4];  // padding
  
};

struct mojo_RRectF* mojo_RRectF_New(struct MojomBuffer* in_buffer);

void mojo_RRectF_Init(
  struct mojo_RRectF* in_data);

void mojo_RRectF_CloseAllHandles(
  struct mojo_RRectF* in_data);

struct mojo_RRectF* mojo_RRectF_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_RRectF* in_data);

size_t mojo_RRectF_ComputeSerializedSize(
  const struct mojo_RRectF* in_data);

MojomValidationResult mojo_RRectF_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_RRectF_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_RRectF_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_Transform --
// Enums
// Constants
// Struct definition
struct mojo_Transform {
  struct MojomStructHeader header_;
  union MojomArrayPtr matrix;  // offset,bit = 0,0
  
};

struct mojo_Transform* mojo_Transform_New(struct MojomBuffer* in_buffer);

void mojo_Transform_Init(
  struct mojo_Transform* in_data);

void mojo_Transform_CloseAllHandles(
  struct mojo_Transform* in_data);

struct mojo_Transform* mojo_Transform_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Transform* in_data);

size_t mojo_Transform_ComputeSerializedSize(
  const struct mojo_Transform* in_data);

MojomValidationResult mojo_Transform_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Transform_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Transform_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.


// Type tables declarations for structs and unions.



extern struct MojomPointerTableStructEntry mojo_Point__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_PointF__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_Size__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_Rect__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_RectF__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_RRectF__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_Transform__PointerTable[];


#endif  // MOJO_SERVICES_GEOMETRY_INTERFACES_GEOMETRY_MOJOM_C_H_