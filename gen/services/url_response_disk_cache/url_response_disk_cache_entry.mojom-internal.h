// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_URL_RESPONSE_DISK_CACHE_URL_RESPONSE_DISK_CACHE_ENTRY_MOJOM_INTERNAL_H_
#define SERVICES_URL_RESPONSE_DISK_CACHE_URL_RESPONSE_DISK_CACHE_ENTRY_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/network/url_response.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {

class CacheKey;
class CacheEntry;


namespace internal {

class CacheKey_Data;
class CacheEntry_Data;



#pragma pack(push, 1)


class CacheKey_Data {
 public:
  static CacheKey_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer request_origin;
  mojo::internal::StringPointer url;
  int64_t timestamp;

 private:
  CacheKey_Data();
  ~CacheKey_Data() = delete;
};
static_assert(sizeof(CacheKey_Data) == 32,
              "Bad sizeof(CacheKey_Data)");

class CacheEntry_Data {
 public:
  static CacheEntry_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::internal::URLResponse_Data> response;
  mojo::internal::StringPointer entry_directory;
  mojo::internal::StringPointer response_body_path;
  int64_t last_invalidation;

 private:
  CacheEntry_Data();
  ~CacheEntry_Data() = delete;
};
static_assert(sizeof(CacheEntry_Data) == 40,
              "Bad sizeof(CacheEntry_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // SERVICES_URL_RESPONSE_DISK_CACHE_URL_RESPONSE_DISK_CACHE_ENTRY_MOJOM_INTERNAL_H_
