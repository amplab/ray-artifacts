// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/network/interfaces/network_service.mojom
//

package network_service

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	network_error "mojo/public/interfaces/network/network_error"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	url_loader "mojo/services/network/interfaces/url_loader"
	fmt "fmt"
	web_socket "mojo/services/network/interfaces/web_socket"
	host_resolver "mojo/services/network/interfaces/host_resolver"
	url_loader_interceptor "mojo/services/network/interfaces/url_loader_interceptor"
	tcp_bound_socket "mojo/services/network/interfaces/tcp_bound_socket"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	net_address "mojo/services/network/interfaces/net_address"
	cookie_store "mojo/services/network/interfaces/cookie_store"
	tcp_connected_socket "mojo/services/network/interfaces/tcp_connected_socket"
	udp_socket "mojo/services/network/interfaces/udp_socket"
	http_server "mojo/services/network/interfaces/http_server"
)


type NetworkService interface {
	CreateUrlLoader(inLoader url_loader.UrlLoader_Request) (err error)
	GetCookieStore(inCookieStore cookie_store.CookieStore_Request) (err error)
	CreateWebSocket(inSocket web_socket.WebSocket_Request) (err error)
	CreateTcpBoundSocket(inLocalAddress *net_address.NetAddress, inBoundSocket tcp_bound_socket.TcpBoundSocket_Request) (outResult network_error.NetworkError, outBoundTo *net_address.NetAddress, err error)
	CreateTcpConnectedSocket(inRemoteAddress net_address.NetAddress, inSendStream system.ConsumerHandle, inReceiveStream system.ProducerHandle, inClientSocket tcp_connected_socket.TcpConnectedSocket_Request) (outResult network_error.NetworkError, outLocalAddress *net_address.NetAddress, err error)
	CreateUdpSocket(inSocket udp_socket.UdpSocket_Request) (err error)
	CreateHttpServer(inLocalAddress net_address.NetAddress, inDelegate http_server.HttpServerDelegate_Pointer) (outResult network_error.NetworkError, outBoundTo *net_address.NetAddress, err error)
	RegisterUrlLoaderInterceptor(inFactory url_loader_interceptor.UrlLoaderInterceptorFactory_Pointer) (err error)
	CreateHostResolver(inHostResolver host_resolver.HostResolver_Request) (err error)
}



var networkService_Name = "mojo::NetworkService"

type NetworkService_Request bindings.InterfaceRequest

func (r *NetworkService_Request) Name() string {
	return networkService_Name
}


type NetworkService_Pointer bindings.InterfacePointer

func (p *NetworkService_Pointer) Name() string {
	return networkService_Name
}

type NetworkService_ServiceFactory struct{
	Delegate NetworkService_Factory
}

type NetworkService_Factory interface {
	Create(request NetworkService_Request)
}

func (f *NetworkService_ServiceFactory) Name() string {
	return networkService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *NetworkService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &NetworkService_ServiceDescription{}
}

func (f *NetworkService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := NetworkService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForNetworkService creates a message pipe for use with the
// NetworkService interface with a NetworkService_Request on one end and a NetworkService_Pointer on the other.
func CreateMessagePipeForNetworkService() (NetworkService_Request, NetworkService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return NetworkService_Request(r), NetworkService_Pointer(p)
}

const networkService_CreateUrlLoader_Name uint32 = 0
const networkService_GetCookieStore_Name uint32 = 1
const networkService_CreateWebSocket_Name uint32 = 2
const networkService_CreateTcpBoundSocket_Name uint32 = 3
const networkService_CreateTcpConnectedSocket_Name uint32 = 4
const networkService_CreateUdpSocket_Name uint32 = 5
const networkService_CreateHttpServer_Name uint32 = 6
const networkService_RegisterUrlLoaderInterceptor_Name uint32 = 7
const networkService_CreateHostResolver_Name uint32 = 8

type NetworkService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewNetworkServiceProxy(p NetworkService_Pointer, waiter bindings.AsyncWaiter) *NetworkService_Proxy {
	return &NetworkService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *NetworkService_Proxy) Close_Proxy() {
	p.router.Close()
}

type networkService_CreateURLLoader_Params struct {
	inLoader url_loader.UrlLoader_Request
}


func (s *networkService_CreateURLLoader_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inLoader.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateURLLoader_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *networkService_CreateURLLoader_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateURLLoader_Params_Versions), func(i int) bool {
		return networkService_CreateURLLoader_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateURLLoader_Params_Versions) {
		if networkService_CreateURLLoader_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateURLLoader_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inLoader = url_loader.UrlLoader_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) CreateUrlLoader(inLoader url_loader.UrlLoader_Request) (err error) {
	payload := &networkService_CreateURLLoader_Params{
		inLoader,
	}
	header := bindings.MessageHeader{
		Type: networkService_CreateUrlLoader_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type networkService_GetCookieStore_Params struct {
	inCookieStore cookie_store.CookieStore_Request
}


func (s *networkService_GetCookieStore_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inCookieStore.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_GetCookieStore_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *networkService_GetCookieStore_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_GetCookieStore_Params_Versions), func(i int) bool {
		return networkService_GetCookieStore_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_GetCookieStore_Params_Versions) {
		if networkService_GetCookieStore_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_GetCookieStore_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inCookieStore = cookie_store.CookieStore_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) GetCookieStore(inCookieStore cookie_store.CookieStore_Request) (err error) {
	payload := &networkService_GetCookieStore_Params{
		inCookieStore,
	}
	header := bindings.MessageHeader{
		Type: networkService_GetCookieStore_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type networkService_CreateWebSocket_Params struct {
	inSocket web_socket.WebSocket_Request
}


func (s *networkService_CreateWebSocket_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inSocket.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateWebSocket_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *networkService_CreateWebSocket_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateWebSocket_Params_Versions), func(i int) bool {
		return networkService_CreateWebSocket_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateWebSocket_Params_Versions) {
		if networkService_CreateWebSocket_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateWebSocket_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inSocket = web_socket.WebSocket_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) CreateWebSocket(inSocket web_socket.WebSocket_Request) (err error) {
	payload := &networkService_CreateWebSocket_Params{
		inSocket,
	}
	header := bindings.MessageHeader{
		Type: networkService_CreateWebSocket_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type networkService_CreateTCPBoundSocket_Params struct {
	inLocalAddress *net_address.NetAddress
	inBoundSocket tcp_bound_socket.TcpBoundSocket_Request
}


func (s *networkService_CreateTCPBoundSocket_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.inLocalAddress == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.inLocalAddress).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.WriteHandle(s.inBoundSocket.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateTCPBoundSocket_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *networkService_CreateTCPBoundSocket_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateTCPBoundSocket_Params_Versions), func(i int) bool {
		return networkService_CreateTCPBoundSocket_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateTCPBoundSocket_Params_Versions) {
		if networkService_CreateTCPBoundSocket_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateTCPBoundSocket_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inLocalAddress = nil
		} else {
			s.inLocalAddress = new(net_address.NetAddress)
			if err := (*s.inLocalAddress).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inBoundSocket = tcp_bound_socket.TcpBoundSocket_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type networkService_CreateTCPBoundSocket_ResponseParams struct {
	outResult network_error.NetworkError
	outBoundTo *net_address.NetAddress
}


func (s *networkService_CreateTCPBoundSocket_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if s.outBoundTo == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.outBoundTo).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateTCPBoundSocket_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *networkService_CreateTCPBoundSocket_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateTCPBoundSocket_ResponseParams_Versions), func(i int) bool {
		return networkService_CreateTCPBoundSocket_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateTCPBoundSocket_ResponseParams_Versions) {
		if networkService_CreateTCPBoundSocket_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateTCPBoundSocket_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outBoundTo = nil
		} else {
			s.outBoundTo = new(net_address.NetAddress)
			if err := (*s.outBoundTo).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) CreateTcpBoundSocket(inLocalAddress *net_address.NetAddress, inBoundSocket tcp_bound_socket.TcpBoundSocket_Request) (outResult network_error.NetworkError, outBoundTo *net_address.NetAddress, err error) {
	payload := &networkService_CreateTCPBoundSocket_Params{
		inLocalAddress,
		inBoundSocket,
	}
	header := bindings.MessageHeader{
		Type: networkService_CreateTcpBoundSocket_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, networkService_CreateTcpBoundSocket_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response networkService_CreateTCPBoundSocket_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	outBoundTo = response.outBoundTo
	return
}

type networkService_CreateTCPConnectedSocket_Params struct {
	inRemoteAddress net_address.NetAddress
	inSendStream system.ConsumerHandle
	inReceiveStream system.ProducerHandle
	inClientSocket tcp_connected_socket.TcpConnectedSocket_Request
}


func (s *networkService_CreateTCPConnectedSocket_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inRemoteAddress.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inSendStream); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inReceiveStream); err != nil {
		return err
	}
	if err := encoder.WriteHandle(s.inClientSocket.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateTCPConnectedSocket_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *networkService_CreateTCPConnectedSocket_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateTCPConnectedSocket_Params_Versions), func(i int) bool {
		return networkService_CreateTCPConnectedSocket_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateTCPConnectedSocket_Params_Versions) {
		if networkService_CreateTCPConnectedSocket_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateTCPConnectedSocket_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inRemoteAddress.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadConsumerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.inSendStream = handle0
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadProducerHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			s.inReceiveStream = handle0
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inClientSocket = tcp_connected_socket.TcpConnectedSocket_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type networkService_CreateTCPConnectedSocket_ResponseParams struct {
	outResult network_error.NetworkError
	outLocalAddress *net_address.NetAddress
}


func (s *networkService_CreateTCPConnectedSocket_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if s.outLocalAddress == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.outLocalAddress).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateTCPConnectedSocket_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *networkService_CreateTCPConnectedSocket_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateTCPConnectedSocket_ResponseParams_Versions), func(i int) bool {
		return networkService_CreateTCPConnectedSocket_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateTCPConnectedSocket_ResponseParams_Versions) {
		if networkService_CreateTCPConnectedSocket_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateTCPConnectedSocket_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outLocalAddress = nil
		} else {
			s.outLocalAddress = new(net_address.NetAddress)
			if err := (*s.outLocalAddress).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) CreateTcpConnectedSocket(inRemoteAddress net_address.NetAddress, inSendStream system.ConsumerHandle, inReceiveStream system.ProducerHandle, inClientSocket tcp_connected_socket.TcpConnectedSocket_Request) (outResult network_error.NetworkError, outLocalAddress *net_address.NetAddress, err error) {
	payload := &networkService_CreateTCPConnectedSocket_Params{
		inRemoteAddress,
		inSendStream,
		inReceiveStream,
		inClientSocket,
	}
	header := bindings.MessageHeader{
		Type: networkService_CreateTcpConnectedSocket_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, networkService_CreateTcpConnectedSocket_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response networkService_CreateTCPConnectedSocket_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	outLocalAddress = response.outLocalAddress
	return
}

type networkService_CreateUDPSocket_Params struct {
	inSocket udp_socket.UdpSocket_Request
}


func (s *networkService_CreateUDPSocket_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inSocket.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateUDPSocket_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *networkService_CreateUDPSocket_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateUDPSocket_Params_Versions), func(i int) bool {
		return networkService_CreateUDPSocket_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateUDPSocket_Params_Versions) {
		if networkService_CreateUDPSocket_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateUDPSocket_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inSocket = udp_socket.UdpSocket_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) CreateUdpSocket(inSocket udp_socket.UdpSocket_Request) (err error) {
	payload := &networkService_CreateUDPSocket_Params{
		inSocket,
	}
	header := bindings.MessageHeader{
		Type: networkService_CreateUdpSocket_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type networkService_CreateHttpServer_Params struct {
	inLocalAddress net_address.NetAddress
	inDelegate http_server.HttpServerDelegate_Pointer
}


func (s *networkService_CreateHttpServer_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.inLocalAddress.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteInterface(s.inDelegate.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateHttpServer_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *networkService_CreateHttpServer_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateHttpServer_Params_Versions), func(i int) bool {
		return networkService_CreateHttpServer_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateHttpServer_Params_Versions) {
		if networkService_CreateHttpServer_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateHttpServer_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.inLocalAddress.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inDelegate = http_server.HttpServerDelegate_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type networkService_CreateHttpServer_ResponseParams struct {
	outResult network_error.NetworkError
	outBoundTo *net_address.NetAddress
}


func (s *networkService_CreateHttpServer_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if s.outBoundTo == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.outBoundTo).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateHttpServer_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *networkService_CreateHttpServer_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateHttpServer_ResponseParams_Versions), func(i int) bool {
		return networkService_CreateHttpServer_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateHttpServer_ResponseParams_Versions) {
		if networkService_CreateHttpServer_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateHttpServer_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outBoundTo = nil
		} else {
			s.outBoundTo = new(net_address.NetAddress)
			if err := (*s.outBoundTo).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) CreateHttpServer(inLocalAddress net_address.NetAddress, inDelegate http_server.HttpServerDelegate_Pointer) (outResult network_error.NetworkError, outBoundTo *net_address.NetAddress, err error) {
	payload := &networkService_CreateHttpServer_Params{
		inLocalAddress,
		inDelegate,
	}
	header := bindings.MessageHeader{
		Type: networkService_CreateHttpServer_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, networkService_CreateHttpServer_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response networkService_CreateHttpServer_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	outBoundTo = response.outBoundTo
	return
}

type networkService_RegisterURLLoaderInterceptor_Params struct {
	inFactory url_loader_interceptor.UrlLoaderInterceptorFactory_Pointer
}


func (s *networkService_RegisterURLLoaderInterceptor_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInterface(s.inFactory.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_RegisterURLLoaderInterceptor_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *networkService_RegisterURLLoaderInterceptor_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_RegisterURLLoaderInterceptor_Params_Versions), func(i int) bool {
		return networkService_RegisterURLLoaderInterceptor_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_RegisterURLLoaderInterceptor_Params_Versions) {
		if networkService_RegisterURLLoaderInterceptor_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_RegisterURLLoaderInterceptor_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inFactory = url_loader_interceptor.UrlLoaderInterceptorFactory_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) RegisterUrlLoaderInterceptor(inFactory url_loader_interceptor.UrlLoaderInterceptorFactory_Pointer) (err error) {
	payload := &networkService_RegisterURLLoaderInterceptor_Params{
		inFactory,
	}
	header := bindings.MessageHeader{
		Type: networkService_RegisterUrlLoaderInterceptor_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type networkService_CreateHostResolver_Params struct {
	inHostResolver host_resolver.HostResolver_Request
}


func (s *networkService_CreateHostResolver_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inHostResolver.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var networkService_CreateHostResolver_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *networkService_CreateHostResolver_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(networkService_CreateHostResolver_Params_Versions), func(i int) bool {
		return networkService_CreateHostResolver_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(networkService_CreateHostResolver_Params_Versions) {
		if networkService_CreateHostResolver_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := networkService_CreateHostResolver_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inHostResolver = host_resolver.HostResolver_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *NetworkService_Proxy) CreateHostResolver(inHostResolver host_resolver.HostResolver_Request) (err error) {
	payload := &networkService_CreateHostResolver_Params{
		inHostResolver,
	}
	header := bindings.MessageHeader{
		Type: networkService_CreateHostResolver_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type networkService_Stub struct {
	connector *bindings.Connector
	impl NetworkService
}

func NewNetworkServiceStub(r NetworkService_Request, impl NetworkService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &networkService_Stub{connector, impl})
}


func (f *NetworkService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &NetworkService_ServiceDescription{}
}


type NetworkService_ServiceDescription struct{}

func (sd *NetworkService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *NetworkService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *NetworkService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*NetworkService_ServiceDescription)(nil)


func (s *networkService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case networkService_CreateUrlLoader_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_CreateURLLoader_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateUrlLoader(request.inLoader)
		if err != nil {
			return
		}
	case networkService_GetCookieStore_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_GetCookieStore_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.GetCookieStore(request.inCookieStore)
		if err != nil {
			return
		}
	case networkService_CreateWebSocket_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_CreateWebSocket_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateWebSocket(request.inSocket)
		if err != nil {
			return
		}
	case networkService_CreateTcpBoundSocket_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_CreateTCPBoundSocket_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response networkService_CreateTCPBoundSocket_ResponseParams
		response.outResult, 		response.outBoundTo, err = s.impl.CreateTcpBoundSocket(request.inLocalAddress, request.inBoundSocket)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: networkService_CreateTcpBoundSocket_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case networkService_CreateTcpConnectedSocket_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_CreateTCPConnectedSocket_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response networkService_CreateTCPConnectedSocket_ResponseParams
		response.outResult, 		response.outLocalAddress, err = s.impl.CreateTcpConnectedSocket(request.inRemoteAddress, request.inSendStream, request.inReceiveStream, request.inClientSocket)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: networkService_CreateTcpConnectedSocket_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case networkService_CreateUdpSocket_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_CreateUDPSocket_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateUdpSocket(request.inSocket)
		if err != nil {
			return
		}
	case networkService_CreateHttpServer_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_CreateHttpServer_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response networkService_CreateHttpServer_ResponseParams
		response.outResult, 		response.outBoundTo, err = s.impl.CreateHttpServer(request.inLocalAddress, request.inDelegate)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: networkService_CreateHttpServer_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case networkService_RegisterUrlLoaderInterceptor_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_RegisterURLLoaderInterceptor_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.RegisterUrlLoaderInterceptor(request.inFactory)
		if err != nil {
			return
		}
	case networkService_CreateHostResolver_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request networkService_CreateHostResolver_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateHostResolver(request.inHostResolver)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

