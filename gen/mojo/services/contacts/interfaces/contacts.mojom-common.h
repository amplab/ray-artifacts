// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_CONTACTS_INTERFACES_CONTACTS_MOJOM_COMMON_H_
#define MOJO_SERVICES_CONTACTS_INTERFACES_CONTACTS_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/contacts/interfaces/contacts.mojom-internal.h"
namespace contacts {

// --- Interface Forward Declarations ---
class ContactsService;
class ContactsServiceRequestValidator;
class ContactsServiceResponseValidator;
class ContactsService_Synchronous;

// --- Struct Forward Declarations ---
class Contact;

using ContactPtr = mojo::InlinedStructPtr<Contact>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class ContactsService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ContactsServiceRequestValidator;
  using ResponseValidator_ = ContactsServiceResponseValidator;
  using Synchronous_ = ContactsService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetCount = 0,
    Get = 1,
    GetEmails = 2,
    GetPhoto = 3,
  };


  virtual ~ContactsService_Base() {}
};

}  // namespace internal

// Async interface declaration

class ContactsServiceProxy;
class ContactsServiceStub;
class ContactsService_Synchronous;

class ContactsServiceRequestValidator;
class ContactsServiceResponseValidator;

class ContactsService : public internal::ContactsService_Base {
 public:
  virtual ~ContactsService() override {}

  using Proxy_ = ContactsServiceProxy;
  using Stub_ = ContactsServiceStub;
  using GetCountCallback = mojo::Callback<void(uint64_t)>;
  virtual void GetCount(const mojo::String& filter, const GetCountCallback& callback) = 0;
  using GetCallback = mojo::Callback<void(mojo::Array<ContactPtr>)>;
  virtual void Get(const mojo::String& filter, uint32_t offset, uint32_t limit, const GetCallback& callback) = 0;
  using GetEmailsCallback = mojo::Callback<void(mojo::Array<mojo::String>)>;
  virtual void GetEmails(int64_t id, const GetEmailsCallback& callback) = 0;
  using GetPhotoCallback = mojo::Callback<void(mojo::String)>;
  virtual void GetPhoto(int64_t id, bool high_resolution, const GetPhotoCallback& callback) = 0;
};

}  // namespace contacts

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<contacts::ContactPtr, true, false> {
  using DataType = contacts::internal::Contact_Data*;
};

}  // internal
}  // mojo
namespace contacts {

// --- Interface Request Validators ---
class ContactsServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class ContactsServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class Contact {
 public:
  using Data_ = internal::Contact_Data;

  static ContactPtr New();

  template <typename U>
  static ContactPtr From(const U& u) {
    return mojo::TypeConverter<ContactPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Contact>::Convert(*this);
  }

  Contact();
  ~Contact();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactPtr Clone() const;
  bool Equals(const Contact& other) const;

  int64_t id;
  mojo::String name;
};



// --- Non-inlined structs ---

// --- Struct serialization helpers ---
size_t GetSerializedSize_(const Contact& input);
mojo::internal::ValidationError Serialize_(
    Contact* input,
    mojo::internal::Buffer* buffer,
    internal::Contact_Data** output);
void Deserialize_(internal::Contact_Data* input,
                  Contact* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class ContactsService_GetCount_Params;

using ContactsService_GetCount_ParamsPtr = mojo::InlinedStructPtr<ContactsService_GetCount_Params>;


size_t GetSerializedSize_(const ContactsService_GetCount_Params& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_GetCount_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_GetCount_Params_Data** output);
void Deserialize_(internal::ContactsService_GetCount_Params_Data* input,
                  ContactsService_GetCount_Params* output);

class ContactsService_GetCount_Params {
 public:
  using Data_ = internal::ContactsService_GetCount_Params_Data;

  static ContactsService_GetCount_ParamsPtr New();

  template <typename U>
  static ContactsService_GetCount_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_GetCount_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_GetCount_Params>::Convert(*this);
  }

  ContactsService_GetCount_Params();
  ~ContactsService_GetCount_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_GetCount_ParamsPtr Clone() const;
  bool Equals(const ContactsService_GetCount_Params& other) const;

  mojo::String filter;
};



class ContactsService_GetCount_ResponseParams;

using ContactsService_GetCount_ResponseParamsPtr = mojo::InlinedStructPtr<ContactsService_GetCount_ResponseParams>;


size_t GetSerializedSize_(const ContactsService_GetCount_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_GetCount_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_GetCount_ResponseParams_Data** output);
void Deserialize_(internal::ContactsService_GetCount_ResponseParams_Data* input,
                  ContactsService_GetCount_ResponseParams* output);

class ContactsService_GetCount_ResponseParams {
 public:
  using Data_ = internal::ContactsService_GetCount_ResponseParams_Data;

  static ContactsService_GetCount_ResponseParamsPtr New();

  template <typename U>
  static ContactsService_GetCount_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_GetCount_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_GetCount_ResponseParams>::Convert(*this);
  }

  ContactsService_GetCount_ResponseParams();
  ~ContactsService_GetCount_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_GetCount_ResponseParamsPtr Clone() const;
  bool Equals(const ContactsService_GetCount_ResponseParams& other) const;

  uint64_t count;
};



class ContactsService_Get_Params;

using ContactsService_Get_ParamsPtr = mojo::InlinedStructPtr<ContactsService_Get_Params>;


size_t GetSerializedSize_(const ContactsService_Get_Params& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_Get_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_Get_Params_Data** output);
void Deserialize_(internal::ContactsService_Get_Params_Data* input,
                  ContactsService_Get_Params* output);

class ContactsService_Get_Params {
 public:
  using Data_ = internal::ContactsService_Get_Params_Data;

  static ContactsService_Get_ParamsPtr New();

  template <typename U>
  static ContactsService_Get_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_Get_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_Get_Params>::Convert(*this);
  }

  ContactsService_Get_Params();
  ~ContactsService_Get_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_Get_ParamsPtr Clone() const;
  bool Equals(const ContactsService_Get_Params& other) const;

  mojo::String filter;
  uint32_t offset;
  uint32_t limit;
};



class ContactsService_Get_ResponseParams;

using ContactsService_Get_ResponseParamsPtr = mojo::StructPtr<ContactsService_Get_ResponseParams>;


size_t GetSerializedSize_(const ContactsService_Get_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_Get_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_Get_ResponseParams_Data** output);
void Deserialize_(internal::ContactsService_Get_ResponseParams_Data* input,
                  ContactsService_Get_ResponseParams* output);

class ContactsService_Get_ResponseParams {
 public:
  using Data_ = internal::ContactsService_Get_ResponseParams_Data;

  static ContactsService_Get_ResponseParamsPtr New();

  template <typename U>
  static ContactsService_Get_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_Get_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_Get_ResponseParams>::Convert(*this);
  }

  ContactsService_Get_ResponseParams();
  ~ContactsService_Get_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_Get_ResponseParamsPtr Clone() const;
  bool Equals(const ContactsService_Get_ResponseParams& other) const;

  mojo::Array<ContactPtr> contacts;
};



class ContactsService_GetEmails_Params;

using ContactsService_GetEmails_ParamsPtr = mojo::InlinedStructPtr<ContactsService_GetEmails_Params>;


size_t GetSerializedSize_(const ContactsService_GetEmails_Params& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_GetEmails_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_GetEmails_Params_Data** output);
void Deserialize_(internal::ContactsService_GetEmails_Params_Data* input,
                  ContactsService_GetEmails_Params* output);

class ContactsService_GetEmails_Params {
 public:
  using Data_ = internal::ContactsService_GetEmails_Params_Data;

  static ContactsService_GetEmails_ParamsPtr New();

  template <typename U>
  static ContactsService_GetEmails_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_GetEmails_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_GetEmails_Params>::Convert(*this);
  }

  ContactsService_GetEmails_Params();
  ~ContactsService_GetEmails_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_GetEmails_ParamsPtr Clone() const;
  bool Equals(const ContactsService_GetEmails_Params& other) const;

  int64_t id;
};



class ContactsService_GetEmails_ResponseParams;

using ContactsService_GetEmails_ResponseParamsPtr = mojo::StructPtr<ContactsService_GetEmails_ResponseParams>;


size_t GetSerializedSize_(const ContactsService_GetEmails_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_GetEmails_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_GetEmails_ResponseParams_Data** output);
void Deserialize_(internal::ContactsService_GetEmails_ResponseParams_Data* input,
                  ContactsService_GetEmails_ResponseParams* output);

class ContactsService_GetEmails_ResponseParams {
 public:
  using Data_ = internal::ContactsService_GetEmails_ResponseParams_Data;

  static ContactsService_GetEmails_ResponseParamsPtr New();

  template <typename U>
  static ContactsService_GetEmails_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_GetEmails_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_GetEmails_ResponseParams>::Convert(*this);
  }

  ContactsService_GetEmails_ResponseParams();
  ~ContactsService_GetEmails_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_GetEmails_ResponseParamsPtr Clone() const;
  bool Equals(const ContactsService_GetEmails_ResponseParams& other) const;

  mojo::Array<mojo::String> emails;
};



class ContactsService_GetPhoto_Params;

using ContactsService_GetPhoto_ParamsPtr = mojo::InlinedStructPtr<ContactsService_GetPhoto_Params>;


size_t GetSerializedSize_(const ContactsService_GetPhoto_Params& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_GetPhoto_Params* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_GetPhoto_Params_Data** output);
void Deserialize_(internal::ContactsService_GetPhoto_Params_Data* input,
                  ContactsService_GetPhoto_Params* output);

class ContactsService_GetPhoto_Params {
 public:
  using Data_ = internal::ContactsService_GetPhoto_Params_Data;

  static ContactsService_GetPhoto_ParamsPtr New();

  template <typename U>
  static ContactsService_GetPhoto_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_GetPhoto_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_GetPhoto_Params>::Convert(*this);
  }

  ContactsService_GetPhoto_Params();
  ~ContactsService_GetPhoto_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_GetPhoto_ParamsPtr Clone() const;
  bool Equals(const ContactsService_GetPhoto_Params& other) const;

  int64_t id;
  bool high_resolution;
};



class ContactsService_GetPhoto_ResponseParams;

using ContactsService_GetPhoto_ResponseParamsPtr = mojo::InlinedStructPtr<ContactsService_GetPhoto_ResponseParams>;


size_t GetSerializedSize_(const ContactsService_GetPhoto_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    ContactsService_GetPhoto_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::ContactsService_GetPhoto_ResponseParams_Data** output);
void Deserialize_(internal::ContactsService_GetPhoto_ResponseParams_Data* input,
                  ContactsService_GetPhoto_ResponseParams* output);

class ContactsService_GetPhoto_ResponseParams {
 public:
  using Data_ = internal::ContactsService_GetPhoto_ResponseParams_Data;

  static ContactsService_GetPhoto_ResponseParamsPtr New();

  template <typename U>
  static ContactsService_GetPhoto_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<ContactsService_GetPhoto_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ContactsService_GetPhoto_ResponseParams>::Convert(*this);
  }

  ContactsService_GetPhoto_ResponseParams();
  ~ContactsService_GetPhoto_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ContactsService_GetPhoto_ResponseParamsPtr Clone() const;
  bool Equals(const ContactsService_GetPhoto_ResponseParams& other) const;

  mojo::String photo_url;
};


}  // namespace contacts

#endif  // MOJO_SERVICES_CONTACTS_INTERFACES_CONTACTS_MOJOM_COMMON_H_
