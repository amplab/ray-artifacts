// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_SYNC_H_
#define MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/nfc/interfaces/nfc.mojom-internal.h"
#include "mojo/services/nfc/interfaces/nfc.mojom-common.h"


namespace nfc {

// --- Synchronous interface declaration ---

class NfcTransmission_SynchronousProxy;
class NfcTransmission_Synchronous
  : public internal::NfcTransmission_Base {
 public:
  virtual ~NfcTransmission_Synchronous() override {}
  
  using Proxy_ = NfcTransmission_SynchronousProxy;
  virtual bool Cancel(
      )const= 0;
};

class NfcTransmission_SynchronousProxy
    : public NfcTransmission_Synchronous {
 public:
  explicit NfcTransmission_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Cancel() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class NfcReceiver_SynchronousProxy;
class NfcReceiver_Synchronous
  : public internal::NfcReceiver_Base {
 public:
  virtual ~NfcReceiver_Synchronous() override {}
  
  using Proxy_ = NfcReceiver_SynchronousProxy;
  virtual bool OnReceivedNfcData(
      NfcDataPtr in_nfc_data)const= 0;
};

class NfcReceiver_SynchronousProxy
    : public NfcReceiver_Synchronous {
 public:
  explicit NfcReceiver_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool OnReceivedNfcData(NfcDataPtr in_nfc_data) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class Nfc_SynchronousProxy;
class Nfc_Synchronous
  : public internal::Nfc_Base {
 public:
  virtual ~Nfc_Synchronous() override {}
  
  using Proxy_ = Nfc_SynchronousProxy;
  virtual bool TransmitOnNextConnection(
      NfcDataPtr in_nfc_data, mojo::InterfaceRequest<NfcTransmission> in_transmission, bool* out_success)= 0;
  virtual bool Register(
      )const= 0;
  virtual bool Unregister(
      )const= 0;
};

class Nfc_SynchronousProxy
    : public Nfc_Synchronous {
 public:
  explicit Nfc_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool TransmitOnNextConnection(NfcDataPtr in_nfc_data, mojo::InterfaceRequest<NfcTransmission> in_transmission, bool* out_success) override;
  bool Register() const  override;
  bool Unregister() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace nfc

#endif  // MOJO_SERVICES_NFC_INTERFACES_NFC_MOJOM_SYNC_H_
