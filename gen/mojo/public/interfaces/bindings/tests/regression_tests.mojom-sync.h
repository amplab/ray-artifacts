// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_SYNC_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/regression_tests.mojom-common.h"


namespace regression_tests {

// --- Synchronous interface declaration ---

class CheckMethodWithEmptyResponse_SynchronousProxy;
class CheckMethodWithEmptyResponse_Synchronous
  : public internal::CheckMethodWithEmptyResponse_Base {
 public:
  virtual ~CheckMethodWithEmptyResponse_Synchronous() override {}
  
  using Proxy_ = CheckMethodWithEmptyResponse_SynchronousProxy;
  virtual bool WithoutParameterAndEmptyResponse(
      )= 0;
  virtual bool WithParameterAndEmptyResponse(
      bool in_b)= 0;
};

class CheckMethodWithEmptyResponse_SynchronousProxy
    : public CheckMethodWithEmptyResponse_Synchronous {
 public:
  explicit CheckMethodWithEmptyResponse_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool WithoutParameterAndEmptyResponse() override;
  bool WithParameterAndEmptyResponse(bool in_b) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class CheckNameCollision_SynchronousProxy;
class CheckNameCollision_Synchronous
  : public internal::CheckNameCollision_Base {
 public:
  virtual ~CheckNameCollision_Synchronous() override {}
  
  using Proxy_ = CheckNameCollision_SynchronousProxy;
  virtual bool WithNameCollision(
      bool in_message, bool in_response, bool* out_message, bool* out_response)= 0;
};

class CheckNameCollision_SynchronousProxy
    : public CheckNameCollision_Synchronous {
 public:
  explicit CheckNameCollision_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool WithNameCollision(bool in_message, bool in_response, bool* out_message, bool* out_response) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class CheckEnumCaps_SynchronousProxy;
class CheckEnumCaps_Synchronous
  : public internal::CheckEnumCaps_Base {
 public:
  virtual ~CheckEnumCaps_Synchronous() override {}
  
  using Proxy_ = CheckEnumCaps_SynchronousProxy;
  virtual bool SetEnumWithINTERNALAllCaps(
      EnumWithINTERNALAllCaps in_e)const= 0;
};

class CheckEnumCaps_SynchronousProxy
    : public CheckEnumCaps_Synchronous {
 public:
  explicit CheckEnumCaps_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool SetEnumWithINTERNALAllCaps(EnumWithINTERNALAllCaps in_e) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class TestInterface_SynchronousProxy;
class TestInterface_Synchronous
  : public internal::TestInterface_Base {
 public:
  virtual ~TestInterface_Synchronous() override {}
  
  using Proxy_ = TestInterface_SynchronousProxy;
  virtual bool SomeMessage(
      )const= 0;
};

class TestInterface_SynchronousProxy
    : public TestInterface_Synchronous {
 public:
  explicit TestInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool SomeMessage() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class Regression551_SynchronousProxy;
class Regression551_Synchronous
  : public internal::Regression551_Base {
 public:
  virtual ~Regression551_Synchronous() override {}
  
  using Proxy_ = Regression551_SynchronousProxy;
  virtual bool Get(
      mojo::Array<mojo::String> in_key_prefixes, int32_t* out_result)= 0;
};

class Regression551_SynchronousProxy
    : public Regression551_Synchronous {
 public:
  explicit Regression551_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Get(mojo::Array<mojo::String> in_key_prefixes, int32_t* out_result) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class ServiceName_SynchronousProxy;
class ServiceName_Synchronous
  : public internal::ServiceName_Base {
 public:
  virtual ~ServiceName_Synchronous() override {}
  
  using Proxy_ = ServiceName_SynchronousProxy;
  virtual bool serviceName(
      mojo::String* out_serviceName)= 0;
};

class ServiceName_SynchronousProxy
    : public ServiceName_Synchronous {
 public:
  explicit ServiceName_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool serviceName(mojo::String* out_serviceName) override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace regression_tests

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_REGRESSION_TESTS_MOJOM_SYNC_H_
