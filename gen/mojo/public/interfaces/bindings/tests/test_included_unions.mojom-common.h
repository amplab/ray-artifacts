// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_INCLUDED_UNIONS_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_INCLUDED_UNIONS_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/test_included_unions.mojom-internal.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---
class IncludedUnion;
typedef mojo::InlinedStructPtr<IncludedUnion> IncludedUnionPtr;

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
}  // namespace test
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {
namespace test {

// --- Interface Request Validators ---

// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.
class IncludedUnion {
 public:
  using Data_ = internal::IncludedUnion_Data;
  using Tag = Data_::IncludedUnion_Tag;

  static IncludedUnionPtr New();

  template <typename U>
  static IncludedUnionPtr From(const U& u) {
    return mojo::TypeConverter<IncludedUnionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IncludedUnion>::Convert(*this);
  }

  IncludedUnion();
  ~IncludedUnion();


  IncludedUnionPtr Clone() const;
  bool Equals(const IncludedUnion& other) const;

  Tag which() const {
    return tag_;
  }


  bool is_a() const;
  int8_t get_a() const;
  void set_a(int8_t a);
  bool has_unknown_tag() const;

 private:
  friend class mojo::internal::UnionAccessor<IncludedUnion>;
  union Union_ {
    Union_() {}
    ~Union_() {}

int8_t a;

  };
  void SwitchActive(Tag new_active);
  void SetActive(Tag new_active);
  void DestroyActive();
  Tag tag_;
  Union_ data_;
};


// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---
size_t GetSerializedSize_(const IncludedUnionPtr& input);
mojo::internal::ValidationError SerializeUnion_(
    IncludedUnion* input,
    mojo::internal::Buffer* buffer,
    internal::IncludedUnion_Data** output);
void Deserialize_(internal::IncludedUnion_Data* input,
                  IncludedUnion* output);


// --- Request and response parameter structs for Interface methods ---
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_INCLUDED_UNIONS_MOJOM_COMMON_H_
