// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/public/interfaces/bindings/tests/scoping.mojom
//

package scoping

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	ioutil "io/ioutil"
	base64 "encoding/base64"
	fmt "fmt"
	bytes "bytes"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	gzip "compress/gzip"
)

// This global variable contains a mojom_types.RuntimeTypeInfo struct
// describing the types defined in this file and all of its imports as
// well as the top-level interfaces defined in this file.
var runtimeTypeInfo__ = mojom_types.RuntimeTypeInfo{}

func getRuntimeTypeInfo() mojom_types.RuntimeTypeInfo {
  if runtimeTypeInfo__.TypeMap == nil {
    initRuntimeTypeInfo()
  }
  return runtimeTypeInfo__
}

func initRuntimeTypeInfo() {
  // serializedRuntimeTypeInfo contains the bytes of the Mojo serialization of
  // a mojom_types.RuntimeTypeInfo struct describing the Mojom types in this file.
  // The string contains the base64 encoding of the gzip-compressed bytes.
  serializedRuntimeTypeInfo := "H4sIAAAJbogC/+xUzU4CMRBe8AcEoxg5cPDAkQuUI/EEW4gmHvRgYjgZqFXXuCzuLgd9Ah/FR+IRfAttQyeps23WgytEmeTLZLabdr6vna/mLKKicltl/B1yEWX836vKdYENbR32PVX5SKAqcDm8GFyfDYbHfvAQtGIexa1eyrqbsk7lekedX1G5ofUp67fNr3VjZ1E3tP71eEd1F9XAr6Pyhwr8H4Q8LifQU/WhQFkAyZDQd1ugJHAlcC5A7gOfkynzg9CLX0g4em6yIOQkChmRe5HpbPzoMeJNYh7ejhiPyNib3HiTu4jIYyISsWAqypb820+cB/Wu6tfR1nPaO8C6zS28bbo5mm76fjhkH/LqTnjsmvQpCOQz1KeOdAGe7fz3+cloW/hVFUfJrxnyp5nowcQTIiue+H676H3L9S3DXDgZ3TvMy9jiO4WM5wLuPW+ZD+jPTfc31zQ/NY1rTtv/t/3ItfqRa9S9tPYj8CNq0qf8d/yIrv0oOS/M4kflFfEjmu5HdJX9iFr9iBp13/vnfgS69S3vcn9JfjR3fsaPDhTHvm5GS/CjouWea+h8+P4ZAAD//3h07l1oDQAA"

  // Deserialize RuntimeTypeInfo
  compressedBytes, err := base64.StdEncoding.DecodeString(serializedRuntimeTypeInfo)
  if err != nil {
    panic(fmt.Sprintf("Error while base64Decoding runtimeTypeInfo: %s", err.Error()))
  }
  reader, err := gzip.NewReader(bytes.NewBuffer(compressedBytes))
  if err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  uncompressedBytes, err := ioutil.ReadAll(reader)
  if err != nil {
     panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  if err = reader.Close(); err != nil {
    panic(fmt.Sprintf("Error while decompressing runtimeTypeInfo: %s", err.Error()))
  }
  decoder := bindings.NewDecoder(uncompressedBytes, nil)
  runtimeTypeInfo__.Decode(decoder)

}
func GetAllMojomTypeDefinitions() map[string]mojom_types.UserDefinedType {
  return getRuntimeTypeInfo().TypeMap
}

type A interface {
	GetB(inB B_Request) (err error)
}


// AMojomType returns the UserDefinedType that describes the Mojom
// type of A. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func AMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:mojo.test.A"]
}




type A_Request bindings.InterfaceRequest


// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*A_Request) MojomType() mojom_types.UserDefinedType {
	return AMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*A_Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


type A_Pointer bindings.InterfacePointer


type A_ServiceFactory struct{
	Delegate A_Factory
}

type A_Factory interface {
	Create(request A_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *A_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &A_ServiceDescription{}
}

func (f *A_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := A_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForA creates a message pipe for use with the
// A interface with a A_Request on one end and a A_Pointer on the other.
func CreateMessagePipeForA() (A_Request, A_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return A_Request(r), A_Pointer(p)
}

const a_GetB_Name uint32 = 0

type A_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewAProxy(p A_Pointer, waiter bindings.AsyncWaiter) *A_Proxy {
	return &A_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *A_Proxy) Close_Proxy() {
	p.router.Close()
}

type a_GetB_Params struct {
	inB B_Request
}


func (s *a_GetB_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inB.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var a_GetB_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *a_GetB_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(a_GetB_Params_Versions), func(i int) bool {
		return a_GetB_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(a_GetB_Params_Versions) {
		if a_GetB_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := a_GetB_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inB = B_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *A_Proxy) GetB(inB B_Request) (err error) {
	payload := &a_GetB_Params{
		inB,
	}
	header := bindings.MessageHeader{
		Type: a_GetB_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type a_Stub struct {
	connector *bindings.Connector
	impl A
}

func NewAStub(r A_Request, impl A, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &a_Stub{connector, impl})
}


func (f *A_Request) ServiceDescription() service_describer.ServiceDescription {
	return &A_ServiceDescription{}
}


type A_ServiceDescription struct{}

func (sd *A_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *A_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *A_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*A_ServiceDescription)(nil)


func (s *a_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case a_GetB_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request a_GetB_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.GetB(request.inB)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type B interface {
	GetC(inC C_Request) (err error)
}


// BMojomType returns the UserDefinedType that describes the Mojom
// type of B. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func BMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:mojo.test.B"]
}




type B_Request bindings.InterfaceRequest


// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*B_Request) MojomType() mojom_types.UserDefinedType {
	return BMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*B_Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


type B_Pointer bindings.InterfacePointer


type B_ServiceFactory struct{
	Delegate B_Factory
}

type B_Factory interface {
	Create(request B_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *B_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &B_ServiceDescription{}
}

func (f *B_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := B_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForB creates a message pipe for use with the
// B interface with a B_Request on one end and a B_Pointer on the other.
func CreateMessagePipeForB() (B_Request, B_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return B_Request(r), B_Pointer(p)
}

const b_GetC_Name uint32 = 0

type B_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewBProxy(p B_Pointer, waiter bindings.AsyncWaiter) *B_Proxy {
	return &B_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *B_Proxy) Close_Proxy() {
	p.router.Close()
}

type b_GetC_Params struct {
	inC C_Request
}


func (s *b_GetC_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteHandle(s.inC.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var b_GetC_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *b_GetC_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(b_GetC_Params_Versions), func(i int) bool {
		return b_GetC_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(b_GetC_Params_Versions) {
		if b_GetC_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := b_GetC_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inC = C_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *B_Proxy) GetC(inC C_Request) (err error) {
	payload := &b_GetC_Params{
		inC,
	}
	header := bindings.MessageHeader{
		Type: b_GetC_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type b_Stub struct {
	connector *bindings.Connector
	impl B
}

func NewBStub(r B_Request, impl B, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &b_Stub{connector, impl})
}


func (f *B_Request) ServiceDescription() service_describer.ServiceDescription {
	return &B_ServiceDescription{}
}


type B_ServiceDescription struct{}

func (sd *B_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *B_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *B_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*B_ServiceDescription)(nil)


func (s *b_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case b_GetC_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request b_GetC_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.GetC(request.inC)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type C interface {
	D() (err error)
}


// CMojomType returns the UserDefinedType that describes the Mojom
// type of C. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function GetAllMojomTypeDefinitions().
func CMojomType() mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()["TYPE_KEY:mojo.test.C"]
}




type C_Request bindings.InterfaceRequest


// MojomType returns the UserDefinedType that describes the Mojom
// type of this object. To obtain the UserDefinedType for Mojom types recursively
// contained in the returned UserDefinedType, look in the map returned
// by the function AllMojomTypes().
func (*C_Request) MojomType() mojom_types.UserDefinedType {
	return CMojomType()
}

// AllMojomTypes returns a map that contains the UserDefinedType for
// all Mojom types in the complete type graph of the Mojom type of this object.
func (*C_Request) AllMojomTypes() map[string]mojom_types.UserDefinedType {
	return GetAllMojomTypeDefinitions()
}


type C_Pointer bindings.InterfacePointer


type C_ServiceFactory struct{
	Delegate C_Factory
}

type C_Factory interface {
	Create(request C_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *C_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &C_ServiceDescription{}
}

func (f *C_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := C_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForC creates a message pipe for use with the
// C interface with a C_Request on one end and a C_Pointer on the other.
func CreateMessagePipeForC() (C_Request, C_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return C_Request(r), C_Pointer(p)
}

const c_D_Name uint32 = 0

type C_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewCProxy(p C_Pointer, waiter bindings.AsyncWaiter) *C_Proxy {
	return &C_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *C_Proxy) Close_Proxy() {
	p.router.Close()
}

type c_D_Params struct {
}


func (s *c_D_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var c_D_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *c_D_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(c_D_Params_Versions), func(i int) bool {
		return c_D_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(c_D_Params_Versions) {
		if c_D_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := c_D_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *C_Proxy) D() (err error) {
	payload := &c_D_Params{
	}
	header := bindings.MessageHeader{
		Type: c_D_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type c_Stub struct {
	connector *bindings.Connector
	impl C
}

func NewCStub(r C_Request, impl C, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &c_Stub{connector, impl})
}


func (f *C_Request) ServiceDescription() service_describer.ServiceDescription {
	return &C_ServiceDescription{}
}


type C_ServiceDescription struct{}

func (sd *C_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *C_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *C_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*C_ServiceDescription)(nil)


func (s *c_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case c_D_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request c_D_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.D()
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

