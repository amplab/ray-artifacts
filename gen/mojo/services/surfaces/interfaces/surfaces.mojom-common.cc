// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/surfaces/interfaces/surfaces.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// static
Mailbox_Data* Mailbox_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Mailbox_Data))) Mailbox_Data();
}

// static
mojo::internal::ValidationError Mailbox_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Mailbox_Data* object = static_cast<const Mailbox_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->name.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null name field in Mailbox struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->name.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams name_validate_params(
      64, false, nullptr);
  auto validate_retval =
      mojo::Array<int8_t>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->name.offset),
          bounds_checker, &name_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Mailbox_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->name, handles);
}

void Mailbox_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->name, handles);
}

Mailbox_Data::Mailbox_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
MailboxHolder_Data* MailboxHolder_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(MailboxHolder_Data))) MailboxHolder_Data();
}

// static
mojo::internal::ValidationError MailboxHolder_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const MailboxHolder_Data* object = static_cast<const MailboxHolder_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->mailbox.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null mailbox field in MailboxHolder struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->mailbox.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Mailbox::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->mailbox.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void MailboxHolder_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->mailbox, handles);
}

void MailboxHolder_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->mailbox, handles);
}

MailboxHolder_Data::MailboxHolder_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
TransferableResource_Data* TransferableResource_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(TransferableResource_Data))) TransferableResource_Data();
}

// static
mojo::internal::ValidationError TransferableResource_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const TransferableResource_Data* object = static_cast<const TransferableResource_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 40 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->size.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null size field in TransferableResource struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->size.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::Size::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->size.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->mailbox_holder.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null mailbox_holder field in TransferableResource struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->mailbox_holder.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = MailboxHolder::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->mailbox_holder.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void TransferableResource_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->size, handles);
  mojo::internal::Encode(&this->mailbox_holder, handles);
}

void TransferableResource_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->size, handles);
  mojo::internal::Decode(&this->mailbox_holder, handles);
}

TransferableResource_Data::TransferableResource_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
ReturnedResource_Data* ReturnedResource_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ReturnedResource_Data))) ReturnedResource_Data();
}

// static
mojo::internal::ValidationError ReturnedResource_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ReturnedResource_Data* object = static_cast<const ReturnedResource_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void ReturnedResource_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void ReturnedResource_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

ReturnedResource_Data::ReturnedResource_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Frame_Data* Frame_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Frame_Data))) Frame_Data();
}

// static
mojo::internal::ValidationError Frame_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Frame_Data* object = static_cast<const Frame_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->resources.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null resources field in Frame struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->resources.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams resources_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<TransferableResourcePtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->resources.offset),
          bounds_checker, &resources_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->passes.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null passes field in Frame struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->passes.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams passes_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<mojo::PassPtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->passes.offset),
          bounds_checker, &passes_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Frame_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->resources, handles);
  mojo::internal::Encode(&this->passes, handles);
}

void Frame_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->resources, handles);
  mojo::internal::Decode(&this->passes, handles);
}

Frame_Data::Frame_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
ResourceReturner_ReturnResources_Params_Data* ResourceReturner_ReturnResources_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(ResourceReturner_ReturnResources_Params_Data))) ResourceReturner_ReturnResources_Params_Data();
}

// static
mojo::internal::ValidationError ResourceReturner_ReturnResources_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const ResourceReturner_ReturnResources_Params_Data* object = static_cast<const ResourceReturner_ReturnResources_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->resources.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null resources field in ResourceReturner_ReturnResources_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->resources.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams resources_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::Array<ReturnedResourcePtr>::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->resources.offset),
          bounds_checker, &resources_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void ResourceReturner_ReturnResources_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->resources, handles);
}

void ResourceReturner_ReturnResources_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->resources, handles);
}

ResourceReturner_ReturnResources_Params_Data::ResourceReturner_ReturnResources_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Surface_GetIdNamespace_Params_Data* Surface_GetIdNamespace_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Surface_GetIdNamespace_Params_Data))) Surface_GetIdNamespace_Params_Data();
}

// static
mojo::internal::ValidationError Surface_GetIdNamespace_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Surface_GetIdNamespace_Params_Data* object = static_cast<const Surface_GetIdNamespace_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Surface_GetIdNamespace_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Surface_GetIdNamespace_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Surface_GetIdNamespace_Params_Data::Surface_GetIdNamespace_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Surface_GetIdNamespace_ResponseParams_Data* Surface_GetIdNamespace_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Surface_GetIdNamespace_ResponseParams_Data))) Surface_GetIdNamespace_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Surface_GetIdNamespace_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Surface_GetIdNamespace_ResponseParams_Data* object = static_cast<const Surface_GetIdNamespace_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Surface_GetIdNamespace_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Surface_GetIdNamespace_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Surface_GetIdNamespace_ResponseParams_Data::Surface_GetIdNamespace_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Surface_SetResourceReturner_Params_Data* Surface_SetResourceReturner_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Surface_SetResourceReturner_Params_Data))) Surface_SetResourceReturner_Params_Data();
}

// static
mojo::internal::ValidationError Surface_SetResourceReturner_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Surface_SetResourceReturner_Params_Data* object = static_cast<const Surface_SetResourceReturner_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle returner_handle = object->returner.handle;
  if (returner_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid returner field in Surface_SetResourceReturner_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(returner_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Surface_SetResourceReturner_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->returner, handles);
}

void Surface_SetResourceReturner_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->returner, handles);
}

Surface_SetResourceReturner_Params_Data::Surface_SetResourceReturner_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Surface_CreateSurface_Params_Data* Surface_CreateSurface_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Surface_CreateSurface_Params_Data))) Surface_CreateSurface_Params_Data();
}

// static
mojo::internal::ValidationError Surface_CreateSurface_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Surface_CreateSurface_Params_Data* object = static_cast<const Surface_CreateSurface_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Surface_CreateSurface_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Surface_CreateSurface_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Surface_CreateSurface_Params_Data::Surface_CreateSurface_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Surface_SubmitFrame_Params_Data* Surface_SubmitFrame_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Surface_SubmitFrame_Params_Data))) Surface_SubmitFrame_Params_Data();
}

// static
mojo::internal::ValidationError Surface_SubmitFrame_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Surface_SubmitFrame_Params_Data* object = static_cast<const Surface_SubmitFrame_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->frame.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null frame field in Surface_SubmitFrame_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->frame.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = Frame::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->frame.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Surface_SubmitFrame_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->frame, handles);
}

void Surface_SubmitFrame_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->frame, handles);
}

Surface_SubmitFrame_Params_Data::Surface_SubmitFrame_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Surface_SubmitFrame_ResponseParams_Data* Surface_SubmitFrame_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Surface_SubmitFrame_ResponseParams_Data))) Surface_SubmitFrame_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Surface_SubmitFrame_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Surface_SubmitFrame_ResponseParams_Data* object = static_cast<const Surface_SubmitFrame_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Surface_SubmitFrame_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Surface_SubmitFrame_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Surface_SubmitFrame_ResponseParams_Data::Surface_SubmitFrame_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Surface_DestroySurface_Params_Data* Surface_DestroySurface_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Surface_DestroySurface_Params_Data))) Surface_DestroySurface_Params_Data();
}

// static
mojo::internal::ValidationError Surface_DestroySurface_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Surface_DestroySurface_Params_Data* object = static_cast<const Surface_DestroySurface_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Surface_DestroySurface_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Surface_DestroySurface_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Surface_DestroySurface_Params_Data::Surface_DestroySurface_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError ResourceReturnerRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'ResourceReturner', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::ResourceReturner_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ResourceReturner_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ResourceReturner_Base::MessageOrdinals::ReturnResources: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'ResourceReturner', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::ResourceReturner_ReturnResources_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'ResourceReturner', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'ResourceReturner'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError SurfaceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'Surface', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::Surface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Surface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Surface_Base::MessageOrdinals::GetIdNamespace: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Surface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Surface_GetIdNamespace_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Surface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Surface_Base::MessageOrdinals::SetResourceReturner: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Surface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Surface_SetResourceReturner_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Surface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Surface_Base::MessageOrdinals::CreateSurface: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Surface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Surface_CreateSurface_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Surface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Surface_Base::MessageOrdinals::SubmitFrame: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Surface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Surface_SubmitFrame_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Surface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Surface_Base::MessageOrdinals::DestroySurface: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Surface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Surface_DestroySurface_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Surface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'Surface'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError SurfaceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'Surface', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Surface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::Surface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Surface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Surface_Base::MessageOrdinals::GetIdNamespace: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Surface_GetIdNamespace_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Surface',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Surface_Base::MessageOrdinals::SubmitFrame: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Surface_SubmitFrame_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Surface',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'Surface'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---
bool ResourceFormat_IsValidValue(ResourceFormat value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const ResourceFormat& val) {
  return (stream << static_cast<int32_t>(val));
}

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::ResourceReturner_Base::Version_;

// Constants

// Enums
const char internal::Surface_Base::Name_[] = "mojo::Surface";
const uint32_t internal::Surface_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// static
MailboxPtr Mailbox::New() {
  MailboxPtr rv;
  mojo::internal::StructHelper<Mailbox>::Initialize(&rv);
  return rv;
}

Mailbox::Mailbox()
    : name() {
}

Mailbox::~Mailbox() {
}


MailboxPtr Mailbox::Clone() const {
  MailboxPtr rv(New());
  rv->name = name.Clone();
  return rv;
}


bool Mailbox::Equals(const Mailbox& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<int8_t>>::Equals(this->name, other.name))
    return false;
  return true;
}


// static
MailboxHolderPtr MailboxHolder::New() {
  MailboxHolderPtr rv;
  mojo::internal::StructHelper<MailboxHolder>::Initialize(&rv);
  return rv;
}

MailboxHolder::MailboxHolder()
    : mailbox(),
      texture_target(),
      sync_point() {
}

MailboxHolder::~MailboxHolder() {
}


MailboxHolderPtr MailboxHolder::Clone() const {
  MailboxHolderPtr rv(New());
  rv->mailbox = mailbox.Clone();
  rv->texture_target = texture_target;
  rv->sync_point = sync_point;
  return rv;
}


bool MailboxHolder::Equals(const MailboxHolder& other) const {
  if (!mojo::internal::ValueTraits<MailboxPtr>::Equals(this->mailbox, other.mailbox))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->texture_target, other.texture_target))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->sync_point, other.sync_point))
    return false;
  return true;
}


// static
TransferableResourcePtr TransferableResource::New() {
  TransferableResourcePtr rv;
  mojo::internal::StructHelper<TransferableResource>::Initialize(&rv);
  return rv;
}

TransferableResource::TransferableResource()
    : id(),
      format(),
      filter(),
      size(),
      mailbox_holder(),
      is_repeated(),
      is_software() {
}

TransferableResource::~TransferableResource() {
}


TransferableResourcePtr TransferableResource::Clone() const {
  TransferableResourcePtr rv(New());
  rv->id = id;
  rv->format = format;
  rv->filter = filter;
  rv->size = size.Clone();
  rv->mailbox_holder = mailbox_holder.Clone();
  rv->is_repeated = is_repeated;
  rv->is_software = is_software;
  return rv;
}


bool TransferableResource::Equals(const TransferableResource& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->id, other.id))
    return false;
  if (!mojo::internal::ValueTraits<ResourceFormat>::Equals(this->format, other.format))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->filter, other.filter))
    return false;
  if (!mojo::internal::ValueTraits<mojo::SizePtr>::Equals(this->size, other.size))
    return false;
  if (!mojo::internal::ValueTraits<MailboxHolderPtr>::Equals(this->mailbox_holder, other.mailbox_holder))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->is_repeated, other.is_repeated))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->is_software, other.is_software))
    return false;
  return true;
}


// static
ReturnedResourcePtr ReturnedResource::New() {
  ReturnedResourcePtr rv;
  mojo::internal::StructHelper<ReturnedResource>::Initialize(&rv);
  return rv;
}

ReturnedResource::ReturnedResource()
    : id(),
      sync_point(),
      count(),
      lost() {
}

ReturnedResource::~ReturnedResource() {
}


ReturnedResourcePtr ReturnedResource::Clone() const {
  ReturnedResourcePtr rv(New());
  rv->id = id;
  rv->sync_point = sync_point;
  rv->count = count;
  rv->lost = lost;
  return rv;
}


bool ReturnedResource::Equals(const ReturnedResource& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->id, other.id))
    return false;
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->sync_point, other.sync_point))
    return false;
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->count, other.count))
    return false;
  if (!mojo::internal::ValueTraits<bool>::Equals(this->lost, other.lost))
    return false;
  return true;
}


// static
FramePtr Frame::New() {
  FramePtr rv;
  mojo::internal::StructHelper<Frame>::Initialize(&rv);
  return rv;
}

Frame::Frame()
    : resources(),
      passes() {
}

Frame::~Frame() {
}


FramePtr Frame::Clone() const {
  FramePtr rv(New());
  rv->resources = resources.Clone();
  rv->passes = passes.Clone();
  return rv;
}


bool Frame::Equals(const Frame& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<TransferableResourcePtr>>::Equals(this->resources, other.resources))
    return false;
  if (!mojo::internal::ValueTraits<mojo::Array<mojo::PassPtr>>::Equals(this->passes, other.passes))
    return false;
  return true;
}


// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

size_t Mailbox::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Mailbox::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Mailbox_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Mailbox::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Mailbox_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Mailbox::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Mailbox_Data* input =
      static_cast<internal::Mailbox_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Mailbox& input) {
  size_t size = sizeof(internal::Mailbox_Data);
  size += GetSerializedSize_(input.name);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Mailbox* input,
    mojo::internal::Buffer* buf,
    internal::Mailbox_Data** output) {
  if (input) {
    internal::Mailbox_Data* result =
        internal::Mailbox_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams name_validate_params(
        64, false, nullptr);auto retval =mojo::SerializeArray_(&input->name, buf, &result->name.ptr,
                            &name_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->name.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null name in Mailbox struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Mailbox_Data* input,
                  Mailbox* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->name.ptr, &result->name);
    } while (false);
  }
}


size_t MailboxHolder::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool MailboxHolder::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::MailboxHolder_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool MailboxHolder::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::MailboxHolder_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void MailboxHolder::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::MailboxHolder_Data* input =
      static_cast<internal::MailboxHolder_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const MailboxHolder& input) {
  size_t size = sizeof(internal::MailboxHolder_Data);
  size += input.mailbox.is_null()
              ? 0
              : GetSerializedSize_(*input.mailbox);
  return size;
}

mojo::internal::ValidationError Serialize_(
    MailboxHolder* input,
    mojo::internal::Buffer* buf,
    internal::MailboxHolder_Data** output) {
  if (input) {
    internal::MailboxHolder_Data* result =
        internal::MailboxHolder_Data::New(buf);
    {auto retval =Serialize_(input->mailbox.get(),
                 buf,
                 &result->mailbox.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->mailbox.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null mailbox in MailboxHolder struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->texture_target = input->texture_target;
    result->sync_point = input->sync_point;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::MailboxHolder_Data* input,
                  MailboxHolder* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->mailbox.ptr) {
        result->mailbox = Mailbox::New();
        Deserialize_(input->mailbox.ptr, result->mailbox.get());
      }
      result->texture_target = input->texture_target;
      result->sync_point = input->sync_point;
    } while (false);
  }
}


size_t TransferableResource::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool TransferableResource::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::TransferableResource_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool TransferableResource::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::TransferableResource_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void TransferableResource::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::TransferableResource_Data* input =
      static_cast<internal::TransferableResource_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const TransferableResource& input) {
  size_t size = sizeof(internal::TransferableResource_Data);
  size += input.size.is_null()
              ? 0
              : GetSerializedSize_(*input.size);
  size += input.mailbox_holder.is_null()
              ? 0
              : GetSerializedSize_(*input.mailbox_holder);
  return size;
}

mojo::internal::ValidationError Serialize_(
    TransferableResource* input,
    mojo::internal::Buffer* buf,
    internal::TransferableResource_Data** output) {
  if (input) {
    internal::TransferableResource_Data* result =
        internal::TransferableResource_Data::New(buf);
    result->id = input->id;
    result->format =
      static_cast<int32_t>(input->format);
    result->filter = input->filter;
    {auto retval =Serialize_(input->size.get(),
                 buf,
                 &result->size.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->size.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null size in TransferableResource struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->mailbox_holder.get(),
                 buf,
                 &result->mailbox_holder.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->mailbox_holder.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null mailbox_holder in TransferableResource struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->is_repeated = input->is_repeated;
    result->is_software = input->is_software;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::TransferableResource_Data* input,
                  TransferableResource* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id = input->id;
      result->format = static_cast<ResourceFormat>(input->format);
      result->filter = input->filter;
      if (input->size.ptr) {
        result->size = mojo::Size::New();
        Deserialize_(input->size.ptr, result->size.get());
      }
      if (input->mailbox_holder.ptr) {
        result->mailbox_holder = MailboxHolder::New();
        Deserialize_(input->mailbox_holder.ptr, result->mailbox_holder.get());
      }
      result->is_repeated = input->is_repeated;
      result->is_software = input->is_software;
    } while (false);
  }
}


size_t ReturnedResource::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ReturnedResource::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ReturnedResource_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ReturnedResource::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ReturnedResource_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ReturnedResource::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ReturnedResource_Data* input =
      static_cast<internal::ReturnedResource_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ReturnedResource& input) {
  size_t size = sizeof(internal::ReturnedResource_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ReturnedResource* input,
    mojo::internal::Buffer* buf,
    internal::ReturnedResource_Data** output) {
  if (input) {
    internal::ReturnedResource_Data* result =
        internal::ReturnedResource_Data::New(buf);
    result->id = input->id;
    result->sync_point = input->sync_point;
    result->count = input->count;
    result->lost = input->lost;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ReturnedResource_Data* input,
                  ReturnedResource* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id = input->id;
      result->sync_point = input->sync_point;
      result->count = input->count;
      result->lost = input->lost;
    } while (false);
  }
}


size_t Frame::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Frame::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Frame_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Frame::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Frame_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Frame::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Frame_Data* input =
      static_cast<internal::Frame_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Frame& input) {
  size_t size = sizeof(internal::Frame_Data);
  size += GetSerializedSize_(input.resources);
  size += GetSerializedSize_(input.passes);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Frame* input,
    mojo::internal::Buffer* buf,
    internal::Frame_Data** output) {
  if (input) {
    internal::Frame_Data* result =
        internal::Frame_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams resources_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->resources, buf, &result->resources.ptr,
                            &resources_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->resources.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null resources in Frame struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {
      const mojo::internal::ArrayValidateParams passes_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->passes, buf, &result->passes.ptr,
                            &passes_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->passes.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null passes in Frame struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Frame_Data* input,
                  Frame* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->resources.ptr, &result->resources);
      Deserialize_(input->passes.ptr, &result->passes);
    } while (false);
  }
}


// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
ResourceReturner_ReturnResources_ParamsPtr ResourceReturner_ReturnResources_Params::New() {
  ResourceReturner_ReturnResources_ParamsPtr rv;
  mojo::internal::StructHelper<ResourceReturner_ReturnResources_Params>::Initialize(&rv);
  return rv;
}

ResourceReturner_ReturnResources_Params::ResourceReturner_ReturnResources_Params()
    : resources() {
}

ResourceReturner_ReturnResources_Params::~ResourceReturner_ReturnResources_Params() {
}


ResourceReturner_ReturnResources_ParamsPtr ResourceReturner_ReturnResources_Params::Clone() const {
  ResourceReturner_ReturnResources_ParamsPtr rv(New());
  rv->resources = resources.Clone();
  return rv;
}


bool ResourceReturner_ReturnResources_Params::Equals(const ResourceReturner_ReturnResources_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::Array<ReturnedResourcePtr>>::Equals(this->resources, other.resources))
    return false;
  return true;
}


size_t ResourceReturner_ReturnResources_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool ResourceReturner_ReturnResources_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::ResourceReturner_ReturnResources_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool ResourceReturner_ReturnResources_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::ResourceReturner_ReturnResources_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void ResourceReturner_ReturnResources_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::ResourceReturner_ReturnResources_Params_Data* input =
      static_cast<internal::ResourceReturner_ReturnResources_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const ResourceReturner_ReturnResources_Params& input) {
  size_t size = sizeof(internal::ResourceReturner_ReturnResources_Params_Data);
  size += GetSerializedSize_(input.resources);
  return size;
}

mojo::internal::ValidationError Serialize_(
    ResourceReturner_ReturnResources_Params* input,
    mojo::internal::Buffer* buf,
    internal::ResourceReturner_ReturnResources_Params_Data** output) {
  if (input) {
    internal::ResourceReturner_ReturnResources_Params_Data* result =
        internal::ResourceReturner_ReturnResources_Params_Data::New(buf);
    {
      const mojo::internal::ArrayValidateParams resources_validate_params(
        0, false, nullptr);auto retval =mojo::SerializeArray_(&input->resources, buf, &result->resources.ptr,
                            &resources_validate_params);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->resources.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null resources in ResourceReturner_ReturnResources_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::ResourceReturner_ReturnResources_Params_Data* input,
                  ResourceReturner_ReturnResources_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->resources.ptr, &result->resources);
    } while (false);
  }
}



// static
Surface_GetIdNamespace_ParamsPtr Surface_GetIdNamespace_Params::New() {
  Surface_GetIdNamespace_ParamsPtr rv;
  mojo::internal::StructHelper<Surface_GetIdNamespace_Params>::Initialize(&rv);
  return rv;
}

Surface_GetIdNamespace_Params::Surface_GetIdNamespace_Params() {
}

Surface_GetIdNamespace_Params::~Surface_GetIdNamespace_Params() {
}


Surface_GetIdNamespace_ParamsPtr Surface_GetIdNamespace_Params::Clone() const {
  Surface_GetIdNamespace_ParamsPtr rv(New());
  return rv;
}


bool Surface_GetIdNamespace_Params::Equals(const Surface_GetIdNamespace_Params& other) const {
  return true;
}


size_t Surface_GetIdNamespace_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Surface_GetIdNamespace_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Surface_GetIdNamespace_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Surface_GetIdNamespace_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Surface_GetIdNamespace_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Surface_GetIdNamespace_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Surface_GetIdNamespace_Params_Data* input =
      static_cast<internal::Surface_GetIdNamespace_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Surface_GetIdNamespace_Params& input) {
  size_t size = sizeof(internal::Surface_GetIdNamespace_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Surface_GetIdNamespace_Params* input,
    mojo::internal::Buffer* buf,
    internal::Surface_GetIdNamespace_Params_Data** output) {
  if (input) {
    internal::Surface_GetIdNamespace_Params_Data* result =
        internal::Surface_GetIdNamespace_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Surface_GetIdNamespace_Params_Data* input,
                  Surface_GetIdNamespace_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
Surface_GetIdNamespace_ResponseParamsPtr Surface_GetIdNamespace_ResponseParams::New() {
  Surface_GetIdNamespace_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Surface_GetIdNamespace_ResponseParams>::Initialize(&rv);
  return rv;
}

Surface_GetIdNamespace_ResponseParams::Surface_GetIdNamespace_ResponseParams()
    : id_namespace() {
}

Surface_GetIdNamespace_ResponseParams::~Surface_GetIdNamespace_ResponseParams() {
}


Surface_GetIdNamespace_ResponseParamsPtr Surface_GetIdNamespace_ResponseParams::Clone() const {
  Surface_GetIdNamespace_ResponseParamsPtr rv(New());
  rv->id_namespace = id_namespace;
  return rv;
}


bool Surface_GetIdNamespace_ResponseParams::Equals(const Surface_GetIdNamespace_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->id_namespace, other.id_namespace))
    return false;
  return true;
}


size_t Surface_GetIdNamespace_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Surface_GetIdNamespace_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Surface_GetIdNamespace_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Surface_GetIdNamespace_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Surface_GetIdNamespace_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Surface_GetIdNamespace_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Surface_GetIdNamespace_ResponseParams_Data* input =
      static_cast<internal::Surface_GetIdNamespace_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Surface_GetIdNamespace_ResponseParams& input) {
  size_t size = sizeof(internal::Surface_GetIdNamespace_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Surface_GetIdNamespace_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Surface_GetIdNamespace_ResponseParams_Data** output) {
  if (input) {
    internal::Surface_GetIdNamespace_ResponseParams_Data* result =
        internal::Surface_GetIdNamespace_ResponseParams_Data::New(buf);
    result->id_namespace = input->id_namespace;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Surface_GetIdNamespace_ResponseParams_Data* input,
                  Surface_GetIdNamespace_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id_namespace = input->id_namespace;
    } while (false);
  }
}



// static
Surface_SetResourceReturner_ParamsPtr Surface_SetResourceReturner_Params::New() {
  Surface_SetResourceReturner_ParamsPtr rv;
  mojo::internal::StructHelper<Surface_SetResourceReturner_Params>::Initialize(&rv);
  return rv;
}

Surface_SetResourceReturner_Params::Surface_SetResourceReturner_Params()
    : returner() {
}

Surface_SetResourceReturner_Params::~Surface_SetResourceReturner_Params() {
}



bool Surface_SetResourceReturner_Params::Equals(const Surface_SetResourceReturner_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<ResourceReturner>>::Equals(this->returner, other.returner))
    return false;
  return true;
}


size_t Surface_SetResourceReturner_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Surface_SetResourceReturner_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Surface_SetResourceReturner_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Surface_SetResourceReturner_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Surface_SetResourceReturner_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Surface_SetResourceReturner_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Surface_SetResourceReturner_Params_Data* input =
      static_cast<internal::Surface_SetResourceReturner_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Surface_SetResourceReturner_Params& input) {
  size_t size = sizeof(internal::Surface_SetResourceReturner_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Surface_SetResourceReturner_Params* input,
    mojo::internal::Buffer* buf,
    internal::Surface_SetResourceReturner_Params_Data** output) {
  if (input) {
    internal::Surface_SetResourceReturner_Params_Data* result =
        internal::Surface_SetResourceReturner_Params_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->returner.Pass(),
                                          &result->returner);
    if (!result->returner.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid returner in Surface_SetResourceReturner_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Surface_SetResourceReturner_Params_Data* input,
                  Surface_SetResourceReturner_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->returner, &result->returner);
    } while (false);
  }
}



// static
Surface_CreateSurface_ParamsPtr Surface_CreateSurface_Params::New() {
  Surface_CreateSurface_ParamsPtr rv;
  mojo::internal::StructHelper<Surface_CreateSurface_Params>::Initialize(&rv);
  return rv;
}

Surface_CreateSurface_Params::Surface_CreateSurface_Params()
    : id_local() {
}

Surface_CreateSurface_Params::~Surface_CreateSurface_Params() {
}


Surface_CreateSurface_ParamsPtr Surface_CreateSurface_Params::Clone() const {
  Surface_CreateSurface_ParamsPtr rv(New());
  rv->id_local = id_local;
  return rv;
}


bool Surface_CreateSurface_Params::Equals(const Surface_CreateSurface_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->id_local, other.id_local))
    return false;
  return true;
}


size_t Surface_CreateSurface_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Surface_CreateSurface_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Surface_CreateSurface_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Surface_CreateSurface_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Surface_CreateSurface_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Surface_CreateSurface_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Surface_CreateSurface_Params_Data* input =
      static_cast<internal::Surface_CreateSurface_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Surface_CreateSurface_Params& input) {
  size_t size = sizeof(internal::Surface_CreateSurface_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Surface_CreateSurface_Params* input,
    mojo::internal::Buffer* buf,
    internal::Surface_CreateSurface_Params_Data** output) {
  if (input) {
    internal::Surface_CreateSurface_Params_Data* result =
        internal::Surface_CreateSurface_Params_Data::New(buf);
    result->id_local = input->id_local;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Surface_CreateSurface_Params_Data* input,
                  Surface_CreateSurface_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id_local = input->id_local;
    } while (false);
  }
}



// static
Surface_SubmitFrame_ParamsPtr Surface_SubmitFrame_Params::New() {
  Surface_SubmitFrame_ParamsPtr rv;
  mojo::internal::StructHelper<Surface_SubmitFrame_Params>::Initialize(&rv);
  return rv;
}

Surface_SubmitFrame_Params::Surface_SubmitFrame_Params()
    : id_local(),
      frame() {
}

Surface_SubmitFrame_Params::~Surface_SubmitFrame_Params() {
}


Surface_SubmitFrame_ParamsPtr Surface_SubmitFrame_Params::Clone() const {
  Surface_SubmitFrame_ParamsPtr rv(New());
  rv->id_local = id_local;
  rv->frame = frame.Clone();
  return rv;
}


bool Surface_SubmitFrame_Params::Equals(const Surface_SubmitFrame_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->id_local, other.id_local))
    return false;
  if (!mojo::internal::ValueTraits<FramePtr>::Equals(this->frame, other.frame))
    return false;
  return true;
}


size_t Surface_SubmitFrame_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Surface_SubmitFrame_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Surface_SubmitFrame_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Surface_SubmitFrame_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Surface_SubmitFrame_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Surface_SubmitFrame_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Surface_SubmitFrame_Params_Data* input =
      static_cast<internal::Surface_SubmitFrame_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Surface_SubmitFrame_Params& input) {
  size_t size = sizeof(internal::Surface_SubmitFrame_Params_Data);
  size += input.frame.is_null()
              ? 0
              : GetSerializedSize_(*input.frame);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Surface_SubmitFrame_Params* input,
    mojo::internal::Buffer* buf,
    internal::Surface_SubmitFrame_Params_Data** output) {
  if (input) {
    internal::Surface_SubmitFrame_Params_Data* result =
        internal::Surface_SubmitFrame_Params_Data::New(buf);
    result->id_local = input->id_local;
    {auto retval =Serialize_(input->frame.get(),
                 buf,
                 &result->frame.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->frame.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null frame in Surface_SubmitFrame_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Surface_SubmitFrame_Params_Data* input,
                  Surface_SubmitFrame_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id_local = input->id_local;
      if (input->frame.ptr) {
        result->frame = Frame::New();
        Deserialize_(input->frame.ptr, result->frame.get());
      }
    } while (false);
  }
}


// static
Surface_SubmitFrame_ResponseParamsPtr Surface_SubmitFrame_ResponseParams::New() {
  Surface_SubmitFrame_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Surface_SubmitFrame_ResponseParams>::Initialize(&rv);
  return rv;
}

Surface_SubmitFrame_ResponseParams::Surface_SubmitFrame_ResponseParams() {
}

Surface_SubmitFrame_ResponseParams::~Surface_SubmitFrame_ResponseParams() {
}


Surface_SubmitFrame_ResponseParamsPtr Surface_SubmitFrame_ResponseParams::Clone() const {
  Surface_SubmitFrame_ResponseParamsPtr rv(New());
  return rv;
}


bool Surface_SubmitFrame_ResponseParams::Equals(const Surface_SubmitFrame_ResponseParams& other) const {
  return true;
}


size_t Surface_SubmitFrame_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Surface_SubmitFrame_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Surface_SubmitFrame_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Surface_SubmitFrame_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Surface_SubmitFrame_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Surface_SubmitFrame_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Surface_SubmitFrame_ResponseParams_Data* input =
      static_cast<internal::Surface_SubmitFrame_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Surface_SubmitFrame_ResponseParams& input) {
  size_t size = sizeof(internal::Surface_SubmitFrame_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Surface_SubmitFrame_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Surface_SubmitFrame_ResponseParams_Data** output) {
  if (input) {
    internal::Surface_SubmitFrame_ResponseParams_Data* result =
        internal::Surface_SubmitFrame_ResponseParams_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Surface_SubmitFrame_ResponseParams_Data* input,
                  Surface_SubmitFrame_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
Surface_DestroySurface_ParamsPtr Surface_DestroySurface_Params::New() {
  Surface_DestroySurface_ParamsPtr rv;
  mojo::internal::StructHelper<Surface_DestroySurface_Params>::Initialize(&rv);
  return rv;
}

Surface_DestroySurface_Params::Surface_DestroySurface_Params()
    : id_local() {
}

Surface_DestroySurface_Params::~Surface_DestroySurface_Params() {
}


Surface_DestroySurface_ParamsPtr Surface_DestroySurface_Params::Clone() const {
  Surface_DestroySurface_ParamsPtr rv(New());
  rv->id_local = id_local;
  return rv;
}


bool Surface_DestroySurface_Params::Equals(const Surface_DestroySurface_Params& other) const {
  if (!mojo::internal::ValueTraits<uint32_t>::Equals(this->id_local, other.id_local))
    return false;
  return true;
}


size_t Surface_DestroySurface_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Surface_DestroySurface_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Surface_DestroySurface_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Surface_DestroySurface_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Surface_DestroySurface_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Surface_DestroySurface_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Surface_DestroySurface_Params_Data* input =
      static_cast<internal::Surface_DestroySurface_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Surface_DestroySurface_Params& input) {
  size_t size = sizeof(internal::Surface_DestroySurface_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Surface_DestroySurface_Params* input,
    mojo::internal::Buffer* buf,
    internal::Surface_DestroySurface_Params_Data** output) {
  if (input) {
    internal::Surface_DestroySurface_Params_Data* result =
        internal::Surface_DestroySurface_Params_Data::New(buf);
    result->id_local = input->id_local;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Surface_DestroySurface_Params_Data* input,
                  Surface_DestroySurface_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->id_local = input->id_local;
    } while (false);
  }
}

}  // namespace mojo
