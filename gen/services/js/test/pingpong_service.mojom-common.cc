// NOTE: This file was generated by the Mojo bindings generator.
#include "services/js/test/pingpong_service.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace js {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
PingPongService_SetClient_Params_Data* PingPongService_SetClient_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_SetClient_Params_Data))) PingPongService_SetClient_Params_Data();
}

// static
mojo::internal::ValidationError PingPongService_SetClient_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_SetClient_Params_Data* object = static_cast<const PingPongService_SetClient_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle client_handle = object->client.handle;
  if (client_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid client field in PingPongService_SetClient_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(client_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_SetClient_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->client, handles);
}

void PingPongService_SetClient_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->client, handles);
}

PingPongService_SetClient_Params_Data::PingPongService_SetClient_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PingPongService_Ping_Params_Data* PingPongService_Ping_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_Ping_Params_Data))) PingPongService_Ping_Params_Data();
}

// static
mojo::internal::ValidationError PingPongService_Ping_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_Ping_Params_Data* object = static_cast<const PingPongService_Ping_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_Ping_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PingPongService_Ping_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PingPongService_Ping_Params_Data::PingPongService_Ping_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PingPongService_PingTargetURL_Params_Data* PingPongService_PingTargetURL_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_PingTargetURL_Params_Data))) PingPongService_PingTargetURL_Params_Data();
}

// static
mojo::internal::ValidationError PingPongService_PingTargetURL_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_PingTargetURL_Params_Data* object = static_cast<const PingPongService_PingTargetURL_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->url.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null url field in PingPongService_PingTargetURL_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->url.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams url_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->url.offset),
          bounds_checker, &url_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_PingTargetURL_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->url, handles);
}

void PingPongService_PingTargetURL_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->url, handles);
}

PingPongService_PingTargetURL_Params_Data::PingPongService_PingTargetURL_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PingPongService_PingTargetURL_ResponseParams_Data* PingPongService_PingTargetURL_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_PingTargetURL_ResponseParams_Data))) PingPongService_PingTargetURL_ResponseParams_Data();
}

// static
mojo::internal::ValidationError PingPongService_PingTargetURL_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_PingTargetURL_ResponseParams_Data* object = static_cast<const PingPongService_PingTargetURL_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_PingTargetURL_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PingPongService_PingTargetURL_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PingPongService_PingTargetURL_ResponseParams_Data::PingPongService_PingTargetURL_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PingPongService_PingTargetService_Params_Data* PingPongService_PingTargetService_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_PingTargetService_Params_Data))) PingPongService_PingTargetService_Params_Data();
}

// static
mojo::internal::ValidationError PingPongService_PingTargetService_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_PingTargetService_Params_Data* object = static_cast<const PingPongService_PingTargetService_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle service_handle = object->service.handle;
  if (service_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid service field in PingPongService_PingTargetService_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(service_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_PingTargetService_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->service, handles);
}

void PingPongService_PingTargetService_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->service, handles);
}

PingPongService_PingTargetService_Params_Data::PingPongService_PingTargetService_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
PingPongService_PingTargetService_ResponseParams_Data* PingPongService_PingTargetService_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_PingTargetService_ResponseParams_Data))) PingPongService_PingTargetService_ResponseParams_Data();
}

// static
mojo::internal::ValidationError PingPongService_PingTargetService_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_PingTargetService_ResponseParams_Data* object = static_cast<const PingPongService_PingTargetService_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_PingTargetService_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PingPongService_PingTargetService_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PingPongService_PingTargetService_ResponseParams_Data::PingPongService_PingTargetService_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PingPongService_GetPingPongService_Params_Data* PingPongService_GetPingPongService_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_GetPingPongService_Params_Data))) PingPongService_GetPingPongService_Params_Data();
}

// static
mojo::internal::ValidationError PingPongService_GetPingPongService_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_GetPingPongService_Params_Data* object = static_cast<const PingPongService_GetPingPongService_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle service_handle = object->service;
  if (service_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid service field in PingPongService_GetPingPongService_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(service_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_GetPingPongService_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->service, handles);
}

void PingPongService_GetPingPongService_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->service, handles);
}

PingPongService_GetPingPongService_Params_Data::PingPongService_GetPingPongService_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PingPongService_Quit_Params_Data* PingPongService_Quit_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongService_Quit_Params_Data))) PingPongService_Quit_Params_Data();
}

// static
mojo::internal::ValidationError PingPongService_Quit_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongService_Quit_Params_Data* object = static_cast<const PingPongService_Quit_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongService_Quit_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PingPongService_Quit_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PingPongService_Quit_Params_Data::PingPongService_Quit_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
PingPongClient_Pong_Params_Data* PingPongClient_Pong_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(PingPongClient_Pong_Params_Data))) PingPongClient_Pong_Params_Data();
}

// static
mojo::internal::ValidationError PingPongClient_Pong_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const PingPongClient_Pong_Params_Data* object = static_cast<const PingPongClient_Pong_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void PingPongClient_Pong_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void PingPongClient_Pong_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

PingPongClient_Pong_Params_Data::PingPongClient_Pong_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError PingPongServiceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'PingPongService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::PingPongService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PingPongService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PingPongService_Base::MessageOrdinals::SetClient: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PingPongService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PingPongService_SetClient_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PingPongService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PingPongService_Base::MessageOrdinals::Ping: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PingPongService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PingPongService_Ping_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PingPongService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PingPongService_Base::MessageOrdinals::PingTargetURL: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PingPongService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PingPongService_PingTargetURL_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PingPongService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PingPongService_Base::MessageOrdinals::PingTargetService: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PingPongService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PingPongService_PingTargetService_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PingPongService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PingPongService_Base::MessageOrdinals::GetPingPongService: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PingPongService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PingPongService_GetPingPongService_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PingPongService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PingPongService_Base::MessageOrdinals::Quit: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PingPongService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PingPongService_Quit_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PingPongService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'PingPongService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError PingPongServiceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'PingPongService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PingPongService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::PingPongService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PingPongService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PingPongService_Base::MessageOrdinals::PingTargetURL: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::PingPongService_PingTargetURL_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PingPongService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::PingPongService_Base::MessageOrdinals::PingTargetService: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::PingPongService_PingTargetService_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'PingPongService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'PingPongService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError PingPongClientRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'PingPongClient', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::PingPongClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::PingPongClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::PingPongClient_Base::MessageOrdinals::Pong: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'PingPongClient', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::PingPongClient_Pong_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'PingPongClient', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'PingPongClient'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::PingPongService_Base::Name_[] = "js::PingPongService";
const uint32_t internal::PingPongService_Base::Version_;

// Constants

// Enums
const uint32_t internal::PingPongClient_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
PingPongService_SetClient_ParamsPtr PingPongService_SetClient_Params::New() {
  PingPongService_SetClient_ParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_SetClient_Params>::Initialize(&rv);
  return rv;
}

PingPongService_SetClient_Params::PingPongService_SetClient_Params()
    : client() {
}

PingPongService_SetClient_Params::~PingPongService_SetClient_Params() {
}



bool PingPongService_SetClient_Params::Equals(const PingPongService_SetClient_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<PingPongClient>>::Equals(this->client, other.client))
    return false;
  return true;
}


size_t PingPongService_SetClient_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_SetClient_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_SetClient_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_SetClient_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_SetClient_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_SetClient_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_SetClient_Params_Data* input =
      static_cast<internal::PingPongService_SetClient_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_SetClient_Params& input) {
  size_t size = sizeof(internal::PingPongService_SetClient_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_SetClient_Params* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_SetClient_Params_Data** output) {
  if (input) {
    internal::PingPongService_SetClient_Params_Data* result =
        internal::PingPongService_SetClient_Params_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->client.Pass(),
                                          &result->client);
    if (!result->client.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client in PingPongService_SetClient_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_SetClient_Params_Data* input,
                  PingPongService_SetClient_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->client, &result->client);
    } while (false);
  }
}



// static
PingPongService_Ping_ParamsPtr PingPongService_Ping_Params::New() {
  PingPongService_Ping_ParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_Ping_Params>::Initialize(&rv);
  return rv;
}

PingPongService_Ping_Params::PingPongService_Ping_Params()
    : ping_value() {
}

PingPongService_Ping_Params::~PingPongService_Ping_Params() {
}


PingPongService_Ping_ParamsPtr PingPongService_Ping_Params::Clone() const {
  PingPongService_Ping_ParamsPtr rv(New());
  rv->ping_value = ping_value;
  return rv;
}


bool PingPongService_Ping_Params::Equals(const PingPongService_Ping_Params& other) const {
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->ping_value, other.ping_value))
    return false;
  return true;
}


size_t PingPongService_Ping_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_Ping_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_Ping_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_Ping_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_Ping_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_Ping_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_Ping_Params_Data* input =
      static_cast<internal::PingPongService_Ping_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_Ping_Params& input) {
  size_t size = sizeof(internal::PingPongService_Ping_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_Ping_Params* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_Ping_Params_Data** output) {
  if (input) {
    internal::PingPongService_Ping_Params_Data* result =
        internal::PingPongService_Ping_Params_Data::New(buf);
    result->ping_value = input->ping_value;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_Ping_Params_Data* input,
                  PingPongService_Ping_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->ping_value = input->ping_value;
    } while (false);
  }
}



// static
PingPongService_PingTargetURL_ParamsPtr PingPongService_PingTargetURL_Params::New() {
  PingPongService_PingTargetURL_ParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_PingTargetURL_Params>::Initialize(&rv);
  return rv;
}

PingPongService_PingTargetURL_Params::PingPongService_PingTargetURL_Params()
    : url(),
      count() {
}

PingPongService_PingTargetURL_Params::~PingPongService_PingTargetURL_Params() {
}


PingPongService_PingTargetURL_ParamsPtr PingPongService_PingTargetURL_Params::Clone() const {
  PingPongService_PingTargetURL_ParamsPtr rv(New());
  rv->url = url;
  rv->count = count;
  return rv;
}


bool PingPongService_PingTargetURL_Params::Equals(const PingPongService_PingTargetURL_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->url, other.url))
    return false;
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->count, other.count))
    return false;
  return true;
}


size_t PingPongService_PingTargetURL_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_PingTargetURL_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_PingTargetURL_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_PingTargetURL_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_PingTargetURL_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_PingTargetURL_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_PingTargetURL_Params_Data* input =
      static_cast<internal::PingPongService_PingTargetURL_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_PingTargetURL_Params& input) {
  size_t size = sizeof(internal::PingPongService_PingTargetURL_Params_Data);
  size += GetSerializedSize_(input.url);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetURL_Params* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_PingTargetURL_Params_Data** output) {
  if (input) {
    internal::PingPongService_PingTargetURL_Params_Data* result =
        internal::PingPongService_PingTargetURL_Params_Data::New(buf);
    SerializeString_(input->url, buf, &result->url.ptr);
    if (!result->url.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in PingPongService_PingTargetURL_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->count = input->count;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_PingTargetURL_Params_Data* input,
                  PingPongService_PingTargetURL_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->url.ptr, &result->url);
      result->count = input->count;
    } while (false);
  }
}


// static
PingPongService_PingTargetURL_ResponseParamsPtr PingPongService_PingTargetURL_ResponseParams::New() {
  PingPongService_PingTargetURL_ResponseParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_PingTargetURL_ResponseParams>::Initialize(&rv);
  return rv;
}

PingPongService_PingTargetURL_ResponseParams::PingPongService_PingTargetURL_ResponseParams()
    : ok() {
}

PingPongService_PingTargetURL_ResponseParams::~PingPongService_PingTargetURL_ResponseParams() {
}


PingPongService_PingTargetURL_ResponseParamsPtr PingPongService_PingTargetURL_ResponseParams::Clone() const {
  PingPongService_PingTargetURL_ResponseParamsPtr rv(New());
  rv->ok = ok;
  return rv;
}


bool PingPongService_PingTargetURL_ResponseParams::Equals(const PingPongService_PingTargetURL_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->ok, other.ok))
    return false;
  return true;
}


size_t PingPongService_PingTargetURL_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_PingTargetURL_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_PingTargetURL_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_PingTargetURL_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_PingTargetURL_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_PingTargetURL_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_PingTargetURL_ResponseParams_Data* input =
      static_cast<internal::PingPongService_PingTargetURL_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_PingTargetURL_ResponseParams& input) {
  size_t size = sizeof(internal::PingPongService_PingTargetURL_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetURL_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_PingTargetURL_ResponseParams_Data** output) {
  if (input) {
    internal::PingPongService_PingTargetURL_ResponseParams_Data* result =
        internal::PingPongService_PingTargetURL_ResponseParams_Data::New(buf);
    result->ok = input->ok;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_PingTargetURL_ResponseParams_Data* input,
                  PingPongService_PingTargetURL_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->ok = input->ok;
    } while (false);
  }
}



// static
PingPongService_PingTargetService_ParamsPtr PingPongService_PingTargetService_Params::New() {
  PingPongService_PingTargetService_ParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_PingTargetService_Params>::Initialize(&rv);
  return rv;
}

PingPongService_PingTargetService_Params::PingPongService_PingTargetService_Params()
    : service(),
      count() {
}

PingPongService_PingTargetService_Params::~PingPongService_PingTargetService_Params() {
}



bool PingPongService_PingTargetService_Params::Equals(const PingPongService_PingTargetService_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<PingPongService>>::Equals(this->service, other.service))
    return false;
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->count, other.count))
    return false;
  return true;
}


size_t PingPongService_PingTargetService_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_PingTargetService_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_PingTargetService_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_PingTargetService_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_PingTargetService_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_PingTargetService_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_PingTargetService_Params_Data* input =
      static_cast<internal::PingPongService_PingTargetService_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_PingTargetService_Params& input) {
  size_t size = sizeof(internal::PingPongService_PingTargetService_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetService_Params* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_PingTargetService_Params_Data** output) {
  if (input) {
    internal::PingPongService_PingTargetService_Params_Data* result =
        internal::PingPongService_PingTargetService_Params_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->service.Pass(),
                                          &result->service);
    if (!result->service.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid service in PingPongService_PingTargetService_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->count = input->count;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_PingTargetService_Params_Data* input,
                  PingPongService_PingTargetService_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->service, &result->service);
      result->count = input->count;
    } while (false);
  }
}


// static
PingPongService_PingTargetService_ResponseParamsPtr PingPongService_PingTargetService_ResponseParams::New() {
  PingPongService_PingTargetService_ResponseParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_PingTargetService_ResponseParams>::Initialize(&rv);
  return rv;
}

PingPongService_PingTargetService_ResponseParams::PingPongService_PingTargetService_ResponseParams()
    : ok() {
}

PingPongService_PingTargetService_ResponseParams::~PingPongService_PingTargetService_ResponseParams() {
}


PingPongService_PingTargetService_ResponseParamsPtr PingPongService_PingTargetService_ResponseParams::Clone() const {
  PingPongService_PingTargetService_ResponseParamsPtr rv(New());
  rv->ok = ok;
  return rv;
}


bool PingPongService_PingTargetService_ResponseParams::Equals(const PingPongService_PingTargetService_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<bool>::Equals(this->ok, other.ok))
    return false;
  return true;
}


size_t PingPongService_PingTargetService_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_PingTargetService_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_PingTargetService_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_PingTargetService_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_PingTargetService_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_PingTargetService_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_PingTargetService_ResponseParams_Data* input =
      static_cast<internal::PingPongService_PingTargetService_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_PingTargetService_ResponseParams& input) {
  size_t size = sizeof(internal::PingPongService_PingTargetService_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_PingTargetService_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_PingTargetService_ResponseParams_Data** output) {
  if (input) {
    internal::PingPongService_PingTargetService_ResponseParams_Data* result =
        internal::PingPongService_PingTargetService_ResponseParams_Data::New(buf);
    result->ok = input->ok;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_PingTargetService_ResponseParams_Data* input,
                  PingPongService_PingTargetService_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->ok = input->ok;
    } while (false);
  }
}



// static
PingPongService_GetPingPongService_ParamsPtr PingPongService_GetPingPongService_Params::New() {
  PingPongService_GetPingPongService_ParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_GetPingPongService_Params>::Initialize(&rv);
  return rv;
}

PingPongService_GetPingPongService_Params::PingPongService_GetPingPongService_Params()
    : service() {
}

PingPongService_GetPingPongService_Params::~PingPongService_GetPingPongService_Params() {
}



bool PingPongService_GetPingPongService_Params::Equals(const PingPongService_GetPingPongService_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<PingPongService>>::Equals(this->service, other.service))
    return false;
  return true;
}


size_t PingPongService_GetPingPongService_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_GetPingPongService_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_GetPingPongService_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_GetPingPongService_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_GetPingPongService_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_GetPingPongService_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_GetPingPongService_Params_Data* input =
      static_cast<internal::PingPongService_GetPingPongService_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_GetPingPongService_Params& input) {
  size_t size = sizeof(internal::PingPongService_GetPingPongService_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_GetPingPongService_Params* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_GetPingPongService_Params_Data** output) {
  if (input) {
    internal::PingPongService_GetPingPongService_Params_Data* result =
        internal::PingPongService_GetPingPongService_Params_Data::New(buf);
    result->service = input->service.PassMessagePipe().release();
    if (!result->service.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid service in PingPongService_GetPingPongService_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_GetPingPongService_Params_Data* input,
                  PingPongService_GetPingPongService_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->service.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->service)));
    } while (false);
  }
}



// static
PingPongService_Quit_ParamsPtr PingPongService_Quit_Params::New() {
  PingPongService_Quit_ParamsPtr rv;
  mojo::internal::StructHelper<PingPongService_Quit_Params>::Initialize(&rv);
  return rv;
}

PingPongService_Quit_Params::PingPongService_Quit_Params() {
}

PingPongService_Quit_Params::~PingPongService_Quit_Params() {
}


PingPongService_Quit_ParamsPtr PingPongService_Quit_Params::Clone() const {
  PingPongService_Quit_ParamsPtr rv(New());
  return rv;
}


bool PingPongService_Quit_Params::Equals(const PingPongService_Quit_Params& other) const {
  return true;
}


size_t PingPongService_Quit_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongService_Quit_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongService_Quit_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongService_Quit_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongService_Quit_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongService_Quit_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongService_Quit_Params_Data* input =
      static_cast<internal::PingPongService_Quit_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongService_Quit_Params& input) {
  size_t size = sizeof(internal::PingPongService_Quit_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongService_Quit_Params* input,
    mojo::internal::Buffer* buf,
    internal::PingPongService_Quit_Params_Data** output) {
  if (input) {
    internal::PingPongService_Quit_Params_Data* result =
        internal::PingPongService_Quit_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongService_Quit_Params_Data* input,
                  PingPongService_Quit_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
PingPongClient_Pong_ParamsPtr PingPongClient_Pong_Params::New() {
  PingPongClient_Pong_ParamsPtr rv;
  mojo::internal::StructHelper<PingPongClient_Pong_Params>::Initialize(&rv);
  return rv;
}

PingPongClient_Pong_Params::PingPongClient_Pong_Params()
    : pong_value() {
}

PingPongClient_Pong_Params::~PingPongClient_Pong_Params() {
}


PingPongClient_Pong_ParamsPtr PingPongClient_Pong_Params::Clone() const {
  PingPongClient_Pong_ParamsPtr rv(New());
  rv->pong_value = pong_value;
  return rv;
}


bool PingPongClient_Pong_Params::Equals(const PingPongClient_Pong_Params& other) const {
  if (!mojo::internal::ValueTraits<uint16_t>::Equals(this->pong_value, other.pong_value))
    return false;
  return true;
}


size_t PingPongClient_Pong_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool PingPongClient_Pong_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::PingPongClient_Pong_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool PingPongClient_Pong_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::PingPongClient_Pong_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void PingPongClient_Pong_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::PingPongClient_Pong_Params_Data* input =
      static_cast<internal::PingPongClient_Pong_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const PingPongClient_Pong_Params& input) {
  size_t size = sizeof(internal::PingPongClient_Pong_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    PingPongClient_Pong_Params* input,
    mojo::internal::Buffer* buf,
    internal::PingPongClient_Pong_Params_Data** output) {
  if (input) {
    internal::PingPongClient_Pong_Params_Data* result =
        internal::PingPongClient_Pong_Params_Data::New(buf);
    result->pong_value = input->pong_value;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::PingPongClient_Pong_Params_Data* input,
                  PingPongClient_Pong_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->pong_value = input->pong_value;
    } while (false);
  }
}

}  // namespace js
