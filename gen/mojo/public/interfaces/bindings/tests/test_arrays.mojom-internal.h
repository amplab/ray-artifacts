// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ARRAYS_MOJOM_INTERNAL_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ARRAYS_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace test {

class StructWithInterface;
class StructWithInterfaceArray;
class StructWithDataPipeConsumers;
class StructWithDataPipeProducers;
class StructWithSharedBuffers;
class StructWithMessagePipes;
class StructWithHandles;
class StructWithInterfaceRequests;


namespace internal {

class StructWithInterface_Data;
class StructWithInterfaceArray_Data;
class StructWithDataPipeConsumers_Data;
class StructWithDataPipeProducers_Data;
class StructWithSharedBuffers_Data;
class StructWithMessagePipes_Data;
class StructWithHandles_Data;
class StructWithInterfaceRequests_Data;



#pragma pack(push, 1)


class StructWithInterface_Data {
 public:
  static StructWithInterface_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data iptr;

 private:
  StructWithInterface_Data();
  ~StructWithInterface_Data() = delete;
};
static_assert(sizeof(StructWithInterface_Data) == 16,
              "Bad sizeof(StructWithInterface_Data)");

class StructWithInterfaceArray_Data {
 public:
  static StructWithInterfaceArray_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<internal::StructWithInterface_Data*> structs_array;
  mojo::internal::ArrayPointer<internal::StructWithInterface_Data*> structs_nullable_array;
  mojo::internal::ArrayPointer<internal::StructWithInterface_Data*> nullable_structs_array;
  mojo::internal::ArrayPointer<internal::StructWithInterface_Data*> nullable_structs_nullable_array;

 private:
  StructWithInterfaceArray_Data();
  ~StructWithInterfaceArray_Data() = delete;
};
static_assert(sizeof(StructWithInterfaceArray_Data) == 40,
              "Bad sizeof(StructWithInterfaceArray_Data)");

class StructWithDataPipeConsumers_Data {
 public:
  static StructWithDataPipeConsumers_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::DataPipeConsumerHandle> handles_array;
  mojo::internal::ArrayPointer<mojo::DataPipeConsumerHandle> handles_nullable_array;
  mojo::internal::ArrayPointer<mojo::DataPipeConsumerHandle> nullable_handles_array;
  mojo::internal::ArrayPointer<mojo::DataPipeConsumerHandle> nullable_handles_nullable_array;

 private:
  StructWithDataPipeConsumers_Data();
  ~StructWithDataPipeConsumers_Data() = delete;
};
static_assert(sizeof(StructWithDataPipeConsumers_Data) == 40,
              "Bad sizeof(StructWithDataPipeConsumers_Data)");

class StructWithDataPipeProducers_Data {
 public:
  static StructWithDataPipeProducers_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::DataPipeProducerHandle> handles_array;
  mojo::internal::ArrayPointer<mojo::DataPipeProducerHandle> handles_nullable_array;
  mojo::internal::ArrayPointer<mojo::DataPipeProducerHandle> nullable_handles_array;
  mojo::internal::ArrayPointer<mojo::DataPipeProducerHandle> nullable_handles_nullable_array;

 private:
  StructWithDataPipeProducers_Data();
  ~StructWithDataPipeProducers_Data() = delete;
};
static_assert(sizeof(StructWithDataPipeProducers_Data) == 40,
              "Bad sizeof(StructWithDataPipeProducers_Data)");

class StructWithSharedBuffers_Data {
 public:
  static StructWithSharedBuffers_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::SharedBufferHandle> handles_array;
  mojo::internal::ArrayPointer<mojo::SharedBufferHandle> handles_nullable_array;
  mojo::internal::ArrayPointer<mojo::SharedBufferHandle> nullable_handles_array;
  mojo::internal::ArrayPointer<mojo::SharedBufferHandle> nullable_handles_nullable_array;

 private:
  StructWithSharedBuffers_Data();
  ~StructWithSharedBuffers_Data() = delete;
};
static_assert(sizeof(StructWithSharedBuffers_Data) == 40,
              "Bad sizeof(StructWithSharedBuffers_Data)");

class StructWithMessagePipes_Data {
 public:
  static StructWithMessagePipes_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> handles_array;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> handles_nullable_array;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> nullable_handles_array;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> nullable_handles_nullable_array;

 private:
  StructWithMessagePipes_Data();
  ~StructWithMessagePipes_Data() = delete;
};
static_assert(sizeof(StructWithMessagePipes_Data) == 40,
              "Bad sizeof(StructWithMessagePipes_Data)");

class StructWithHandles_Data {
 public:
  static StructWithHandles_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::Handle> handles_array;
  mojo::internal::ArrayPointer<mojo::Handle> handles_nullable_array;
  mojo::internal::ArrayPointer<mojo::Handle> nullable_handles_array;
  mojo::internal::ArrayPointer<mojo::Handle> nullable_handles_nullable_array;

 private:
  StructWithHandles_Data();
  ~StructWithHandles_Data() = delete;
};
static_assert(sizeof(StructWithHandles_Data) == 40,
              "Bad sizeof(StructWithHandles_Data)");

class StructWithInterfaceRequests_Data {
 public:
  static StructWithInterfaceRequests_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> req_array;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> req_nullable_array;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> nullable_req_array;
  mojo::internal::ArrayPointer<mojo::MessagePipeHandle> nullable_req_nullable_array;

 private:
  StructWithInterfaceRequests_Data();
  ~StructWithInterfaceRequests_Data() = delete;
};
static_assert(sizeof(StructWithInterfaceRequests_Data) == 40,
              "Bad sizeof(StructWithInterfaceRequests_Data)");


class TestInterface_Foo_Params_Data {
 public:
  static TestInterface_Foo_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestInterface_Foo_Params_Data();
  ~TestInterface_Foo_Params_Data() = delete;
};
static_assert(sizeof(TestInterface_Foo_Params_Data) == 8,
              "Bad sizeof(TestInterface_Foo_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace test
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_TEST_ARRAYS_MOJOM_INTERNAL_H_
