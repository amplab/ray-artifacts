// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/native_support/interfaces/process.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace native_support {

// --- Interface definitions ---
class Process_Spawn_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Process_Spawn_ForwardToCallback(
      const Process::SpawnCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Process::SpawnCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Process_Spawn_ForwardToCallback);
};
bool Process_Spawn_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Process_Spawn_ResponseParams_Data* params =
      reinterpret_cast<internal::Process_Spawn_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}
class Process_SpawnWithTerminal_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  Process_SpawnWithTerminal_ForwardToCallback(
      const Process::SpawnWithTerminalCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  Process::SpawnWithTerminalCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Process_SpawnWithTerminal_ForwardToCallback);
};
bool Process_SpawnWithTerminal_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::Process_SpawnWithTerminal_ResponseParams_Data* params =
      reinterpret_cast<internal::Process_SpawnWithTerminal_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}

ProcessProxy::ProcessProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ProcessProxy::Spawn(
    mojo::Array<uint8_t> in_path, mojo::Array<mojo::Array<uint8_t> > in_argv, mojo::Array<mojo::Array<uint8_t> > in_envp, mojo::InterfaceHandle<mojo::files::File> in_stdin_file, mojo::InterfaceHandle<mojo::files::File> in_stdout_file, mojo::InterfaceHandle<mojo::files::File> in_stderr_file, mojo::InterfaceRequest<ProcessController> in_process_controller, const SpawnCallback& callback) {
  size_t size = sizeof(internal::Process_Spawn_Params_Data);
  size += GetSerializedSize_(in_path);
  size += GetSerializedSize_(in_argv);
  size += GetSerializedSize_(in_envp);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Process_Base::MessageOrdinals::Spawn), size);

  internal::Process_Spawn_Params_Data* params =
      internal::Process_Spawn_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_path, builder.buffer(), &params->path.ptr,
                          &path_validate_params);
  }
  if (!params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Process.Spawn request");
  }
  {
    const mojo::internal::ArrayValidateParams argv_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_argv, builder.buffer(), &params->argv.ptr,
                          &argv_validate_params);
  }
  {
    const mojo::internal::ArrayValidateParams envp_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_envp, builder.buffer(), &params->envp.ptr,
                          &envp_validate_params);
  }
  mojo::internal::InterfaceHandleToData(in_stdin_file.Pass(),
                                        &params->stdin_file);
  mojo::internal::InterfaceHandleToData(in_stdout_file.Pass(),
                                        &params->stdout_file);
  mojo::internal::InterfaceHandleToData(in_stderr_file.Pass(),
                                        &params->stderr_file);
  params->process_controller = in_process_controller.PassMessagePipe().release();
  if (!params->process_controller.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid process_controller in Process.Spawn request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Process_Spawn_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ProcessProxy::SpawnWithTerminal(
    mojo::Array<uint8_t> in_path, mojo::Array<mojo::Array<uint8_t> > in_argv, mojo::Array<mojo::Array<uint8_t> > in_envp, mojo::InterfaceHandle<mojo::files::File> in_terminal_file, mojo::InterfaceRequest<ProcessController> in_process_controller, const SpawnWithTerminalCallback& callback) {
  size_t size = sizeof(internal::Process_SpawnWithTerminal_Params_Data);
  size += GetSerializedSize_(in_path);
  size += GetSerializedSize_(in_argv);
  size += GetSerializedSize_(in_envp);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::Process_Base::MessageOrdinals::SpawnWithTerminal), size);

  internal::Process_SpawnWithTerminal_Params_Data* params =
      internal::Process_SpawnWithTerminal_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams path_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_path, builder.buffer(), &params->path.ptr,
                          &path_validate_params);
  }
  if (!params->path.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null path in Process.SpawnWithTerminal request");
  }
  {
    const mojo::internal::ArrayValidateParams argv_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_argv, builder.buffer(), &params->argv.ptr,
                          &argv_validate_params);
  }
  {
    const mojo::internal::ArrayValidateParams envp_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_envp, builder.buffer(), &params->envp.ptr,
                          &envp_validate_params);
  }
  mojo::internal::InterfaceHandleToData(in_terminal_file.Pass(),
                                        &params->terminal_file);
  if (!params->terminal_file.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid terminal_file in Process.SpawnWithTerminal request");
  }
  params->process_controller = in_process_controller.PassMessagePipe().release();
  if (!params->process_controller.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid process_controller in Process.SpawnWithTerminal request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new Process_SpawnWithTerminal_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Process_Spawn_ProxyToResponder
    : public Process::SpawnCallback::Runnable {
 public:
  ~Process_Spawn_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Process::Spawn(p_path.Pass(), p_argv.Pass(), p_envp.Pass(), p_stdin_file.Pass(), p_stdout_file.Pass(), p_stderr_file.Pass(), p_process_controller.Pass(), callback) "
        "was never run.";
  }

  Process_Spawn_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Process_Spawn_ProxyToResponder);
};

void Process_Spawn_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::Process_Spawn_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Process_Base::MessageOrdinals::Spawn), size, request_id_);
  internal::Process_Spawn_ResponseParams_Data* params =
      internal::Process_Spawn_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class Process_SpawnWithTerminal_ProxyToResponder
    : public Process::SpawnWithTerminalCallback::Runnable {
 public:
  ~Process_SpawnWithTerminal_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "Process::SpawnWithTerminal(p_path.Pass(), p_argv.Pass(), p_envp.Pass(), p_terminal_file.Pass(), p_process_controller.Pass(), callback) "
        "was never run.";
  }

  Process_SpawnWithTerminal_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(Process_SpawnWithTerminal_ProxyToResponder);
};

void Process_SpawnWithTerminal_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::Process_SpawnWithTerminal_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::Process_Base::MessageOrdinals::SpawnWithTerminal), size, request_id_);
  internal::Process_SpawnWithTerminal_ResponseParams_Data* params =
      internal::Process_SpawnWithTerminal_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ProcessStub::ProcessStub()
    : sink_(nullptr),
      control_message_handler_(Process::Version_) {
}

ProcessStub::~ProcessStub() {}

bool ProcessStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Process_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Process_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Process_Base::MessageOrdinals::Spawn: {
      break;
    }
    case internal::Process_Base::MessageOrdinals::SpawnWithTerminal: {
      break;
    }
  }
  return false;
}

bool ProcessStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Process_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Process_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Process_Base::MessageOrdinals::Spawn: {
      internal::Process_Spawn_Params_Data* params =
          reinterpret_cast<internal::Process_Spawn_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Process::SpawnCallback::Runnable* runnable =
          new Process_Spawn_ProxyToResponder(
              message->request_id(), responder);
      Process::SpawnCallback callback(runnable);
      
      mojo::Array<uint8_t> p_path {};
      mojo::Array<mojo::Array<uint8_t> > p_argv {};
      mojo::Array<mojo::Array<uint8_t> > p_envp {};
      mojo::InterfaceHandle<mojo::files::File> p_stdin_file {};
      mojo::InterfaceHandle<mojo::files::File> p_stdout_file {};
      mojo::InterfaceHandle<mojo::files::File> p_stderr_file {};
      mojo::InterfaceRequest<ProcessController> p_process_controller {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->path.ptr, &p_path);
        Deserialize_(params->argv.ptr, &p_argv);
        Deserialize_(params->envp.ptr, &p_envp);
        mojo::internal::InterfaceDataToHandle(&params->stdin_file, &p_stdin_file);
        mojo::internal::InterfaceDataToHandle(&params->stdout_file, &p_stdout_file);
        mojo::internal::InterfaceDataToHandle(&params->stderr_file, &p_stderr_file);
        p_process_controller.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->process_controller)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Spawn(p_path.Pass(), p_argv.Pass(), p_envp.Pass(), p_stdin_file.Pass(), p_stdout_file.Pass(), p_stderr_file.Pass(), p_process_controller.Pass(), callback);
      return true;
    }
    case internal::Process_Base::MessageOrdinals::SpawnWithTerminal: {
      internal::Process_SpawnWithTerminal_Params_Data* params =
          reinterpret_cast<internal::Process_SpawnWithTerminal_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      Process::SpawnWithTerminalCallback::Runnable* runnable =
          new Process_SpawnWithTerminal_ProxyToResponder(
              message->request_id(), responder);
      Process::SpawnWithTerminalCallback callback(runnable);
      
      mojo::Array<uint8_t> p_path {};
      mojo::Array<mojo::Array<uint8_t> > p_argv {};
      mojo::Array<mojo::Array<uint8_t> > p_envp {};
      mojo::InterfaceHandle<mojo::files::File> p_terminal_file {};
      mojo::InterfaceRequest<ProcessController> p_process_controller {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->path.ptr, &p_path);
        Deserialize_(params->argv.ptr, &p_argv);
        Deserialize_(params->envp.ptr, &p_envp);
        mojo::internal::InterfaceDataToHandle(&params->terminal_file, &p_terminal_file);
        p_process_controller.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->process_controller)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SpawnWithTerminal(p_path.Pass(), p_argv.Pass(), p_envp.Pass(), p_terminal_file.Pass(), p_process_controller.Pass(), callback);
      return true;
    }
  }
  return false;
}

class ProcessController_Wait_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ProcessController_Wait_ForwardToCallback(
      const ProcessController::WaitCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ProcessController::WaitCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ProcessController_Wait_ForwardToCallback);
};
bool ProcessController_Wait_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ProcessController_Wait_ResponseParams_Data* params =
      reinterpret_cast<internal::ProcessController_Wait_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  int32_t p_exit_status {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
    p_exit_status = params->exit_status;
  } while (false);
  callback_.Run(p_error, p_exit_status);
  return true;
}
class ProcessController_Kill_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ProcessController_Kill_ForwardToCallback(
      const ProcessController::KillCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ProcessController::KillCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ProcessController_Kill_ForwardToCallback);
};
bool ProcessController_Kill_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ProcessController_Kill_ResponseParams_Data* params =
      reinterpret_cast<internal::ProcessController_Kill_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::files::Error p_error {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_error = static_cast<mojo::files::Error>(params->error);
  } while (false);
  callback_.Run(p_error);
  return true;
}

ProcessControllerProxy::ProcessControllerProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ProcessControllerProxy::Wait(
    const WaitCallback& callback) {
  size_t size = sizeof(internal::ProcessController_Wait_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ProcessController_Base::MessageOrdinals::Wait), size);

  internal::ProcessController_Wait_Params_Data* params =
      internal::ProcessController_Wait_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ProcessController_Wait_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ProcessControllerProxy::Kill(
    int32_t in_signal, const KillCallback& callback) {
  size_t size = sizeof(internal::ProcessController_Kill_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ProcessController_Base::MessageOrdinals::Kill), size);

  internal::ProcessController_Kill_Params_Data* params =
      internal::ProcessController_Kill_Params_Data::New(builder.buffer());
  params->signal = in_signal;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ProcessController_Kill_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ProcessController_Wait_ProxyToResponder
    : public ProcessController::WaitCallback::Runnable {
 public:
  ~ProcessController_Wait_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ProcessController::Wait(callback) "
        "was never run.";
  }

  ProcessController_Wait_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error, int32_t in_exit_status) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ProcessController_Wait_ProxyToResponder);
};

void ProcessController_Wait_ProxyToResponder::Run(
    mojo::files::Error in_error, int32_t in_exit_status) const {
  size_t size = sizeof(internal::ProcessController_Wait_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ProcessController_Base::MessageOrdinals::Wait), size, request_id_);
  internal::ProcessController_Wait_ResponseParams_Data* params =
      internal::ProcessController_Wait_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->exit_status = in_exit_status;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ProcessController_Kill_ProxyToResponder
    : public ProcessController::KillCallback::Runnable {
 public:
  ~ProcessController_Kill_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ProcessController::Kill(p_signal, callback) "
        "was never run.";
  }

  ProcessController_Kill_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::files::Error in_error) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ProcessController_Kill_ProxyToResponder);
};

void ProcessController_Kill_ProxyToResponder::Run(
    mojo::files::Error in_error) const {
  size_t size = sizeof(internal::ProcessController_Kill_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ProcessController_Base::MessageOrdinals::Kill), size, request_id_);
  internal::ProcessController_Kill_ResponseParams_Data* params =
      internal::ProcessController_Kill_ResponseParams_Data::New(builder.buffer());
  params->error =
    static_cast<int32_t>(in_error);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ProcessControllerStub::ProcessControllerStub()
    : sink_(nullptr),
      control_message_handler_(ProcessController::Version_) {
}

ProcessControllerStub::~ProcessControllerStub() {}

bool ProcessControllerStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ProcessController_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ProcessController_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ProcessController_Base::MessageOrdinals::Wait: {
      break;
    }
    case internal::ProcessController_Base::MessageOrdinals::Kill: {
      break;
    }
  }
  return false;
}

bool ProcessControllerStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ProcessController_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ProcessController_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ProcessController_Base::MessageOrdinals::Wait: {
      internal::ProcessController_Wait_Params_Data* params =
          reinterpret_cast<internal::ProcessController_Wait_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ProcessController::WaitCallback::Runnable* runnable =
          new ProcessController_Wait_ProxyToResponder(
              message->request_id(), responder);
      ProcessController::WaitCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Wait(callback);
      return true;
    }
    case internal::ProcessController_Base::MessageOrdinals::Kill: {
      internal::ProcessController_Kill_Params_Data* params =
          reinterpret_cast<internal::ProcessController_Kill_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ProcessController::KillCallback::Runnable* runnable =
          new ProcessController_Kill_ProxyToResponder(
              message->request_id(), responder);
      ProcessController::KillCallback callback(runnable);
      
      int32_t p_signal {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_signal = params->signal;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Kill(p_signal, callback);
      return true;
    }
  }
  return false;
}

}  // namespace native_support
