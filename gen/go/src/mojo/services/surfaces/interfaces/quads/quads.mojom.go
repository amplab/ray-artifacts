// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/surfaces/interfaces/quads.mojom
//

package quads

import (
	sort "sort"
	fmt "fmt"
	bindings "mojo/public/go/bindings"
	surface_id "mojo/services/surfaces/interfaces/surface_id"
	geometry "mojo/services/geometry/interfaces/geometry"
)


type YuvColorSpace int32

const (
	YuvColorSpace_Rec601 YuvColorSpace = 0
	YuvColorSpace_Rec709 = YuvColorSpace_Rec601 + 1;
	YuvColorSpace_Jpeg = YuvColorSpace_Rec709 + 1;
)


type Material int32

const (
	Material_Checkerboard Material = 1
	Material_DebugBorder = Material_Checkerboard + 1;
	Material_IoSurfaceContent = Material_DebugBorder + 1;
	Material_PictureContent = Material_IoSurfaceContent + 1;
	Material_RenderPass = Material_PictureContent + 1;
	Material_SolidColor = Material_RenderPass + 1;
	Material_StreamVideoContent = Material_SolidColor + 1;
	Material_SurfaceContent = Material_StreamVideoContent + 1;
	Material_TextureContent = Material_SurfaceContent + 1;
	Material_TiledContent = Material_TextureContent + 1;
	Material_YuvVideoContent = Material_TiledContent + 1;
)


type SkXfermode int32

const (
	SkXfermode_KClearMode SkXfermode = 0
	SkXfermode_KSrcMode = SkXfermode_KClearMode + 1;
	SkXfermode_KDstMode = SkXfermode_KSrcMode + 1;
	SkXfermode_KSrcOverMode = SkXfermode_KDstMode + 1;
	SkXfermode_KDstOverMode = SkXfermode_KSrcOverMode + 1;
	SkXfermode_KSrcInMode = SkXfermode_KDstOverMode + 1;
	SkXfermode_KDstInMode = SkXfermode_KSrcInMode + 1;
	SkXfermode_KSrcOutMode = SkXfermode_KDstInMode + 1;
	SkXfermode_KDstOutMode = SkXfermode_KSrcOutMode + 1;
	SkXfermode_KSrcATopMode = SkXfermode_KDstOutMode + 1;
	SkXfermode_KDstATopMode = SkXfermode_KSrcATopMode + 1;
	SkXfermode_KXorMode = SkXfermode_KDstATopMode + 1;
	SkXfermode_KPlusMode = SkXfermode_KXorMode + 1;
	SkXfermode_KModulateMode = SkXfermode_KPlusMode + 1;
	SkXfermode_KScreenMode = SkXfermode_KModulateMode + 1;
	SkXfermode_KLastCoeffMode = SkXfermode_KScreenMode
	SkXfermode_KOverlayMode = SkXfermode_KLastCoeffMode + 1;
	SkXfermode_KDarkenMode = SkXfermode_KOverlayMode + 1;
	SkXfermode_KLightenMode = SkXfermode_KDarkenMode + 1;
	SkXfermode_KColorDodgeMode = SkXfermode_KLightenMode + 1;
	SkXfermode_KColorBurnMode = SkXfermode_KColorDodgeMode + 1;
	SkXfermode_KHardLightMode = SkXfermode_KColorBurnMode + 1;
	SkXfermode_KSoftLightMode = SkXfermode_KHardLightMode + 1;
	SkXfermode_KDifferenceMode = SkXfermode_KSoftLightMode + 1;
	SkXfermode_KExclusionMode = SkXfermode_KDifferenceMode + 1;
	SkXfermode_KMultiplyMode = SkXfermode_KExclusionMode + 1;
	SkXfermode_KLastSeparableMode = SkXfermode_KMultiplyMode
	SkXfermode_KHueMode = SkXfermode_KLastSeparableMode + 1;
	SkXfermode_KSaturationMode = SkXfermode_KHueMode + 1;
	SkXfermode_KColorMode = SkXfermode_KSaturationMode + 1;
	SkXfermode_KLuminosityMode = SkXfermode_KColorMode + 1;
	SkXfermode_KLastMode = SkXfermode_KLuminosityMode
)


type Color struct {
	Rgba uint32
}


func (s *Color) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteUint32(s.Rgba); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var color_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *Color) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(color_Versions), func(i int) bool {
		return color_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(color_Versions) {
		if color_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := color_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.Rgba = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type CheckerboardQuadState struct {
}


func (s *CheckerboardQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var checkerboardQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *CheckerboardQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(checkerboardQuadState_Versions), func(i int) bool {
		return checkerboardQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(checkerboardQuadState_Versions) {
		if checkerboardQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := checkerboardQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type DebugBorderQuadState struct {
}


func (s *DebugBorderQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var debugBorderQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *DebugBorderQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(debugBorderQuadState_Versions), func(i int) bool {
		return debugBorderQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(debugBorderQuadState_Versions) {
		if debugBorderQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := debugBorderQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type IoSurfaceContentQuadState struct {
}


func (s *IoSurfaceContentQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var ioSurfaceContentQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *IoSurfaceContentQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(ioSurfaceContentQuadState_Versions), func(i int) bool {
		return ioSurfaceContentQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(ioSurfaceContentQuadState_Versions) {
		if ioSurfaceContentQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := ioSurfaceContentQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type RenderPassId struct {
	LayerId int32
	Index int32
}


func (s *RenderPassId) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt32(s.LayerId); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.Index); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var renderPassId_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *RenderPassId) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(renderPassId_Versions), func(i int) bool {
		return renderPassId_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(renderPassId_Versions) {
		if renderPassId_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := renderPassId_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.LayerId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Index = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type RenderPassQuadState struct {
	RenderPassId RenderPassId
	MaskResourceId uint32
	MaskUvScale geometry.PointF
	MaskTextureSize geometry.Size
	FiltersScale geometry.PointF
}


func (s *RenderPassQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(40, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.RenderPassId.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.MaskResourceId); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.MaskUvScale.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.MaskTextureSize.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.FiltersScale.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var renderPassQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{48, 0},
}

func (s *RenderPassQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(renderPassQuadState_Versions), func(i int) bool {
		return renderPassQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(renderPassQuadState_Versions) {
		if renderPassQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := renderPassQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.RenderPassId.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.MaskResourceId = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.MaskUvScale.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.MaskTextureSize.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.FiltersScale.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type SolidColorQuadState struct {
	Color Color
	ForceAntiAliasingOff bool
}


func (s *SolidColorQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.Color.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.ForceAntiAliasingOff); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var solidColorQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *SolidColorQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(solidColorQuadState_Versions), func(i int) bool {
		return solidColorQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(solidColorQuadState_Versions) {
		if solidColorQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := solidColorQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.Color.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.ForceAntiAliasingOff = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type SurfaceQuadState struct {
	Surface surface_id.SurfaceId
}


func (s *SurfaceQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.Surface.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var surfaceQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *SurfaceQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(surfaceQuadState_Versions), func(i int) bool {
		return surfaceQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(surfaceQuadState_Versions) {
		if surfaceQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := surfaceQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.Surface.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type TextureQuadState struct {
	ResourceId uint32
	PremultipliedAlpha bool
	UvTopLeft geometry.PointF
	UvBottomRight geometry.PointF
	BackgroundColor Color
	VertexOpacity [4]float32
	Flipped bool
	NearestNeighbor bool
}


func (s *TextureQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(40, 0)
	if err := encoder.WriteUint32(s.ResourceId); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.PremultipliedAlpha); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.Flipped); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.NearestNeighbor); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.UvTopLeft.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.UvBottomRight.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.BackgroundColor.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.VertexOpacity)), 32)
	for _, elem0 := range s.VertexOpacity {
		if err := encoder.WriteFloat32(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var textureQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{48, 0},
}

func (s *TextureQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(textureQuadState_Versions), func(i int) bool {
		return textureQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(textureQuadState_Versions) {
		if textureQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := textureQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.ResourceId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.PremultipliedAlpha = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.Flipped = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.NearestNeighbor = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.UvTopLeft.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.UvBottomRight.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.BackgroundColor.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(32)
			if err != nil {
				return err
			}
			if len0 != 4 {
				return &bindings.ValidationError{bindings.UnexpectedArrayHeader,
					fmt.Sprintf("invalid array length: expected %d, got %d", 4, len0),
				}
			}
			for i0 := uint32(0); i0 < len0; i0++ {
				value1, err := decoder.ReadFloat32()
				if err != nil {
					return err
				}
				s.VertexOpacity[i0] = value1
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type TileQuadState struct {
	TexCoordRect geometry.RectF
	TextureSize geometry.Size
	SwizzleContents bool
	ResourceId uint32
	NearestNeighbor bool
}


func (s *TileQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(24, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.TexCoordRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.TextureSize.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.SwizzleContents); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.NearestNeighbor); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.ResourceId); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var tileQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{32, 0},
}

func (s *TileQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(tileQuadState_Versions), func(i int) bool {
		return tileQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(tileQuadState_Versions) {
		if tileQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := tileQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.TexCoordRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.TextureSize.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.SwizzleContents = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.NearestNeighbor = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.ResourceId = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type StreamVideoQuadState struct {
}


func (s *StreamVideoQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var streamVideoQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *StreamVideoQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(streamVideoQuadState_Versions), func(i int) bool {
		return streamVideoQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(streamVideoQuadState_Versions) {
		if streamVideoQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := streamVideoQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type YuvVideoQuadState struct {
	TexCoordRect geometry.RectF
	YPlaneResourceId uint32
	UPlaneResourceId uint32
	VPlaneResourceId uint32
	APlaneResourceId uint32
	ColorSpace YuvColorSpace
}


func (s *YuvVideoQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(32, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.TexCoordRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.YPlaneResourceId); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.UPlaneResourceId); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.VPlaneResourceId); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.APlaneResourceId); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.ColorSpace)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var yUVVideoQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{40, 0},
}

func (s *YuvVideoQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(yUVVideoQuadState_Versions), func(i int) bool {
		return yUVVideoQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(yUVVideoQuadState_Versions) {
		if yUVVideoQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := yUVVideoQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.TexCoordRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.YPlaneResourceId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.UPlaneResourceId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.VPlaneResourceId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.APlaneResourceId = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.ColorSpace = YuvColorSpace(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type Quad struct {
	Material Material
	Rect geometry.Rect
	OpaqueRect geometry.Rect
	VisibleRect geometry.Rect
	NeedsBlending bool
	SharedQuadStateIndex uint32
	CheckerboardQuadState *CheckerboardQuadState
	DebugBorderQuadState *DebugBorderQuadState
	IoSurfaceQuadState *IoSurfaceContentQuadState
	RenderPassQuadState *RenderPassQuadState
	SolidColorQuadState *SolidColorQuadState
	SurfaceQuadState *SurfaceQuadState
	TextureQuadState *TextureQuadState
	TileQuadState *TileQuadState
	StreamVideoQuadState *StreamVideoQuadState
	YuvVideoQuadState *YuvVideoQuadState
}


func (s *Quad) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(120, 0)
	if err := encoder.WriteInt32(int32(s.Material)); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.NeedsBlending); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.Rect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.OpaqueRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.VisibleRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteUint32(s.SharedQuadStateIndex); err != nil {
		return err
	}
	if s.CheckerboardQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.CheckerboardQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.DebugBorderQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.DebugBorderQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.IoSurfaceQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.IoSurfaceQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.RenderPassQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.RenderPassQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.SolidColorQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.SolidColorQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.SurfaceQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.SurfaceQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.TextureQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.TextureQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.TileQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.TileQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.StreamVideoQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.StreamVideoQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if s.YuvVideoQuadState == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := (*s.YuvVideoQuadState).Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var quad_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{128, 0},
}

func (s *Quad) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(quad_Versions), func(i int) bool {
		return quad_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(quad_Versions) {
		if quad_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := quad_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Material = Material(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.NeedsBlending = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.Rect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.OpaqueRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.VisibleRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadUint32()
		if err != nil {
			return err
		}
		s.SharedQuadStateIndex = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.CheckerboardQuadState = nil
		} else {
			s.CheckerboardQuadState = new(CheckerboardQuadState)
			if err := (*s.CheckerboardQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.DebugBorderQuadState = nil
		} else {
			s.DebugBorderQuadState = new(DebugBorderQuadState)
			if err := (*s.DebugBorderQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.IoSurfaceQuadState = nil
		} else {
			s.IoSurfaceQuadState = new(IoSurfaceContentQuadState)
			if err := (*s.IoSurfaceQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.RenderPassQuadState = nil
		} else {
			s.RenderPassQuadState = new(RenderPassQuadState)
			if err := (*s.RenderPassQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.SolidColorQuadState = nil
		} else {
			s.SolidColorQuadState = new(SolidColorQuadState)
			if err := (*s.SolidColorQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.SurfaceQuadState = nil
		} else {
			s.SurfaceQuadState = new(SurfaceQuadState)
			if err := (*s.SurfaceQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.TextureQuadState = nil
		} else {
			s.TextureQuadState = new(TextureQuadState)
			if err := (*s.TextureQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.TileQuadState = nil
		} else {
			s.TileQuadState = new(TileQuadState)
			if err := (*s.TileQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.StreamVideoQuadState = nil
		} else {
			s.StreamVideoQuadState = new(StreamVideoQuadState)
			if err := (*s.StreamVideoQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.YuvVideoQuadState = nil
		} else {
			s.YuvVideoQuadState = new(YuvVideoQuadState)
			if err := (*s.YuvVideoQuadState).Decode(decoder); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type SharedQuadState struct {
	ContentToTargetTransform geometry.Transform
	ContentBounds geometry.Size
	VisibleContentRect geometry.Rect
	ClipRect geometry.Rect
	IsClipped bool
	Opacity float32
	BlendMode SkXfermode
	SortingContextId int32
}


func (s *SharedQuadState) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(48, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.ContentToTargetTransform.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.ContentBounds.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.VisibleContentRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.ClipRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.IsClipped); err != nil {
		return err
	}
	if err := encoder.WriteFloat32(s.Opacity); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.BlendMode)); err != nil {
		return err
	}
	if err := encoder.WriteInt32(s.SortingContextId); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var sharedQuadState_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{56, 0},
}

func (s *SharedQuadState) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(sharedQuadState_Versions), func(i int) bool {
		return sharedQuadState_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(sharedQuadState_Versions) {
		if sharedQuadState_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := sharedQuadState_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.ContentToTargetTransform.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.ContentBounds.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.VisibleContentRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.ClipRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.IsClipped = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadFloat32()
		if err != nil {
			return err
		}
		s.Opacity = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.BlendMode = SkXfermode(value0)
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.SortingContextId = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type Pass struct {
	Id int32
	OutputRect geometry.Rect
	DamageRect geometry.Rect
	TransformToRootTarget geometry.Transform
	HasTransparentBackground bool
	Quads []Quad
	SharedQuadStates []SharedQuadState
}


func (s *Pass) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(48, 0)
	if err := encoder.WriteInt32(s.Id); err != nil {
		return err
	}
	if err := encoder.WriteBool(s.HasTransparentBackground); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.OutputRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.DamageRect.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.TransformToRootTarget.Encode(encoder); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.Quads)), 64)
	for _, elem0 := range s.Quads {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.SharedQuadStates)), 64)
	for _, elem0 := range s.SharedQuadStates {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := elem0.Encode(encoder); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var pass_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{56, 0},
}

func (s *Pass) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(pass_Versions), func(i int) bool {
		return pass_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(pass_Versions) {
		if pass_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := pass_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.Id = value0
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadBool()
		if err != nil {
			return err
		}
		s.HasTransparentBackground = value0
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.OutputRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.DamageRect.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.TransformToRootTarget.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.Quads = make([]Quad, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.Quads[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.SharedQuadStates = make([]SharedQuadState, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := s.SharedQuadStates[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

