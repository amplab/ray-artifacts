// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/network/interfaces/host_resolver.mojom
//

package host_resolver

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	network_error "mojo/public/interfaces/network/network_error"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
	net_address "mojo/services/network/interfaces/net_address"
)


type HostResolver interface {
	GetHostAddresses(inHost string, inFamily net_address.NetAddressFamily) (outResult network_error.NetworkError, outAddresses *[]net_address.NetAddress, err error)
}




type HostResolver_Request bindings.InterfaceRequest



type HostResolver_Pointer bindings.InterfacePointer


type HostResolver_ServiceFactory struct{
	Delegate HostResolver_Factory
}

type HostResolver_Factory interface {
	Create(request HostResolver_Request)
}


// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *HostResolver_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &HostResolver_ServiceDescription{}
}

func (f *HostResolver_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := HostResolver_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForHostResolver creates a message pipe for use with the
// HostResolver interface with a HostResolver_Request on one end and a HostResolver_Pointer on the other.
func CreateMessagePipeForHostResolver() (HostResolver_Request, HostResolver_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return HostResolver_Request(r), HostResolver_Pointer(p)
}

const hostResolver_GetHostAddresses_Name uint32 = 0

type HostResolver_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewHostResolverProxy(p HostResolver_Pointer, waiter bindings.AsyncWaiter) *HostResolver_Proxy {
	return &HostResolver_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *HostResolver_Proxy) Close_Proxy() {
	p.router.Close()
}

type hostResolver_GetHostAddresses_Params struct {
	inHost string
	inFamily net_address.NetAddressFamily
}


func (s *hostResolver_GetHostAddresses_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inHost); err != nil {
		return err
	}
	if err := encoder.WriteInt32(int32(s.inFamily)); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var hostResolver_GetHostAddresses_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *hostResolver_GetHostAddresses_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(hostResolver_GetHostAddresses_Params_Versions), func(i int) bool {
		return hostResolver_GetHostAddresses_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(hostResolver_GetHostAddresses_Params_Versions) {
		if hostResolver_GetHostAddresses_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := hostResolver_GetHostAddresses_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inHost = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt32()
		if err != nil {
			return err
		}
		s.inFamily = net_address.NetAddressFamily(value0)
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type hostResolver_GetHostAddresses_ResponseParams struct {
	outResult network_error.NetworkError
	outAddresses *[]net_address.NetAddress
}


func (s *hostResolver_GetHostAddresses_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := s.outResult.Encode(encoder); err != nil {
		return err
	}
	if s.outAddresses == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		encoder.StartArray(uint32(len((*s.outAddresses))), 64)
		for _, elem0 := range (*s.outAddresses) {
			if err := encoder.WritePointer(); err != nil {
				return err
			}
			if err := elem0.Encode(encoder); err != nil {
				return err
			}
		}
		if err := encoder.Finish(); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var hostResolver_GetHostAddresses_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *hostResolver_GetHostAddresses_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(hostResolver_GetHostAddresses_ResponseParams_Versions), func(i int) bool {
		return hostResolver_GetHostAddresses_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(hostResolver_GetHostAddresses_ResponseParams_Versions) {
		if hostResolver_GetHostAddresses_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := hostResolver_GetHostAddresses_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			if err := s.outResult.Decode(decoder); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outAddresses = nil
		} else {
			s.outAddresses = new([]net_address.NetAddress)
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			(*s.outAddresses) = make([]net_address.NetAddress, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					if err := (*s.outAddresses)[i0].Decode(decoder); err != nil {
						return err
					}
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *HostResolver_Proxy) GetHostAddresses(inHost string, inFamily net_address.NetAddressFamily) (outResult network_error.NetworkError, outAddresses *[]net_address.NetAddress, err error) {
	payload := &hostResolver_GetHostAddresses_Params{
		inHost,
		inFamily,
	}
	header := bindings.MessageHeader{
		Type: hostResolver_GetHostAddresses_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, hostResolver_GetHostAddresses_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response hostResolver_GetHostAddresses_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outResult = response.outResult
	outAddresses = response.outAddresses
	return
}

type hostResolver_Stub struct {
	connector *bindings.Connector
	impl HostResolver
}

func NewHostResolverStub(r HostResolver_Request, impl HostResolver, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &hostResolver_Stub{connector, impl})
}


func (f *HostResolver_Request) ServiceDescription() service_describer.ServiceDescription {
	return &HostResolver_ServiceDescription{}
}


type HostResolver_ServiceDescription struct{}

func (sd *HostResolver_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *HostResolver_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *HostResolver_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*HostResolver_ServiceDescription)(nil)


func (s *hostResolver_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case hostResolver_GetHostAddresses_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request hostResolver_GetHostAddresses_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response hostResolver_GetHostAddresses_ResponseParams
		response.outResult, 		response.outAddresses, err = s.impl.GetHostAddresses(request.inHost, request.inFamily)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: hostResolver_GetHostAddresses_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

