// This file was auto-generated by the C bindings generator.

#ifndef MOJO_SERVICES_SURFACES_INTERFACES_QUADS_MOJOM_C_H_
#define MOJO_SERVICES_SURFACES_INTERFACES_QUADS_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.
#include "mojo/services/geometry/interfaces/geometry.mojom-c.h"
#include "mojo/services/surfaces/interfaces/surface_id.mojom-c.h"


// Forward declarations for structs.
struct mojo_Color;
union mojo_ColorPtr {
  struct mojo_Color* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_ColorPtr) == 8,
              "union mojo_ColorPtr must be 8 bytes");

struct mojo_CheckerboardQuadState;
union mojo_CheckerboardQuadStatePtr {
  struct mojo_CheckerboardQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_CheckerboardQuadStatePtr) == 8,
              "union mojo_CheckerboardQuadStatePtr must be 8 bytes");

struct mojo_DebugBorderQuadState;
union mojo_DebugBorderQuadStatePtr {
  struct mojo_DebugBorderQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_DebugBorderQuadStatePtr) == 8,
              "union mojo_DebugBorderQuadStatePtr must be 8 bytes");

struct mojo_IoSurfaceContentQuadState;
union mojo_IoSurfaceContentQuadStatePtr {
  struct mojo_IoSurfaceContentQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_IoSurfaceContentQuadStatePtr) == 8,
              "union mojo_IoSurfaceContentQuadStatePtr must be 8 bytes");

struct mojo_RenderPassId;
union mojo_RenderPassIdPtr {
  struct mojo_RenderPassId* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_RenderPassIdPtr) == 8,
              "union mojo_RenderPassIdPtr must be 8 bytes");

struct mojo_RenderPassQuadState;
union mojo_RenderPassQuadStatePtr {
  struct mojo_RenderPassQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_RenderPassQuadStatePtr) == 8,
              "union mojo_RenderPassQuadStatePtr must be 8 bytes");

struct mojo_SolidColorQuadState;
union mojo_SolidColorQuadStatePtr {
  struct mojo_SolidColorQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_SolidColorQuadStatePtr) == 8,
              "union mojo_SolidColorQuadStatePtr must be 8 bytes");

struct mojo_SurfaceQuadState;
union mojo_SurfaceQuadStatePtr {
  struct mojo_SurfaceQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_SurfaceQuadStatePtr) == 8,
              "union mojo_SurfaceQuadStatePtr must be 8 bytes");

struct mojo_TextureQuadState;
union mojo_TextureQuadStatePtr {
  struct mojo_TextureQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_TextureQuadStatePtr) == 8,
              "union mojo_TextureQuadStatePtr must be 8 bytes");

struct mojo_TileQuadState;
union mojo_TileQuadStatePtr {
  struct mojo_TileQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_TileQuadStatePtr) == 8,
              "union mojo_TileQuadStatePtr must be 8 bytes");

struct mojo_StreamVideoQuadState;
union mojo_StreamVideoQuadStatePtr {
  struct mojo_StreamVideoQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_StreamVideoQuadStatePtr) == 8,
              "union mojo_StreamVideoQuadStatePtr must be 8 bytes");

struct mojo_YUVVideoQuadState;
union mojo_YUVVideoQuadStatePtr {
  struct mojo_YUVVideoQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_YUVVideoQuadStatePtr) == 8,
              "union mojo_YUVVideoQuadStatePtr must be 8 bytes");

struct mojo_Quad;
union mojo_QuadPtr {
  struct mojo_Quad* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_QuadPtr) == 8,
              "union mojo_QuadPtr must be 8 bytes");

struct mojo_SharedQuadState;
union mojo_SharedQuadStatePtr {
  struct mojo_SharedQuadState* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_SharedQuadStatePtr) == 8,
              "union mojo_SharedQuadStatePtr must be 8 bytes");

struct mojo_Pass;
union mojo_PassPtr {
  struct mojo_Pass* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union mojo_PassPtr) == 8,
              "union mojo_PassPtr must be 8 bytes");

// Forward declarations for unions.
// Top level constants.


// Top level enums.
typedef uint32_t mojo_YUVColorSpace;
enum mojo_YUVColorSpace_Enum {
  mojo_YUVColorSpace_REC_601 = 0,
  mojo_YUVColorSpace_REC_709 = 1,
  mojo_YUVColorSpace_JPEG = 2,
  
  mojo_YUVColorSpace__UNKNOWN__ = 0xFFFFFFFF,
};

typedef uint32_t mojo_Material;
enum mojo_Material_Enum {
  mojo_Material_CHECKERBOARD = 1,
  mojo_Material_DEBUG_BORDER = 2,
  mojo_Material_IO_SURFACE_CONTENT = 3,
  mojo_Material_PICTURE_CONTENT = 4,
  mojo_Material_RENDER_PASS = 5,
  mojo_Material_SOLID_COLOR = 6,
  mojo_Material_STREAM_VIDEO_CONTENT = 7,
  mojo_Material_SURFACE_CONTENT = 8,
  mojo_Material_TEXTURE_CONTENT = 9,
  mojo_Material_TILED_CONTENT = 10,
  mojo_Material_YUV_VIDEO_CONTENT = 11,
  
  mojo_Material__UNKNOWN__ = 0xFFFFFFFF,
};

typedef uint32_t mojo_SkXfermode;
enum mojo_SkXfermode_Enum {
  mojo_SkXfermode_kClear_Mode = 0,
  mojo_SkXfermode_kSrc_Mode = 1,
  mojo_SkXfermode_kDst_Mode = 2,
  mojo_SkXfermode_kSrcOver_Mode = 3,
  mojo_SkXfermode_kDstOver_Mode = 4,
  mojo_SkXfermode_kSrcIn_Mode = 5,
  mojo_SkXfermode_kDstIn_Mode = 6,
  mojo_SkXfermode_kSrcOut_Mode = 7,
  mojo_SkXfermode_kDstOut_Mode = 8,
  mojo_SkXfermode_kSrcATop_Mode = 9,
  mojo_SkXfermode_kDstATop_Mode = 10,
  mojo_SkXfermode_kXor_Mode = 11,
  mojo_SkXfermode_kPlus_Mode = 12,
  mojo_SkXfermode_kModulate_Mode = 13,
  mojo_SkXfermode_kScreen_Mode = 14,
  mojo_SkXfermode_kLastCoeffMode = 14,
  mojo_SkXfermode_kOverlay_Mode = 15,
  mojo_SkXfermode_kDarken_Mode = 16,
  mojo_SkXfermode_kLighten_Mode = 17,
  mojo_SkXfermode_kColorDodge_Mode = 18,
  mojo_SkXfermode_kColorBurn_Mode = 19,
  mojo_SkXfermode_kHardLight_Mode = 20,
  mojo_SkXfermode_kSoftLight_Mode = 21,
  mojo_SkXfermode_kDifference_Mode = 22,
  mojo_SkXfermode_kExclusion_Mode = 23,
  mojo_SkXfermode_kMultiply_Mode = 24,
  mojo_SkXfermode_kLastSeparableMode = 24,
  mojo_SkXfermode_kHue_Mode = 25,
  mojo_SkXfermode_kSaturation_Mode = 26,
  mojo_SkXfermode_kColor_Mode = 27,
  mojo_SkXfermode_kLuminosity_Mode = 28,
  mojo_SkXfermode_kLastMode = 28,
  
  mojo_SkXfermode__UNKNOWN__ = 0xFFFFFFFF,
};



// Union definitions.


// Struct definitions.
// -- mojo_Color --
// Enums
// Constants
// Struct definition
struct mojo_Color {
  struct MojomStructHeader header_;
  uint32_t rgba;  // offset,bit = 0,0
  
};

struct mojo_Color* mojo_Color_New(struct MojomBuffer* in_buffer);

void mojo_Color_Init(
  struct mojo_Color* in_data);

void mojo_Color_CloseAllHandles(
  struct mojo_Color* in_data);

struct mojo_Color* mojo_Color_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Color* in_data);

size_t mojo_Color_ComputeSerializedSize(
  const struct mojo_Color* in_data);

MojomValidationResult mojo_Color_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Color_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Color_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_CheckerboardQuadState --
// Enums
// Constants
// Struct definition
struct mojo_CheckerboardQuadState {
  struct MojomStructHeader header_;
  
};

struct mojo_CheckerboardQuadState* mojo_CheckerboardQuadState_New(struct MojomBuffer* in_buffer);

void mojo_CheckerboardQuadState_Init(
  struct mojo_CheckerboardQuadState* in_data);

void mojo_CheckerboardQuadState_CloseAllHandles(
  struct mojo_CheckerboardQuadState* in_data);

struct mojo_CheckerboardQuadState* mojo_CheckerboardQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_CheckerboardQuadState* in_data);

size_t mojo_CheckerboardQuadState_ComputeSerializedSize(
  const struct mojo_CheckerboardQuadState* in_data);

MojomValidationResult mojo_CheckerboardQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_CheckerboardQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_CheckerboardQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_DebugBorderQuadState --
// Enums
// Constants
// Struct definition
struct mojo_DebugBorderQuadState {
  struct MojomStructHeader header_;
  
};

struct mojo_DebugBorderQuadState* mojo_DebugBorderQuadState_New(struct MojomBuffer* in_buffer);

void mojo_DebugBorderQuadState_Init(
  struct mojo_DebugBorderQuadState* in_data);

void mojo_DebugBorderQuadState_CloseAllHandles(
  struct mojo_DebugBorderQuadState* in_data);

struct mojo_DebugBorderQuadState* mojo_DebugBorderQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_DebugBorderQuadState* in_data);

size_t mojo_DebugBorderQuadState_ComputeSerializedSize(
  const struct mojo_DebugBorderQuadState* in_data);

MojomValidationResult mojo_DebugBorderQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_DebugBorderQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_DebugBorderQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_IoSurfaceContentQuadState --
// Enums
// Constants
// Struct definition
struct mojo_IoSurfaceContentQuadState {
  struct MojomStructHeader header_;
  
};

struct mojo_IoSurfaceContentQuadState* mojo_IoSurfaceContentQuadState_New(struct MojomBuffer* in_buffer);

void mojo_IoSurfaceContentQuadState_Init(
  struct mojo_IoSurfaceContentQuadState* in_data);

void mojo_IoSurfaceContentQuadState_CloseAllHandles(
  struct mojo_IoSurfaceContentQuadState* in_data);

struct mojo_IoSurfaceContentQuadState* mojo_IoSurfaceContentQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_IoSurfaceContentQuadState* in_data);

size_t mojo_IoSurfaceContentQuadState_ComputeSerializedSize(
  const struct mojo_IoSurfaceContentQuadState* in_data);

MojomValidationResult mojo_IoSurfaceContentQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_IoSurfaceContentQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_IoSurfaceContentQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_RenderPassId --
// Enums
// Constants
// Struct definition
struct mojo_RenderPassId {
  struct MojomStructHeader header_;
  int32_t layer_id;  // offset,bit = 0,0
  int32_t index;  // offset,bit = 4,0
  uint8_t pad1_[4];  // padding
  
};

struct mojo_RenderPassId* mojo_RenderPassId_New(struct MojomBuffer* in_buffer);

void mojo_RenderPassId_Init(
  struct mojo_RenderPassId* in_data);

void mojo_RenderPassId_CloseAllHandles(
  struct mojo_RenderPassId* in_data);

struct mojo_RenderPassId* mojo_RenderPassId_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_RenderPassId* in_data);

size_t mojo_RenderPassId_ComputeSerializedSize(
  const struct mojo_RenderPassId* in_data);

MojomValidationResult mojo_RenderPassId_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_RenderPassId_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_RenderPassId_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_RenderPassQuadState --
// Enums
// Constants
// Struct definition
struct mojo_RenderPassQuadState {
  struct MojomStructHeader header_;
  union mojo_RenderPassIdPtr render_pass_id;  // offset,bit = 0,0
  uint32_t mask_resource_id;  // offset,bit = 8,0
  uint8_t pad1_[4];  // padding
  union mojo_PointFPtr mask_uv_scale;  // offset,bit = 16,0
  union mojo_SizePtr mask_texture_size;  // offset,bit = 24,0
  union mojo_PointFPtr filters_scale;  // offset,bit = 32,0
  
};

struct mojo_RenderPassQuadState* mojo_RenderPassQuadState_New(struct MojomBuffer* in_buffer);

void mojo_RenderPassQuadState_Init(
  struct mojo_RenderPassQuadState* in_data);

void mojo_RenderPassQuadState_CloseAllHandles(
  struct mojo_RenderPassQuadState* in_data);

struct mojo_RenderPassQuadState* mojo_RenderPassQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_RenderPassQuadState* in_data);

size_t mojo_RenderPassQuadState_ComputeSerializedSize(
  const struct mojo_RenderPassQuadState* in_data);

MojomValidationResult mojo_RenderPassQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_RenderPassQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_RenderPassQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_SolidColorQuadState --
// Enums
// Constants
// Struct definition
struct mojo_SolidColorQuadState {
  struct MojomStructHeader header_;
  union mojo_ColorPtr color;  // offset,bit = 0,0
  bool force_anti_aliasing_off : 1;  // offset,bit = 8,0
  
};

struct mojo_SolidColorQuadState* mojo_SolidColorQuadState_New(struct MojomBuffer* in_buffer);

void mojo_SolidColorQuadState_Init(
  struct mojo_SolidColorQuadState* in_data);

void mojo_SolidColorQuadState_CloseAllHandles(
  struct mojo_SolidColorQuadState* in_data);

struct mojo_SolidColorQuadState* mojo_SolidColorQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_SolidColorQuadState* in_data);

size_t mojo_SolidColorQuadState_ComputeSerializedSize(
  const struct mojo_SolidColorQuadState* in_data);

MojomValidationResult mojo_SolidColorQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_SolidColorQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_SolidColorQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_SurfaceQuadState --
// Enums
// Constants
// Struct definition
struct mojo_SurfaceQuadState {
  struct MojomStructHeader header_;
  union mojo_SurfaceIdPtr surface;  // offset,bit = 0,0
  
};

struct mojo_SurfaceQuadState* mojo_SurfaceQuadState_New(struct MojomBuffer* in_buffer);

void mojo_SurfaceQuadState_Init(
  struct mojo_SurfaceQuadState* in_data);

void mojo_SurfaceQuadState_CloseAllHandles(
  struct mojo_SurfaceQuadState* in_data);

struct mojo_SurfaceQuadState* mojo_SurfaceQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_SurfaceQuadState* in_data);

size_t mojo_SurfaceQuadState_ComputeSerializedSize(
  const struct mojo_SurfaceQuadState* in_data);

MojomValidationResult mojo_SurfaceQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_SurfaceQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_SurfaceQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_TextureQuadState --
// Enums
// Constants
// Struct definition
struct mojo_TextureQuadState {
  struct MojomStructHeader header_;
  uint32_t resource_id;  // offset,bit = 0,0
  bool premultiplied_alpha : 1;  // offset,bit = 4,0
  bool flipped : 1;  // offset,bit = 4,1
  bool nearest_neighbor : 1;  // offset,bit = 4,2
  uint8_t pad3_[3];  // padding
  union mojo_PointFPtr uv_top_left;  // offset,bit = 8,0
  union mojo_PointFPtr uv_bottom_right;  // offset,bit = 16,0
  union mojo_ColorPtr background_color;  // offset,bit = 24,0
  union MojomArrayPtr vertex_opacity;  // offset,bit = 32,0
  
};

struct mojo_TextureQuadState* mojo_TextureQuadState_New(struct MojomBuffer* in_buffer);

void mojo_TextureQuadState_Init(
  struct mojo_TextureQuadState* in_data);

void mojo_TextureQuadState_CloseAllHandles(
  struct mojo_TextureQuadState* in_data);

struct mojo_TextureQuadState* mojo_TextureQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_TextureQuadState* in_data);

size_t mojo_TextureQuadState_ComputeSerializedSize(
  const struct mojo_TextureQuadState* in_data);

MojomValidationResult mojo_TextureQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_TextureQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_TextureQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_TileQuadState --
// Enums
// Constants
// Struct definition
struct mojo_TileQuadState {
  struct MojomStructHeader header_;
  union mojo_RectFPtr tex_coord_rect;  // offset,bit = 0,0
  union mojo_SizePtr texture_size;  // offset,bit = 8,0
  bool swizzle_contents : 1;  // offset,bit = 16,0
  bool nearest_neighbor : 1;  // offset,bit = 16,1
  uint8_t pad3_[3];  // padding
  uint32_t resource_id;  // offset,bit = 20,0
  uint8_t pad4_[4];  // padding
  
};

struct mojo_TileQuadState* mojo_TileQuadState_New(struct MojomBuffer* in_buffer);

void mojo_TileQuadState_Init(
  struct mojo_TileQuadState* in_data);

void mojo_TileQuadState_CloseAllHandles(
  struct mojo_TileQuadState* in_data);

struct mojo_TileQuadState* mojo_TileQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_TileQuadState* in_data);

size_t mojo_TileQuadState_ComputeSerializedSize(
  const struct mojo_TileQuadState* in_data);

MojomValidationResult mojo_TileQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_TileQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_TileQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_StreamVideoQuadState --
// Enums
// Constants
// Struct definition
struct mojo_StreamVideoQuadState {
  struct MojomStructHeader header_;
  
};

struct mojo_StreamVideoQuadState* mojo_StreamVideoQuadState_New(struct MojomBuffer* in_buffer);

void mojo_StreamVideoQuadState_Init(
  struct mojo_StreamVideoQuadState* in_data);

void mojo_StreamVideoQuadState_CloseAllHandles(
  struct mojo_StreamVideoQuadState* in_data);

struct mojo_StreamVideoQuadState* mojo_StreamVideoQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_StreamVideoQuadState* in_data);

size_t mojo_StreamVideoQuadState_ComputeSerializedSize(
  const struct mojo_StreamVideoQuadState* in_data);

MojomValidationResult mojo_StreamVideoQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_StreamVideoQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_StreamVideoQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_YUVVideoQuadState --
// Enums
// Constants
// Struct definition
struct mojo_YUVVideoQuadState {
  struct MojomStructHeader header_;
  union mojo_RectFPtr tex_coord_rect;  // offset,bit = 0,0
  uint32_t y_plane_resource_id;  // offset,bit = 8,0
  uint32_t u_plane_resource_id;  // offset,bit = 12,0
  uint32_t v_plane_resource_id;  // offset,bit = 16,0
  uint32_t a_plane_resource_id;  // offset,bit = 20,0
  mojo_YUVColorSpace color_space;  // offset,bit = 24,0
  
};

struct mojo_YUVVideoQuadState* mojo_YUVVideoQuadState_New(struct MojomBuffer* in_buffer);

void mojo_YUVVideoQuadState_Init(
  struct mojo_YUVVideoQuadState* in_data);

void mojo_YUVVideoQuadState_CloseAllHandles(
  struct mojo_YUVVideoQuadState* in_data);

struct mojo_YUVVideoQuadState* mojo_YUVVideoQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_YUVVideoQuadState* in_data);

size_t mojo_YUVVideoQuadState_ComputeSerializedSize(
  const struct mojo_YUVVideoQuadState* in_data);

MojomValidationResult mojo_YUVVideoQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_YUVVideoQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_YUVVideoQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_Quad --
// Enums
// Constants
// Struct definition
struct mojo_Quad {
  struct MojomStructHeader header_;
  mojo_Material material;  // offset,bit = 0,0
  bool needs_blending : 1;  // offset,bit = 4,0
  uint8_t pad1_[3];  // padding
  union mojo_RectPtr rect;  // offset,bit = 8,0
  union mojo_RectPtr opaque_rect;  // offset,bit = 16,0
  union mojo_RectPtr visible_rect;  // offset,bit = 24,0
  uint32_t shared_quad_state_index;  // offset,bit = 32,0
  uint8_t pad5_[4];  // padding
  union mojo_CheckerboardQuadStatePtr checkerboard_quad_state;  // offset,bit = 40,0
  union mojo_DebugBorderQuadStatePtr debug_border_quad_state;  // offset,bit = 48,0
  union mojo_IoSurfaceContentQuadStatePtr io_surface_quad_state;  // offset,bit = 56,0
  union mojo_RenderPassQuadStatePtr render_pass_quad_state;  // offset,bit = 64,0
  union mojo_SolidColorQuadStatePtr solid_color_quad_state;  // offset,bit = 72,0
  union mojo_SurfaceQuadStatePtr surface_quad_state;  // offset,bit = 80,0
  union mojo_TextureQuadStatePtr texture_quad_state;  // offset,bit = 88,0
  union mojo_TileQuadStatePtr tile_quad_state;  // offset,bit = 96,0
  union mojo_StreamVideoQuadStatePtr stream_video_quad_state;  // offset,bit = 104,0
  union mojo_YUVVideoQuadStatePtr yuv_video_quad_state;  // offset,bit = 112,0
  
};

struct mojo_Quad* mojo_Quad_New(struct MojomBuffer* in_buffer);

void mojo_Quad_Init(
  struct mojo_Quad* in_data);

void mojo_Quad_CloseAllHandles(
  struct mojo_Quad* in_data);

struct mojo_Quad* mojo_Quad_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Quad* in_data);

size_t mojo_Quad_ComputeSerializedSize(
  const struct mojo_Quad* in_data);

MojomValidationResult mojo_Quad_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Quad_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Quad_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_SharedQuadState --
// Enums
// Constants
// Struct definition
struct mojo_SharedQuadState {
  struct MojomStructHeader header_;
  union mojo_TransformPtr content_to_target_transform;  // offset,bit = 0,0
  union mojo_SizePtr content_bounds;  // offset,bit = 8,0
  union mojo_RectPtr visible_content_rect;  // offset,bit = 16,0
  union mojo_RectPtr clip_rect;  // offset,bit = 24,0
  bool is_clipped : 1;  // offset,bit = 32,0
  uint8_t pad4_[3];  // padding
  float opacity;  // offset,bit = 36,0
  mojo_SkXfermode blend_mode;  // offset,bit = 40,0
  int32_t sorting_context_id;  // offset,bit = 44,0
  uint8_t pad7_[4];  // padding
  
};

struct mojo_SharedQuadState* mojo_SharedQuadState_New(struct MojomBuffer* in_buffer);

void mojo_SharedQuadState_Init(
  struct mojo_SharedQuadState* in_data);

void mojo_SharedQuadState_CloseAllHandles(
  struct mojo_SharedQuadState* in_data);

struct mojo_SharedQuadState* mojo_SharedQuadState_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_SharedQuadState* in_data);

size_t mojo_SharedQuadState_ComputeSerializedSize(
  const struct mojo_SharedQuadState* in_data);

MojomValidationResult mojo_SharedQuadState_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_SharedQuadState_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_SharedQuadState_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- mojo_Pass --
// Enums
// Constants
// Struct definition
struct mojo_Pass {
  struct MojomStructHeader header_;
  int32_t id;  // offset,bit = 0,0
  bool has_transparent_background : 1;  // offset,bit = 4,0
  uint8_t pad1_[3];  // padding
  union mojo_RectPtr output_rect;  // offset,bit = 8,0
  union mojo_RectPtr damage_rect;  // offset,bit = 16,0
  union mojo_TransformPtr transform_to_root_target;  // offset,bit = 24,0
  union MojomArrayPtr quads;  // offset,bit = 32,0
  union MojomArrayPtr shared_quad_states;  // offset,bit = 40,0
  
};

struct mojo_Pass* mojo_Pass_New(struct MojomBuffer* in_buffer);

void mojo_Pass_Init(
  struct mojo_Pass* in_data);

void mojo_Pass_CloseAllHandles(
  struct mojo_Pass* in_data);

struct mojo_Pass* mojo_Pass_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct mojo_Pass* in_data);

size_t mojo_Pass_ComputeSerializedSize(
  const struct mojo_Pass* in_data);

MojomValidationResult mojo_Pass_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult mojo_Pass_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult mojo_Pass_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.


// Type tables declarations for structs and unions.



extern struct MojomPointerTableStructEntry mojo_Color__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_CheckerboardQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_DebugBorderQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_IoSurfaceContentQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_RenderPassId__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_RenderPassQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_SolidColorQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_SurfaceQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_TextureQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_TileQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_StreamVideoQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_YUVVideoQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_Quad__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_SharedQuadState__PointerTable[];
extern struct MojomPointerTableStructEntry mojo_Pass__PointerTable[];


#endif  // MOJO_SERVICES_SURFACES_INTERFACES_QUADS_MOJOM_C_H_