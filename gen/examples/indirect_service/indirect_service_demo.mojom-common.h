// NOTE: This file was generated by the Mojo bindings generator.
#ifndef EXAMPLES_INDIRECT_SERVICE_INDIRECT_SERVICE_DEMO_MOJOM_COMMON_H_
#define EXAMPLES_INDIRECT_SERVICE_INDIRECT_SERVICE_DEMO_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "examples/indirect_service/indirect_service_demo.mojom-internal.h"
namespace mojo {
namespace examples {

// --- Interface Forward Declarations ---
class IntegerService;
class IntegerServiceRequestValidator;
class IntegerServiceResponseValidator;
class IntegerService_Synchronous;
class IndirectIntegerService;
class IndirectIntegerServiceRequestValidator;
class IndirectIntegerService_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class IntegerService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = IntegerServiceRequestValidator;
  using ResponseValidator_ = IntegerServiceResponseValidator;
  using Synchronous_ = IntegerService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Increment = 0,
  };


  virtual ~IntegerService_Base() {}
};

}  // namespace internal

// Async interface declaration

class IntegerServiceProxy;
class IntegerServiceStub;
class IntegerService_Synchronous;

class IntegerServiceRequestValidator;
class IntegerServiceResponseValidator;

class IntegerService : public internal::IntegerService_Base {
 public:
  virtual ~IntegerService() override {}

  using Proxy_ = IntegerServiceProxy;
  using Stub_ = IntegerServiceStub;
  using IncrementCallback = mojo::Callback<void(int32_t)>;
  virtual void Increment(const IncrementCallback& callback) = 0;
};

namespace internal {
class IndirectIntegerService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = IndirectIntegerServiceRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = IndirectIntegerService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Set = 0,
    Get = 1,
  };


  virtual ~IndirectIntegerService_Base() {}
};

}  // namespace internal

// Async interface declaration

class IndirectIntegerServiceProxy;
class IndirectIntegerServiceStub;
class IndirectIntegerService_Synchronous;

class IndirectIntegerServiceRequestValidator;

class IndirectIntegerService : public internal::IndirectIntegerService_Base {
 public:
  virtual ~IndirectIntegerService() override {}

  using Proxy_ = IndirectIntegerServiceProxy;
  using Stub_ = IndirectIntegerServiceStub;
  virtual void Set(mojo::InterfaceHandle<IntegerService> service) = 0;
  virtual void Get(mojo::InterfaceRequest<IntegerService> service) = 0;
};

}  // namespace examples
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace mojo {
namespace examples {

// --- Interface Request Validators ---
class IntegerServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class IndirectIntegerServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class IntegerServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class IntegerService_Increment_Params;

using IntegerService_Increment_ParamsPtr = mojo::InlinedStructPtr<IntegerService_Increment_Params>;


size_t GetSerializedSize_(const IntegerService_Increment_Params& input);
mojo::internal::ValidationError Serialize_(
    IntegerService_Increment_Params* input,
    mojo::internal::Buffer* buffer,
    internal::IntegerService_Increment_Params_Data** output);
void Deserialize_(internal::IntegerService_Increment_Params_Data* input,
                  IntegerService_Increment_Params* output);

class IntegerService_Increment_Params {
 public:
  using Data_ = internal::IntegerService_Increment_Params_Data;

  static IntegerService_Increment_ParamsPtr New();

  template <typename U>
  static IntegerService_Increment_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<IntegerService_Increment_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IntegerService_Increment_Params>::Convert(*this);
  }

  IntegerService_Increment_Params();
  ~IntegerService_Increment_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  IntegerService_Increment_ParamsPtr Clone() const;
  bool Equals(const IntegerService_Increment_Params& other) const;

};



class IntegerService_Increment_ResponseParams;

using IntegerService_Increment_ResponseParamsPtr = mojo::InlinedStructPtr<IntegerService_Increment_ResponseParams>;


size_t GetSerializedSize_(const IntegerService_Increment_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    IntegerService_Increment_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::IntegerService_Increment_ResponseParams_Data** output);
void Deserialize_(internal::IntegerService_Increment_ResponseParams_Data* input,
                  IntegerService_Increment_ResponseParams* output);

class IntegerService_Increment_ResponseParams {
 public:
  using Data_ = internal::IntegerService_Increment_ResponseParams_Data;

  static IntegerService_Increment_ResponseParamsPtr New();

  template <typename U>
  static IntegerService_Increment_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<IntegerService_Increment_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IntegerService_Increment_ResponseParams>::Convert(*this);
  }

  IntegerService_Increment_ResponseParams();
  ~IntegerService_Increment_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  IntegerService_Increment_ResponseParamsPtr Clone() const;
  bool Equals(const IntegerService_Increment_ResponseParams& other) const;

  int32_t value;
};


      

class IndirectIntegerService_Set_Params;

using IndirectIntegerService_Set_ParamsPtr = mojo::StructPtr<IndirectIntegerService_Set_Params>;


size_t GetSerializedSize_(const IndirectIntegerService_Set_Params& input);
mojo::internal::ValidationError Serialize_(
    IndirectIntegerService_Set_Params* input,
    mojo::internal::Buffer* buffer,
    internal::IndirectIntegerService_Set_Params_Data** output);
void Deserialize_(internal::IndirectIntegerService_Set_Params_Data* input,
                  IndirectIntegerService_Set_Params* output);

class IndirectIntegerService_Set_Params {
 public:
  using Data_ = internal::IndirectIntegerService_Set_Params_Data;

  static IndirectIntegerService_Set_ParamsPtr New();

  template <typename U>
  static IndirectIntegerService_Set_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<IndirectIntegerService_Set_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IndirectIntegerService_Set_Params>::Convert(*this);
  }

  IndirectIntegerService_Set_Params();
  ~IndirectIntegerService_Set_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const IndirectIntegerService_Set_Params& other) const;

  mojo::InterfaceHandle<IntegerService> service;
};




class IndirectIntegerService_Get_Params;

using IndirectIntegerService_Get_ParamsPtr = mojo::StructPtr<IndirectIntegerService_Get_Params>;


size_t GetSerializedSize_(const IndirectIntegerService_Get_Params& input);
mojo::internal::ValidationError Serialize_(
    IndirectIntegerService_Get_Params* input,
    mojo::internal::Buffer* buffer,
    internal::IndirectIntegerService_Get_Params_Data** output);
void Deserialize_(internal::IndirectIntegerService_Get_Params_Data* input,
                  IndirectIntegerService_Get_Params* output);

class IndirectIntegerService_Get_Params {
 public:
  using Data_ = internal::IndirectIntegerService_Get_Params_Data;

  static IndirectIntegerService_Get_ParamsPtr New();

  template <typename U>
  static IndirectIntegerService_Get_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<IndirectIntegerService_Get_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IndirectIntegerService_Get_Params>::Convert(*this);
  }

  IndirectIntegerService_Get_Params();
  ~IndirectIntegerService_Get_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const IndirectIntegerService_Get_Params& other) const;

  mojo::InterfaceRequest<IntegerService> service;
};



}  // namespace examples
}  // namespace mojo

#endif  // EXAMPLES_INDIRECT_SERVICE_INDIRECT_SERVICE_DEMO_MOJOM_COMMON_H_
