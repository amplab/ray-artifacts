// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_SYNC_H_
#define MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/network/interfaces/network_service.mojom-internal.h"
#include "mojo/services/network/interfaces/network_service.mojom-common.h"
#include "mojo/public/interfaces/network/network_error.mojom.h"
#include "mojo/services/network/interfaces/cookie_store.mojom.h"
#include "mojo/services/network/interfaces/host_resolver.mojom.h"
#include "mojo/services/network/interfaces/http_server.mojom.h"
#include "mojo/services/network/interfaces/net_address.mojom.h"
#include "mojo/services/network/interfaces/tcp_bound_socket.mojom.h"
#include "mojo/services/network/interfaces/tcp_connected_socket.mojom.h"
#include "mojo/services/network/interfaces/udp_socket.mojom.h"
#include "mojo/services/network/interfaces/url_loader.mojom.h"
#include "mojo/services/network/interfaces/url_loader_interceptor.mojom.h"
#include "mojo/services/network/interfaces/web_socket.mojom.h"


namespace mojo {

// --- Synchronous interface declaration ---

class NetworkService_SynchronousProxy;
class NetworkService_Synchronous
  : public internal::NetworkService_Base {
 public:
  virtual ~NetworkService_Synchronous() override {}
  
  using Proxy_ = NetworkService_SynchronousProxy;
  virtual bool CreateURLLoader(
      mojo::InterfaceRequest<mojo::URLLoader> in_loader)const= 0;
  virtual bool GetCookieStore(
      mojo::InterfaceRequest<mojo::CookieStore> in_cookie_store)const= 0;
  virtual bool CreateWebSocket(
      mojo::InterfaceRequest<mojo::WebSocket> in_socket)const= 0;
  virtual bool CreateTCPBoundSocket(
      mojo::NetAddressPtr in_local_address, mojo::InterfaceRequest<mojo::TCPBoundSocket> in_bound_socket, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_bound_to)= 0;
  virtual bool CreateTCPConnectedSocket(
      mojo::NetAddressPtr in_remote_address, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::ScopedDataPipeProducerHandle in_receive_stream, mojo::InterfaceRequest<mojo::TCPConnectedSocket> in_client_socket, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_local_address)= 0;
  virtual bool CreateUDPSocket(
      mojo::InterfaceRequest<mojo::UDPSocket> in_socket)const= 0;
  virtual bool CreateHttpServer(
      mojo::NetAddressPtr in_local_address, mojo::InterfaceHandle<mojo::HttpServerDelegate> in_delegate, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_bound_to)= 0;
  virtual bool RegisterURLLoaderInterceptor(
      mojo::InterfaceHandle<mojo::URLLoaderInterceptorFactory> in_factory)const= 0;
  virtual bool CreateHostResolver(
      mojo::InterfaceRequest<mojo::HostResolver> in_host_resolver)const= 0;
};

class NetworkService_SynchronousProxy
    : public NetworkService_Synchronous {
 public:
  explicit NetworkService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool CreateURLLoader(mojo::InterfaceRequest<mojo::URLLoader> in_loader) const  override;
  bool GetCookieStore(mojo::InterfaceRequest<mojo::CookieStore> in_cookie_store) const  override;
  bool CreateWebSocket(mojo::InterfaceRequest<mojo::WebSocket> in_socket) const  override;
  bool CreateTCPBoundSocket(mojo::NetAddressPtr in_local_address, mojo::InterfaceRequest<mojo::TCPBoundSocket> in_bound_socket, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_bound_to) override;
  bool CreateTCPConnectedSocket(mojo::NetAddressPtr in_remote_address, mojo::ScopedDataPipeConsumerHandle in_send_stream, mojo::ScopedDataPipeProducerHandle in_receive_stream, mojo::InterfaceRequest<mojo::TCPConnectedSocket> in_client_socket, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_local_address) override;
  bool CreateUDPSocket(mojo::InterfaceRequest<mojo::UDPSocket> in_socket) const  override;
  bool CreateHttpServer(mojo::NetAddressPtr in_local_address, mojo::InterfaceHandle<mojo::HttpServerDelegate> in_delegate, mojo::NetworkErrorPtr* out_result, mojo::NetAddressPtr* out_bound_to) override;
  bool RegisterURLLoaderInterceptor(mojo::InterfaceHandle<mojo::URLLoaderInterceptorFactory> in_factory) const  override;
  bool CreateHostResolver(mojo::InterfaceRequest<mojo::HostResolver> in_host_resolver) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace mojo

#endif  // MOJO_SERVICES_NETWORK_INTERFACES_NETWORK_SERVICE_MOJOM_SYNC_H_
