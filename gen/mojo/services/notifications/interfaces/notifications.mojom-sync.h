// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NOTIFICATIONS_INTERFACES_NOTIFICATIONS_MOJOM_SYNC_H_
#define MOJO_SERVICES_NOTIFICATIONS_INTERFACES_NOTIFICATIONS_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/notifications/interfaces/notifications.mojom-internal.h"
#include "mojo/services/notifications/interfaces/notifications.mojom-common.h"


namespace notifications {

// --- Synchronous interface declaration ---

class NotificationClient_SynchronousProxy;
class NotificationClient_Synchronous
  : public internal::NotificationClient_Base {
 public:
  virtual ~NotificationClient_Synchronous() override {}
  
  using Proxy_ = NotificationClient_SynchronousProxy;
  virtual bool OnSelected(
      )const= 0;
  virtual bool OnDismissed(
      )const= 0;
};

class NotificationClient_SynchronousProxy
    : public NotificationClient_Synchronous {
 public:
  explicit NotificationClient_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool OnSelected() const  override;
  bool OnDismissed() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class Notification_SynchronousProxy;
class Notification_Synchronous
  : public internal::Notification_Base {
 public:
  virtual ~Notification_Synchronous() override {}
  
  using Proxy_ = Notification_SynchronousProxy;
  virtual bool Update(
      NotificationDataPtr in_notification_data)const= 0;
  virtual bool Cancel(
      )const= 0;
};

class Notification_SynchronousProxy
    : public Notification_Synchronous {
 public:
  explicit Notification_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Update(NotificationDataPtr in_notification_data) const  override;
  bool Cancel() const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class NotificationService_SynchronousProxy;
class NotificationService_Synchronous
  : public internal::NotificationService_Base {
 public:
  virtual ~NotificationService_Synchronous() override {}
  
  using Proxy_ = NotificationService_SynchronousProxy;
  virtual bool Post(
      NotificationDataPtr in_notification_data, mojo::InterfaceHandle<NotificationClient> in_client, mojo::InterfaceRequest<Notification> in_notification)const= 0;
};

class NotificationService_SynchronousProxy
    : public NotificationService_Synchronous {
 public:
  explicit NotificationService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool Post(NotificationDataPtr in_notification_data, mojo::InterfaceHandle<NotificationClient> in_client, mojo::InterfaceRequest<Notification> in_notification) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace notifications

#endif  // MOJO_SERVICES_NOTIFICATIONS_INTERFACES_NOTIFICATIONS_MOJOM_SYNC_H_
