// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/js/system/tests/js_to_cpp.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "services/js/system/tests/js_to_cpp.mojom-internal.h"
#include "services/js/system/tests/js_to_cpp.mojom-common.h"
namespace js_to_cpp {

// --- Interface definitions ---
CppSide_SynchronousProxy::CppSide_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool CppSide_SynchronousProxy::StartTest() const  {
  size_t size = sizeof(internal::CppSide_StartTest_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::StartTest);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CppSide_StartTest_Params_Data* out_params =
      internal::CppSide_StartTest_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CppSide_SynchronousProxy::TestFinished() const  {
  size_t size = sizeof(internal::CppSide_TestFinished_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::TestFinished);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CppSide_TestFinished_Params_Data* out_params =
      internal::CppSide_TestFinished_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CppSide_SynchronousProxy::PingResponse() const  {
  size_t size = sizeof(internal::CppSide_PingResponse_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::PingResponse);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CppSide_PingResponse_Params_Data* out_params =
      internal::CppSide_PingResponse_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CppSide_SynchronousProxy::EchoResponse(EchoArgsListPtr in_list) const  {
  size_t size = sizeof(internal::CppSide_EchoResponse_Params_Data);
  size += in_list.is_null()
              ? 0
              : GetSerializedSize_(*in_list);

  auto msg_name = static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::EchoResponse);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CppSide_EchoResponse_Params_Data* out_params =
      internal::CppSide_EchoResponse_Params_Data::New(builder.buffer());
  {Serialize_(in_list.get(),
               builder.buffer(),
               &out_params->list.ptr);
  }
  if (!out_params->list.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null list in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CppSide_SynchronousProxy::BitFlipResponse(EchoArgsListPtr in_arg) const  {
  size_t size = sizeof(internal::CppSide_BitFlipResponse_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);

  auto msg_name = static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::BitFlipResponse);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CppSide_BitFlipResponse_Params_Data* out_params =
      internal::CppSide_BitFlipResponse_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &out_params->arg.ptr);
  }
  if (!out_params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool CppSide_SynchronousProxy::BackPointerResponse(EchoArgsListPtr in_arg) const  {
  size_t size = sizeof(internal::CppSide_BackPointerResponse_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);

  auto msg_name = static_cast<uint32_t>(internal::CppSide_Base::MessageOrdinals::BackPointerResponse);
  mojo::MessageBuilder builder(msg_name, size);

  internal::CppSide_BackPointerResponse_Params_Data* out_params =
      internal::CppSide_BackPointerResponse_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &out_params->arg.ptr);
  }
  if (!out_params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}JsSide_SynchronousProxy::JsSide_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool JsSide_SynchronousProxy::SetCppSide(mojo::InterfaceHandle<CppSide> in_cpp) const  {
  size_t size = sizeof(internal::JsSide_SetCppSide_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::SetCppSide);
  mojo::MessageBuilder builder(msg_name, size);

  internal::JsSide_SetCppSide_Params_Data* out_params =
      internal::JsSide_SetCppSide_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_cpp.Pass(),
                                        &out_params->cpp);
  if (!out_params->cpp.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid cpp in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool JsSide_SynchronousProxy::Ping() const  {
  size_t size = sizeof(internal::JsSide_Ping_Params_Data);

  auto msg_name = static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::Ping);
  mojo::MessageBuilder builder(msg_name, size);

  internal::JsSide_Ping_Params_Data* out_params =
      internal::JsSide_Ping_Params_Data::New(builder.buffer());
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool JsSide_SynchronousProxy::Echo(int32_t in_numIterations, EchoArgsPtr in_arg) const  {
  size_t size = sizeof(internal::JsSide_Echo_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);

  auto msg_name = static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::Echo);
  mojo::MessageBuilder builder(msg_name, size);

  internal::JsSide_Echo_Params_Data* out_params =
      internal::JsSide_Echo_Params_Data::New(builder.buffer());
  out_params->numIterations = in_numIterations;
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &out_params->arg.ptr);
  }
  if (!out_params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool JsSide_SynchronousProxy::BitFlip(EchoArgsPtr in_arg) const  {
  size_t size = sizeof(internal::JsSide_BitFlip_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);

  auto msg_name = static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::BitFlip);
  mojo::MessageBuilder builder(msg_name, size);

  internal::JsSide_BitFlip_Params_Data* out_params =
      internal::JsSide_BitFlip_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &out_params->arg.ptr);
  }
  if (!out_params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
bool JsSide_SynchronousProxy::BackPointer(EchoArgsPtr in_arg) const  {
  size_t size = sizeof(internal::JsSide_BackPointer_Params_Data);
  size += in_arg.is_null()
              ? 0
              : GetSerializedSize_(*in_arg);

  auto msg_name = static_cast<uint32_t>(internal::JsSide_Base::MessageOrdinals::BackPointer);
  mojo::MessageBuilder builder(msg_name, size);

  internal::JsSide_BackPointer_Params_Data* out_params =
      internal::JsSide_BackPointer_Params_Data::New(builder.buffer());
  {Serialize_(in_arg.get(),
               builder.buffer(),
               &out_params->arg.ptr);
  }
  if (!out_params->arg.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null arg in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  return true;
}
}  // namespace js_to_cpp

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
