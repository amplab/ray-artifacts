// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library network_test_service_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _NetworkTestServiceGetFileSizeParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String url = null;

  _NetworkTestServiceGetFileSizeParams() : super(kVersions.last.size);

  _NetworkTestServiceGetFileSizeParams.init(
    String this.url
  ) : super(kVersions.last.size);

  static _NetworkTestServiceGetFileSizeParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkTestServiceGetFileSizeParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkTestServiceGetFileSizeParams result = new _NetworkTestServiceGetFileSizeParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.url = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkTestServiceGetFileSizeParams";
    String fieldName;
    try {
      fieldName = "url";
      encoder0.encodeString(url, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkTestServiceGetFileSizeParams("
           "url: $url" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["url"] = url;
    return map;
  }
}


class NetworkTestServiceGetFileSizeResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  bool ok = false;
  int size = 0;

  NetworkTestServiceGetFileSizeResponseParams() : super(kVersions.last.size);

  NetworkTestServiceGetFileSizeResponseParams.init(
    bool this.ok, 
    int this.size
  ) : super(kVersions.last.size);

  static NetworkTestServiceGetFileSizeResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static NetworkTestServiceGetFileSizeResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    NetworkTestServiceGetFileSizeResponseParams result = new NetworkTestServiceGetFileSizeResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.ok = decoder0.decodeBool(8, 0);
    }
    if (mainDataHeader.version >= 0) {
      
      result.size = decoder0.decodeUint64(16);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "NetworkTestServiceGetFileSizeResponseParams";
    String fieldName;
    try {
      fieldName = "ok";
      encoder0.encodeBool(ok, 8, 0);
      fieldName = "size";
      encoder0.encodeUint64(size, 16);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "NetworkTestServiceGetFileSizeResponseParams("
           "ok: $ok" ", "
           "size: $size" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["ok"] = ok;
    map["size"] = size;
    return map;
  }
}


class _NetworkTestServiceQuitParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _NetworkTestServiceQuitParams() : super(kVersions.last.size);

  _NetworkTestServiceQuitParams.init(
  ) : super(kVersions.last.size);

  static _NetworkTestServiceQuitParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _NetworkTestServiceQuitParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _NetworkTestServiceQuitParams result = new _NetworkTestServiceQuitParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_NetworkTestServiceQuitParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_NetworkTestServiceQuitParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}

const int _networkTestServiceMethodGetFileSizeName = 0;
const int _networkTestServiceMethodQuitName = 1;

class _NetworkTestServiceServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class NetworkTestService {
  static const String serviceName = "js::NetworkTestService";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _NetworkTestServiceServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static NetworkTestServiceProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    NetworkTestServiceProxy p = new NetworkTestServiceProxy.unbound();
    String name = serviceName ?? NetworkTestService.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void getFileSize(String url,void callback(bool ok, int size));
  void quit();
}

abstract class NetworkTestServiceInterface
    implements bindings.MojoInterface<NetworkTestService>,
               NetworkTestService {
  factory NetworkTestServiceInterface([NetworkTestService impl]) =>
      new NetworkTestServiceStub.unbound(impl);

  factory NetworkTestServiceInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [NetworkTestService impl]) =>
      new NetworkTestServiceStub.fromEndpoint(endpoint, impl);

  factory NetworkTestServiceInterface.fromMock(
      NetworkTestService mock) =>
      new NetworkTestServiceProxy.fromMock(mock);
}

abstract class NetworkTestServiceInterfaceRequest
    implements bindings.MojoInterface<NetworkTestService>,
               NetworkTestService {
  factory NetworkTestServiceInterfaceRequest() =>
      new NetworkTestServiceProxy.unbound();
}

class _NetworkTestServiceProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<NetworkTestService> {
  NetworkTestService impl;

  _NetworkTestServiceProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _NetworkTestServiceProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _NetworkTestServiceProxyControl.unbound() : super.unbound();

  String get serviceName => NetworkTestService.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _networkTestServiceMethodGetFileSizeName:
        var r = NetworkTestServiceGetFileSizeResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.ok , r.size );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NetworkTestServiceProxyControl($superString)";
  }
}

class NetworkTestServiceProxy
    extends bindings.Proxy<NetworkTestService>
    implements NetworkTestService,
               NetworkTestServiceInterface,
               NetworkTestServiceInterfaceRequest {
  NetworkTestServiceProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _NetworkTestServiceProxyControl.fromEndpoint(endpoint));

  NetworkTestServiceProxy.fromHandle(core.MojoHandle handle)
      : super(new _NetworkTestServiceProxyControl.fromHandle(handle));

  NetworkTestServiceProxy.unbound()
      : super(new _NetworkTestServiceProxyControl.unbound());

  factory NetworkTestServiceProxy.fromMock(NetworkTestService mock) {
    NetworkTestServiceProxy newMockedProxy =
        new NetworkTestServiceProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static NetworkTestServiceProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NetworkTestServiceProxy"));
    return new NetworkTestServiceProxy.fromEndpoint(endpoint);
  }


  void getFileSize(String url,void callback(bool ok, int size)) {
    if (impl != null) {
      impl.getFileSize(url,callback);
      return;
    }
    var params = new _NetworkTestServiceGetFileSizeParams();
    params.url = url;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((bool ok, int size) {
        z.bindCallback(() {
          callback(ok, size);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _networkTestServiceMethodGetFileSizeName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
  void quit() {
    if (impl != null) {
      impl.quit();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _NetworkTestServiceQuitParams();
    ctrl.sendMessage(params,
        _networkTestServiceMethodQuitName);
  }
}

class _NetworkTestServiceStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<NetworkTestService> {
  NetworkTestService _impl;

  _NetworkTestServiceStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NetworkTestService impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _NetworkTestServiceStubControl.fromHandle(
      core.MojoHandle handle, [NetworkTestService impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _NetworkTestServiceStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => NetworkTestService.serviceName;


  Function _networkTestServiceGetFileSizeResponseParamsResponder(
      int requestId) {
  return (bool ok, int size) {
      var result = new NetworkTestServiceGetFileSizeResponseParams();
      result.ok = ok;
      result.size = size;
      sendResponse(buildResponseWithId(
          result,
          _networkTestServiceMethodGetFileSizeName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _networkTestServiceMethodGetFileSizeName:
        var params = _NetworkTestServiceGetFileSizeParams.deserialize(
            message.payload);
        _impl.getFileSize(params.url, _networkTestServiceGetFileSizeResponseParamsResponder(message.header.requestId));
        break;
      case _networkTestServiceMethodQuitName:
        _impl.quit();
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  NetworkTestService get impl => _impl;
  set impl(NetworkTestService d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_NetworkTestServiceStubControl($superString)";
  }

  int get version => 0;
}

class NetworkTestServiceStub
    extends bindings.Stub<NetworkTestService>
    implements NetworkTestService,
               NetworkTestServiceInterface,
               NetworkTestServiceInterfaceRequest {
  NetworkTestServiceStub.unbound([NetworkTestService impl])
      : super(new _NetworkTestServiceStubControl.unbound(impl));

  NetworkTestServiceStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [NetworkTestService impl])
      : super(new _NetworkTestServiceStubControl.fromEndpoint(endpoint, impl));

  NetworkTestServiceStub.fromHandle(
      core.MojoHandle handle, [NetworkTestService impl])
      : super(new _NetworkTestServiceStubControl.fromHandle(handle, impl));

  static NetworkTestServiceStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For NetworkTestServiceStub"));
    return new NetworkTestServiceStub.fromEndpoint(endpoint);
  }


  void getFileSize(String url,void callback(bool ok, int size)) {
    return impl.getFileSize(url,callback);
  }
  void quit() {
    return impl.quit();
  }
}



