// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/authentication/interfaces/authentication_admin.mojom
//

package authentication_admin

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type AuthenticationAdminService interface {
	GetOAuth2DeviceCode(inScopes []string) (outVerificationUrl *string, outDeviceCode *string, outUserCode *string, outError *string, err error)
	AddAccount(inDeviceCode string) (outUsername *string, outError *string, err error)
	GetAllUsers() (outUsernames []string, outError *string, err error)
}



var authenticationAdminService_Name = "authentication::AuthenticationAdminService"

type AuthenticationAdminService_Request bindings.InterfaceRequest

func (r *AuthenticationAdminService_Request) Name() string {
	return authenticationAdminService_Name
}


type AuthenticationAdminService_Pointer bindings.InterfacePointer

func (p *AuthenticationAdminService_Pointer) Name() string {
	return authenticationAdminService_Name
}

type AuthenticationAdminService_ServiceFactory struct{
	Delegate AuthenticationAdminService_Factory
}

type AuthenticationAdminService_Factory interface {
	Create(request AuthenticationAdminService_Request)
}

func (f *AuthenticationAdminService_ServiceFactory) Name() string {
	return authenticationAdminService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *AuthenticationAdminService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &AuthenticationAdminService_ServiceDescription{}
}

func (f *AuthenticationAdminService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := AuthenticationAdminService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForAuthenticationAdminService creates a message pipe for use with the
// AuthenticationAdminService interface with a AuthenticationAdminService_Request on one end and a AuthenticationAdminService_Pointer on the other.
func CreateMessagePipeForAuthenticationAdminService() (AuthenticationAdminService_Request, AuthenticationAdminService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return AuthenticationAdminService_Request(r), AuthenticationAdminService_Pointer(p)
}

const authenticationAdminService_GetOAuth2DeviceCode_Name uint32 = 0
const authenticationAdminService_AddAccount_Name uint32 = 1
const authenticationAdminService_GetAllUsers_Name uint32 = 2

type AuthenticationAdminService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewAuthenticationAdminServiceProxy(p AuthenticationAdminService_Pointer, waiter bindings.AsyncWaiter) *AuthenticationAdminService_Proxy {
	return &AuthenticationAdminService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *AuthenticationAdminService_Proxy) Close_Proxy() {
	p.router.Close()
}

type authenticationAdminService_GetOAuth2DeviceCode_Params struct {
	inScopes []string
}


func (s *authenticationAdminService_GetOAuth2DeviceCode_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.inScopes)), 64)
	for _, elem0 := range s.inScopes {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var authenticationAdminService_GetOAuth2DeviceCode_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *authenticationAdminService_GetOAuth2DeviceCode_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(authenticationAdminService_GetOAuth2DeviceCode_Params_Versions), func(i int) bool {
		return authenticationAdminService_GetOAuth2DeviceCode_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(authenticationAdminService_GetOAuth2DeviceCode_Params_Versions) {
		if authenticationAdminService_GetOAuth2DeviceCode_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := authenticationAdminService_GetOAuth2DeviceCode_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.inScopes = make([]string, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					value1, err := decoder.ReadString()
					if err != nil {
						return err
					}
					s.inScopes[i0] = value1
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type authenticationAdminService_GetOAuth2DeviceCode_ResponseParams struct {
	outVerificationUrl *string
	outDeviceCode *string
	outUserCode *string
	outError *string
}


func (s *authenticationAdminService_GetOAuth2DeviceCode_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(32, 0)
	if s.outVerificationUrl == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outVerificationUrl)); err != nil {
			return err
		}
	}
	if s.outDeviceCode == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outDeviceCode)); err != nil {
			return err
		}
	}
	if s.outUserCode == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outUserCode)); err != nil {
			return err
		}
	}
	if s.outError == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outError)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var authenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{40, 0},
}

func (s *authenticationAdminService_GetOAuth2DeviceCode_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(authenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Versions), func(i int) bool {
		return authenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(authenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Versions) {
		if authenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := authenticationAdminService_GetOAuth2DeviceCode_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outVerificationUrl = nil
		} else {
			s.outVerificationUrl = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outVerificationUrl) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outDeviceCode = nil
		} else {
			s.outDeviceCode = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outDeviceCode) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outUserCode = nil
		} else {
			s.outUserCode = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outUserCode) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outError = nil
		} else {
			s.outError = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outError) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *AuthenticationAdminService_Proxy) GetOAuth2DeviceCode(inScopes []string) (outVerificationUrl *string, outDeviceCode *string, outUserCode *string, outError *string, err error) {
	payload := &authenticationAdminService_GetOAuth2DeviceCode_Params{
		inScopes,
	}
	header := bindings.MessageHeader{
		Type: authenticationAdminService_GetOAuth2DeviceCode_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, authenticationAdminService_GetOAuth2DeviceCode_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response authenticationAdminService_GetOAuth2DeviceCode_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outVerificationUrl = response.outVerificationUrl
	outDeviceCode = response.outDeviceCode
	outUserCode = response.outUserCode
	outError = response.outError
	return
}

type authenticationAdminService_AddAccount_Params struct {
	inDeviceCode string
}


func (s *authenticationAdminService_AddAccount_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	if err := encoder.WriteString(s.inDeviceCode); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var authenticationAdminService_AddAccount_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *authenticationAdminService_AddAccount_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(authenticationAdminService_AddAccount_Params_Versions), func(i int) bool {
		return authenticationAdminService_AddAccount_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(authenticationAdminService_AddAccount_Params_Versions) {
		if authenticationAdminService_AddAccount_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := authenticationAdminService_AddAccount_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			s.inDeviceCode = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type authenticationAdminService_AddAccount_ResponseParams struct {
	outUsername *string
	outError *string
}


func (s *authenticationAdminService_AddAccount_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if s.outUsername == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outUsername)); err != nil {
			return err
		}
	}
	if s.outError == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outError)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var authenticationAdminService_AddAccount_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *authenticationAdminService_AddAccount_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(authenticationAdminService_AddAccount_ResponseParams_Versions), func(i int) bool {
		return authenticationAdminService_AddAccount_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(authenticationAdminService_AddAccount_ResponseParams_Versions) {
		if authenticationAdminService_AddAccount_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := authenticationAdminService_AddAccount_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outUsername = nil
		} else {
			s.outUsername = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outUsername) = value0
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outError = nil
		} else {
			s.outError = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outError) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *AuthenticationAdminService_Proxy) AddAccount(inDeviceCode string) (outUsername *string, outError *string, err error) {
	payload := &authenticationAdminService_AddAccount_Params{
		inDeviceCode,
	}
	header := bindings.MessageHeader{
		Type: authenticationAdminService_AddAccount_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, authenticationAdminService_AddAccount_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response authenticationAdminService_AddAccount_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outUsername = response.outUsername
	outError = response.outError
	return
}

type authenticationAdminService_GetAllUsers_Params struct {
}


func (s *authenticationAdminService_GetAllUsers_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var authenticationAdminService_GetAllUsers_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *authenticationAdminService_GetAllUsers_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(authenticationAdminService_GetAllUsers_Params_Versions), func(i int) bool {
		return authenticationAdminService_GetAllUsers_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(authenticationAdminService_GetAllUsers_Params_Versions) {
		if authenticationAdminService_GetAllUsers_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := authenticationAdminService_GetAllUsers_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type authenticationAdminService_GetAllUsers_ResponseParams struct {
	outUsernames []string
	outError *string
}


func (s *authenticationAdminService_GetAllUsers_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WritePointer(); err != nil {
		return err
	}
	encoder.StartArray(uint32(len(s.outUsernames)), 64)
	for _, elem0 := range s.outUsernames {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString(elem0); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	if s.outError == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.outError)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var authenticationAdminService_GetAllUsers_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *authenticationAdminService_GetAllUsers_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(authenticationAdminService_GetAllUsers_ResponseParams_Versions), func(i int) bool {
		return authenticationAdminService_GetAllUsers_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(authenticationAdminService_GetAllUsers_ResponseParams_Versions) {
		if authenticationAdminService_GetAllUsers_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := authenticationAdminService_GetAllUsers_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
		} else {
			len0, err := decoder.StartArray(64)
			if err != nil {
				return err
			}
			s.outUsernames = make([]string, len0)
			for i0 := uint32(0); i0 < len0; i0++ {
				pointer1, err := decoder.ReadPointer()
				if err != nil {
					return err
				}
				if pointer1 == 0 {
					return &bindings.ValidationError{bindings.UnexpectedNullPointer, "unexpected null pointer"}
				} else {
					value1, err := decoder.ReadString()
					if err != nil {
						return err
					}
					s.outUsernames[i0] = value1
				}
			}
			if err := decoder.Finish(); err != nil {
				return err
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.outError = nil
		} else {
			s.outError = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.outError) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *AuthenticationAdminService_Proxy) GetAllUsers() (outUsernames []string, outError *string, err error) {
	payload := &authenticationAdminService_GetAllUsers_Params{
	}
	header := bindings.MessageHeader{
		Type: authenticationAdminService_GetAllUsers_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, authenticationAdminService_GetAllUsers_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response authenticationAdminService_GetAllUsers_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outUsernames = response.outUsernames
	outError = response.outError
	return
}

type authenticationAdminService_Stub struct {
	connector *bindings.Connector
	impl AuthenticationAdminService
}

func NewAuthenticationAdminServiceStub(r AuthenticationAdminService_Request, impl AuthenticationAdminService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &authenticationAdminService_Stub{connector, impl})
}


func (f *AuthenticationAdminService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &AuthenticationAdminService_ServiceDescription{}
}


type AuthenticationAdminService_ServiceDescription struct{}

func (sd *AuthenticationAdminService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *AuthenticationAdminService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *AuthenticationAdminService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*AuthenticationAdminService_ServiceDescription)(nil)


func (s *authenticationAdminService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case authenticationAdminService_GetOAuth2DeviceCode_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request authenticationAdminService_GetOAuth2DeviceCode_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response authenticationAdminService_GetOAuth2DeviceCode_ResponseParams
		response.outVerificationUrl, 		response.outDeviceCode, 		response.outUserCode, 		response.outError, err = s.impl.GetOAuth2DeviceCode(request.inScopes)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: authenticationAdminService_GetOAuth2DeviceCode_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case authenticationAdminService_AddAccount_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request authenticationAdminService_AddAccount_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response authenticationAdminService_AddAccount_ResponseParams
		response.outUsername, 		response.outError, err = s.impl.AddAccount(request.inDeviceCode)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: authenticationAdminService_AddAccount_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case authenticationAdminService_GetAllUsers_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request authenticationAdminService_GetAllUsers_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response authenticationAdminService_GetAllUsers_ResponseParams
		response.outUsernames, 		response.outError, err = s.impl.GetAllUsers()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: authenticationAdminService_GetAllUsers_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

