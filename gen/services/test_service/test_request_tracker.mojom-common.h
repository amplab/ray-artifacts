// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_COMMON_H_
#define SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "services/test_service/test_request_tracker.mojom-internal.h"
namespace mojo {
namespace test {

// --- Interface Forward Declarations ---
class TestTrackedRequestService;
class TestTrackedRequestServiceRequestValidator;
class TestTrackedRequestServiceResponseValidator;
class TestTrackedRequestService_Synchronous;
class TestRequestTracker;
class TestRequestTrackerRequestValidator;
class TestRequestTrackerResponseValidator;
class TestRequestTracker_Synchronous;

// --- Struct Forward Declarations ---
class ServiceStats;

using ServiceStatsPtr = mojo::InlinedStructPtr<ServiceStats>;


class ServiceReport;

using ServiceReportPtr = mojo::InlinedStructPtr<ServiceReport>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class TestTrackedRequestService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestTrackedRequestServiceRequestValidator;
  using ResponseValidator_ = TestTrackedRequestServiceResponseValidator;
  using Synchronous_ = TestTrackedRequestService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    GetReport = 0,
  };


  virtual ~TestTrackedRequestService_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestTrackedRequestServiceProxy;
class TestTrackedRequestServiceStub;
class TestTrackedRequestService_Synchronous;

class TestTrackedRequestServiceRequestValidator;
class TestTrackedRequestServiceResponseValidator;

class TestTrackedRequestService : public internal::TestTrackedRequestService_Base {
 public:
  virtual ~TestTrackedRequestService() override {}

  using Proxy_ = TestTrackedRequestServiceProxy;
  using Stub_ = TestTrackedRequestServiceStub;
  using GetReportCallback = mojo::Callback<void(mojo::Array<ServiceReportPtr>)>;
  virtual void GetReport(const GetReportCallback& callback) = 0;
};

namespace internal {
class TestRequestTracker_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = TestRequestTrackerRequestValidator;
  using ResponseValidator_ = TestRequestTrackerResponseValidator;
  using Synchronous_ = TestRequestTracker_Synchronous;
  enum class MessageOrdinals : uint32_t {
    SetNameAndReturnId = 0,
    RecordStats = 1,
  };


  virtual ~TestRequestTracker_Base() {}
};

}  // namespace internal

// Async interface declaration

class TestRequestTrackerProxy;
class TestRequestTrackerStub;
class TestRequestTracker_Synchronous;

class TestRequestTrackerRequestValidator;
class TestRequestTrackerResponseValidator;

class TestRequestTracker : public internal::TestRequestTracker_Base {
 public:
  virtual ~TestRequestTracker() override {}

  using Proxy_ = TestRequestTrackerProxy;
  using Stub_ = TestRequestTrackerStub;
  using SetNameAndReturnIdCallback = mojo::Callback<void(uint64_t)>;
  virtual void SetNameAndReturnId(const mojo::String& service_name, const SetNameAndReturnIdCallback& callback) = 0;
  virtual void RecordStats(uint64_t client_id, ServiceStatsPtr stats) = 0;
};

}  // namespace test
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::test::ServiceStatsPtr, true, false> {
  using DataType = mojo::test::internal::ServiceStats_Data*;
};
template <>
struct WrapperTraits<mojo::test::ServiceReportPtr, true, false> {
  using DataType = mojo::test::internal::ServiceReport_Data*;
};

}  // internal
}  // mojo
namespace mojo {
namespace test {

// --- Interface Request Validators ---
class TestTrackedRequestServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestRequestTrackerRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class TestTrackedRequestServiceResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class TestRequestTrackerResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class ServiceStats {
 public:
  using Data_ = internal::ServiceStats_Data;

  static ServiceStatsPtr New();

  template <typename U>
  static ServiceStatsPtr From(const U& u) {
    return mojo::TypeConverter<ServiceStatsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceStats>::Convert(*this);
  }

  ServiceStats();
  ~ServiceStats();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceStatsPtr Clone() const;
  bool Equals(const ServiceStats& other) const;

  uint64_t num_new_requests;
  double health;
};


class ServiceReport {
 public:
  using Data_ = internal::ServiceReport_Data;

  static ServiceReportPtr New();

  template <typename U>
  static ServiceReportPtr From(const U& u) {
    return mojo::TypeConverter<ServiceReportPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceReport>::Convert(*this);
  }

  ServiceReport();
  ~ServiceReport();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  ServiceReportPtr Clone() const;
  bool Equals(const ServiceReport& other) const;

  mojo::String service_name;
  uint64_t total_requests;
  double mean_health;
};



// --- Non-inlined structs ---

// --- Struct serialization helpers ---
size_t GetSerializedSize_(const ServiceStats& input);
mojo::internal::ValidationError Serialize_(
    ServiceStats* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceStats_Data** output);
void Deserialize_(internal::ServiceStats_Data* input,
                  ServiceStats* output);

size_t GetSerializedSize_(const ServiceReport& input);
mojo::internal::ValidationError Serialize_(
    ServiceReport* input,
    mojo::internal::Buffer* buffer,
    internal::ServiceReport_Data** output);
void Deserialize_(internal::ServiceReport_Data* input,
                  ServiceReport* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class TestTrackedRequestService_GetReport_Params;

using TestTrackedRequestService_GetReport_ParamsPtr = mojo::InlinedStructPtr<TestTrackedRequestService_GetReport_Params>;


size_t GetSerializedSize_(const TestTrackedRequestService_GetReport_Params& input);
mojo::internal::ValidationError Serialize_(
    TestTrackedRequestService_GetReport_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestTrackedRequestService_GetReport_Params_Data** output);
void Deserialize_(internal::TestTrackedRequestService_GetReport_Params_Data* input,
                  TestTrackedRequestService_GetReport_Params* output);

class TestTrackedRequestService_GetReport_Params {
 public:
  using Data_ = internal::TestTrackedRequestService_GetReport_Params_Data;

  static TestTrackedRequestService_GetReport_ParamsPtr New();

  template <typename U>
  static TestTrackedRequestService_GetReport_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestTrackedRequestService_GetReport_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestTrackedRequestService_GetReport_Params>::Convert(*this);
  }

  TestTrackedRequestService_GetReport_Params();
  ~TestTrackedRequestService_GetReport_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestTrackedRequestService_GetReport_ParamsPtr Clone() const;
  bool Equals(const TestTrackedRequestService_GetReport_Params& other) const;

};



class TestTrackedRequestService_GetReport_ResponseParams;

using TestTrackedRequestService_GetReport_ResponseParamsPtr = mojo::StructPtr<TestTrackedRequestService_GetReport_ResponseParams>;


size_t GetSerializedSize_(const TestTrackedRequestService_GetReport_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestTrackedRequestService_GetReport_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestTrackedRequestService_GetReport_ResponseParams_Data** output);
void Deserialize_(internal::TestTrackedRequestService_GetReport_ResponseParams_Data* input,
                  TestTrackedRequestService_GetReport_ResponseParams* output);

class TestTrackedRequestService_GetReport_ResponseParams {
 public:
  using Data_ = internal::TestTrackedRequestService_GetReport_ResponseParams_Data;

  static TestTrackedRequestService_GetReport_ResponseParamsPtr New();

  template <typename U>
  static TestTrackedRequestService_GetReport_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestTrackedRequestService_GetReport_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestTrackedRequestService_GetReport_ResponseParams>::Convert(*this);
  }

  TestTrackedRequestService_GetReport_ResponseParams();
  ~TestTrackedRequestService_GetReport_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestTrackedRequestService_GetReport_ResponseParamsPtr Clone() const;
  bool Equals(const TestTrackedRequestService_GetReport_ResponseParams& other) const;

  mojo::Array<ServiceReportPtr> report;
};


      

class TestRequestTracker_SetNameAndReturnId_Params;

using TestRequestTracker_SetNameAndReturnId_ParamsPtr = mojo::InlinedStructPtr<TestRequestTracker_SetNameAndReturnId_Params>;


size_t GetSerializedSize_(const TestRequestTracker_SetNameAndReturnId_Params& input);
mojo::internal::ValidationError Serialize_(
    TestRequestTracker_SetNameAndReturnId_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestRequestTracker_SetNameAndReturnId_Params_Data** output);
void Deserialize_(internal::TestRequestTracker_SetNameAndReturnId_Params_Data* input,
                  TestRequestTracker_SetNameAndReturnId_Params* output);

class TestRequestTracker_SetNameAndReturnId_Params {
 public:
  using Data_ = internal::TestRequestTracker_SetNameAndReturnId_Params_Data;

  static TestRequestTracker_SetNameAndReturnId_ParamsPtr New();

  template <typename U>
  static TestRequestTracker_SetNameAndReturnId_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestRequestTracker_SetNameAndReturnId_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestRequestTracker_SetNameAndReturnId_Params>::Convert(*this);
  }

  TestRequestTracker_SetNameAndReturnId_Params();
  ~TestRequestTracker_SetNameAndReturnId_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestRequestTracker_SetNameAndReturnId_ParamsPtr Clone() const;
  bool Equals(const TestRequestTracker_SetNameAndReturnId_Params& other) const;

  mojo::String service_name;
};



class TestRequestTracker_SetNameAndReturnId_ResponseParams;

using TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr = mojo::InlinedStructPtr<TestRequestTracker_SetNameAndReturnId_ResponseParams>;


size_t GetSerializedSize_(const TestRequestTracker_SetNameAndReturnId_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    TestRequestTracker_SetNameAndReturnId_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data** output);
void Deserialize_(internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* input,
                  TestRequestTracker_SetNameAndReturnId_ResponseParams* output);

class TestRequestTracker_SetNameAndReturnId_ResponseParams {
 public:
  using Data_ = internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data;

  static TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr New();

  template <typename U>
  static TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestRequestTracker_SetNameAndReturnId_ResponseParams>::Convert(*this);
  }

  TestRequestTracker_SetNameAndReturnId_ResponseParams();
  ~TestRequestTracker_SetNameAndReturnId_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestRequestTracker_SetNameAndReturnId_ResponseParamsPtr Clone() const;
  bool Equals(const TestRequestTracker_SetNameAndReturnId_ResponseParams& other) const;

  uint64_t id;
};



class TestRequestTracker_RecordStats_Params;

using TestRequestTracker_RecordStats_ParamsPtr = mojo::StructPtr<TestRequestTracker_RecordStats_Params>;


size_t GetSerializedSize_(const TestRequestTracker_RecordStats_Params& input);
mojo::internal::ValidationError Serialize_(
    TestRequestTracker_RecordStats_Params* input,
    mojo::internal::Buffer* buffer,
    internal::TestRequestTracker_RecordStats_Params_Data** output);
void Deserialize_(internal::TestRequestTracker_RecordStats_Params_Data* input,
                  TestRequestTracker_RecordStats_Params* output);

class TestRequestTracker_RecordStats_Params {
 public:
  using Data_ = internal::TestRequestTracker_RecordStats_Params_Data;

  static TestRequestTracker_RecordStats_ParamsPtr New();

  template <typename U>
  static TestRequestTracker_RecordStats_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<TestRequestTracker_RecordStats_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TestRequestTracker_RecordStats_Params>::Convert(*this);
  }

  TestRequestTracker_RecordStats_Params();
  ~TestRequestTracker_RecordStats_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TestRequestTracker_RecordStats_ParamsPtr Clone() const;
  bool Equals(const TestRequestTracker_RecordStats_Params& other) const;

  uint64_t client_id;
  ServiceStatsPtr stats;
};



}  // namespace test
}  // namespace mojo

#endif  // SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_COMMON_H_
