// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_FILE_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_FILES_INTERFACES_FILE_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/types.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace files {



namespace internal {




#pragma pack(push, 1)



class File_Close_Params_Data {
 public:
  static File_Close_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  File_Close_Params_Data();
  ~File_Close_Params_Data() = delete;
};
static_assert(sizeof(File_Close_Params_Data) == 8,
              "Bad sizeof(File_Close_Params_Data)");

class File_Close_ResponseParams_Data {
 public:
  static File_Close_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t err;
  uint8_t padfinal_[4];

 private:
  File_Close_ResponseParams_Data();
  ~File_Close_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Close_ResponseParams_Data) == 16,
              "Bad sizeof(File_Close_ResponseParams_Data)");


class File_Read_Params_Data {
 public:
  static File_Read_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t num_bytes_to_read;
  int32_t whence;
  int64_t offset;

 private:
  File_Read_Params_Data();
  ~File_Read_Params_Data() = delete;
};
static_assert(sizeof(File_Read_Params_Data) == 24,
              "Bad sizeof(File_Read_Params_Data)");

class File_Read_ResponseParams_Data {
 public:
  static File_Read_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::ArrayPointer<uint8_t> bytes_read;

 private:
  File_Read_ResponseParams_Data();
  ~File_Read_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Read_ResponseParams_Data) == 24,
              "Bad sizeof(File_Read_ResponseParams_Data)");


class File_Write_Params_Data {
 public:
  static File_Write_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<uint8_t> bytes_to_write;
  int64_t offset;
  int32_t whence;
  uint8_t padfinal_[4];

 private:
  File_Write_Params_Data();
  ~File_Write_Params_Data() = delete;
};
static_assert(sizeof(File_Write_Params_Data) == 32,
              "Bad sizeof(File_Write_Params_Data)");

class File_Write_ResponseParams_Data {
 public:
  static File_Write_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint32_t num_bytes_written;

 private:
  File_Write_ResponseParams_Data();
  ~File_Write_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Write_ResponseParams_Data) == 16,
              "Bad sizeof(File_Write_ResponseParams_Data)");


class File_ReadToStream_Params_Data {
 public:
  static File_ReadToStream_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::DataPipeProducerHandle source;
  int32_t whence;
  int64_t offset;
  int64_t num_bytes_to_read;

 private:
  File_ReadToStream_Params_Data();
  ~File_ReadToStream_Params_Data() = delete;
};
static_assert(sizeof(File_ReadToStream_Params_Data) == 32,
              "Bad sizeof(File_ReadToStream_Params_Data)");

class File_ReadToStream_ResponseParams_Data {
 public:
  static File_ReadToStream_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  File_ReadToStream_ResponseParams_Data();
  ~File_ReadToStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_ReadToStream_ResponseParams_Data) == 16,
              "Bad sizeof(File_ReadToStream_ResponseParams_Data)");


class File_WriteFromStream_Params_Data {
 public:
  static File_WriteFromStream_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::DataPipeConsumerHandle sink;
  int32_t whence;
  int64_t offset;

 private:
  File_WriteFromStream_Params_Data();
  ~File_WriteFromStream_Params_Data() = delete;
};
static_assert(sizeof(File_WriteFromStream_Params_Data) == 24,
              "Bad sizeof(File_WriteFromStream_Params_Data)");

class File_WriteFromStream_ResponseParams_Data {
 public:
  static File_WriteFromStream_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  File_WriteFromStream_ResponseParams_Data();
  ~File_WriteFromStream_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_WriteFromStream_ResponseParams_Data) == 16,
              "Bad sizeof(File_WriteFromStream_ResponseParams_Data)");


class File_Tell_Params_Data {
 public:
  static File_Tell_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  File_Tell_Params_Data();
  ~File_Tell_Params_Data() = delete;
};
static_assert(sizeof(File_Tell_Params_Data) == 8,
              "Bad sizeof(File_Tell_Params_Data)");

class File_Tell_ResponseParams_Data {
 public:
  static File_Tell_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  int64_t position;

 private:
  File_Tell_ResponseParams_Data();
  ~File_Tell_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Tell_ResponseParams_Data) == 24,
              "Bad sizeof(File_Tell_ResponseParams_Data)");


class File_Seek_Params_Data {
 public:
  static File_Seek_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t offset;
  int32_t whence;
  uint8_t padfinal_[4];

 private:
  File_Seek_Params_Data();
  ~File_Seek_Params_Data() = delete;
};
static_assert(sizeof(File_Seek_Params_Data) == 24,
              "Bad sizeof(File_Seek_Params_Data)");

class File_Seek_ResponseParams_Data {
 public:
  static File_Seek_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  int64_t position;

 private:
  File_Seek_ResponseParams_Data();
  ~File_Seek_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Seek_ResponseParams_Data) == 24,
              "Bad sizeof(File_Seek_ResponseParams_Data)");


class File_Stat_Params_Data {
 public:
  static File_Stat_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  File_Stat_Params_Data();
  ~File_Stat_Params_Data() = delete;
};
static_assert(sizeof(File_Stat_Params_Data) == 8,
              "Bad sizeof(File_Stat_Params_Data)");

class File_Stat_ResponseParams_Data {
 public:
  static File_Stat_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::StructPointer<mojo::files::internal::FileInformation_Data> file_information;

 private:
  File_Stat_ResponseParams_Data();
  ~File_Stat_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Stat_ResponseParams_Data) == 24,
              "Bad sizeof(File_Stat_ResponseParams_Data)");


class File_Truncate_Params_Data {
 public:
  static File_Truncate_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t size;

 private:
  File_Truncate_Params_Data();
  ~File_Truncate_Params_Data() = delete;
};
static_assert(sizeof(File_Truncate_Params_Data) == 16,
              "Bad sizeof(File_Truncate_Params_Data)");

class File_Truncate_ResponseParams_Data {
 public:
  static File_Truncate_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  File_Truncate_ResponseParams_Data();
  ~File_Truncate_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Truncate_ResponseParams_Data) == 16,
              "Bad sizeof(File_Truncate_ResponseParams_Data)");


class File_Touch_Params_Data {
 public:
  static File_Touch_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<mojo::files::internal::TimespecOrNow_Data> atime;
  mojo::internal::StructPointer<mojo::files::internal::TimespecOrNow_Data> mtime;

 private:
  File_Touch_Params_Data();
  ~File_Touch_Params_Data() = delete;
};
static_assert(sizeof(File_Touch_Params_Data) == 24,
              "Bad sizeof(File_Touch_Params_Data)");

class File_Touch_ResponseParams_Data {
 public:
  static File_Touch_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  File_Touch_ResponseParams_Data();
  ~File_Touch_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Touch_ResponseParams_Data) == 16,
              "Bad sizeof(File_Touch_ResponseParams_Data)");


class File_Dup_Params_Data {
 public:
  static File_Dup_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle file;
  uint8_t padfinal_[4];

 private:
  File_Dup_Params_Data();
  ~File_Dup_Params_Data() = delete;
};
static_assert(sizeof(File_Dup_Params_Data) == 16,
              "Bad sizeof(File_Dup_Params_Data)");

class File_Dup_ResponseParams_Data {
 public:
  static File_Dup_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  File_Dup_ResponseParams_Data();
  ~File_Dup_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Dup_ResponseParams_Data) == 16,
              "Bad sizeof(File_Dup_ResponseParams_Data)");


class File_Reopen_Params_Data {
 public:
  static File_Reopen_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle file;
  uint32_t open_flags;

 private:
  File_Reopen_Params_Data();
  ~File_Reopen_Params_Data() = delete;
};
static_assert(sizeof(File_Reopen_Params_Data) == 16,
              "Bad sizeof(File_Reopen_Params_Data)");

class File_Reopen_ResponseParams_Data {
 public:
  static File_Reopen_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  File_Reopen_ResponseParams_Data();
  ~File_Reopen_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Reopen_ResponseParams_Data) == 16,
              "Bad sizeof(File_Reopen_ResponseParams_Data)");


class File_AsBuffer_Params_Data {
 public:
  static File_AsBuffer_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  File_AsBuffer_Params_Data();
  ~File_AsBuffer_Params_Data() = delete;
};
static_assert(sizeof(File_AsBuffer_Params_Data) == 8,
              "Bad sizeof(File_AsBuffer_Params_Data)");

class File_AsBuffer_ResponseParams_Data {
 public:
  static File_AsBuffer_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  mojo::SharedBufferHandle buffer;

 private:
  File_AsBuffer_ResponseParams_Data();
  ~File_AsBuffer_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_AsBuffer_ResponseParams_Data) == 16,
              "Bad sizeof(File_AsBuffer_ResponseParams_Data)");


class File_Ioctl_Params_Data {
 public:
  static File_Ioctl_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t request;
  uint8_t pad0_[4];
  mojo::internal::ArrayPointer<uint32_t> in_values;

 private:
  File_Ioctl_Params_Data();
  ~File_Ioctl_Params_Data() = delete;
};
static_assert(sizeof(File_Ioctl_Params_Data) == 24,
              "Bad sizeof(File_Ioctl_Params_Data)");

class File_Ioctl_ResponseParams_Data {
 public:
  static File_Ioctl_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::ArrayPointer<uint32_t> out_values;

 private:
  File_Ioctl_ResponseParams_Data();
  ~File_Ioctl_ResponseParams_Data() = delete;
};
static_assert(sizeof(File_Ioctl_ResponseParams_Data) == 24,
              "Bad sizeof(File_Ioctl_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_FILE_MOJOM_INTERNAL_H_
