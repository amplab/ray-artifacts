// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_INTERFACE_CONTROL_MESSAGES_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_INTERFACE_CONTROL_MESSAGES_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom-internal.h"
namespace mojo {

// --- Interface Forward Declarations ---

// --- Struct Forward Declarations ---
class RunMessageParams;

using RunMessageParamsPtr = mojo::StructPtr<RunMessageParams>;


class RunResponseMessageParams;

using RunResponseMessageParamsPtr = mojo::StructPtr<RunResponseMessageParams>;


class QueryVersion;

using QueryVersionPtr = mojo::InlinedStructPtr<QueryVersion>;


class QueryVersionResult;

using QueryVersionResultPtr = mojo::InlinedStructPtr<QueryVersionResult>;


class RunOrClosePipeMessageParams;

using RunOrClosePipeMessageParamsPtr = mojo::StructPtr<RunOrClosePipeMessageParams>;


class RequireVersion;

using RequireVersionPtr = mojo::InlinedStructPtr<RequireVersion>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---
const uint32_t kRunMessageId = 4294967295U;
const uint32_t kRunOrClosePipeMessageId = 4294967294U;

// --- Interface declarations ---
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::RunMessageParamsPtr, true, false> {
  using DataType = mojo::internal::RunMessageParams_Data*;
};
template <>
struct WrapperTraits<mojo::RunResponseMessageParamsPtr, true, false> {
  using DataType = mojo::internal::RunResponseMessageParams_Data*;
};
template <>
struct WrapperTraits<mojo::QueryVersionPtr, true, false> {
  using DataType = mojo::internal::QueryVersion_Data*;
};
template <>
struct WrapperTraits<mojo::QueryVersionResultPtr, true, false> {
  using DataType = mojo::internal::QueryVersionResult_Data*;
};
template <>
struct WrapperTraits<mojo::RunOrClosePipeMessageParamsPtr, true, false> {
  using DataType = mojo::internal::RunOrClosePipeMessageParams_Data*;
};
template <>
struct WrapperTraits<mojo::RequireVersionPtr, true, false> {
  using DataType = mojo::internal::RequireVersion_Data*;
};

}  // internal
}  // mojo
namespace mojo {

// --- Interface Request Validators ---

// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class QueryVersion {
 public:
  using Data_ = internal::QueryVersion_Data;

  static QueryVersionPtr New();

  template <typename U>
  static QueryVersionPtr From(const U& u) {
    return mojo::TypeConverter<QueryVersionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, QueryVersion>::Convert(*this);
  }

  QueryVersion();
  ~QueryVersion();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  QueryVersionPtr Clone() const;
  bool Equals(const QueryVersion& other) const;

};


class QueryVersionResult {
 public:
  using Data_ = internal::QueryVersionResult_Data;

  static QueryVersionResultPtr New();

  template <typename U>
  static QueryVersionResultPtr From(const U& u) {
    return mojo::TypeConverter<QueryVersionResultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, QueryVersionResult>::Convert(*this);
  }

  QueryVersionResult();
  ~QueryVersionResult();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  QueryVersionResultPtr Clone() const;
  bool Equals(const QueryVersionResult& other) const;

  uint32_t version;
};


class RequireVersion {
 public:
  using Data_ = internal::RequireVersion_Data;

  static RequireVersionPtr New();

  template <typename U>
  static RequireVersionPtr From(const U& u) {
    return mojo::TypeConverter<RequireVersionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RequireVersion>::Convert(*this);
  }

  RequireVersion();
  ~RequireVersion();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  RequireVersionPtr Clone() const;
  bool Equals(const RequireVersion& other) const;

  uint32_t version;
};



// --- Non-inlined structs ---
class RunMessageParams {
 public:
  using Data_ = internal::RunMessageParams_Data;

  static RunMessageParamsPtr New();

  template <typename U>
  static RunMessageParamsPtr From(const U& u) {
    return mojo::TypeConverter<RunMessageParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunMessageParams>::Convert(*this);
  }

  RunMessageParams();
  ~RunMessageParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  RunMessageParamsPtr Clone() const;
  bool Equals(const RunMessageParams& other) const;

  uint32_t reserved0;
  uint32_t reserved1;
  QueryVersionPtr query_version;
};


class RunResponseMessageParams {
 public:
  using Data_ = internal::RunResponseMessageParams_Data;

  static RunResponseMessageParamsPtr New();

  template <typename U>
  static RunResponseMessageParamsPtr From(const U& u) {
    return mojo::TypeConverter<RunResponseMessageParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunResponseMessageParams>::Convert(*this);
  }

  RunResponseMessageParams();
  ~RunResponseMessageParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  RunResponseMessageParamsPtr Clone() const;
  bool Equals(const RunResponseMessageParams& other) const;

  uint32_t reserved0;
  uint32_t reserved1;
  QueryVersionResultPtr query_version_result;
};


class RunOrClosePipeMessageParams {
 public:
  using Data_ = internal::RunOrClosePipeMessageParams_Data;

  static RunOrClosePipeMessageParamsPtr New();

  template <typename U>
  static RunOrClosePipeMessageParamsPtr From(const U& u) {
    return mojo::TypeConverter<RunOrClosePipeMessageParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, RunOrClosePipeMessageParams>::Convert(*this);
  }

  RunOrClosePipeMessageParams();
  ~RunOrClosePipeMessageParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  RunOrClosePipeMessageParamsPtr Clone() const;
  bool Equals(const RunOrClosePipeMessageParams& other) const;

  uint32_t reserved0;
  uint32_t reserved1;
  RequireVersionPtr require_version;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const RunMessageParams& input);
mojo::internal::ValidationError Serialize_(
    RunMessageParams* input,
    mojo::internal::Buffer* buffer,
    internal::RunMessageParams_Data** output);
void Deserialize_(internal::RunMessageParams_Data* input,
                  RunMessageParams* output);

size_t GetSerializedSize_(const RunResponseMessageParams& input);
mojo::internal::ValidationError Serialize_(
    RunResponseMessageParams* input,
    mojo::internal::Buffer* buffer,
    internal::RunResponseMessageParams_Data** output);
void Deserialize_(internal::RunResponseMessageParams_Data* input,
                  RunResponseMessageParams* output);

size_t GetSerializedSize_(const QueryVersion& input);
mojo::internal::ValidationError Serialize_(
    QueryVersion* input,
    mojo::internal::Buffer* buffer,
    internal::QueryVersion_Data** output);
void Deserialize_(internal::QueryVersion_Data* input,
                  QueryVersion* output);

size_t GetSerializedSize_(const QueryVersionResult& input);
mojo::internal::ValidationError Serialize_(
    QueryVersionResult* input,
    mojo::internal::Buffer* buffer,
    internal::QueryVersionResult_Data** output);
void Deserialize_(internal::QueryVersionResult_Data* input,
                  QueryVersionResult* output);

size_t GetSerializedSize_(const RunOrClosePipeMessageParams& input);
mojo::internal::ValidationError Serialize_(
    RunOrClosePipeMessageParams* input,
    mojo::internal::Buffer* buffer,
    internal::RunOrClosePipeMessageParams_Data** output);
void Deserialize_(internal::RunOrClosePipeMessageParams_Data* input,
                  RunOrClosePipeMessageParams* output);

size_t GetSerializedSize_(const RequireVersion& input);
mojo::internal::ValidationError Serialize_(
    RequireVersion* input,
    mojo::internal::Buffer* buffer,
    internal::RequireVersion_Data** output);
void Deserialize_(internal::RequireVersion_Data* input,
                  RequireVersion* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
}  // namespace mojo

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_INTERFACE_CONTROL_MESSAGES_MOJOM_COMMON_H_
