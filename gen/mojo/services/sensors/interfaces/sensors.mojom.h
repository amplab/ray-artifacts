// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_H_
#define MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_H_

#include <iosfwd>
#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_ptr.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/lib/control_message_proxy.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/no_interface.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/sensors/interfaces/sensors.mojom-common.h"
namespace sensors {

// --- Interface Forward Declarations ---

using SensorListenerPtr = mojo::InterfacePtr<SensorListener>;

using SensorServicePtr = mojo::InterfacePtr<SensorService>;


// --- Interface Proxies ---


class SensorListenerProxy
    : public SensorListener,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit SensorListenerProxy(mojo::MessageReceiverWithResponder* receiver);
  void OnAccuracyChanged(
      int32_t accuracy
  ) override;
  void OnSensorChanged(
      SensorDataPtr data
  ) override;
};


class SensorServiceProxy
    : public SensorService,
      public mojo::internal::ControlMessageProxy {
 public:
  explicit SensorServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  void AddListener(
      SensorType type, mojo::InterfaceHandle<SensorListener> listener
  ) override;
};


// --- Interface Stubs ---

class SensorListenerStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  SensorListenerStub();
  ~SensorListenerStub() override;
  void set_sink(SensorListener* sink) { sink_ = sink; }
  SensorListener* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  SensorListener* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

class SensorServiceStub : public mojo::MessageReceiverWithResponderStatus {
 public:
  SensorServiceStub();
  ~SensorServiceStub() override;
  void set_sink(SensorService* sink) { sink_ = sink; }
  SensorService* sink() { return sink_; }

  bool Accept(mojo::Message* message) override;
  bool AcceptWithResponder(mojo::Message* message,
      mojo::MessageReceiverWithStatus* responder) override;

 private:
  SensorService* sink_;
  mojo::internal::ControlMessageHandler control_message_handler_;
};

}  // namespace sensors

#endif  // MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_H_
