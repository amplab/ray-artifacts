// NOTE: This file was generated by the Mojo bindings generator.
#include "services/test_service/test_request_tracker.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace test {

// --- Interface definitions ---
class TestTrackedRequestService_GetReport_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestTrackedRequestService_GetReport_ForwardToCallback(
      const TestTrackedRequestService::GetReportCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestTrackedRequestService::GetReportCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestTrackedRequestService_GetReport_ForwardToCallback);
};
bool TestTrackedRequestService_GetReport_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestTrackedRequestService_GetReport_ResponseParams_Data* params =
      reinterpret_cast<internal::TestTrackedRequestService_GetReport_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<ServiceReportPtr> p_report {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->report.ptr, &p_report);
  } while (false);
  callback_.Run(p_report.Pass());
  return true;
}

TestTrackedRequestServiceProxy::TestTrackedRequestServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestTrackedRequestServiceProxy::GetReport(
    const GetReportCallback& callback) {
  size_t size = sizeof(internal::TestTrackedRequestService_GetReport_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestTrackedRequestService_Base::MessageOrdinals::GetReport), size);

  internal::TestTrackedRequestService_GetReport_Params_Data* params =
      internal::TestTrackedRequestService_GetReport_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestTrackedRequestService_GetReport_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestTrackedRequestService_GetReport_ProxyToResponder
    : public TestTrackedRequestService::GetReportCallback::Runnable {
 public:
  ~TestTrackedRequestService_GetReport_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestTrackedRequestService::GetReport(callback) "
        "was never run.";
  }

  TestTrackedRequestService_GetReport_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<ServiceReportPtr> in_report) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestTrackedRequestService_GetReport_ProxyToResponder);
};

void TestTrackedRequestService_GetReport_ProxyToResponder::Run(
    mojo::Array<ServiceReportPtr> in_report) const {
  size_t size = sizeof(internal::TestTrackedRequestService_GetReport_ResponseParams_Data);
  size += GetSerializedSize_(in_report);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestTrackedRequestService_Base::MessageOrdinals::GetReport), size, request_id_);
  internal::TestTrackedRequestService_GetReport_ResponseParams_Data* params =
      internal::TestTrackedRequestService_GetReport_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams report_validate_params(
      0, true, nullptr);mojo::SerializeArray_(&in_report, builder.buffer(), &params->report.ptr,
                          &report_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TestTrackedRequestServiceStub::TestTrackedRequestServiceStub()
    : sink_(nullptr),
      control_message_handler_(TestTrackedRequestService::Version_) {
}

TestTrackedRequestServiceStub::~TestTrackedRequestServiceStub() {}

bool TestTrackedRequestServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestTrackedRequestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestTrackedRequestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestTrackedRequestService_Base::MessageOrdinals::GetReport: {
      break;
    }
  }
  return false;
}

bool TestTrackedRequestServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestTrackedRequestService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestTrackedRequestService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestTrackedRequestService_Base::MessageOrdinals::GetReport: {
      internal::TestTrackedRequestService_GetReport_Params_Data* params =
          reinterpret_cast<internal::TestTrackedRequestService_GetReport_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestTrackedRequestService::GetReportCallback::Runnable* runnable =
          new TestTrackedRequestService_GetReport_ProxyToResponder(
              message->request_id(), responder);
      TestTrackedRequestService::GetReportCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->GetReport(callback);
      return true;
    }
  }
  return false;
}

class TestRequestTracker_SetNameAndReturnId_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  TestRequestTracker_SetNameAndReturnId_ForwardToCallback(
      const TestRequestTracker::SetNameAndReturnIdCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  TestRequestTracker::SetNameAndReturnIdCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestRequestTracker_SetNameAndReturnId_ForwardToCallback);
};
bool TestRequestTracker_SetNameAndReturnId_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* params =
      reinterpret_cast<internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint64_t p_id {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_id = params->id;
  } while (false);
  callback_.Run(p_id);
  return true;
}

TestRequestTrackerProxy::TestRequestTrackerProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void TestRequestTrackerProxy::SetNameAndReturnId(
    const mojo::String& in_service_name, const SetNameAndReturnIdCallback& callback) {
  size_t size = sizeof(internal::TestRequestTracker_SetNameAndReturnId_Params_Data);
  size += GetSerializedSize_(in_service_name);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::TestRequestTracker_Base::MessageOrdinals::SetNameAndReturnId), size);

  internal::TestRequestTracker_SetNameAndReturnId_Params_Data* params =
      internal::TestRequestTracker_SetNameAndReturnId_Params_Data::New(builder.buffer());
  SerializeString_(in_service_name, builder.buffer(), &params->service_name.ptr);
  if (!params->service_name.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null service_name in TestRequestTracker.SetNameAndReturnId request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new TestRequestTracker_SetNameAndReturnId_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void TestRequestTrackerProxy::RecordStats(
    uint64_t in_client_id, ServiceStatsPtr in_stats) {
  size_t size = sizeof(internal::TestRequestTracker_RecordStats_Params_Data);
  size += in_stats.is_null()
              ? 0
              : GetSerializedSize_(*in_stats);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::TestRequestTracker_Base::MessageOrdinals::RecordStats), size);

  internal::TestRequestTracker_RecordStats_Params_Data* params =
      internal::TestRequestTracker_RecordStats_Params_Data::New(builder.buffer());
  params->client_id = in_client_id;
  {Serialize_(in_stats.get(),
               builder.buffer(),
               &params->stats.ptr);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class TestRequestTracker_SetNameAndReturnId_ProxyToResponder
    : public TestRequestTracker::SetNameAndReturnIdCallback::Runnable {
 public:
  ~TestRequestTracker_SetNameAndReturnId_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "TestRequestTracker::SetNameAndReturnId(p_service_name, callback) "
        "was never run.";
  }

  TestRequestTracker_SetNameAndReturnId_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint64_t in_id) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(TestRequestTracker_SetNameAndReturnId_ProxyToResponder);
};

void TestRequestTracker_SetNameAndReturnId_ProxyToResponder::Run(
    uint64_t in_id) const {
  size_t size = sizeof(internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::TestRequestTracker_Base::MessageOrdinals::SetNameAndReturnId), size, request_id_);
  internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* params =
      internal::TestRequestTracker_SetNameAndReturnId_ResponseParams_Data::New(builder.buffer());
  params->id = in_id;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

TestRequestTrackerStub::TestRequestTrackerStub()
    : sink_(nullptr),
      control_message_handler_(TestRequestTracker::Version_) {
}

TestRequestTrackerStub::~TestRequestTrackerStub() {}

bool TestRequestTrackerStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::TestRequestTracker_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestRequestTracker_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestRequestTracker_Base::MessageOrdinals::SetNameAndReturnId: {
      break;
    }
    case internal::TestRequestTracker_Base::MessageOrdinals::RecordStats: {
      internal::TestRequestTracker_RecordStats_Params_Data* params =
          reinterpret_cast<internal::TestRequestTracker_RecordStats_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      uint64_t p_client_id {};
      ServiceStatsPtr p_stats {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_client_id = params->client_id;
        if (params->stats.ptr) {
          p_stats = ServiceStats::New();
          Deserialize_(params->stats.ptr, p_stats.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->RecordStats(p_client_id, p_stats.Pass());
      return true;
    }
  }
  return false;
}

bool TestRequestTrackerStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::TestRequestTracker_Base::MessageOrdinals method_ordinal =
      static_cast<internal::TestRequestTracker_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::TestRequestTracker_Base::MessageOrdinals::SetNameAndReturnId: {
      internal::TestRequestTracker_SetNameAndReturnId_Params_Data* params =
          reinterpret_cast<internal::TestRequestTracker_SetNameAndReturnId_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      TestRequestTracker::SetNameAndReturnIdCallback::Runnable* runnable =
          new TestRequestTracker_SetNameAndReturnId_ProxyToResponder(
              message->request_id(), responder);
      TestRequestTracker::SetNameAndReturnIdCallback callback(runnable);
      
      mojo::String p_service_name {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->service_name.ptr, &p_service_name);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetNameAndReturnId(p_service_name, callback);
      return true;
    }
    case internal::TestRequestTracker_Base::MessageOrdinals::RecordStats: {
      break;
    }
  }
  return false;
}

}  // namespace test
}  // namespace mojo
