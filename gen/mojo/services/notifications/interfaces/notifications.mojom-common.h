// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NOTIFICATIONS_INTERFACES_NOTIFICATIONS_MOJOM_COMMON_H_
#define MOJO_SERVICES_NOTIFICATIONS_INTERFACES_NOTIFICATIONS_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/notifications/interfaces/notifications.mojom-internal.h"
namespace notifications {

// --- Interface Forward Declarations ---
class NotificationClient;
class NotificationClientRequestValidator;
class NotificationClient_Synchronous;
class Notification;
class NotificationRequestValidator;
class Notification_Synchronous;
class NotificationService;
class NotificationServiceRequestValidator;
class NotificationService_Synchronous;

// --- Struct Forward Declarations ---
class NotificationData;

using NotificationDataPtr = mojo::StructPtr<NotificationData>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class NotificationClient_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NotificationClientRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = NotificationClient_Synchronous;
  enum class MessageOrdinals : uint32_t {
    OnSelected = 0,
    OnDismissed = 1,
  };


  virtual ~NotificationClient_Base() {}
};

}  // namespace internal

// Async interface declaration

class NotificationClientProxy;
class NotificationClientStub;
class NotificationClient_Synchronous;

class NotificationClientRequestValidator;

class NotificationClient : public internal::NotificationClient_Base {
 public:
  virtual ~NotificationClient() override {}

  using Proxy_ = NotificationClientProxy;
  using Stub_ = NotificationClientStub;
  virtual void OnSelected() = 0;
  virtual void OnDismissed() = 0;
};

namespace internal {
class Notification_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NotificationRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = Notification_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Update = 0,
    Cancel = 1,
  };


  virtual ~Notification_Base() {}
};

}  // namespace internal

// Async interface declaration

class NotificationProxy;
class NotificationStub;
class Notification_Synchronous;

class NotificationRequestValidator;

class Notification : public internal::Notification_Base {
 public:
  virtual ~Notification() override {}

  using Proxy_ = NotificationProxy;
  using Stub_ = NotificationStub;
  virtual void Update(NotificationDataPtr notification_data) = 0;
  virtual void Cancel() = 0;
};

namespace internal {
class NotificationService_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NotificationServiceRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = NotificationService_Synchronous;
  enum class MessageOrdinals : uint32_t {
    Post = 0,
  };


  virtual ~NotificationService_Base() {}
};

}  // namespace internal

// Async interface declaration

class NotificationServiceProxy;
class NotificationServiceStub;
class NotificationService_Synchronous;

class NotificationServiceRequestValidator;

class NotificationService : public internal::NotificationService_Base {
 public:
  virtual ~NotificationService() override {}

  using Proxy_ = NotificationServiceProxy;
  using Stub_ = NotificationServiceStub;
  virtual void Post(NotificationDataPtr notification_data, mojo::InterfaceHandle<NotificationClient> client, mojo::InterfaceRequest<Notification> notification) = 0;
};

}  // namespace notifications

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<notifications::NotificationDataPtr, true, false> {
  using DataType = notifications::internal::NotificationData_Data*;
};

}  // internal
}  // mojo
namespace notifications {

// --- Interface Request Validators ---
class NotificationClientRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class NotificationRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class NotificationServiceRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class NotificationData {
 public:
  using Data_ = internal::NotificationData_Data;

  static NotificationDataPtr New();

  template <typename U>
  static NotificationDataPtr From(const U& u) {
    return mojo::TypeConverter<NotificationDataPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NotificationData>::Convert(*this);
  }

  NotificationData();
  ~NotificationData();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NotificationDataPtr Clone() const;
  bool Equals(const NotificationData& other) const;

  mojo::String title;
  mojo::String text;
  bool play_sound;
  bool vibrate;
  bool set_lights;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const NotificationData& input);
mojo::internal::ValidationError Serialize_(
    NotificationData* input,
    mojo::internal::Buffer* buffer,
    internal::NotificationData_Data** output);
void Deserialize_(internal::NotificationData_Data* input,
                  NotificationData* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class NotificationClient_OnSelected_Params;

using NotificationClient_OnSelected_ParamsPtr = mojo::InlinedStructPtr<NotificationClient_OnSelected_Params>;


size_t GetSerializedSize_(const NotificationClient_OnSelected_Params& input);
mojo::internal::ValidationError Serialize_(
    NotificationClient_OnSelected_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NotificationClient_OnSelected_Params_Data** output);
void Deserialize_(internal::NotificationClient_OnSelected_Params_Data* input,
                  NotificationClient_OnSelected_Params* output);

class NotificationClient_OnSelected_Params {
 public:
  using Data_ = internal::NotificationClient_OnSelected_Params_Data;

  static NotificationClient_OnSelected_ParamsPtr New();

  template <typename U>
  static NotificationClient_OnSelected_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NotificationClient_OnSelected_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NotificationClient_OnSelected_Params>::Convert(*this);
  }

  NotificationClient_OnSelected_Params();
  ~NotificationClient_OnSelected_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NotificationClient_OnSelected_ParamsPtr Clone() const;
  bool Equals(const NotificationClient_OnSelected_Params& other) const;

};




class NotificationClient_OnDismissed_Params;

using NotificationClient_OnDismissed_ParamsPtr = mojo::InlinedStructPtr<NotificationClient_OnDismissed_Params>;


size_t GetSerializedSize_(const NotificationClient_OnDismissed_Params& input);
mojo::internal::ValidationError Serialize_(
    NotificationClient_OnDismissed_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NotificationClient_OnDismissed_Params_Data** output);
void Deserialize_(internal::NotificationClient_OnDismissed_Params_Data* input,
                  NotificationClient_OnDismissed_Params* output);

class NotificationClient_OnDismissed_Params {
 public:
  using Data_ = internal::NotificationClient_OnDismissed_Params_Data;

  static NotificationClient_OnDismissed_ParamsPtr New();

  template <typename U>
  static NotificationClient_OnDismissed_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NotificationClient_OnDismissed_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NotificationClient_OnDismissed_Params>::Convert(*this);
  }

  NotificationClient_OnDismissed_Params();
  ~NotificationClient_OnDismissed_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NotificationClient_OnDismissed_ParamsPtr Clone() const;
  bool Equals(const NotificationClient_OnDismissed_Params& other) const;

};



      

class Notification_Update_Params;

using Notification_Update_ParamsPtr = mojo::StructPtr<Notification_Update_Params>;


size_t GetSerializedSize_(const Notification_Update_Params& input);
mojo::internal::ValidationError Serialize_(
    Notification_Update_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Notification_Update_Params_Data** output);
void Deserialize_(internal::Notification_Update_Params_Data* input,
                  Notification_Update_Params* output);

class Notification_Update_Params {
 public:
  using Data_ = internal::Notification_Update_Params_Data;

  static Notification_Update_ParamsPtr New();

  template <typename U>
  static Notification_Update_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Notification_Update_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Notification_Update_Params>::Convert(*this);
  }

  Notification_Update_Params();
  ~Notification_Update_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Notification_Update_ParamsPtr Clone() const;
  bool Equals(const Notification_Update_Params& other) const;

  NotificationDataPtr notification_data;
};




class Notification_Cancel_Params;

using Notification_Cancel_ParamsPtr = mojo::InlinedStructPtr<Notification_Cancel_Params>;


size_t GetSerializedSize_(const Notification_Cancel_Params& input);
mojo::internal::ValidationError Serialize_(
    Notification_Cancel_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Notification_Cancel_Params_Data** output);
void Deserialize_(internal::Notification_Cancel_Params_Data* input,
                  Notification_Cancel_Params* output);

class Notification_Cancel_Params {
 public:
  using Data_ = internal::Notification_Cancel_Params_Data;

  static Notification_Cancel_ParamsPtr New();

  template <typename U>
  static Notification_Cancel_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Notification_Cancel_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Notification_Cancel_Params>::Convert(*this);
  }

  Notification_Cancel_Params();
  ~Notification_Cancel_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Notification_Cancel_ParamsPtr Clone() const;
  bool Equals(const Notification_Cancel_Params& other) const;

};



      

class NotificationService_Post_Params;

using NotificationService_Post_ParamsPtr = mojo::StructPtr<NotificationService_Post_Params>;


size_t GetSerializedSize_(const NotificationService_Post_Params& input);
mojo::internal::ValidationError Serialize_(
    NotificationService_Post_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NotificationService_Post_Params_Data** output);
void Deserialize_(internal::NotificationService_Post_Params_Data* input,
                  NotificationService_Post_Params* output);

class NotificationService_Post_Params {
 public:
  using Data_ = internal::NotificationService_Post_Params_Data;

  static NotificationService_Post_ParamsPtr New();

  template <typename U>
  static NotificationService_Post_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NotificationService_Post_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NotificationService_Post_Params>::Convert(*this);
  }

  NotificationService_Post_Params();
  ~NotificationService_Post_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const NotificationService_Post_Params& other) const;

  NotificationDataPtr notification_data;
  mojo::InterfaceHandle<NotificationClient> client;
  mojo::InterfaceRequest<Notification> notification;
};



}  // namespace notifications

#endif  // MOJO_SERVICES_NOTIFICATIONS_INTERFACES_NOTIFICATIONS_MOJOM_COMMON_H_
