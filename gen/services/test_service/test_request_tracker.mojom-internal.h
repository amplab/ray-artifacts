// NOTE: This file was generated by the Mojo bindings generator.
#ifndef SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_INTERNAL_H_
#define SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace test {

class ServiceStats;
class ServiceReport;


namespace internal {

class ServiceStats_Data;
class ServiceReport_Data;



#pragma pack(push, 1)


class ServiceStats_Data {
 public:
  static ServiceStats_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint64_t num_new_requests;
  double health;

 private:
  ServiceStats_Data();
  ~ServiceStats_Data() = delete;
};
static_assert(sizeof(ServiceStats_Data) == 24,
              "Bad sizeof(ServiceStats_Data)");

class ServiceReport_Data {
 public:
  static ServiceReport_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer service_name;
  uint64_t total_requests;
  double mean_health;

 private:
  ServiceReport_Data();
  ~ServiceReport_Data() = delete;
};
static_assert(sizeof(ServiceReport_Data) == 32,
              "Bad sizeof(ServiceReport_Data)");


class TestTrackedRequestService_GetReport_Params_Data {
 public:
  static TestTrackedRequestService_GetReport_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  TestTrackedRequestService_GetReport_Params_Data();
  ~TestTrackedRequestService_GetReport_Params_Data() = delete;
};
static_assert(sizeof(TestTrackedRequestService_GetReport_Params_Data) == 8,
              "Bad sizeof(TestTrackedRequestService_GetReport_Params_Data)");

class TestTrackedRequestService_GetReport_ResponseParams_Data {
 public:
  static TestTrackedRequestService_GetReport_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<internal::ServiceReport_Data*> report;

 private:
  TestTrackedRequestService_GetReport_ResponseParams_Data();
  ~TestTrackedRequestService_GetReport_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestTrackedRequestService_GetReport_ResponseParams_Data) == 16,
              "Bad sizeof(TestTrackedRequestService_GetReport_ResponseParams_Data)");


class TestRequestTracker_SetNameAndReturnId_Params_Data {
 public:
  static TestRequestTracker_SetNameAndReturnId_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StringPointer service_name;

 private:
  TestRequestTracker_SetNameAndReturnId_Params_Data();
  ~TestRequestTracker_SetNameAndReturnId_Params_Data() = delete;
};
static_assert(sizeof(TestRequestTracker_SetNameAndReturnId_Params_Data) == 16,
              "Bad sizeof(TestRequestTracker_SetNameAndReturnId_Params_Data)");

class TestRequestTracker_SetNameAndReturnId_ResponseParams_Data {
 public:
  static TestRequestTracker_SetNameAndReturnId_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint64_t id;

 private:
  TestRequestTracker_SetNameAndReturnId_ResponseParams_Data();
  ~TestRequestTracker_SetNameAndReturnId_ResponseParams_Data() = delete;
};
static_assert(sizeof(TestRequestTracker_SetNameAndReturnId_ResponseParams_Data) == 16,
              "Bad sizeof(TestRequestTracker_SetNameAndReturnId_ResponseParams_Data)");


class TestRequestTracker_RecordStats_Params_Data {
 public:
  static TestRequestTracker_RecordStats_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint64_t client_id;
  mojo::internal::StructPointer<internal::ServiceStats_Data> stats;

 private:
  TestRequestTracker_RecordStats_Params_Data();
  ~TestRequestTracker_RecordStats_Params_Data() = delete;
};
static_assert(sizeof(TestRequestTracker_RecordStats_Params_Data) == 24,
              "Bad sizeof(TestRequestTracker_RecordStats_Params_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace test
}  // namespace mojo

#endif  // SERVICES_TEST_SERVICE_TEST_REQUEST_TRACKER_MOJOM_INTERNAL_H_
