// NOTE: This file was generated by the Mojo bindings generator.
#ifndef RAY_CLIENT_CLIENT_MOJOM_COMMON_H_
#define RAY_CLIENT_CLIENT_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "ray/client/client.mojom-internal.h"
namespace ray {

// --- Interface Forward Declarations ---
class Client;
class ClientRequestValidator;
class Client_Synchronous;

// --- Struct Forward Declarations ---

// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class Client_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = ClientRequestValidator;
  using ResponseValidator_ = mojo::internal::PassThroughValidator;
  using Synchronous_ = Client_Synchronous;
  enum class MessageOrdinals : uint32_t {
  };


  virtual ~Client_Base() {}
};

}  // namespace internal

// Async interface declaration

class ClientProxy;
class ClientStub;
class Client_Synchronous;

class ClientRequestValidator;

class Client : public internal::Client_Base {
 public:
  virtual ~Client() override {}

  using Proxy_ = ClientProxy;
  using Stub_ = ClientStub;
};

}  // namespace ray

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {

}  // internal
}  // mojo
namespace ray {

// --- Interface Request Validators ---
class ClientRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---

// --- Struct serialization helpers ---

// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      
}  // namespace ray

#endif  // RAY_CLIENT_CLIENT_MOJOM_COMMON_H_
