// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library hello_mojo_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class _HelloMojoSayParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String request = null;

  _HelloMojoSayParams() : super(kVersions.last.size);

  _HelloMojoSayParams.init(
    String this.request
  ) : super(kVersions.last.size);

  static _HelloMojoSayParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _HelloMojoSayParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _HelloMojoSayParams result = new _HelloMojoSayParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.request = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_HelloMojoSayParams";
    String fieldName;
    try {
      fieldName = "request";
      encoder0.encodeString(request, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_HelloMojoSayParams("
           "request: $request" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["request"] = request;
    return map;
  }
}


class HelloMojoSayResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  String response = null;

  HelloMojoSayResponseParams() : super(kVersions.last.size);

  HelloMojoSayResponseParams.init(
    String this.response
  ) : super(kVersions.last.size);

  static HelloMojoSayResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static HelloMojoSayResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    HelloMojoSayResponseParams result = new HelloMojoSayResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.response = decoder0.decodeString(8, false);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "HelloMojoSayResponseParams";
    String fieldName;
    try {
      fieldName = "response";
      encoder0.encodeString(response, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "HelloMojoSayResponseParams("
           "response: $response" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["response"] = response;
    return map;
  }
}

const int _helloMojoMethodSayName = 0;

class _HelloMojoServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class HelloMojo {
  static const String serviceName = "examples.HelloMojo";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _HelloMojoServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static HelloMojoProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    HelloMojoProxy p = new HelloMojoProxy.unbound();
    String name = serviceName ?? HelloMojo.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void say(String request,void callback(String response));
}

abstract class HelloMojoInterface
    implements bindings.MojoInterface<HelloMojo>,
               HelloMojo {
  factory HelloMojoInterface([HelloMojo impl]) =>
      new HelloMojoStub.unbound(impl);

  factory HelloMojoInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [HelloMojo impl]) =>
      new HelloMojoStub.fromEndpoint(endpoint, impl);

  factory HelloMojoInterface.fromMock(
      HelloMojo mock) =>
      new HelloMojoProxy.fromMock(mock);
}

abstract class HelloMojoInterfaceRequest
    implements bindings.MojoInterface<HelloMojo>,
               HelloMojo {
  factory HelloMojoInterfaceRequest() =>
      new HelloMojoProxy.unbound();
}

class _HelloMojoProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<HelloMojo> {
  HelloMojo impl;

  _HelloMojoProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _HelloMojoProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _HelloMojoProxyControl.unbound() : super.unbound();

  String get serviceName => HelloMojo.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _helloMojoMethodSayName:
        var r = HelloMojoSayResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback(r.response );
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_HelloMojoProxyControl($superString)";
  }
}

class HelloMojoProxy
    extends bindings.Proxy<HelloMojo>
    implements HelloMojo,
               HelloMojoInterface,
               HelloMojoInterfaceRequest {
  HelloMojoProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _HelloMojoProxyControl.fromEndpoint(endpoint));

  HelloMojoProxy.fromHandle(core.MojoHandle handle)
      : super(new _HelloMojoProxyControl.fromHandle(handle));

  HelloMojoProxy.unbound()
      : super(new _HelloMojoProxyControl.unbound());

  factory HelloMojoProxy.fromMock(HelloMojo mock) {
    HelloMojoProxy newMockedProxy =
        new HelloMojoProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static HelloMojoProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For HelloMojoProxy"));
    return new HelloMojoProxy.fromEndpoint(endpoint);
  }


  void say(String request,void callback(String response)) {
    if (impl != null) {
      impl.say(request,callback);
      return;
    }
    var params = new _HelloMojoSayParams();
    params.request = request;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = ((String response) {
        z.bindCallback(() {
          callback(response);
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _helloMojoMethodSayName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _HelloMojoStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<HelloMojo> {
  HelloMojo _impl;

  _HelloMojoStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [HelloMojo impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _HelloMojoStubControl.fromHandle(
      core.MojoHandle handle, [HelloMojo impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _HelloMojoStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => HelloMojo.serviceName;


  Function _helloMojoSayResponseParamsResponder(
      int requestId) {
  return (String response) {
      var result = new HelloMojoSayResponseParams();
      result.response = response;
      sendResponse(buildResponseWithId(
          result,
          _helloMojoMethodSayName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _helloMojoMethodSayName:
        var params = _HelloMojoSayParams.deserialize(
            message.payload);
        _impl.say(params.request, _helloMojoSayResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  HelloMojo get impl => _impl;
  set impl(HelloMojo d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_HelloMojoStubControl($superString)";
  }

  int get version => 0;
}

class HelloMojoStub
    extends bindings.Stub<HelloMojo>
    implements HelloMojo,
               HelloMojoInterface,
               HelloMojoInterfaceRequest {
  HelloMojoStub.unbound([HelloMojo impl])
      : super(new _HelloMojoStubControl.unbound(impl));

  HelloMojoStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [HelloMojo impl])
      : super(new _HelloMojoStubControl.fromEndpoint(endpoint, impl));

  HelloMojoStub.fromHandle(
      core.MojoHandle handle, [HelloMojo impl])
      : super(new _HelloMojoStubControl.fromHandle(handle, impl));

  static HelloMojoStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For HelloMojoStub"));
    return new HelloMojoStub.fromEndpoint(endpoint);
  }


  void say(String request,void callback(String response)) {
    return impl.say(request,callback);
  }
}



