// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_TERMINAL_INTERFACES_TERMINAL_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_TERMINAL_INTERFACES_TERMINAL_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/file.mojom-internal.h"
#include "mojo/services/files/interfaces/types.mojom-internal.h"
#include "mojo/services/terminal/interfaces/terminal_client.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace terminal {



namespace internal {




#pragma pack(push, 1)



class Terminal_Connect_Params_Data {
 public:
  static Terminal_Connect_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::MessagePipeHandle terminal_file;
  uint8_t force : 1;
  uint8_t padfinal_[3];

 private:
  Terminal_Connect_Params_Data();
  ~Terminal_Connect_Params_Data() = delete;
};
static_assert(sizeof(Terminal_Connect_Params_Data) == 16,
              "Bad sizeof(Terminal_Connect_Params_Data)");

class Terminal_Connect_ResponseParams_Data {
 public:
  static Terminal_Connect_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Terminal_Connect_ResponseParams_Data();
  ~Terminal_Connect_ResponseParams_Data() = delete;
};
static_assert(sizeof(Terminal_Connect_ResponseParams_Data) == 16,
              "Bad sizeof(Terminal_Connect_ResponseParams_Data)");


class Terminal_ConnectToClient_Params_Data {
 public:
  static Terminal_ConnectToClient_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data terminal_client;
  uint8_t force : 1;
  uint8_t padfinal_[7];

 private:
  Terminal_ConnectToClient_Params_Data();
  ~Terminal_ConnectToClient_Params_Data() = delete;
};
static_assert(sizeof(Terminal_ConnectToClient_Params_Data) == 24,
              "Bad sizeof(Terminal_ConnectToClient_Params_Data)");

class Terminal_ConnectToClient_ResponseParams_Data {
 public:
  static Terminal_ConnectToClient_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Terminal_ConnectToClient_ResponseParams_Data();
  ~Terminal_ConnectToClient_ResponseParams_Data() = delete;
};
static_assert(sizeof(Terminal_ConnectToClient_ResponseParams_Data) == 16,
              "Bad sizeof(Terminal_ConnectToClient_ResponseParams_Data)");


class Terminal_GetSize_Params_Data {
 public:
  static Terminal_GetSize_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  Terminal_GetSize_Params_Data();
  ~Terminal_GetSize_Params_Data() = delete;
};
static_assert(sizeof(Terminal_GetSize_Params_Data) == 8,
              "Bad sizeof(Terminal_GetSize_Params_Data)");

class Terminal_GetSize_ResponseParams_Data {
 public:
  static Terminal_GetSize_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint32_t rows;
  uint32_t columns;
  uint8_t padfinal_[4];

 private:
  Terminal_GetSize_ResponseParams_Data();
  ~Terminal_GetSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(Terminal_GetSize_ResponseParams_Data) == 24,
              "Bad sizeof(Terminal_GetSize_ResponseParams_Data)");


class Terminal_SetSize_Params_Data {
 public:
  static Terminal_SetSize_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint32_t rows;
  uint32_t columns;
  uint8_t reset : 1;
  uint8_t padfinal_[7];

 private:
  Terminal_SetSize_Params_Data();
  ~Terminal_SetSize_Params_Data() = delete;
};
static_assert(sizeof(Terminal_SetSize_Params_Data) == 24,
              "Bad sizeof(Terminal_SetSize_Params_Data)");

class Terminal_SetSize_ResponseParams_Data {
 public:
  static Terminal_SetSize_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint32_t rows;
  uint32_t columns;
  uint8_t padfinal_[4];

 private:
  Terminal_SetSize_ResponseParams_Data();
  ~Terminal_SetSize_ResponseParams_Data() = delete;
};
static_assert(sizeof(Terminal_SetSize_ResponseParams_Data) == 24,
              "Bad sizeof(Terminal_SetSize_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace terminal
}  // namespace mojo

#endif  // MOJO_SERVICES_TERMINAL_INTERFACES_TERMINAL_MOJOM_INTERNAL_H_
