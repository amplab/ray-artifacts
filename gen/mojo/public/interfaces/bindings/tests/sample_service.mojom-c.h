// This file was auto-generated by the C bindings generator.

#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_C_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_C_H_

#include <assert.h>
#include <math.h>
#include <stdbool.h>
#include <stdint.h>

#include "mojo/public/c/bindings/array.h"
#include "mojo/public/c/bindings/buffer.h"
#include "mojo/public/c/bindings/interface.h"
#include "mojo/public/c/bindings/lib/type_table.h"
#include "mojo/public/c/bindings/map.h"
#include "mojo/public/c/bindings/string.h"
#include "mojo/public/c/bindings/validation.h"
#include "mojo/public/c/system/handle.h"

// Imports.
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom-c.h"
#include "mojo/public/interfaces/bindings/tests/sample_import2.mojom-c.h"


// Forward declarations for structs.
struct sample_Bar;
union sample_BarPtr {
  struct sample_Bar* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union sample_BarPtr) == 8,
              "union sample_BarPtr must be 8 bytes");

struct sample_Foo;
union sample_FooPtr {
  struct sample_Foo* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union sample_FooPtr) == 8,
              "union sample_FooPtr must be 8 bytes");

struct sample_DefaultsTest;
union sample_DefaultsTestPtr {
  struct sample_DefaultsTest* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union sample_DefaultsTestPtr) == 8,
              "union sample_DefaultsTestPtr must be 8 bytes");

struct sample_StructWithHoleV1;
union sample_StructWithHoleV1Ptr {
  struct sample_StructWithHoleV1* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union sample_StructWithHoleV1Ptr) == 8,
              "union sample_StructWithHoleV1Ptr must be 8 bytes");

struct sample_StructWithHoleV2;
union sample_StructWithHoleV2Ptr {
  struct sample_StructWithHoleV2* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union sample_StructWithHoleV2Ptr) == 8,
              "union sample_StructWithHoleV2Ptr must be 8 bytes");

struct sample_NonNullableMapStruct;
union sample_NonNullableMapStructPtr {
  struct sample_NonNullableMapStruct* ptr;
  uint64_t offset;
};
MOJO_STATIC_ASSERT(sizeof(union sample_NonNullableMapStructPtr) == 8,
              "union sample_NonNullableMapStructPtr must be 8 bytes");

// Forward declarations for unions.
// Top level constants.
const uint8_t sample_kTwelve;


// Top level enums.


// Union definitions.


// Struct definitions.
// -- sample_Bar --
// Enums
typedef uint32_t sample_Bar_Type;
enum sample_Bar_Type_Enum {
  sample_Bar_Type_VERTICAL = 1,
  sample_Bar_Type_HORIZONTAL = 2,
  sample_Bar_Type_BOTH = 3,
  sample_Bar_Type_INVALID = 4,
  
  sample_Bar_Type__UNKNOWN__ = 0xFFFFFFFF,
};

// Constants
// Struct definition
struct sample_Bar {
  struct MojomStructHeader header_;
  uint8_t alpha;  // offset,bit = 0,0
  uint8_t beta;  // offset,bit = 1,0
  uint8_t gamma;  // offset,bit = 2,0
  uint8_t pad2_[1];  // padding
  sample_Bar_Type type;  // offset,bit = 4,0
  uint8_t pad3_[4];  // padding
  
};

struct sample_Bar* sample_Bar_New(struct MojomBuffer* in_buffer);

void sample_Bar_Init(
  struct sample_Bar* in_data);

void sample_Bar_CloseAllHandles(
  struct sample_Bar* in_data);

struct sample_Bar* sample_Bar_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_Bar* in_data);

size_t sample_Bar_ComputeSerializedSize(
  const struct sample_Bar* in_data);

MojomValidationResult sample_Bar_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_Bar_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_Bar_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- sample_Foo --
// Enums
// Constants
const char* sample_Foo_kFooby;
// Struct definition
struct sample_Foo {
  struct MojomStructHeader header_;
  int32_t x;  // offset,bit = 0,0
  int32_t y;  // offset,bit = 4,0
  bool a : 1;  // offset,bit = 8,0
  bool b : 1;  // offset,bit = 8,1
  bool c : 1;  // offset,bit = 8,2
  uint8_t pad4_[3];  // padding
  MojoHandle source;  // offset,bit = 12,0
  union sample_BarPtr bar;  // offset,bit = 16,0
  union MojomArrayPtr data;  // offset,bit = 24,0
  union MojomArrayPtr extra_bars;  // offset,bit = 32,0
  union MojomStringPtr name;  // offset,bit = 40,0
  union MojomArrayPtr input_streams;  // offset,bit = 48,0
  union MojomArrayPtr output_streams;  // offset,bit = 56,0
  union MojomArrayPtr array_of_array_of_bools;  // offset,bit = 64,0
  union MojomArrayPtr multi_array_of_strings;  // offset,bit = 72,0
  union MojomArrayPtr array_of_bools;  // offset,bit = 80,0
  
};

struct sample_Foo* sample_Foo_New(struct MojomBuffer* in_buffer);

void sample_Foo_Init(
  struct sample_Foo* in_data);

void sample_Foo_CloseAllHandles(
  struct sample_Foo* in_data);

struct sample_Foo* sample_Foo_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_Foo* in_data);

size_t sample_Foo_ComputeSerializedSize(
  const struct sample_Foo* in_data);

MojomValidationResult sample_Foo_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_Foo_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_Foo_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- sample_DefaultsTest --
// Enums
// Constants
// Struct definition
struct sample_DefaultsTest {
  struct MojomStructHeader header_;
  int8_t a0;  // offset,bit = 0,0
  uint8_t a1;  // offset,bit = 1,0
  int16_t a2;  // offset,bit = 2,0
  uint16_t a3;  // offset,bit = 4,0
  bool a11 : 1;  // offset,bit = 6,0
  bool a12 : 1;  // offset,bit = 6,1
  uint8_t pad5_[1];  // padding
  int32_t a4;  // offset,bit = 8,0
  uint32_t a5;  // offset,bit = 12,0
  int64_t a6;  // offset,bit = 16,0
  uint64_t a7;  // offset,bit = 24,0
  int32_t a8;  // offset,bit = 32,0
  int32_t a9;  // offset,bit = 36,0
  int32_t a10;  // offset,bit = 40,0
  float a13;  // offset,bit = 44,0
  double a14;  // offset,bit = 48,0
  double a15;  // offset,bit = 56,0
  double a16;  // offset,bit = 64,0
  double a17;  // offset,bit = 72,0
  union MojomArrayPtr a18;  // offset,bit = 80,0
  union MojomStringPtr a19;  // offset,bit = 88,0
  sample_Bar_Type a20;  // offset,bit = 96,0
  float a29;  // offset,bit = 100,0
  union imported_PointPtr a21;  // offset,bit = 104,0
  union imported_ThingPtr a22;  // offset,bit = 112,0
  uint64_t a23;  // offset,bit = 120,0
  int64_t a24;  // offset,bit = 128,0
  int64_t a25;  // offset,bit = 136,0
  double a26;  // offset,bit = 144,0
  double a27;  // offset,bit = 152,0
  double a28;  // offset,bit = 160,0
  float a30;  // offset,bit = 168,0
  float a31;  // offset,bit = 172,0
  uint8_t pad31_[4];  // padding
  
};

struct sample_DefaultsTest* sample_DefaultsTest_New(struct MojomBuffer* in_buffer);

void sample_DefaultsTest_Init(
  struct sample_DefaultsTest* in_data);

void sample_DefaultsTest_CloseAllHandles(
  struct sample_DefaultsTest* in_data);

struct sample_DefaultsTest* sample_DefaultsTest_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_DefaultsTest* in_data);

size_t sample_DefaultsTest_ComputeSerializedSize(
  const struct sample_DefaultsTest* in_data);

MojomValidationResult sample_DefaultsTest_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_DefaultsTest_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_DefaultsTest_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- sample_StructWithHoleV1 --
// Enums
// Constants
// Struct definition
struct sample_StructWithHoleV1 {
  struct MojomStructHeader header_;
  int32_t v1;  // offset,bit = 0,0
  uint8_t pad0_[4];  // padding
  int64_t v2;  // offset,bit = 8,0
  
};

struct sample_StructWithHoleV1* sample_StructWithHoleV1_New(struct MojomBuffer* in_buffer);

void sample_StructWithHoleV1_Init(
  struct sample_StructWithHoleV1* in_data);

void sample_StructWithHoleV1_CloseAllHandles(
  struct sample_StructWithHoleV1* in_data);

struct sample_StructWithHoleV1* sample_StructWithHoleV1_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_StructWithHoleV1* in_data);

size_t sample_StructWithHoleV1_ComputeSerializedSize(
  const struct sample_StructWithHoleV1* in_data);

MojomValidationResult sample_StructWithHoleV1_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_StructWithHoleV1_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_StructWithHoleV1_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- sample_StructWithHoleV2 --
// Enums
// Constants
// Struct definition
struct sample_StructWithHoleV2 {
  struct MojomStructHeader header_;
  int32_t v1;  // offset,bit = 0,0
  int32_t v3;  // offset,bit = 4,0
  int64_t v2;  // offset,bit = 8,0
  
};

struct sample_StructWithHoleV2* sample_StructWithHoleV2_New(struct MojomBuffer* in_buffer);

void sample_StructWithHoleV2_Init(
  struct sample_StructWithHoleV2* in_data);

void sample_StructWithHoleV2_CloseAllHandles(
  struct sample_StructWithHoleV2* in_data);

struct sample_StructWithHoleV2* sample_StructWithHoleV2_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_StructWithHoleV2* in_data);

size_t sample_StructWithHoleV2_ComputeSerializedSize(
  const struct sample_StructWithHoleV2* in_data);

MojomValidationResult sample_StructWithHoleV2_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_StructWithHoleV2_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_StructWithHoleV2_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


// -- sample_NonNullableMapStruct --
// Enums
// Constants
// Struct definition
struct sample_NonNullableMapStruct {
  struct MojomStructHeader header_;
  union MojomMapPtr map_field;  // offset,bit = 0,0
  
};

struct sample_NonNullableMapStruct* sample_NonNullableMapStruct_New(struct MojomBuffer* in_buffer);

void sample_NonNullableMapStruct_Init(
  struct sample_NonNullableMapStruct* in_data);

void sample_NonNullableMapStruct_CloseAllHandles(
  struct sample_NonNullableMapStruct* in_data);

struct sample_NonNullableMapStruct* sample_NonNullableMapStruct_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_NonNullableMapStruct* in_data);

size_t sample_NonNullableMapStruct_ComputeSerializedSize(
  const struct sample_NonNullableMapStruct* in_data);

MojomValidationResult sample_NonNullableMapStruct_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_NonNullableMapStruct_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_NonNullableMapStruct_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);




// Interface definitions.
// --- sample_Service ---
#define sample_Service__ServiceName ((const char*)"")
#define sample_Service__CurrentVersion ((uint32_t)0)

// Enums
typedef uint32_t sample_Service_BazOptions;
enum sample_Service_BazOptions_Enum {
  sample_Service_BazOptions_REGULAR = 0,
  sample_Service_BazOptions_EXTRA = 1,
  
  sample_Service_BazOptions__UNKNOWN__ = 0xFFFFFFFF,
};

// Constants
const uint8_t sample_Service_kFavoriteBaz;


// Message: Frobinate

#define sample_Service_Frobinate__Ordinal \
    ((uint32_t)0)
#define sample_Service_Frobinate__MinVersion \
    ((uint32_t)0)

struct sample_Service_Frobinate_Request;
// -- sample_Service_Frobinate_Request --
// Enums
// Constants
// Struct definition
struct sample_Service_Frobinate_Request {
  struct MojomStructHeader header_;
  union sample_FooPtr foo;  // offset,bit = 0,0
  sample_Service_BazOptions baz;  // offset,bit = 8,0
  struct MojomInterfaceData port;  // offset,bit = 12,0
  uint8_t pad2_[4];  // padding
  
};

struct sample_Service_Frobinate_Request* sample_Service_Frobinate_Request_New(struct MojomBuffer* in_buffer);

void sample_Service_Frobinate_Request_Init(
  struct sample_Service_Frobinate_Request* in_data);

void sample_Service_Frobinate_Request_CloseAllHandles(
  struct sample_Service_Frobinate_Request* in_data);

struct sample_Service_Frobinate_Request* sample_Service_Frobinate_Request_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_Service_Frobinate_Request* in_data);

size_t sample_Service_Frobinate_Request_ComputeSerializedSize(
  const struct sample_Service_Frobinate_Request* in_data);

MojomValidationResult sample_Service_Frobinate_Request_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_Service_Frobinate_Request_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_Service_Frobinate_Request_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);


struct sample_Service_Frobinate_Response;
// -- sample_Service_Frobinate_Response --
// Enums
// Constants
// Struct definition
struct sample_Service_Frobinate_Response {
  struct MojomStructHeader header_;
  int32_t result;  // offset,bit = 0,0
  
};

struct sample_Service_Frobinate_Response* sample_Service_Frobinate_Response_New(struct MojomBuffer* in_buffer);

void sample_Service_Frobinate_Response_Init(
  struct sample_Service_Frobinate_Response* in_data);

void sample_Service_Frobinate_Response_CloseAllHandles(
  struct sample_Service_Frobinate_Response* in_data);

struct sample_Service_Frobinate_Response* sample_Service_Frobinate_Response_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_Service_Frobinate_Response* in_data);

size_t sample_Service_Frobinate_Response_ComputeSerializedSize(
  const struct sample_Service_Frobinate_Response* in_data);

MojomValidationResult sample_Service_Frobinate_Response_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_Service_Frobinate_Response_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_Service_Frobinate_Response_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);



// Message: GetPort

#define sample_Service_GetPort__Ordinal \
    ((uint32_t)1)
#define sample_Service_GetPort__MinVersion \
    ((uint32_t)0)

struct sample_Service_GetPort_Request;
// -- sample_Service_GetPort_Request --
// Enums
// Constants
// Struct definition
struct sample_Service_GetPort_Request {
  struct MojomStructHeader header_;
  MojoHandle port;  // offset,bit = 0,0
  
};

struct sample_Service_GetPort_Request* sample_Service_GetPort_Request_New(struct MojomBuffer* in_buffer);

void sample_Service_GetPort_Request_Init(
  struct sample_Service_GetPort_Request* in_data);

void sample_Service_GetPort_Request_CloseAllHandles(
  struct sample_Service_GetPort_Request* in_data);

struct sample_Service_GetPort_Request* sample_Service_GetPort_Request_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_Service_GetPort_Request* in_data);

size_t sample_Service_GetPort_Request_ComputeSerializedSize(
  const struct sample_Service_GetPort_Request* in_data);

MojomValidationResult sample_Service_GetPort_Request_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_Service_GetPort_Request_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_Service_GetPort_Request_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);





// --- sample_Port ---
#define sample_Port__ServiceName ((const char*)"")
#define sample_Port__CurrentVersion ((uint32_t)0)

// Enums
// Constants


// Message: PostMessage

#define sample_Port_PostMessage__Ordinal \
    ((uint32_t)0)
#define sample_Port_PostMessage__MinVersion \
    ((uint32_t)0)

struct sample_Port_PostMessage_Request;
// -- sample_Port_PostMessage_Request --
// Enums
// Constants
// Struct definition
struct sample_Port_PostMessage_Request {
  struct MojomStructHeader header_;
  union MojomStringPtr message_text;  // offset,bit = 0,0
  struct MojomInterfaceData port;  // offset,bit = 8,0
  
};

struct sample_Port_PostMessage_Request* sample_Port_PostMessage_Request_New(struct MojomBuffer* in_buffer);

void sample_Port_PostMessage_Request_Init(
  struct sample_Port_PostMessage_Request* in_data);

void sample_Port_PostMessage_Request_CloseAllHandles(
  struct sample_Port_PostMessage_Request* in_data);

struct sample_Port_PostMessage_Request* sample_Port_PostMessage_Request_DeepCopy(
  struct MojomBuffer* in_buffer,
  struct sample_Port_PostMessage_Request* in_data);

size_t sample_Port_PostMessage_Request_ComputeSerializedSize(
  const struct sample_Port_PostMessage_Request* in_data);

MojomValidationResult sample_Port_PostMessage_Request_EncodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size, MojoHandle* inout_handles,
  uint32_t in_num_handles, uint32_t* out_num_handles);

MojomValidationResult sample_Port_PostMessage_Request_DecodePointersAndHandles(
  void* inout_buf, uint32_t in_buf_size,
  MojoHandle* inout_handles, uint32_t in_num_handles);

MojomValidationResult sample_Port_PostMessage_Request_Validate(
  const void* in_buf, uint32_t in_buf_size,
  const MojoHandle* in_handles, uint32_t in_num_handles);







// Type tables declarations for structs and unions.



extern struct MojomPointerTableStructEntry sample_Bar__PointerTable[];
extern struct MojomPointerTableStructEntry sample_Foo__PointerTable[];
extern struct MojomPointerTableStructEntry sample_DefaultsTest__PointerTable[];
extern struct MojomPointerTableStructEntry sample_StructWithHoleV1__PointerTable[];
extern struct MojomPointerTableStructEntry sample_StructWithHoleV2__PointerTable[];
extern struct MojomPointerTableStructEntry sample_NonNullableMapStruct__PointerTable[];
extern struct MojomPointerTableStructEntry sample_Service_Frobinate_Request__PointerTable[];
extern struct MojomPointerTableStructEntry sample_Service_Frobinate_Response__PointerTable[];
extern struct MojomPointerTableStructEntry sample_Service_GetPort_Request__PointerTable[];
extern struct MojomPointerTableStructEntry sample_Port_PostMessage_Request__PointerTable[];


#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_SERVICE_MOJOM_C_H_