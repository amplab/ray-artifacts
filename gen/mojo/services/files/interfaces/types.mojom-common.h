// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_TYPES_MOJOM_COMMON_H_
#define MOJO_SERVICES_FILES_INTERFACES_TYPES_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/types.mojom-internal.h"
namespace mojo {
namespace files {

// --- Interface Forward Declarations ---

// --- Struct Forward Declarations ---
class Timespec;

using TimespecPtr = mojo::InlinedStructPtr<Timespec>;


class TimespecOrNow;

using TimespecOrNowPtr = mojo::StructPtr<TimespecOrNow>;


class FileInformation;

using FileInformationPtr = mojo::StructPtr<FileInformation>;


class DirectoryEntry;

using DirectoryEntryPtr = mojo::InlinedStructPtr<DirectoryEntry>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---
  
enum class Error : int32_t {
  OK = 0,
  UNKNOWN,
  INVALID_ARGUMENT,
  PERMISSION_DENIED,
  OUT_OF_RANGE,
  UNIMPLEMENTED,
  CLOSED,
  UNAVAILABLE,
  INTERNAL,
};

bool Error_IsValidValue(Error value);
  
std::ostream& operator<<(std::ostream& stream, const Error& val);
  
enum class Whence : int32_t {
  FROM_CURRENT = 0,
  FROM_START,
  FROM_END,
};

bool Whence_IsValidValue(Whence value);
  
std::ostream& operator<<(std::ostream& stream, const Whence& val);
  
enum class FileType : int32_t {
  UNKNOWN = 0,
  REGULAR_FILE,
  DIRECTORY,
};

bool FileType_IsValidValue(FileType value);
  
std::ostream& operator<<(std::ostream& stream, const FileType& val);

// --- Constants ---
const uint32_t kOpenFlagRead = 1U;
const uint32_t kOpenFlagWrite = 2U;
const uint32_t kOpenFlagCreate = 4U;
const uint32_t kOpenFlagExclusive = 8U;
const uint32_t kOpenFlagAppend = 16U;
const uint32_t kOpenFlagTruncate = 32U;
const uint32_t kDeleteFlagFileOnly = 1U;
const uint32_t kDeleteFlagDirectoryOnly = 2U;
const uint32_t kDeleteFlagRecursive = 4U;

// --- Interface declarations ---
}  // namespace files
}  // namespace mojo

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<mojo::files::TimespecPtr, true, false> {
  using DataType = mojo::files::internal::Timespec_Data*;
};
template <>
struct WrapperTraits<mojo::files::TimespecOrNowPtr, true, false> {
  using DataType = mojo::files::internal::TimespecOrNow_Data*;
};
template <>
struct WrapperTraits<mojo::files::FileInformationPtr, true, false> {
  using DataType = mojo::files::internal::FileInformation_Data*;
};
template <>
struct WrapperTraits<mojo::files::DirectoryEntryPtr, true, false> {
  using DataType = mojo::files::internal::DirectoryEntry_Data*;
};

}  // internal
}  // mojo
namespace mojo {
namespace files {

// --- Interface Request Validators ---

// --- Interface Response Validators ---

// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---
class Timespec {
 public:
  using Data_ = internal::Timespec_Data;

  static TimespecPtr New();

  template <typename U>
  static TimespecPtr From(const U& u) {
    return mojo::TypeConverter<TimespecPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Timespec>::Convert(*this);
  }

  Timespec();
  ~Timespec();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TimespecPtr Clone() const;
  bool Equals(const Timespec& other) const;

  int64_t seconds;
  int32_t nanoseconds;
};


class DirectoryEntry {
 public:
  using Data_ = internal::DirectoryEntry_Data;

  static DirectoryEntryPtr New();

  template <typename U>
  static DirectoryEntryPtr From(const U& u) {
    return mojo::TypeConverter<DirectoryEntryPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, DirectoryEntry>::Convert(*this);
  }

  DirectoryEntry();
  ~DirectoryEntry();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  DirectoryEntryPtr Clone() const;
  bool Equals(const DirectoryEntry& other) const;

  FileType type;
  mojo::String name;
};



// --- Non-inlined structs ---
class TimespecOrNow {
 public:
  using Data_ = internal::TimespecOrNow_Data;

  static TimespecOrNowPtr New();

  template <typename U>
  static TimespecOrNowPtr From(const U& u) {
    return mojo::TypeConverter<TimespecOrNowPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, TimespecOrNow>::Convert(*this);
  }

  TimespecOrNow();
  ~TimespecOrNow();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  TimespecOrNowPtr Clone() const;
  bool Equals(const TimespecOrNow& other) const;

  bool now;
  TimespecPtr timespec;
};


class FileInformation {
 public:
  using Data_ = internal::FileInformation_Data;

  static FileInformationPtr New();

  template <typename U>
  static FileInformationPtr From(const U& u) {
    return mojo::TypeConverter<FileInformationPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FileInformation>::Convert(*this);
  }

  FileInformation();
  ~FileInformation();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  FileInformationPtr Clone() const;
  bool Equals(const FileInformation& other) const;

  FileType type;
  int64_t size;
  TimespecPtr atime;
  TimespecPtr mtime;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const Timespec& input);
mojo::internal::ValidationError Serialize_(
    Timespec* input,
    mojo::internal::Buffer* buffer,
    internal::Timespec_Data** output);
void Deserialize_(internal::Timespec_Data* input,
                  Timespec* output);

size_t GetSerializedSize_(const TimespecOrNow& input);
mojo::internal::ValidationError Serialize_(
    TimespecOrNow* input,
    mojo::internal::Buffer* buffer,
    internal::TimespecOrNow_Data** output);
void Deserialize_(internal::TimespecOrNow_Data* input,
                  TimespecOrNow* output);

size_t GetSerializedSize_(const FileInformation& input);
mojo::internal::ValidationError Serialize_(
    FileInformation* input,
    mojo::internal::Buffer* buffer,
    internal::FileInformation_Data** output);
void Deserialize_(internal::FileInformation_Data* input,
                  FileInformation* output);

size_t GetSerializedSize_(const DirectoryEntry& input);
mojo::internal::ValidationError Serialize_(
    DirectoryEntry* input,
    mojo::internal::Buffer* buffer,
    internal::DirectoryEntry_Data** output);
void Deserialize_(internal::DirectoryEntry_Data* input,
                  DirectoryEntry* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_TYPES_MOJOM_COMMON_H_
