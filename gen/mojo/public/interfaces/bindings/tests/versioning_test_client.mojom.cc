// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/versioning_test_client.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace test {
namespace versioning {

// --- Interface definitions ---
class HumanResourceDatabase_AddEmployee_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HumanResourceDatabase_AddEmployee_ForwardToCallback(
      const HumanResourceDatabase::AddEmployeeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HumanResourceDatabase::AddEmployeeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_AddEmployee_ForwardToCallback);
};
bool HumanResourceDatabase_AddEmployee_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data* params =
      reinterpret_cast<internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  bool p_success {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_success = params->success;
  } while (false);
  callback_.Run(p_success);
  return true;
}
class HumanResourceDatabase_QueryEmployee_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HumanResourceDatabase_QueryEmployee_ForwardToCallback(
      const HumanResourceDatabase::QueryEmployeeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HumanResourceDatabase::QueryEmployeeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_QueryEmployee_ForwardToCallback);
};
bool HumanResourceDatabase_QueryEmployee_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data* params =
      reinterpret_cast<internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  EmployeePtr p_employee {};
  mojo::Array<uint8_t> p_finger_print {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->employee.ptr) {
      p_employee = Employee::New();
      Deserialize_(params->employee.ptr, p_employee.get());
    }
    if (params->header_.version < 1)
      break;
    Deserialize_(params->finger_print.ptr, &p_finger_print);
  } while (false);
  callback_.Run(p_employee.Pass(), p_finger_print.Pass());
  return true;
}
class HumanResourceDatabase_AttachFingerPrint_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HumanResourceDatabase_AttachFingerPrint_ForwardToCallback(
      const HumanResourceDatabase::AttachFingerPrintCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HumanResourceDatabase::AttachFingerPrintCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_AttachFingerPrint_ForwardToCallback);
};
bool HumanResourceDatabase_AttachFingerPrint_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* params =
      reinterpret_cast<internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  bool p_success {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_success = params->success;
  } while (false);
  callback_.Run(p_success);
  return true;
}
class HumanResourceDatabase_ListEmployeeIds_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  HumanResourceDatabase_ListEmployeeIds_ForwardToCallback(
      const HumanResourceDatabase::ListEmployeeIdsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  HumanResourceDatabase::ListEmployeeIdsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_ListEmployeeIds_ForwardToCallback);
};
bool HumanResourceDatabase_ListEmployeeIds_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* params =
      reinterpret_cast<internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<uint64_t> p_ids {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->ids.ptr, &p_ids);
  } while (false);
  callback_.Run(p_ids.Pass());
  return true;
}

HumanResourceDatabaseProxy::HumanResourceDatabaseProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void HumanResourceDatabaseProxy::AddEmployee(
    EmployeePtr in_employee, const AddEmployeeCallback& callback) {
  size_t size = sizeof(internal::HumanResourceDatabase_AddEmployee_Params_Data);
  size += in_employee.is_null()
              ? 0
              : GetSerializedSize_(*in_employee);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::AddEmployee), size);

  internal::HumanResourceDatabase_AddEmployee_Params_Data* params =
      internal::HumanResourceDatabase_AddEmployee_Params_Data::New(builder.buffer());
  {Serialize_(in_employee.get(),
               builder.buffer(),
               &params->employee.ptr);
  }
  if (!params->employee.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null employee in HumanResourceDatabase.AddEmployee request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HumanResourceDatabase_AddEmployee_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void HumanResourceDatabaseProxy::QueryEmployee(
    uint64_t in_id, bool in_retrieve_finger_print, const QueryEmployeeCallback& callback) {
  size_t size = sizeof(internal::HumanResourceDatabase_QueryEmployee_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::QueryEmployee), size);

  internal::HumanResourceDatabase_QueryEmployee_Params_Data* params =
      internal::HumanResourceDatabase_QueryEmployee_Params_Data::New(builder.buffer());
  params->id = in_id;
  params->retrieve_finger_print = in_retrieve_finger_print;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HumanResourceDatabase_QueryEmployee_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void HumanResourceDatabaseProxy::AttachFingerPrint(
    uint64_t in_id, mojo::Array<uint8_t> in_finger_print, const AttachFingerPrintCallback& callback) {
  size_t size = sizeof(internal::HumanResourceDatabase_AttachFingerPrint_Params_Data);
  size += GetSerializedSize_(in_finger_print);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::AttachFingerPrint), size);

  internal::HumanResourceDatabase_AttachFingerPrint_Params_Data* params =
      internal::HumanResourceDatabase_AttachFingerPrint_Params_Data::New(builder.buffer());
  params->id = in_id;
  {
    const mojo::internal::ArrayValidateParams finger_print_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_finger_print, builder.buffer(), &params->finger_print.ptr,
                          &finger_print_validate_params);
  }
  if (!params->finger_print.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null finger_print in HumanResourceDatabase.AttachFingerPrint request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HumanResourceDatabase_AttachFingerPrint_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void HumanResourceDatabaseProxy::ListEmployeeIds(
    const ListEmployeeIdsCallback& callback) {
  size_t size = sizeof(internal::HumanResourceDatabase_ListEmployeeIds_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::ListEmployeeIds), size);

  internal::HumanResourceDatabase_ListEmployeeIds_Params_Data* params =
      internal::HumanResourceDatabase_ListEmployeeIds_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new HumanResourceDatabase_ListEmployeeIds_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HumanResourceDatabase_AddEmployee_ProxyToResponder
    : public HumanResourceDatabase::AddEmployeeCallback::Runnable {
 public:
  ~HumanResourceDatabase_AddEmployee_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HumanResourceDatabase::AddEmployee(p_employee.Pass(), callback) "
        "was never run.";
  }

  HumanResourceDatabase_AddEmployee_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(bool in_success) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_AddEmployee_ProxyToResponder);
};

void HumanResourceDatabase_AddEmployee_ProxyToResponder::Run(
    bool in_success) const {
  size_t size = sizeof(internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::AddEmployee), size, request_id_);
  internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data* params =
      internal::HumanResourceDatabase_AddEmployee_ResponseParams_Data::New(builder.buffer());
  params->success = in_success;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HumanResourceDatabase_QueryEmployee_ProxyToResponder
    : public HumanResourceDatabase::QueryEmployeeCallback::Runnable {
 public:
  ~HumanResourceDatabase_QueryEmployee_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HumanResourceDatabase::QueryEmployee(p_id, p_retrieve_finger_print, callback) "
        "was never run.";
  }

  HumanResourceDatabase_QueryEmployee_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(EmployeePtr in_employee, mojo::Array<uint8_t> in_finger_print) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_QueryEmployee_ProxyToResponder);
};

void HumanResourceDatabase_QueryEmployee_ProxyToResponder::Run(
    EmployeePtr in_employee, mojo::Array<uint8_t> in_finger_print) const {
  size_t size = sizeof(internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data);
  size += in_employee.is_null()
              ? 0
              : GetSerializedSize_(*in_employee);
  size += GetSerializedSize_(in_finger_print);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::QueryEmployee), size, request_id_);
  internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data* params =
      internal::HumanResourceDatabase_QueryEmployee_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_employee.get(),
               builder.buffer(),
               &params->employee.ptr);
  }
  {
    const mojo::internal::ArrayValidateParams finger_print_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_finger_print, builder.buffer(), &params->finger_print.ptr,
                          &finger_print_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HumanResourceDatabase_AttachFingerPrint_ProxyToResponder
    : public HumanResourceDatabase::AttachFingerPrintCallback::Runnable {
 public:
  ~HumanResourceDatabase_AttachFingerPrint_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HumanResourceDatabase::AttachFingerPrint(p_id, p_finger_print.Pass(), callback) "
        "was never run.";
  }

  HumanResourceDatabase_AttachFingerPrint_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(bool in_success) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_AttachFingerPrint_ProxyToResponder);
};

void HumanResourceDatabase_AttachFingerPrint_ProxyToResponder::Run(
    bool in_success) const {
  size_t size = sizeof(internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::AttachFingerPrint), size, request_id_);
  internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data* params =
      internal::HumanResourceDatabase_AttachFingerPrint_ResponseParams_Data::New(builder.buffer());
  params->success = in_success;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class HumanResourceDatabase_ListEmployeeIds_ProxyToResponder
    : public HumanResourceDatabase::ListEmployeeIdsCallback::Runnable {
 public:
  ~HumanResourceDatabase_ListEmployeeIds_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "HumanResourceDatabase::ListEmployeeIds(callback) "
        "was never run.";
  }

  HumanResourceDatabase_ListEmployeeIds_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<uint64_t> in_ids) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(HumanResourceDatabase_ListEmployeeIds_ProxyToResponder);
};

void HumanResourceDatabase_ListEmployeeIds_ProxyToResponder::Run(
    mojo::Array<uint64_t> in_ids) const {
  size_t size = sizeof(internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data);
  size += GetSerializedSize_(in_ids);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::HumanResourceDatabase_Base::MessageOrdinals::ListEmployeeIds), size, request_id_);
  internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data* params =
      internal::HumanResourceDatabase_ListEmployeeIds_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams ids_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_ids, builder.buffer(), &params->ids.ptr,
                          &ids_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

HumanResourceDatabaseStub::HumanResourceDatabaseStub()
    : sink_(nullptr),
      control_message_handler_(HumanResourceDatabase::Version_) {
}

HumanResourceDatabaseStub::~HumanResourceDatabaseStub() {}

bool HumanResourceDatabaseStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::HumanResourceDatabase_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HumanResourceDatabase_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AddEmployee: {
      break;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::QueryEmployee: {
      break;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AttachFingerPrint: {
      break;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::ListEmployeeIds: {
      break;
    }
  }
  return false;
}

bool HumanResourceDatabaseStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::HumanResourceDatabase_Base::MessageOrdinals method_ordinal =
      static_cast<internal::HumanResourceDatabase_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AddEmployee: {
      internal::HumanResourceDatabase_AddEmployee_Params_Data* params =
          reinterpret_cast<internal::HumanResourceDatabase_AddEmployee_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HumanResourceDatabase::AddEmployeeCallback::Runnable* runnable =
          new HumanResourceDatabase_AddEmployee_ProxyToResponder(
              message->request_id(), responder);
      HumanResourceDatabase::AddEmployeeCallback callback(runnable);
      
      EmployeePtr p_employee {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->employee.ptr) {
          p_employee = Employee::New();
          Deserialize_(params->employee.ptr, p_employee.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AddEmployee(p_employee.Pass(), callback);
      return true;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::QueryEmployee: {
      internal::HumanResourceDatabase_QueryEmployee_Params_Data* params =
          reinterpret_cast<internal::HumanResourceDatabase_QueryEmployee_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HumanResourceDatabase::QueryEmployeeCallback::Runnable* runnable =
          new HumanResourceDatabase_QueryEmployee_ProxyToResponder(
              message->request_id(), responder);
      HumanResourceDatabase::QueryEmployeeCallback callback(runnable);
      
      uint64_t p_id {};
      bool p_retrieve_finger_print {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_id = params->id;
        if (params->header_.version < 1)
          break;
        p_retrieve_finger_print = params->retrieve_finger_print;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->QueryEmployee(p_id, p_retrieve_finger_print, callback);
      return true;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::AttachFingerPrint: {
      internal::HumanResourceDatabase_AttachFingerPrint_Params_Data* params =
          reinterpret_cast<internal::HumanResourceDatabase_AttachFingerPrint_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HumanResourceDatabase::AttachFingerPrintCallback::Runnable* runnable =
          new HumanResourceDatabase_AttachFingerPrint_ProxyToResponder(
              message->request_id(), responder);
      HumanResourceDatabase::AttachFingerPrintCallback callback(runnable);
      
      uint64_t p_id {};
      mojo::Array<uint8_t> p_finger_print {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_id = params->id;
        Deserialize_(params->finger_print.ptr, &p_finger_print);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AttachFingerPrint(p_id, p_finger_print.Pass(), callback);
      return true;
    }
    case internal::HumanResourceDatabase_Base::MessageOrdinals::ListEmployeeIds: {
      internal::HumanResourceDatabase_ListEmployeeIds_Params_Data* params =
          reinterpret_cast<internal::HumanResourceDatabase_ListEmployeeIds_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      HumanResourceDatabase::ListEmployeeIdsCallback::Runnable* runnable =
          new HumanResourceDatabase_ListEmployeeIds_ProxyToResponder(
              message->request_id(), responder);
      HumanResourceDatabase::ListEmployeeIdsCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ListEmployeeIds(callback);
      return true;
    }
  }
  return false;
}

}  // namespace versioning
}  // namespace test
}  // namespace mojo
