// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/test_service/test_service.mojom
//

package test_service

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type TestService interface {
	Ping() (err error)
	ConnectToAppAndGetTime(inAppUrl *string) (outTimeUsec int64, err error)
	StartTrackingRequests() (err error)
}



var testService_Name = "mojo::test::TestService"

type TestService_Request bindings.InterfaceRequest

func (r *TestService_Request) Name() string {
	return testService_Name
}


type TestService_Pointer bindings.InterfacePointer

func (p *TestService_Pointer) Name() string {
	return testService_Name
}

type TestService_ServiceFactory struct{
	Delegate TestService_Factory
}

type TestService_Factory interface {
	Create(request TestService_Request)
}

func (f *TestService_ServiceFactory) Name() string {
	return testService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestService_ServiceDescription{}
}

func (f *TestService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestService creates a message pipe for use with the
// TestService interface with a TestService_Request on one end and a TestService_Pointer on the other.
func CreateMessagePipeForTestService() (TestService_Request, TestService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestService_Request(r), TestService_Pointer(p)
}

const testService_Ping_Name uint32 = 0
const testService_ConnectToAppAndGetTime_Name uint32 = 1
const testService_StartTrackingRequests_Name uint32 = 2

type TestService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestServiceProxy(p TestService_Pointer, waiter bindings.AsyncWaiter) *TestService_Proxy {
	return &TestService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestService_Proxy) Close_Proxy() {
	p.router.Close()
}

type testService_Ping_Params struct {
}


func (s *testService_Ping_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_Ping_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testService_Ping_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_Ping_Params_Versions), func(i int) bool {
		return testService_Ping_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_Ping_Params_Versions) {
		if testService_Ping_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_Ping_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testService_Ping_ResponseParams struct {
}


func (s *testService_Ping_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_Ping_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testService_Ping_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_Ping_ResponseParams_Versions), func(i int) bool {
		return testService_Ping_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_Ping_ResponseParams_Versions) {
		if testService_Ping_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_Ping_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestService_Proxy) Ping() (err error) {
	payload := &testService_Ping_Params{
	}
	header := bindings.MessageHeader{
		Type: testService_Ping_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testService_Ping_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testService_Ping_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testService_ConnectToAppAndGetTime_Params struct {
	inAppUrl *string
}


func (s *testService_ConnectToAppAndGetTime_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if s.inAppUrl == nil {
		encoder.WriteNullPointer()
	} else {
		if err := encoder.WritePointer(); err != nil {
			return err
		}
		if err := encoder.WriteString((*s.inAppUrl)); err != nil {
			return err
		}
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_ConnectToAppAndGetTime_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *testService_ConnectToAppAndGetTime_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_ConnectToAppAndGetTime_Params_Versions), func(i int) bool {
		return testService_ConnectToAppAndGetTime_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_ConnectToAppAndGetTime_Params_Versions) {
		if testService_ConnectToAppAndGetTime_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_ConnectToAppAndGetTime_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		pointer0, err := decoder.ReadPointer()
		if err != nil {
			return err
		}
		if pointer0 == 0 {
			s.inAppUrl = nil
		} else {
			s.inAppUrl = new(string)
			value0, err := decoder.ReadString()
			if err != nil {
				return err
			}
			(*s.inAppUrl) = value0
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testService_ConnectToAppAndGetTime_ResponseParams struct {
	outTimeUsec int64
}


func (s *testService_ConnectToAppAndGetTime_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt64(s.outTimeUsec); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_ConnectToAppAndGetTime_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *testService_ConnectToAppAndGetTime_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_ConnectToAppAndGetTime_ResponseParams_Versions), func(i int) bool {
		return testService_ConnectToAppAndGetTime_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_ConnectToAppAndGetTime_ResponseParams_Versions) {
		if testService_ConnectToAppAndGetTime_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_ConnectToAppAndGetTime_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.outTimeUsec = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestService_Proxy) ConnectToAppAndGetTime(inAppUrl *string) (outTimeUsec int64, err error) {
	payload := &testService_ConnectToAppAndGetTime_Params{
		inAppUrl,
	}
	header := bindings.MessageHeader{
		Type: testService_ConnectToAppAndGetTime_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testService_ConnectToAppAndGetTime_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testService_ConnectToAppAndGetTime_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outTimeUsec = response.outTimeUsec
	return
}

type testService_StartTrackingRequests_Params struct {
}


func (s *testService_StartTrackingRequests_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_StartTrackingRequests_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testService_StartTrackingRequests_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_StartTrackingRequests_Params_Versions), func(i int) bool {
		return testService_StartTrackingRequests_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_StartTrackingRequests_Params_Versions) {
		if testService_StartTrackingRequests_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_StartTrackingRequests_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testService_StartTrackingRequests_ResponseParams struct {
}


func (s *testService_StartTrackingRequests_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testService_StartTrackingRequests_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testService_StartTrackingRequests_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testService_StartTrackingRequests_ResponseParams_Versions), func(i int) bool {
		return testService_StartTrackingRequests_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testService_StartTrackingRequests_ResponseParams_Versions) {
		if testService_StartTrackingRequests_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testService_StartTrackingRequests_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestService_Proxy) StartTrackingRequests() (err error) {
	payload := &testService_StartTrackingRequests_Params{
	}
	header := bindings.MessageHeader{
		Type: testService_StartTrackingRequests_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testService_StartTrackingRequests_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testService_StartTrackingRequests_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testService_Stub struct {
	connector *bindings.Connector
	impl TestService
}

func NewTestServiceStub(r TestService_Request, impl TestService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testService_Stub{connector, impl})
}


func (f *TestService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestService_ServiceDescription{}
}


type TestService_ServiceDescription struct{}

func (sd *TestService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestService_ServiceDescription)(nil)


func (s *testService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testService_Ping_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testService_Ping_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testService_Ping_ResponseParams
		err = s.impl.Ping()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testService_Ping_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case testService_ConnectToAppAndGetTime_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testService_ConnectToAppAndGetTime_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testService_ConnectToAppAndGetTime_ResponseParams
		response.outTimeUsec, err = s.impl.ConnectToAppAndGetTime(request.inAppUrl)
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testService_ConnectToAppAndGetTime_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case testService_StartTrackingRequests_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testService_StartTrackingRequests_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testService_StartTrackingRequests_ResponseParams
		err = s.impl.StartTrackingRequests()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testService_StartTrackingRequests_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

type TestTimeService interface {
	GetPartyTime() (outTimeUsec int64, err error)
	StartTrackingRequests() (err error)
}



var testTimeService_Name = "mojo::test::TestTimeService"

type TestTimeService_Request bindings.InterfaceRequest

func (r *TestTimeService_Request) Name() string {
	return testTimeService_Name
}


type TestTimeService_Pointer bindings.InterfacePointer

func (p *TestTimeService_Pointer) Name() string {
	return testTimeService_Name
}

type TestTimeService_ServiceFactory struct{
	Delegate TestTimeService_Factory
}

type TestTimeService_Factory interface {
	Create(request TestTimeService_Request)
}

func (f *TestTimeService_ServiceFactory) Name() string {
	return testTimeService_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *TestTimeService_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &TestTimeService_ServiceDescription{}
}

func (f *TestTimeService_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := TestTimeService_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForTestTimeService creates a message pipe for use with the
// TestTimeService interface with a TestTimeService_Request on one end and a TestTimeService_Pointer on the other.
func CreateMessagePipeForTestTimeService() (TestTimeService_Request, TestTimeService_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return TestTimeService_Request(r), TestTimeService_Pointer(p)
}

const testTimeService_GetPartyTime_Name uint32 = 0
const testTimeService_StartTrackingRequests_Name uint32 = 1

type TestTimeService_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewTestTimeServiceProxy(p TestTimeService_Pointer, waiter bindings.AsyncWaiter) *TestTimeService_Proxy {
	return &TestTimeService_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *TestTimeService_Proxy) Close_Proxy() {
	p.router.Close()
}

type testTimeService_GetPartyTime_Params struct {
}


func (s *testTimeService_GetPartyTime_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testTimeService_GetPartyTime_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testTimeService_GetPartyTime_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testTimeService_GetPartyTime_Params_Versions), func(i int) bool {
		return testTimeService_GetPartyTime_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testTimeService_GetPartyTime_Params_Versions) {
		if testTimeService_GetPartyTime_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testTimeService_GetPartyTime_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testTimeService_GetPartyTime_ResponseParams struct {
	outTimeUsec int64
}


func (s *testTimeService_GetPartyTime_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(8, 0)
	if err := encoder.WriteInt64(s.outTimeUsec); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testTimeService_GetPartyTime_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{16, 0},
}

func (s *testTimeService_GetPartyTime_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testTimeService_GetPartyTime_ResponseParams_Versions), func(i int) bool {
		return testTimeService_GetPartyTime_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testTimeService_GetPartyTime_ResponseParams_Versions) {
		if testTimeService_GetPartyTime_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testTimeService_GetPartyTime_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		value0, err := decoder.ReadInt64()
		if err != nil {
			return err
		}
		s.outTimeUsec = value0
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestTimeService_Proxy) GetPartyTime() (outTimeUsec int64, err error) {
	payload := &testTimeService_GetPartyTime_Params{
	}
	header := bindings.MessageHeader{
		Type: testTimeService_GetPartyTime_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testTimeService_GetPartyTime_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testTimeService_GetPartyTime_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	outTimeUsec = response.outTimeUsec
	return
}

type testTimeService_StartTrackingRequests_Params struct {
}


func (s *testTimeService_StartTrackingRequests_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testTimeService_StartTrackingRequests_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testTimeService_StartTrackingRequests_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testTimeService_StartTrackingRequests_Params_Versions), func(i int) bool {
		return testTimeService_StartTrackingRequests_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testTimeService_StartTrackingRequests_Params_Versions) {
		if testTimeService_StartTrackingRequests_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testTimeService_StartTrackingRequests_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

type testTimeService_StartTrackingRequests_ResponseParams struct {
}


func (s *testTimeService_StartTrackingRequests_ResponseParams) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(0, 0)
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var testTimeService_StartTrackingRequests_ResponseParams_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{8, 0},
}

func (s *testTimeService_StartTrackingRequests_ResponseParams) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(testTimeService_StartTrackingRequests_ResponseParams_Versions), func(i int) bool {
		return testTimeService_StartTrackingRequests_ResponseParams_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(testTimeService_StartTrackingRequests_ResponseParams_Versions) {
		if testTimeService_StartTrackingRequests_ResponseParams_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := testTimeService_StartTrackingRequests_ResponseParams_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *TestTimeService_Proxy) StartTrackingRequests() (err error) {
	payload := &testTimeService_StartTrackingRequests_Params{
	}
	header := bindings.MessageHeader{
		Type: testTimeService_StartTrackingRequests_Name,
		Flags: bindings.MessageExpectsResponseFlag,
		RequestId: p.ids.Count(),
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	readResult := <-p.router.AcceptWithResponse(message)
	if err = readResult.Error; err != nil {
		p.Close_Proxy()
		return
	}
	if readResult.Message.Header.Flags != bindings.MessageIsResponseFlag {
		err = &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
			fmt.Sprintf("invalid message header flag: %v", readResult.Message.Header.Flags),
		}
		return
	}
	if got, want := readResult.Message.Header.Type, testTimeService_StartTrackingRequests_Name; got != want {
		err = &bindings.ValidationError{bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("invalid method in response: expected %v, got %v", want, got),
		}
		return
	}
	var response testTimeService_StartTrackingRequests_ResponseParams
	if err = readResult.Message.DecodePayload(&response); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type testTimeService_Stub struct {
	connector *bindings.Connector
	impl TestTimeService
}

func NewTestTimeServiceStub(r TestTimeService_Request, impl TestTimeService, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &testTimeService_Stub{connector, impl})
}


func (f *TestTimeService_Request) ServiceDescription() service_describer.ServiceDescription {
	return &TestTimeService_ServiceDescription{}
}


type TestTimeService_ServiceDescription struct{}

func (sd *TestTimeService_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *TestTimeService_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *TestTimeService_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*TestTimeService_ServiceDescription)(nil)


func (s *testTimeService_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case testTimeService_GetPartyTime_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testTimeService_GetPartyTime_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testTimeService_GetPartyTime_ResponseParams
		response.outTimeUsec, err = s.impl.GetPartyTime()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testTimeService_GetPartyTime_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	case testTimeService_StartTrackingRequests_Name:
		if message.Header.Flags != bindings.MessageExpectsResponseFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request testTimeService_StartTrackingRequests_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		var response testTimeService_StartTrackingRequests_ResponseParams
		err = s.impl.StartTrackingRequests()
		if err != nil {
			return
		}
		header := bindings.MessageHeader{
			Type: testTimeService_StartTrackingRequests_Name,
			Flags: bindings.MessageIsResponseFlag,
			RequestId: message.Header.RequestId,
		}
		message, err = bindings.EncodeMessage(header, &response)
		if err != nil {
			return err
		}
		return s.connector.WriteMessage(message)
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

