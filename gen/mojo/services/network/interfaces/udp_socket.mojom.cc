// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/udp_socket.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---
class UDPSocket_AllowAddressReuse_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UDPSocket_AllowAddressReuse_ForwardToCallback(
      const UDPSocket::AllowAddressReuseCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UDPSocket::AllowAddressReuseCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_AllowAddressReuse_ForwardToCallback);
};
bool UDPSocket_AllowAddressReuse_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UDPSocket_AllowAddressReuse_ResponseParams_Data* params =
      reinterpret_cast<internal::UDPSocket_AllowAddressReuse_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}
class UDPSocket_Bind_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UDPSocket_Bind_ForwardToCallback(
      const UDPSocket::BindCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UDPSocket::BindCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_Bind_ForwardToCallback);
};
bool UDPSocket_Bind_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UDPSocket_Bind_ResponseParams_Data* params =
      reinterpret_cast<internal::UDPSocket_Bind_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  mojo::NetAddressPtr p_bound_addr {};
  mojo::InterfaceRequest<UDPSocketReceiver> p_receiver {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
    if (params->bound_addr.ptr) {
      p_bound_addr = mojo::NetAddress::New();
      Deserialize_(params->bound_addr.ptr, p_bound_addr.get());
    }
    p_receiver.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->receiver)));
  } while (false);
  callback_.Run(p_result.Pass(), p_bound_addr.Pass(), p_receiver.Pass());
  return true;
}
class UDPSocket_Connect_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UDPSocket_Connect_ForwardToCallback(
      const UDPSocket::ConnectCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UDPSocket::ConnectCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_Connect_ForwardToCallback);
};
bool UDPSocket_Connect_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UDPSocket_Connect_ResponseParams_Data* params =
      reinterpret_cast<internal::UDPSocket_Connect_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  mojo::NetAddressPtr p_local_addr {};
  mojo::InterfaceRequest<UDPSocketReceiver> p_receiver {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
    if (params->local_addr.ptr) {
      p_local_addr = mojo::NetAddress::New();
      Deserialize_(params->local_addr.ptr, p_local_addr.get());
    }
    p_receiver.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->receiver)));
  } while (false);
  callback_.Run(p_result.Pass(), p_local_addr.Pass(), p_receiver.Pass());
  return true;
}
class UDPSocket_SetSendBufferSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UDPSocket_SetSendBufferSize_ForwardToCallback(
      const UDPSocket::SetSendBufferSizeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UDPSocket::SetSendBufferSizeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_SetSendBufferSize_ForwardToCallback);
};
bool UDPSocket_SetSendBufferSize_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UDPSocket_SetSendBufferSize_ResponseParams_Data* params =
      reinterpret_cast<internal::UDPSocket_SetSendBufferSize_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}
class UDPSocket_SetReceiveBufferSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UDPSocket_SetReceiveBufferSize_ForwardToCallback(
      const UDPSocket::SetReceiveBufferSizeCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UDPSocket::SetReceiveBufferSizeCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_SetReceiveBufferSize_ForwardToCallback);
};
bool UDPSocket_SetReceiveBufferSize_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data* params =
      reinterpret_cast<internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}
class UDPSocket_NegotiateMaxPendingSendRequests_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UDPSocket_NegotiateMaxPendingSendRequests_ForwardToCallback(
      const UDPSocket::NegotiateMaxPendingSendRequestsCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UDPSocket::NegotiateMaxPendingSendRequestsCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_NegotiateMaxPendingSendRequests_ForwardToCallback);
};
bool UDPSocket_NegotiateMaxPendingSendRequests_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* params =
      reinterpret_cast<internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint32_t p_actual_size {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_actual_size = params->actual_size;
  } while (false);
  callback_.Run(p_actual_size);
  return true;
}
class UDPSocket_SendTo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  UDPSocket_SendTo_ForwardToCallback(
      const UDPSocket::SendToCallback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  UDPSocket::SendToCallback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_SendTo_ForwardToCallback);
};
bool UDPSocket_SendTo_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::UDPSocket_SendTo_ResponseParams_Data* params =
      reinterpret_cast<internal::UDPSocket_SendTo_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::NetworkErrorPtr p_result {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    if (params->result.ptr) {
      p_result = mojo::NetworkError::New();
      Deserialize_(params->result.ptr, p_result.get());
    }
  } while (false);
  callback_.Run(p_result.Pass());
  return true;
}

UDPSocketProxy::UDPSocketProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void UDPSocketProxy::AllowAddressReuse(
    const AllowAddressReuseCallback& callback) {
  size_t size = sizeof(internal::UDPSocket_AllowAddressReuse_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::AllowAddressReuse), size);

  internal::UDPSocket_AllowAddressReuse_Params_Data* params =
      internal::UDPSocket_AllowAddressReuse_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UDPSocket_AllowAddressReuse_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void UDPSocketProxy::Bind(
    mojo::NetAddressPtr in_addr, const BindCallback& callback) {
  size_t size = sizeof(internal::UDPSocket_Bind_Params_Data);
  size += in_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_addr);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::Bind), size);

  internal::UDPSocket_Bind_Params_Data* params =
      internal::UDPSocket_Bind_Params_Data::New(builder.buffer());
  {Serialize_(in_addr.get(),
               builder.buffer(),
               &params->addr.ptr);
  }
  if (!params->addr.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null addr in UDPSocket.Bind request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UDPSocket_Bind_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void UDPSocketProxy::Connect(
    mojo::NetAddressPtr in_remote_addr, const ConnectCallback& callback) {
  size_t size = sizeof(internal::UDPSocket_Connect_Params_Data);
  size += in_remote_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_remote_addr);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::Connect), size);

  internal::UDPSocket_Connect_Params_Data* params =
      internal::UDPSocket_Connect_Params_Data::New(builder.buffer());
  {Serialize_(in_remote_addr.get(),
               builder.buffer(),
               &params->remote_addr.ptr);
  }
  if (!params->remote_addr.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null remote_addr in UDPSocket.Connect request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UDPSocket_Connect_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void UDPSocketProxy::SetSendBufferSize(
    uint32_t in_size, const SetSendBufferSizeCallback& callback) {
  size_t size = sizeof(internal::UDPSocket_SetSendBufferSize_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SetSendBufferSize), size);

  internal::UDPSocket_SetSendBufferSize_Params_Data* params =
      internal::UDPSocket_SetSendBufferSize_Params_Data::New(builder.buffer());
  params->size = in_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UDPSocket_SetSendBufferSize_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void UDPSocketProxy::SetReceiveBufferSize(
    uint32_t in_size, const SetReceiveBufferSizeCallback& callback) {
  size_t size = sizeof(internal::UDPSocket_SetReceiveBufferSize_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SetReceiveBufferSize), size);

  internal::UDPSocket_SetReceiveBufferSize_Params_Data* params =
      internal::UDPSocket_SetReceiveBufferSize_Params_Data::New(builder.buffer());
  params->size = in_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UDPSocket_SetReceiveBufferSize_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void UDPSocketProxy::NegotiateMaxPendingSendRequests(
    uint32_t in_requested_size, const NegotiateMaxPendingSendRequestsCallback& callback) {
  size_t size = sizeof(internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::NegotiateMaxPendingSendRequests), size);

  internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* params =
      internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data::New(builder.buffer());
  params->requested_size = in_requested_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UDPSocket_NegotiateMaxPendingSendRequests_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void UDPSocketProxy::ReceiveMore(
    uint32_t in_datagram_number) {
  size_t size = sizeof(internal::UDPSocket_ReceiveMore_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::ReceiveMore), size);

  internal::UDPSocket_ReceiveMore_Params_Data* params =
      internal::UDPSocket_ReceiveMore_Params_Data::New(builder.buffer());
  params->datagram_number = in_datagram_number;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void UDPSocketProxy::SendTo(
    mojo::NetAddressPtr in_dest_addr, mojo::Array<uint8_t> in_data, const SendToCallback& callback) {
  size_t size = sizeof(internal::UDPSocket_SendTo_Params_Data);
  size += in_dest_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_dest_addr);
  size += GetSerializedSize_(in_data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SendTo), size);

  internal::UDPSocket_SendTo_Params_Data* params =
      internal::UDPSocket_SendTo_Params_Data::New(builder.buffer());
  {Serialize_(in_dest_addr.get(),
               builder.buffer(),
               &params->dest_addr.ptr);
  }
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_data, builder.buffer(), &params->data.ptr,
                          &data_validate_params);
  }
  if (!params->data.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null data in UDPSocket.SendTo request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new UDPSocket_SendTo_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UDPSocket_AllowAddressReuse_ProxyToResponder
    : public UDPSocket::AllowAddressReuseCallback::Runnable {
 public:
  ~UDPSocket_AllowAddressReuse_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UDPSocket::AllowAddressReuse(callback) "
        "was never run.";
  }

  UDPSocket_AllowAddressReuse_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_AllowAddressReuse_ProxyToResponder);
};

void UDPSocket_AllowAddressReuse_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::UDPSocket_AllowAddressReuse_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::AllowAddressReuse), size, request_id_);
  internal::UDPSocket_AllowAddressReuse_ResponseParams_Data* params =
      internal::UDPSocket_AllowAddressReuse_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket.AllowAddressReuse response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UDPSocket_Bind_ProxyToResponder
    : public UDPSocket::BindCallback::Runnable {
 public:
  ~UDPSocket_Bind_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UDPSocket::Bind(p_addr.Pass(), callback) "
        "was never run.";
  }

  UDPSocket_Bind_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_bound_addr, mojo::InterfaceRequest<UDPSocketReceiver> in_receiver) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_Bind_ProxyToResponder);
};

void UDPSocket_Bind_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_bound_addr, mojo::InterfaceRequest<UDPSocketReceiver> in_receiver) const {
  size_t size = sizeof(internal::UDPSocket_Bind_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += in_bound_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_bound_addr);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::Bind), size, request_id_);
  internal::UDPSocket_Bind_ResponseParams_Data* params =
      internal::UDPSocket_Bind_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket.Bind response");
  }
  {Serialize_(in_bound_addr.get(),
               builder.buffer(),
               &params->bound_addr.ptr);
  }
  params->receiver = in_receiver.PassMessagePipe().release();
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UDPSocket_Connect_ProxyToResponder
    : public UDPSocket::ConnectCallback::Runnable {
 public:
  ~UDPSocket_Connect_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UDPSocket::Connect(p_remote_addr.Pass(), callback) "
        "was never run.";
  }

  UDPSocket_Connect_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_local_addr, mojo::InterfaceRequest<UDPSocketReceiver> in_receiver) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_Connect_ProxyToResponder);
};

void UDPSocket_Connect_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_local_addr, mojo::InterfaceRequest<UDPSocketReceiver> in_receiver) const {
  size_t size = sizeof(internal::UDPSocket_Connect_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += in_local_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_local_addr);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::Connect), size, request_id_);
  internal::UDPSocket_Connect_ResponseParams_Data* params =
      internal::UDPSocket_Connect_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket.Connect response");
  }
  {Serialize_(in_local_addr.get(),
               builder.buffer(),
               &params->local_addr.ptr);
  }
  params->receiver = in_receiver.PassMessagePipe().release();
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UDPSocket_SetSendBufferSize_ProxyToResponder
    : public UDPSocket::SetSendBufferSizeCallback::Runnable {
 public:
  ~UDPSocket_SetSendBufferSize_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UDPSocket::SetSendBufferSize(p_size, callback) "
        "was never run.";
  }

  UDPSocket_SetSendBufferSize_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_SetSendBufferSize_ProxyToResponder);
};

void UDPSocket_SetSendBufferSize_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::UDPSocket_SetSendBufferSize_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SetSendBufferSize), size, request_id_);
  internal::UDPSocket_SetSendBufferSize_ResponseParams_Data* params =
      internal::UDPSocket_SetSendBufferSize_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket.SetSendBufferSize response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UDPSocket_SetReceiveBufferSize_ProxyToResponder
    : public UDPSocket::SetReceiveBufferSizeCallback::Runnable {
 public:
  ~UDPSocket_SetReceiveBufferSize_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UDPSocket::SetReceiveBufferSize(p_size, callback) "
        "was never run.";
  }

  UDPSocket_SetReceiveBufferSize_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_SetReceiveBufferSize_ProxyToResponder);
};

void UDPSocket_SetReceiveBufferSize_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SetReceiveBufferSize), size, request_id_);
  internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data* params =
      internal::UDPSocket_SetReceiveBufferSize_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket.SetReceiveBufferSize response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UDPSocket_NegotiateMaxPendingSendRequests_ProxyToResponder
    : public UDPSocket::NegotiateMaxPendingSendRequestsCallback::Runnable {
 public:
  ~UDPSocket_NegotiateMaxPendingSendRequests_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UDPSocket::NegotiateMaxPendingSendRequests(p_requested_size, callback) "
        "was never run.";
  }

  UDPSocket_NegotiateMaxPendingSendRequests_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint32_t in_actual_size) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_NegotiateMaxPendingSendRequests_ProxyToResponder);
};

void UDPSocket_NegotiateMaxPendingSendRequests_ProxyToResponder::Run(
    uint32_t in_actual_size) const {
  size_t size = sizeof(internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::NegotiateMaxPendingSendRequests), size, request_id_);
  internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data* params =
      internal::UDPSocket_NegotiateMaxPendingSendRequests_ResponseParams_Data::New(builder.buffer());
  params->actual_size = in_actual_size;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class UDPSocket_SendTo_ProxyToResponder
    : public UDPSocket::SendToCallback::Runnable {
 public:
  ~UDPSocket_SendTo_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "UDPSocket::SendTo(p_dest_addr.Pass(), p_data.Pass(), callback) "
        "was never run.";
  }

  UDPSocket_SendTo_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::NetworkErrorPtr in_result) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(UDPSocket_SendTo_ProxyToResponder);
};

void UDPSocket_SendTo_ProxyToResponder::Run(
    mojo::NetworkErrorPtr in_result) const {
  size_t size = sizeof(internal::UDPSocket_SendTo_ResponseParams_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::UDPSocket_Base::MessageOrdinals::SendTo), size, request_id_);
  internal::UDPSocket_SendTo_ResponseParams_Data* params =
      internal::UDPSocket_SendTo_ResponseParams_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocket.SendTo response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

UDPSocketStub::UDPSocketStub()
    : sink_(nullptr),
      control_message_handler_(UDPSocket::Version_) {
}

UDPSocketStub::~UDPSocketStub() {}

bool UDPSocketStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::UDPSocket_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UDPSocket_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UDPSocket_Base::MessageOrdinals::AllowAddressReuse: {
      break;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Bind: {
      break;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Connect: {
      break;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetSendBufferSize: {
      break;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetReceiveBufferSize: {
      break;
    }
    case internal::UDPSocket_Base::MessageOrdinals::NegotiateMaxPendingSendRequests: {
      break;
    }
    case internal::UDPSocket_Base::MessageOrdinals::ReceiveMore: {
      internal::UDPSocket_ReceiveMore_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_ReceiveMore_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      uint32_t p_datagram_number {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_datagram_number = params->datagram_number;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ReceiveMore(p_datagram_number);
      return true;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SendTo: {
      break;
    }
  }
  return false;
}

bool UDPSocketStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::UDPSocket_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UDPSocket_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UDPSocket_Base::MessageOrdinals::AllowAddressReuse: {
      internal::UDPSocket_AllowAddressReuse_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_AllowAddressReuse_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UDPSocket::AllowAddressReuseCallback::Runnable* runnable =
          new UDPSocket_AllowAddressReuse_ProxyToResponder(
              message->request_id(), responder);
      UDPSocket::AllowAddressReuseCallback callback(runnable);
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AllowAddressReuse(callback);
      return true;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Bind: {
      internal::UDPSocket_Bind_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_Bind_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UDPSocket::BindCallback::Runnable* runnable =
          new UDPSocket_Bind_ProxyToResponder(
              message->request_id(), responder);
      UDPSocket::BindCallback callback(runnable);
      
      mojo::NetAddressPtr p_addr {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->addr.ptr) {
          p_addr = mojo::NetAddress::New();
          Deserialize_(params->addr.ptr, p_addr.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Bind(p_addr.Pass(), callback);
      return true;
    }
    case internal::UDPSocket_Base::MessageOrdinals::Connect: {
      internal::UDPSocket_Connect_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_Connect_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UDPSocket::ConnectCallback::Runnable* runnable =
          new UDPSocket_Connect_ProxyToResponder(
              message->request_id(), responder);
      UDPSocket::ConnectCallback callback(runnable);
      
      mojo::NetAddressPtr p_remote_addr {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->remote_addr.ptr) {
          p_remote_addr = mojo::NetAddress::New();
          Deserialize_(params->remote_addr.ptr, p_remote_addr.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Connect(p_remote_addr.Pass(), callback);
      return true;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetSendBufferSize: {
      internal::UDPSocket_SetSendBufferSize_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_SetSendBufferSize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UDPSocket::SetSendBufferSizeCallback::Runnable* runnable =
          new UDPSocket_SetSendBufferSize_ProxyToResponder(
              message->request_id(), responder);
      UDPSocket::SetSendBufferSizeCallback callback(runnable);
      
      uint32_t p_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_size = params->size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetSendBufferSize(p_size, callback);
      return true;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SetReceiveBufferSize: {
      internal::UDPSocket_SetReceiveBufferSize_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_SetReceiveBufferSize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UDPSocket::SetReceiveBufferSizeCallback::Runnable* runnable =
          new UDPSocket_SetReceiveBufferSize_ProxyToResponder(
              message->request_id(), responder);
      UDPSocket::SetReceiveBufferSizeCallback callback(runnable);
      
      uint32_t p_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_size = params->size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetReceiveBufferSize(p_size, callback);
      return true;
    }
    case internal::UDPSocket_Base::MessageOrdinals::NegotiateMaxPendingSendRequests: {
      internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_NegotiateMaxPendingSendRequests_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UDPSocket::NegotiateMaxPendingSendRequestsCallback::Runnable* runnable =
          new UDPSocket_NegotiateMaxPendingSendRequests_ProxyToResponder(
              message->request_id(), responder);
      UDPSocket::NegotiateMaxPendingSendRequestsCallback callback(runnable);
      
      uint32_t p_requested_size {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_requested_size = params->requested_size;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->NegotiateMaxPendingSendRequests(p_requested_size, callback);
      return true;
    }
    case internal::UDPSocket_Base::MessageOrdinals::ReceiveMore: {
      break;
    }
    case internal::UDPSocket_Base::MessageOrdinals::SendTo: {
      internal::UDPSocket_SendTo_Params_Data* params =
          reinterpret_cast<internal::UDPSocket_SendTo_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      UDPSocket::SendToCallback::Runnable* runnable =
          new UDPSocket_SendTo_ProxyToResponder(
              message->request_id(), responder);
      UDPSocket::SendToCallback callback(runnable);
      
      mojo::NetAddressPtr p_dest_addr {};
      mojo::Array<uint8_t> p_data {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->dest_addr.ptr) {
          p_dest_addr = mojo::NetAddress::New();
          Deserialize_(params->dest_addr.ptr, p_dest_addr.get());
        }
        Deserialize_(params->data.ptr, &p_data);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SendTo(p_dest_addr.Pass(), p_data.Pass(), callback);
      return true;
    }
  }
  return false;
}


UDPSocketReceiverProxy::UDPSocketReceiverProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void UDPSocketReceiverProxy::OnReceived(
    mojo::NetworkErrorPtr in_result, mojo::NetAddressPtr in_src_addr, mojo::Array<uint8_t> in_data) {
  size_t size = sizeof(internal::UDPSocketReceiver_OnReceived_Params_Data);
  size += in_result.is_null()
              ? 0
              : GetSerializedSize_(*in_result);
  size += in_src_addr.is_null()
              ? 0
              : GetSerializedSize_(*in_src_addr);
  size += GetSerializedSize_(in_data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::UDPSocketReceiver_Base::MessageOrdinals::OnReceived), size);

  internal::UDPSocketReceiver_OnReceived_Params_Data* params =
      internal::UDPSocketReceiver_OnReceived_Params_Data::New(builder.buffer());
  {Serialize_(in_result.get(),
               builder.buffer(),
               &params->result.ptr);
  }
  if (!params->result.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in UDPSocketReceiver.OnReceived request");
  }
  {Serialize_(in_src_addr.get(),
               builder.buffer(),
               &params->src_addr.ptr);
  }
  {
    const mojo::internal::ArrayValidateParams data_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_data, builder.buffer(), &params->data.ptr,
                          &data_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

UDPSocketReceiverStub::UDPSocketReceiverStub()
    : sink_(nullptr),
      control_message_handler_(UDPSocketReceiver::Version_) {
}

UDPSocketReceiverStub::~UDPSocketReceiverStub() {}

bool UDPSocketReceiverStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::UDPSocketReceiver_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UDPSocketReceiver_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UDPSocketReceiver_Base::MessageOrdinals::OnReceived: {
      internal::UDPSocketReceiver_OnReceived_Params_Data* params =
          reinterpret_cast<internal::UDPSocketReceiver_OnReceived_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::NetworkErrorPtr p_result {};
      mojo::NetAddressPtr p_src_addr {};
      mojo::Array<uint8_t> p_data {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->result.ptr) {
          p_result = mojo::NetworkError::New();
          Deserialize_(params->result.ptr, p_result.get());
        }
        if (params->src_addr.ptr) {
          p_src_addr = mojo::NetAddress::New();
          Deserialize_(params->src_addr.ptr, p_src_addr.get());
        }
        Deserialize_(params->data.ptr, &p_data);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->OnReceived(p_result.Pass(), p_src_addr.Pass(), p_data.Pass());
      return true;
    }
  }
  return false;
}

bool UDPSocketReceiverStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::UDPSocketReceiver_Base::MessageOrdinals method_ordinal =
      static_cast<internal::UDPSocketReceiver_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::UDPSocketReceiver_Base::MessageOrdinals::OnReceived: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
