// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/keyboard/interfaces/keyboard.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace keyboard {

// --- Interface definitions ---

KeyboardClientProxy::KeyboardClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void KeyboardClientProxy::CommitCompletion(
    CompletionDataPtr in_completion) {
  size_t size = sizeof(internal::KeyboardClient_CommitCompletion_Params_Data);
  size += in_completion.is_null()
              ? 0
              : GetSerializedSize_(*in_completion);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::CommitCompletion), size);

  internal::KeyboardClient_CommitCompletion_Params_Data* params =
      internal::KeyboardClient_CommitCompletion_Params_Data::New(builder.buffer());
  {Serialize_(in_completion.get(),
               builder.buffer(),
               &params->completion.ptr);
  }
  if (!params->completion.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null completion in KeyboardClient.CommitCompletion request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardClientProxy::CommitCorrection(
    CorrectionDataPtr in_correction) {
  size_t size = sizeof(internal::KeyboardClient_CommitCorrection_Params_Data);
  size += in_correction.is_null()
              ? 0
              : GetSerializedSize_(*in_correction);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::CommitCorrection), size);

  internal::KeyboardClient_CommitCorrection_Params_Data* params =
      internal::KeyboardClient_CommitCorrection_Params_Data::New(builder.buffer());
  {Serialize_(in_correction.get(),
               builder.buffer(),
               &params->correction.ptr);
  }
  if (!params->correction.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null correction in KeyboardClient.CommitCorrection request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardClientProxy::CommitText(
    const mojo::String& in_text, int32_t in_newCursorPosition) {
  size_t size = sizeof(internal::KeyboardClient_CommitText_Params_Data);
  size += GetSerializedSize_(in_text);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::CommitText), size);

  internal::KeyboardClient_CommitText_Params_Data* params =
      internal::KeyboardClient_CommitText_Params_Data::New(builder.buffer());
  SerializeString_(in_text, builder.buffer(), &params->text.ptr);
  if (!params->text.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null text in KeyboardClient.CommitText request");
  }
  params->newCursorPosition = in_newCursorPosition;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardClientProxy::DeleteSurroundingText(
    int32_t in_beforeLength, int32_t in_afterLength) {
  size_t size = sizeof(internal::KeyboardClient_DeleteSurroundingText_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::DeleteSurroundingText), size);

  internal::KeyboardClient_DeleteSurroundingText_Params_Data* params =
      internal::KeyboardClient_DeleteSurroundingText_Params_Data::New(builder.buffer());
  params->beforeLength = in_beforeLength;
  params->afterLength = in_afterLength;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardClientProxy::SetComposingRegion(
    int32_t in_start, int32_t in_end) {
  size_t size = sizeof(internal::KeyboardClient_SetComposingRegion_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::SetComposingRegion), size);

  internal::KeyboardClient_SetComposingRegion_Params_Data* params =
      internal::KeyboardClient_SetComposingRegion_Params_Data::New(builder.buffer());
  params->start = in_start;
  params->end = in_end;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardClientProxy::SetComposingText(
    const mojo::String& in_text, int32_t in_newCursorPosition) {
  size_t size = sizeof(internal::KeyboardClient_SetComposingText_Params_Data);
  size += GetSerializedSize_(in_text);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::SetComposingText), size);

  internal::KeyboardClient_SetComposingText_Params_Data* params =
      internal::KeyboardClient_SetComposingText_Params_Data::New(builder.buffer());
  SerializeString_(in_text, builder.buffer(), &params->text.ptr);
  if (!params->text.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null text in KeyboardClient.SetComposingText request");
  }
  params->newCursorPosition = in_newCursorPosition;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardClientProxy::SetSelection(
    int32_t in_start, int32_t in_end) {
  size_t size = sizeof(internal::KeyboardClient_SetSelection_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::SetSelection), size);

  internal::KeyboardClient_SetSelection_Params_Data* params =
      internal::KeyboardClient_SetSelection_Params_Data::New(builder.buffer());
  params->start = in_start;
  params->end = in_end;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardClientProxy::Submit(
    SubmitAction in_action) {
  size_t size = sizeof(internal::KeyboardClient_Submit_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardClient_Base::MessageOrdinals::Submit), size);

  internal::KeyboardClient_Submit_Params_Data* params =
      internal::KeyboardClient_Submit_Params_Data::New(builder.buffer());
  params->action =
    static_cast<int32_t>(in_action);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

KeyboardClientStub::KeyboardClientStub()
    : sink_(nullptr),
      control_message_handler_(KeyboardClient::Version_) {
}

KeyboardClientStub::~KeyboardClientStub() {}

bool KeyboardClientStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::KeyboardClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::KeyboardClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::KeyboardClient_Base::MessageOrdinals::CommitCompletion: {
      internal::KeyboardClient_CommitCompletion_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_CommitCompletion_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      CompletionDataPtr p_completion {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->completion.ptr) {
          p_completion = CompletionData::New();
          Deserialize_(params->completion.ptr, p_completion.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CommitCompletion(p_completion.Pass());
      return true;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::CommitCorrection: {
      internal::KeyboardClient_CommitCorrection_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_CommitCorrection_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      CorrectionDataPtr p_correction {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->correction.ptr) {
          p_correction = CorrectionData::New();
          Deserialize_(params->correction.ptr, p_correction.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CommitCorrection(p_correction.Pass());
      return true;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::CommitText: {
      internal::KeyboardClient_CommitText_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_CommitText_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_text {};
      int32_t p_newCursorPosition {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->text.ptr, &p_text);
        p_newCursorPosition = params->newCursorPosition;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CommitText(p_text, p_newCursorPosition);
      return true;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::DeleteSurroundingText: {
      internal::KeyboardClient_DeleteSurroundingText_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_DeleteSurroundingText_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_beforeLength {};
      int32_t p_afterLength {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_beforeLength = params->beforeLength;
        p_afterLength = params->afterLength;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->DeleteSurroundingText(p_beforeLength, p_afterLength);
      return true;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::SetComposingRegion: {
      internal::KeyboardClient_SetComposingRegion_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_SetComposingRegion_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_start {};
      int32_t p_end {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_start = params->start;
        p_end = params->end;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetComposingRegion(p_start, p_end);
      return true;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::SetComposingText: {
      internal::KeyboardClient_SetComposingText_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_SetComposingText_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_text {};
      int32_t p_newCursorPosition {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->text.ptr, &p_text);
        p_newCursorPosition = params->newCursorPosition;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetComposingText(p_text, p_newCursorPosition);
      return true;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::SetSelection: {
      internal::KeyboardClient_SetSelection_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_SetSelection_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_start {};
      int32_t p_end {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_start = params->start;
        p_end = params->end;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetSelection(p_start, p_end);
      return true;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::Submit: {
      internal::KeyboardClient_Submit_Params_Data* params =
          reinterpret_cast<internal::KeyboardClient_Submit_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      SubmitAction p_action {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_action = static_cast<SubmitAction>(params->action);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Submit(p_action);
      return true;
    }
  }
  return false;
}

bool KeyboardClientStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::KeyboardClient_Base::MessageOrdinals method_ordinal =
      static_cast<internal::KeyboardClient_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::KeyboardClient_Base::MessageOrdinals::CommitCompletion: {
      break;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::CommitCorrection: {
      break;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::CommitText: {
      break;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::DeleteSurroundingText: {
      break;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::SetComposingRegion: {
      break;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::SetComposingText: {
      break;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::SetSelection: {
      break;
    }
    case internal::KeyboardClient_Base::MessageOrdinals::Submit: {
      break;
    }
  }
  return false;
}


KeyboardServiceProxy::KeyboardServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void KeyboardServiceProxy::Show(
    mojo::InterfaceHandle<KeyboardClient> in_client, KeyboardType in_type) {
  size_t size = sizeof(internal::KeyboardService_Show_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::Show), size);

  internal::KeyboardService_Show_Params_Data* params =
      internal::KeyboardService_Show_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_client.Pass(),
                                        &params->client);
  if (!params->client.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client in KeyboardService.Show request");
  }
  params->type =
    static_cast<int32_t>(in_type);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardServiceProxy::ShowByRequest(
    ) {
  size_t size = sizeof(internal::KeyboardService_ShowByRequest_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::ShowByRequest), size);

  internal::KeyboardService_ShowByRequest_Params_Data* params =
      internal::KeyboardService_ShowByRequest_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardServiceProxy::Hide(
    ) {
  size_t size = sizeof(internal::KeyboardService_Hide_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::Hide), size);

  internal::KeyboardService_Hide_Params_Data* params =
      internal::KeyboardService_Hide_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardServiceProxy::SetText(
    const mojo::String& in_text) {
  size_t size = sizeof(internal::KeyboardService_SetText_Params_Data);
  size += GetSerializedSize_(in_text);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::SetText), size);

  internal::KeyboardService_SetText_Params_Data* params =
      internal::KeyboardService_SetText_Params_Data::New(builder.buffer());
  SerializeString_(in_text, builder.buffer(), &params->text.ptr);
  if (!params->text.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null text in KeyboardService.SetText request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void KeyboardServiceProxy::SetSelection(
    int32_t in_start, int32_t in_end) {
  size_t size = sizeof(internal::KeyboardService_SetSelection_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardService_Base::MessageOrdinals::SetSelection), size);

  internal::KeyboardService_SetSelection_Params_Data* params =
      internal::KeyboardService_SetSelection_Params_Data::New(builder.buffer());
  params->start = in_start;
  params->end = in_end;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

KeyboardServiceStub::KeyboardServiceStub()
    : sink_(nullptr),
      control_message_handler_(KeyboardService::Version_) {
}

KeyboardServiceStub::~KeyboardServiceStub() {}

bool KeyboardServiceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::KeyboardService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::KeyboardService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::KeyboardService_Base::MessageOrdinals::Show: {
      internal::KeyboardService_Show_Params_Data* params =
          reinterpret_cast<internal::KeyboardService_Show_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<KeyboardClient> p_client {};
      KeyboardType p_type {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->client, &p_client);
        p_type = static_cast<KeyboardType>(params->type);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Show(p_client.Pass(), p_type);
      return true;
    }
    case internal::KeyboardService_Base::MessageOrdinals::ShowByRequest: {
      internal::KeyboardService_ShowByRequest_Params_Data* params =
          reinterpret_cast<internal::KeyboardService_ShowByRequest_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->ShowByRequest();
      return true;
    }
    case internal::KeyboardService_Base::MessageOrdinals::Hide: {
      internal::KeyboardService_Hide_Params_Data* params =
          reinterpret_cast<internal::KeyboardService_Hide_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Hide();
      return true;
    }
    case internal::KeyboardService_Base::MessageOrdinals::SetText: {
      internal::KeyboardService_SetText_Params_Data* params =
          reinterpret_cast<internal::KeyboardService_SetText_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_text {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->text.ptr, &p_text);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetText(p_text);
      return true;
    }
    case internal::KeyboardService_Base::MessageOrdinals::SetSelection: {
      internal::KeyboardService_SetSelection_Params_Data* params =
          reinterpret_cast<internal::KeyboardService_SetSelection_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      int32_t p_start {};
      int32_t p_end {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_start = params->start;
        p_end = params->end;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->SetSelection(p_start, p_end);
      return true;
    }
  }
  return false;
}

bool KeyboardServiceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::KeyboardService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::KeyboardService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::KeyboardService_Base::MessageOrdinals::Show: {
      break;
    }
    case internal::KeyboardService_Base::MessageOrdinals::ShowByRequest: {
      break;
    }
    case internal::KeyboardService_Base::MessageOrdinals::Hide: {
      break;
    }
    case internal::KeyboardService_Base::MessageOrdinals::SetText: {
      break;
    }
    case internal::KeyboardService_Base::MessageOrdinals::SetSelection: {
      break;
    }
  }
  return false;
}


KeyboardServiceFactoryProxy::KeyboardServiceFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void KeyboardServiceFactoryProxy::CreateKeyboardService(
    mojo::InterfaceRequest<mojo::NativeViewportEventDispatcher> in_keyEventDispatcher, mojo::InterfaceRequest<KeyboardService> in_serviceRequest) {
  size_t size = sizeof(internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::KeyboardServiceFactory_Base::MessageOrdinals::CreateKeyboardService), size);

  internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data* params =
      internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data::New(builder.buffer());
  params->keyEventDispatcher = in_keyEventDispatcher.PassMessagePipe().release();
  if (!params->keyEventDispatcher.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid keyEventDispatcher in KeyboardServiceFactory.CreateKeyboardService request");
  }
  params->serviceRequest = in_serviceRequest.PassMessagePipe().release();
  if (!params->serviceRequest.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid serviceRequest in KeyboardServiceFactory.CreateKeyboardService request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

KeyboardServiceFactoryStub::KeyboardServiceFactoryStub()
    : sink_(nullptr),
      control_message_handler_(KeyboardServiceFactory::Version_) {
}

KeyboardServiceFactoryStub::~KeyboardServiceFactoryStub() {}

bool KeyboardServiceFactoryStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::KeyboardServiceFactory_Base::MessageOrdinals method_ordinal =
      static_cast<internal::KeyboardServiceFactory_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::KeyboardServiceFactory_Base::MessageOrdinals::CreateKeyboardService: {
      internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data* params =
          reinterpret_cast<internal::KeyboardServiceFactory_CreateKeyboardService_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceRequest<mojo::NativeViewportEventDispatcher> p_keyEventDispatcher {};
      mojo::InterfaceRequest<KeyboardService> p_serviceRequest {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_keyEventDispatcher.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->keyEventDispatcher)));
        p_serviceRequest.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->serviceRequest)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->CreateKeyboardService(p_keyEventDispatcher.Pass(), p_serviceRequest.Pass());
      return true;
    }
  }
  return false;
}

bool KeyboardServiceFactoryStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::KeyboardServiceFactory_Base::MessageOrdinals method_ordinal =
      static_cast<internal::KeyboardServiceFactory_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::KeyboardServiceFactory_Base::MessageOrdinals::CreateKeyboardService: {
      break;
    }
  }
  return false;
}

}  // namespace keyboard
