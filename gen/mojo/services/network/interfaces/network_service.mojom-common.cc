// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/services/network/interfaces/network_service.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace mojo {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
NetworkService_CreateURLLoader_Params_Data* NetworkService_CreateURLLoader_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateURLLoader_Params_Data))) NetworkService_CreateURLLoader_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateURLLoader_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateURLLoader_Params_Data* object = static_cast<const NetworkService_CreateURLLoader_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle loader_handle = object->loader;
  if (loader_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid loader field in NetworkService_CreateURLLoader_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(loader_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateURLLoader_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->loader, handles);
}

void NetworkService_CreateURLLoader_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->loader, handles);
}

NetworkService_CreateURLLoader_Params_Data::NetworkService_CreateURLLoader_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_GetCookieStore_Params_Data* NetworkService_GetCookieStore_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_GetCookieStore_Params_Data))) NetworkService_GetCookieStore_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_GetCookieStore_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_GetCookieStore_Params_Data* object = static_cast<const NetworkService_GetCookieStore_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle cookie_store_handle = object->cookie_store;
  if (cookie_store_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid cookie_store field in NetworkService_GetCookieStore_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(cookie_store_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_GetCookieStore_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->cookie_store, handles);
}

void NetworkService_GetCookieStore_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->cookie_store, handles);
}

NetworkService_GetCookieStore_Params_Data::NetworkService_GetCookieStore_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_CreateWebSocket_Params_Data* NetworkService_CreateWebSocket_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateWebSocket_Params_Data))) NetworkService_CreateWebSocket_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateWebSocket_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateWebSocket_Params_Data* object = static_cast<const NetworkService_CreateWebSocket_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle socket_handle = object->socket;
  if (socket_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid socket field in NetworkService_CreateWebSocket_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(socket_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateWebSocket_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->socket, handles);
}

void NetworkService_CreateWebSocket_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->socket, handles);
}

NetworkService_CreateWebSocket_Params_Data::NetworkService_CreateWebSocket_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_CreateTCPBoundSocket_Params_Data* NetworkService_CreateTCPBoundSocket_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateTCPBoundSocket_Params_Data))) NetworkService_CreateTCPBoundSocket_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateTCPBoundSocket_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateTCPBoundSocket_Params_Data* object = static_cast<const NetworkService_CreateTCPBoundSocket_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->local_address.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->local_address.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle bound_socket_handle = object->bound_socket;
  if (bound_socket_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid bound_socket field in NetworkService_CreateTCPBoundSocket_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(bound_socket_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateTCPBoundSocket_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->local_address, handles);
  mojo::internal::EncodeHandle(&this->bound_socket, handles);
}

void NetworkService_CreateTCPBoundSocket_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->local_address, handles);
  mojo::internal::DecodeHandle(&this->bound_socket, handles);
}

NetworkService_CreateTCPBoundSocket_Params_Data::NetworkService_CreateTCPBoundSocket_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
NetworkService_CreateTCPBoundSocket_ResponseParams_Data* NetworkService_CreateTCPBoundSocket_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateTCPBoundSocket_ResponseParams_Data))) NetworkService_CreateTCPBoundSocket_ResponseParams_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateTCPBoundSocket_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateTCPBoundSocket_ResponseParams_Data* object = static_cast<const NetworkService_CreateTCPBoundSocket_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in NetworkService_CreateTCPBoundSocket_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->bound_to.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->bound_to.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateTCPBoundSocket_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
  mojo::internal::Encode(&this->bound_to, handles);
}

void NetworkService_CreateTCPBoundSocket_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
  mojo::internal::Decode(&this->bound_to, handles);
}

NetworkService_CreateTCPBoundSocket_ResponseParams_Data::NetworkService_CreateTCPBoundSocket_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_CreateTCPConnectedSocket_Params_Data* NetworkService_CreateTCPConnectedSocket_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateTCPConnectedSocket_Params_Data))) NetworkService_CreateTCPConnectedSocket_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateTCPConnectedSocket_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateTCPConnectedSocket_Params_Data* object = static_cast<const NetworkService_CreateTCPConnectedSocket_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 32 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->remote_address.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null remote_address field in NetworkService_CreateTCPConnectedSocket_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->remote_address.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->remote_address.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle send_stream_handle = object->send_stream;
  if (send_stream_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid send_stream field in NetworkService_CreateTCPConnectedSocket_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(send_stream_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle receive_stream_handle = object->receive_stream;
  if (receive_stream_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid receive_stream field in NetworkService_CreateTCPConnectedSocket_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(receive_stream_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }
  {
    
  const mojo::Handle client_socket_handle = object->client_socket;
  if (client_socket_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid client_socket field in NetworkService_CreateTCPConnectedSocket_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(client_socket_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateTCPConnectedSocket_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->remote_address, handles);
  mojo::internal::EncodeHandle(&this->send_stream, handles);
  mojo::internal::EncodeHandle(&this->receive_stream, handles);
  mojo::internal::EncodeHandle(&this->client_socket, handles);
}

void NetworkService_CreateTCPConnectedSocket_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->remote_address, handles);
  mojo::internal::DecodeHandle(&this->send_stream, handles);
  mojo::internal::DecodeHandle(&this->receive_stream, handles);
  mojo::internal::DecodeHandle(&this->client_socket, handles);
}

NetworkService_CreateTCPConnectedSocket_Params_Data::NetworkService_CreateTCPConnectedSocket_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateTCPConnectedSocket_ResponseParams_Data))) NetworkService_CreateTCPConnectedSocket_ResponseParams_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* object = static_cast<const NetworkService_CreateTCPConnectedSocket_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in NetworkService_CreateTCPConnectedSocket_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->local_address.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->local_address.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
  mojo::internal::Encode(&this->local_address, handles);
}

void NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
  mojo::internal::Decode(&this->local_address, handles);
}

NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_CreateUDPSocket_Params_Data* NetworkService_CreateUDPSocket_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateUDPSocket_Params_Data))) NetworkService_CreateUDPSocket_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateUDPSocket_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateUDPSocket_Params_Data* object = static_cast<const NetworkService_CreateUDPSocket_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle socket_handle = object->socket;
  if (socket_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid socket field in NetworkService_CreateUDPSocket_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(socket_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateUDPSocket_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->socket, handles);
}

void NetworkService_CreateUDPSocket_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->socket, handles);
}

NetworkService_CreateUDPSocket_Params_Data::NetworkService_CreateUDPSocket_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_CreateHttpServer_Params_Data* NetworkService_CreateHttpServer_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateHttpServer_Params_Data))) NetworkService_CreateHttpServer_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateHttpServer_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateHttpServer_Params_Data* object = static_cast<const NetworkService_CreateHttpServer_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->local_address.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null local_address field in NetworkService_CreateHttpServer_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->local_address.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->local_address.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  const mojo::Handle delegate_handle = object->delegate.handle;
  if (delegate_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid delegate field in NetworkService_CreateHttpServer_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(delegate_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateHttpServer_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->local_address, handles);
  mojo::internal::EncodeHandle(&this->delegate, handles);
}

void NetworkService_CreateHttpServer_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->local_address, handles);
  mojo::internal::DecodeHandle(&this->delegate, handles);
}

NetworkService_CreateHttpServer_Params_Data::NetworkService_CreateHttpServer_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
NetworkService_CreateHttpServer_ResponseParams_Data* NetworkService_CreateHttpServer_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateHttpServer_ResponseParams_Data))) NetworkService_CreateHttpServer_ResponseParams_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateHttpServer_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateHttpServer_ResponseParams_Data* object = static_cast<const NetworkService_CreateHttpServer_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->result.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null result field in NetworkService_CreateHttpServer_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->result.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetworkError::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->result.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->bound_to.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  auto validate_retval = mojo::NetAddress::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->bound_to.offset),
          bounds_checker, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateHttpServer_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->result, handles);
  mojo::internal::Encode(&this->bound_to, handles);
}

void NetworkService_CreateHttpServer_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->result, handles);
  mojo::internal::Decode(&this->bound_to, handles);
}

NetworkService_CreateHttpServer_ResponseParams_Data::NetworkService_CreateHttpServer_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_RegisterURLLoaderInterceptor_Params_Data* NetworkService_RegisterURLLoaderInterceptor_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_RegisterURLLoaderInterceptor_Params_Data))) NetworkService_RegisterURLLoaderInterceptor_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_RegisterURLLoaderInterceptor_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_RegisterURLLoaderInterceptor_Params_Data* object = static_cast<const NetworkService_RegisterURLLoaderInterceptor_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle factory_handle = object->factory.handle;
  if (factory_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid factory field in NetworkService_RegisterURLLoaderInterceptor_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(factory_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_RegisterURLLoaderInterceptor_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->factory, handles);
}

void NetworkService_RegisterURLLoaderInterceptor_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->factory, handles);
}

NetworkService_RegisterURLLoaderInterceptor_Params_Data::NetworkService_RegisterURLLoaderInterceptor_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
NetworkService_CreateHostResolver_Params_Data* NetworkService_CreateHostResolver_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(NetworkService_CreateHostResolver_Params_Data))) NetworkService_CreateHostResolver_Params_Data();
}

// static
mojo::internal::ValidationError NetworkService_CreateHostResolver_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const NetworkService_CreateHostResolver_Params_Data* object = static_cast<const NetworkService_CreateHostResolver_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle host_resolver_handle = object->host_resolver;
  if (host_resolver_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid host_resolver field in NetworkService_CreateHostResolver_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(host_resolver_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void NetworkService_CreateHostResolver_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->host_resolver, handles);
}

void NetworkService_CreateHostResolver_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->host_resolver, handles);
}

NetworkService_CreateHostResolver_Params_Data::NetworkService_CreateHostResolver_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError NetworkServiceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'NetworkService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::NetworkService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NetworkService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NetworkService_Base::MessageOrdinals::CreateURLLoader: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_CreateURLLoader_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::GetCookieStore: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_GetCookieStore_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateWebSocket: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_CreateWebSocket_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPBoundSocket: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_CreateTCPBoundSocket_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPConnectedSocket: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_CreateTCPConnectedSocket_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateUDPSocket: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_CreateUDPSocket_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateHttpServer: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_CreateHttpServer_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::RegisterURLLoaderInterceptor: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateHostResolver: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'NetworkService', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::NetworkService_CreateHostResolver_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'NetworkService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError NetworkServiceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'NetworkService', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'NetworkService', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::NetworkService_Base::MessageOrdinals method_ordinal =
      static_cast<internal::NetworkService_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPBoundSocket: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'NetworkService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateTCPConnectedSocket: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'NetworkService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::NetworkService_Base::MessageOrdinals::CreateHttpServer: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::NetworkService_CreateHttpServer_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'NetworkService',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'NetworkService'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---

// Base interface definitions (Name_, Version_, Constants, Enums)
const char internal::NetworkService_Base::Name_[] = "mojo::NetworkService";
const uint32_t internal::NetworkService_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
NetworkService_CreateURLLoader_ParamsPtr NetworkService_CreateURLLoader_Params::New() {
  NetworkService_CreateURLLoader_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateURLLoader_Params>::Initialize(&rv);
  return rv;
}

NetworkService_CreateURLLoader_Params::NetworkService_CreateURLLoader_Params()
    : loader() {
}

NetworkService_CreateURLLoader_Params::~NetworkService_CreateURLLoader_Params() {
}



bool NetworkService_CreateURLLoader_Params::Equals(const NetworkService_CreateURLLoader_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::URLLoader>>::Equals(this->loader, other.loader))
    return false;
  return true;
}


size_t NetworkService_CreateURLLoader_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateURLLoader_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateURLLoader_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateURLLoader_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateURLLoader_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateURLLoader_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateURLLoader_Params_Data* input =
      static_cast<internal::NetworkService_CreateURLLoader_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateURLLoader_Params& input) {
  size_t size = sizeof(internal::NetworkService_CreateURLLoader_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateURLLoader_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateURLLoader_Params_Data** output) {
  if (input) {
    internal::NetworkService_CreateURLLoader_Params_Data* result =
        internal::NetworkService_CreateURLLoader_Params_Data::New(buf);
    result->loader = input->loader.PassMessagePipe().release();
    if (!result->loader.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid loader in NetworkService_CreateURLLoader_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateURLLoader_Params_Data* input,
                  NetworkService_CreateURLLoader_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->loader.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->loader)));
    } while (false);
  }
}



// static
NetworkService_GetCookieStore_ParamsPtr NetworkService_GetCookieStore_Params::New() {
  NetworkService_GetCookieStore_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_GetCookieStore_Params>::Initialize(&rv);
  return rv;
}

NetworkService_GetCookieStore_Params::NetworkService_GetCookieStore_Params()
    : cookie_store() {
}

NetworkService_GetCookieStore_Params::~NetworkService_GetCookieStore_Params() {
}



bool NetworkService_GetCookieStore_Params::Equals(const NetworkService_GetCookieStore_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::CookieStore>>::Equals(this->cookie_store, other.cookie_store))
    return false;
  return true;
}


size_t NetworkService_GetCookieStore_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_GetCookieStore_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_GetCookieStore_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_GetCookieStore_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_GetCookieStore_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_GetCookieStore_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_GetCookieStore_Params_Data* input =
      static_cast<internal::NetworkService_GetCookieStore_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_GetCookieStore_Params& input) {
  size_t size = sizeof(internal::NetworkService_GetCookieStore_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_GetCookieStore_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_GetCookieStore_Params_Data** output) {
  if (input) {
    internal::NetworkService_GetCookieStore_Params_Data* result =
        internal::NetworkService_GetCookieStore_Params_Data::New(buf);
    result->cookie_store = input->cookie_store.PassMessagePipe().release();
    if (!result->cookie_store.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid cookie_store in NetworkService_GetCookieStore_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_GetCookieStore_Params_Data* input,
                  NetworkService_GetCookieStore_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->cookie_store.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->cookie_store)));
    } while (false);
  }
}



// static
NetworkService_CreateWebSocket_ParamsPtr NetworkService_CreateWebSocket_Params::New() {
  NetworkService_CreateWebSocket_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateWebSocket_Params>::Initialize(&rv);
  return rv;
}

NetworkService_CreateWebSocket_Params::NetworkService_CreateWebSocket_Params()
    : socket() {
}

NetworkService_CreateWebSocket_Params::~NetworkService_CreateWebSocket_Params() {
}



bool NetworkService_CreateWebSocket_Params::Equals(const NetworkService_CreateWebSocket_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::WebSocket>>::Equals(this->socket, other.socket))
    return false;
  return true;
}


size_t NetworkService_CreateWebSocket_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateWebSocket_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateWebSocket_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateWebSocket_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateWebSocket_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateWebSocket_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateWebSocket_Params_Data* input =
      static_cast<internal::NetworkService_CreateWebSocket_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateWebSocket_Params& input) {
  size_t size = sizeof(internal::NetworkService_CreateWebSocket_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateWebSocket_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateWebSocket_Params_Data** output) {
  if (input) {
    internal::NetworkService_CreateWebSocket_Params_Data* result =
        internal::NetworkService_CreateWebSocket_Params_Data::New(buf);
    result->socket = input->socket.PassMessagePipe().release();
    if (!result->socket.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid socket in NetworkService_CreateWebSocket_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateWebSocket_Params_Data* input,
                  NetworkService_CreateWebSocket_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->socket)));
    } while (false);
  }
}



// static
NetworkService_CreateTCPBoundSocket_ParamsPtr NetworkService_CreateTCPBoundSocket_Params::New() {
  NetworkService_CreateTCPBoundSocket_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateTCPBoundSocket_Params>::Initialize(&rv);
  return rv;
}

NetworkService_CreateTCPBoundSocket_Params::NetworkService_CreateTCPBoundSocket_Params()
    : local_address(),
      bound_socket() {
}

NetworkService_CreateTCPBoundSocket_Params::~NetworkService_CreateTCPBoundSocket_Params() {
}



bool NetworkService_CreateTCPBoundSocket_Params::Equals(const NetworkService_CreateTCPBoundSocket_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->local_address, other.local_address))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::TCPBoundSocket>>::Equals(this->bound_socket, other.bound_socket))
    return false;
  return true;
}


size_t NetworkService_CreateTCPBoundSocket_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateTCPBoundSocket_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateTCPBoundSocket_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateTCPBoundSocket_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateTCPBoundSocket_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateTCPBoundSocket_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateTCPBoundSocket_Params_Data* input =
      static_cast<internal::NetworkService_CreateTCPBoundSocket_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateTCPBoundSocket_Params& input) {
  size_t size = sizeof(internal::NetworkService_CreateTCPBoundSocket_Params_Data);
  size += input.local_address.is_null()
              ? 0
              : GetSerializedSize_(*input.local_address);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPBoundSocket_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateTCPBoundSocket_Params_Data** output) {
  if (input) {
    internal::NetworkService_CreateTCPBoundSocket_Params_Data* result =
        internal::NetworkService_CreateTCPBoundSocket_Params_Data::New(buf);
    {auto retval =Serialize_(input->local_address.get(),
                 buf,
                 &result->local_address.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    result->bound_socket = input->bound_socket.PassMessagePipe().release();
    if (!result->bound_socket.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid bound_socket in NetworkService_CreateTCPBoundSocket_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateTCPBoundSocket_Params_Data* input,
                  NetworkService_CreateTCPBoundSocket_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->local_address.ptr) {
        result->local_address = mojo::NetAddress::New();
        Deserialize_(input->local_address.ptr, result->local_address.get());
      }
      result->bound_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->bound_socket)));
    } while (false);
  }
}


// static
NetworkService_CreateTCPBoundSocket_ResponseParamsPtr NetworkService_CreateTCPBoundSocket_ResponseParams::New() {
  NetworkService_CreateTCPBoundSocket_ResponseParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateTCPBoundSocket_ResponseParams>::Initialize(&rv);
  return rv;
}

NetworkService_CreateTCPBoundSocket_ResponseParams::NetworkService_CreateTCPBoundSocket_ResponseParams()
    : result(),
      bound_to() {
}

NetworkService_CreateTCPBoundSocket_ResponseParams::~NetworkService_CreateTCPBoundSocket_ResponseParams() {
}


NetworkService_CreateTCPBoundSocket_ResponseParamsPtr NetworkService_CreateTCPBoundSocket_ResponseParams::Clone() const {
  NetworkService_CreateTCPBoundSocket_ResponseParamsPtr rv(New());
  rv->result = result.Clone();
  rv->bound_to = bound_to.Clone();
  return rv;
}


bool NetworkService_CreateTCPBoundSocket_ResponseParams::Equals(const NetworkService_CreateTCPBoundSocket_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->bound_to, other.bound_to))
    return false;
  return true;
}


size_t NetworkService_CreateTCPBoundSocket_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateTCPBoundSocket_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateTCPBoundSocket_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateTCPBoundSocket_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data* input =
      static_cast<internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateTCPBoundSocket_ResponseParams& input) {
  size_t size = sizeof(internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  size += input.bound_to.is_null()
              ? 0
              : GetSerializedSize_(*input.bound_to);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPBoundSocket_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data** output) {
  if (input) {
    internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data* result =
        internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in NetworkService_CreateTCPBoundSocket_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->bound_to.get(),
                 buf,
                 &result->bound_to.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateTCPBoundSocket_ResponseParams_Data* input,
                  NetworkService_CreateTCPBoundSocket_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
      if (input->bound_to.ptr) {
        result->bound_to = mojo::NetAddress::New();
        Deserialize_(input->bound_to.ptr, result->bound_to.get());
      }
    } while (false);
  }
}



// static
NetworkService_CreateTCPConnectedSocket_ParamsPtr NetworkService_CreateTCPConnectedSocket_Params::New() {
  NetworkService_CreateTCPConnectedSocket_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateTCPConnectedSocket_Params>::Initialize(&rv);
  return rv;
}

NetworkService_CreateTCPConnectedSocket_Params::NetworkService_CreateTCPConnectedSocket_Params()
    : remote_address(),
      send_stream(),
      receive_stream(),
      client_socket() {
}

NetworkService_CreateTCPConnectedSocket_Params::~NetworkService_CreateTCPConnectedSocket_Params() {
}



bool NetworkService_CreateTCPConnectedSocket_Params::Equals(const NetworkService_CreateTCPConnectedSocket_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->remote_address, other.remote_address))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeConsumerHandle>::Equals(this->send_stream, other.send_stream))
    return false;
  if (!mojo::internal::ValueTraits<mojo::ScopedDataPipeProducerHandle>::Equals(this->receive_stream, other.receive_stream))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::TCPConnectedSocket>>::Equals(this->client_socket, other.client_socket))
    return false;
  return true;
}


size_t NetworkService_CreateTCPConnectedSocket_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateTCPConnectedSocket_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateTCPConnectedSocket_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateTCPConnectedSocket_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateTCPConnectedSocket_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateTCPConnectedSocket_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateTCPConnectedSocket_Params_Data* input =
      static_cast<internal::NetworkService_CreateTCPConnectedSocket_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateTCPConnectedSocket_Params& input) {
  size_t size = sizeof(internal::NetworkService_CreateTCPConnectedSocket_Params_Data);
  size += input.remote_address.is_null()
              ? 0
              : GetSerializedSize_(*input.remote_address);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPConnectedSocket_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateTCPConnectedSocket_Params_Data** output) {
  if (input) {
    internal::NetworkService_CreateTCPConnectedSocket_Params_Data* result =
        internal::NetworkService_CreateTCPConnectedSocket_Params_Data::New(buf);
    {auto retval =Serialize_(input->remote_address.get(),
                 buf,
                 &result->remote_address.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->remote_address.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null remote_address in NetworkService_CreateTCPConnectedSocket_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    result->send_stream = input->send_stream.release();
    if (!result->send_stream.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid send_stream in NetworkService_CreateTCPConnectedSocket_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->receive_stream = input->receive_stream.release();
    if (!result->receive_stream.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid receive_stream in NetworkService_CreateTCPConnectedSocket_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    result->client_socket = input->client_socket.PassMessagePipe().release();
    if (!result->client_socket.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid client_socket in NetworkService_CreateTCPConnectedSocket_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateTCPConnectedSocket_Params_Data* input,
                  NetworkService_CreateTCPConnectedSocket_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->remote_address.ptr) {
        result->remote_address = mojo::NetAddress::New();
        Deserialize_(input->remote_address.ptr, result->remote_address.get());
      }
      result->send_stream.reset(mojo::internal::FetchAndReset(&input->send_stream));
      result->receive_stream.reset(mojo::internal::FetchAndReset(&input->receive_stream));
      result->client_socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->client_socket)));
    } while (false);
  }
}


// static
NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr NetworkService_CreateTCPConnectedSocket_ResponseParams::New() {
  NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateTCPConnectedSocket_ResponseParams>::Initialize(&rv);
  return rv;
}

NetworkService_CreateTCPConnectedSocket_ResponseParams::NetworkService_CreateTCPConnectedSocket_ResponseParams()
    : result(),
      local_address() {
}

NetworkService_CreateTCPConnectedSocket_ResponseParams::~NetworkService_CreateTCPConnectedSocket_ResponseParams() {
}


NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr NetworkService_CreateTCPConnectedSocket_ResponseParams::Clone() const {
  NetworkService_CreateTCPConnectedSocket_ResponseParamsPtr rv(New());
  rv->result = result.Clone();
  rv->local_address = local_address.Clone();
  return rv;
}


bool NetworkService_CreateTCPConnectedSocket_ResponseParams::Equals(const NetworkService_CreateTCPConnectedSocket_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->local_address, other.local_address))
    return false;
  return true;
}


size_t NetworkService_CreateTCPConnectedSocket_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateTCPConnectedSocket_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateTCPConnectedSocket_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateTCPConnectedSocket_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* input =
      static_cast<internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateTCPConnectedSocket_ResponseParams& input) {
  size_t size = sizeof(internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  size += input.local_address.is_null()
              ? 0
              : GetSerializedSize_(*input.local_address);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateTCPConnectedSocket_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data** output) {
  if (input) {
    internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* result =
        internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in NetworkService_CreateTCPConnectedSocket_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->local_address.get(),
                 buf,
                 &result->local_address.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateTCPConnectedSocket_ResponseParams_Data* input,
                  NetworkService_CreateTCPConnectedSocket_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
      if (input->local_address.ptr) {
        result->local_address = mojo::NetAddress::New();
        Deserialize_(input->local_address.ptr, result->local_address.get());
      }
    } while (false);
  }
}



// static
NetworkService_CreateUDPSocket_ParamsPtr NetworkService_CreateUDPSocket_Params::New() {
  NetworkService_CreateUDPSocket_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateUDPSocket_Params>::Initialize(&rv);
  return rv;
}

NetworkService_CreateUDPSocket_Params::NetworkService_CreateUDPSocket_Params()
    : socket() {
}

NetworkService_CreateUDPSocket_Params::~NetworkService_CreateUDPSocket_Params() {
}



bool NetworkService_CreateUDPSocket_Params::Equals(const NetworkService_CreateUDPSocket_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::UDPSocket>>::Equals(this->socket, other.socket))
    return false;
  return true;
}


size_t NetworkService_CreateUDPSocket_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateUDPSocket_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateUDPSocket_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateUDPSocket_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateUDPSocket_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateUDPSocket_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateUDPSocket_Params_Data* input =
      static_cast<internal::NetworkService_CreateUDPSocket_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateUDPSocket_Params& input) {
  size_t size = sizeof(internal::NetworkService_CreateUDPSocket_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateUDPSocket_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateUDPSocket_Params_Data** output) {
  if (input) {
    internal::NetworkService_CreateUDPSocket_Params_Data* result =
        internal::NetworkService_CreateUDPSocket_Params_Data::New(buf);
    result->socket = input->socket.PassMessagePipe().release();
    if (!result->socket.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid socket in NetworkService_CreateUDPSocket_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateUDPSocket_Params_Data* input,
                  NetworkService_CreateUDPSocket_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->socket.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->socket)));
    } while (false);
  }
}



// static
NetworkService_CreateHttpServer_ParamsPtr NetworkService_CreateHttpServer_Params::New() {
  NetworkService_CreateHttpServer_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateHttpServer_Params>::Initialize(&rv);
  return rv;
}

NetworkService_CreateHttpServer_Params::NetworkService_CreateHttpServer_Params()
    : local_address(),
      delegate() {
}

NetworkService_CreateHttpServer_Params::~NetworkService_CreateHttpServer_Params() {
}



bool NetworkService_CreateHttpServer_Params::Equals(const NetworkService_CreateHttpServer_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->local_address, other.local_address))
    return false;
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<mojo::HttpServerDelegate>>::Equals(this->delegate, other.delegate))
    return false;
  return true;
}


size_t NetworkService_CreateHttpServer_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateHttpServer_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateHttpServer_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateHttpServer_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateHttpServer_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateHttpServer_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateHttpServer_Params_Data* input =
      static_cast<internal::NetworkService_CreateHttpServer_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateHttpServer_Params& input) {
  size_t size = sizeof(internal::NetworkService_CreateHttpServer_Params_Data);
  size += input.local_address.is_null()
              ? 0
              : GetSerializedSize_(*input.local_address);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateHttpServer_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateHttpServer_Params_Data** output) {
  if (input) {
    internal::NetworkService_CreateHttpServer_Params_Data* result =
        internal::NetworkService_CreateHttpServer_Params_Data::New(buf);
    {auto retval =Serialize_(input->local_address.get(),
                 buf,
                 &result->local_address.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->local_address.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null local_address in NetworkService_CreateHttpServer_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    mojo::internal::InterfaceHandleToData(input->delegate.Pass(),
                                          &result->delegate);
    if (!result->delegate.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid delegate in NetworkService_CreateHttpServer_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateHttpServer_Params_Data* input,
                  NetworkService_CreateHttpServer_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->local_address.ptr) {
        result->local_address = mojo::NetAddress::New();
        Deserialize_(input->local_address.ptr, result->local_address.get());
      }
      mojo::internal::InterfaceDataToHandle(&input->delegate, &result->delegate);
    } while (false);
  }
}


// static
NetworkService_CreateHttpServer_ResponseParamsPtr NetworkService_CreateHttpServer_ResponseParams::New() {
  NetworkService_CreateHttpServer_ResponseParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateHttpServer_ResponseParams>::Initialize(&rv);
  return rv;
}

NetworkService_CreateHttpServer_ResponseParams::NetworkService_CreateHttpServer_ResponseParams()
    : result(),
      bound_to() {
}

NetworkService_CreateHttpServer_ResponseParams::~NetworkService_CreateHttpServer_ResponseParams() {
}


NetworkService_CreateHttpServer_ResponseParamsPtr NetworkService_CreateHttpServer_ResponseParams::Clone() const {
  NetworkService_CreateHttpServer_ResponseParamsPtr rv(New());
  rv->result = result.Clone();
  rv->bound_to = bound_to.Clone();
  return rv;
}


bool NetworkService_CreateHttpServer_ResponseParams::Equals(const NetworkService_CreateHttpServer_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::NetworkErrorPtr>::Equals(this->result, other.result))
    return false;
  if (!mojo::internal::ValueTraits<mojo::NetAddressPtr>::Equals(this->bound_to, other.bound_to))
    return false;
  return true;
}


size_t NetworkService_CreateHttpServer_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateHttpServer_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateHttpServer_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateHttpServer_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateHttpServer_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateHttpServer_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateHttpServer_ResponseParams_Data* input =
      static_cast<internal::NetworkService_CreateHttpServer_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateHttpServer_ResponseParams& input) {
  size_t size = sizeof(internal::NetworkService_CreateHttpServer_ResponseParams_Data);
  size += input.result.is_null()
              ? 0
              : GetSerializedSize_(*input.result);
  size += input.bound_to.is_null()
              ? 0
              : GetSerializedSize_(*input.bound_to);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateHttpServer_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateHttpServer_ResponseParams_Data** output) {
  if (input) {
    internal::NetworkService_CreateHttpServer_ResponseParams_Data* result =
        internal::NetworkService_CreateHttpServer_ResponseParams_Data::New(buf);
    {auto retval =Serialize_(input->result.get(),
                 buf,
                 &result->result.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    if (!result->result.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null result in NetworkService_CreateHttpServer_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    {auto retval =Serialize_(input->bound_to.get(),
                 buf,
                 &result->bound_to.ptr);
      if (retval != mojo::internal::ValidationError::NONE)
        return retval;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateHttpServer_ResponseParams_Data* input,
                  NetworkService_CreateHttpServer_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      if (input->result.ptr) {
        result->result = mojo::NetworkError::New();
        Deserialize_(input->result.ptr, result->result.get());
      }
      if (input->bound_to.ptr) {
        result->bound_to = mojo::NetAddress::New();
        Deserialize_(input->bound_to.ptr, result->bound_to.get());
      }
    } while (false);
  }
}



// static
NetworkService_RegisterURLLoaderInterceptor_ParamsPtr NetworkService_RegisterURLLoaderInterceptor_Params::New() {
  NetworkService_RegisterURLLoaderInterceptor_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_RegisterURLLoaderInterceptor_Params>::Initialize(&rv);
  return rv;
}

NetworkService_RegisterURLLoaderInterceptor_Params::NetworkService_RegisterURLLoaderInterceptor_Params()
    : factory() {
}

NetworkService_RegisterURLLoaderInterceptor_Params::~NetworkService_RegisterURLLoaderInterceptor_Params() {
}



bool NetworkService_RegisterURLLoaderInterceptor_Params::Equals(const NetworkService_RegisterURLLoaderInterceptor_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceHandle<mojo::URLLoaderInterceptorFactory>>::Equals(this->factory, other.factory))
    return false;
  return true;
}


size_t NetworkService_RegisterURLLoaderInterceptor_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_RegisterURLLoaderInterceptor_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_RegisterURLLoaderInterceptor_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_RegisterURLLoaderInterceptor_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data* input =
      static_cast<internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_RegisterURLLoaderInterceptor_Params& input) {
  size_t size = sizeof(internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_RegisterURLLoaderInterceptor_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data** output) {
  if (input) {
    internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data* result =
        internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data::New(buf);
    mojo::internal::InterfaceHandleToData(input->factory.Pass(),
                                          &result->factory);
    if (!result->factory.handle.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid factory in NetworkService_RegisterURLLoaderInterceptor_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_RegisterURLLoaderInterceptor_Params_Data* input,
                  NetworkService_RegisterURLLoaderInterceptor_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      mojo::internal::InterfaceDataToHandle(&input->factory, &result->factory);
    } while (false);
  }
}



// static
NetworkService_CreateHostResolver_ParamsPtr NetworkService_CreateHostResolver_Params::New() {
  NetworkService_CreateHostResolver_ParamsPtr rv;
  mojo::internal::StructHelper<NetworkService_CreateHostResolver_Params>::Initialize(&rv);
  return rv;
}

NetworkService_CreateHostResolver_Params::NetworkService_CreateHostResolver_Params()
    : host_resolver() {
}

NetworkService_CreateHostResolver_Params::~NetworkService_CreateHostResolver_Params() {
}



bool NetworkService_CreateHostResolver_Params::Equals(const NetworkService_CreateHostResolver_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::InterfaceRequest<mojo::HostResolver>>::Equals(this->host_resolver, other.host_resolver))
    return false;
  return true;
}


size_t NetworkService_CreateHostResolver_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool NetworkService_CreateHostResolver_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::NetworkService_CreateHostResolver_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool NetworkService_CreateHostResolver_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::NetworkService_CreateHostResolver_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void NetworkService_CreateHostResolver_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::NetworkService_CreateHostResolver_Params_Data* input =
      static_cast<internal::NetworkService_CreateHostResolver_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const NetworkService_CreateHostResolver_Params& input) {
  size_t size = sizeof(internal::NetworkService_CreateHostResolver_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    NetworkService_CreateHostResolver_Params* input,
    mojo::internal::Buffer* buf,
    internal::NetworkService_CreateHostResolver_Params_Data** output) {
  if (input) {
    internal::NetworkService_CreateHostResolver_Params_Data* result =
        internal::NetworkService_CreateHostResolver_Params_Data::New(buf);
    result->host_resolver = input->host_resolver.PassMessagePipe().release();
    if (!result->host_resolver.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid host_resolver in NetworkService_CreateHostResolver_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::NetworkService_CreateHostResolver_Params_Data* input,
                  NetworkService_CreateHostResolver_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->host_resolver.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&input->host_resolver)));
    } while (false);
  }
}

}  // namespace mojo
