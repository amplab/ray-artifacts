// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_FILES_INTERFACES_TYPES_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_FILES_INTERFACES_TYPES_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {
namespace files {

class Timespec;
class TimespecOrNow;
class FileInformation;
class DirectoryEntry;


namespace internal {

class Timespec_Data;
class TimespecOrNow_Data;
class FileInformation_Data;
class DirectoryEntry_Data;



#pragma pack(push, 1)


class Timespec_Data {
 public:
  static Timespec_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int64_t seconds;
  int32_t nanoseconds;
  uint8_t padfinal_[4];

 private:
  Timespec_Data();
  ~Timespec_Data() = delete;
};
static_assert(sizeof(Timespec_Data) == 24,
              "Bad sizeof(Timespec_Data)");

class TimespecOrNow_Data {
 public:
  static TimespecOrNow_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  uint8_t now : 1;
  uint8_t pad0_[7];
  mojo::internal::StructPointer<internal::Timespec_Data> timespec;

 private:
  TimespecOrNow_Data();
  ~TimespecOrNow_Data() = delete;
};
static_assert(sizeof(TimespecOrNow_Data) == 24,
              "Bad sizeof(TimespecOrNow_Data)");

class FileInformation_Data {
 public:
  static FileInformation_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  int64_t size;
  mojo::internal::StructPointer<internal::Timespec_Data> atime;
  mojo::internal::StructPointer<internal::Timespec_Data> mtime;

 private:
  FileInformation_Data();
  ~FileInformation_Data() = delete;
};
static_assert(sizeof(FileInformation_Data) == 40,
              "Bad sizeof(FileInformation_Data)");

class DirectoryEntry_Data {
 public:
  static DirectoryEntry_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t type;
  uint8_t pad0_[4];
  mojo::internal::StringPointer name;

 private:
  DirectoryEntry_Data();
  ~DirectoryEntry_Data() = delete;
};
static_assert(sizeof(DirectoryEntry_Data) == 24,
              "Bad sizeof(DirectoryEntry_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace files
}  // namespace mojo

#endif  // MOJO_SERVICES_FILES_INTERFACES_TYPES_MOJOM_INTERNAL_H_
