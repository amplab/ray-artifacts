// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library display_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;
import 'package:mojo_services/mojo/surfaces.mojom.dart' as surfaces_mojom;
import 'package:mojom/mojo/context_provider.mojom.dart' as context_provider_mojom;



class _DisplaySubmitFrameParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  surfaces_mojom.Frame frame = null;

  _DisplaySubmitFrameParams() : super(kVersions.last.size);

  _DisplaySubmitFrameParams.init(
    surfaces_mojom.Frame this.frame
  ) : super(kVersions.last.size);

  static _DisplaySubmitFrameParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DisplaySubmitFrameParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DisplaySubmitFrameParams result = new _DisplaySubmitFrameParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.frame = surfaces_mojom.Frame.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DisplaySubmitFrameParams";
    String fieldName;
    try {
      fieldName = "frame";
      encoder0.encodeStruct(frame, 8, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DisplaySubmitFrameParams("
           "frame: $frame" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["frame"] = frame;
    return map;
  }
}


class DisplaySubmitFrameResponseParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  DisplaySubmitFrameResponseParams() : super(kVersions.last.size);

  DisplaySubmitFrameResponseParams.init(
  ) : super(kVersions.last.size);

  static DisplaySubmitFrameResponseParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static DisplaySubmitFrameResponseParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    DisplaySubmitFrameResponseParams result = new DisplaySubmitFrameResponseParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "DisplaySubmitFrameResponseParams";
    String fieldName;
    try {
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "DisplaySubmitFrameResponseParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _DisplayFactoryCreateParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(32, 0)
  ];
  context_provider_mojom.ContextProviderInterface contextProvider = null;
  surfaces_mojom.ResourceReturnerInterface returner = null;
  DisplayInterfaceRequest displayRequest = null;

  _DisplayFactoryCreateParams() : super(kVersions.last.size);

  _DisplayFactoryCreateParams.init(
    context_provider_mojom.ContextProviderInterface this.contextProvider, 
    surfaces_mojom.ResourceReturnerInterface this.returner, 
    DisplayInterfaceRequest this.displayRequest
  ) : super(kVersions.last.size);

  static _DisplayFactoryCreateParams deserialize(bindings.Message message) =>
      bindings.Struct.deserialize(decode, message);

  static _DisplayFactoryCreateParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _DisplayFactoryCreateParams result = new _DisplayFactoryCreateParams();

    var mainDataHeader = bindings.Struct.checkVersion(decoder0, kVersions);
    if (mainDataHeader.version >= 0) {
      
      result.contextProvider = decoder0.decodeServiceInterface(8, false, context_provider_mojom.ContextProviderProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.returner = decoder0.decodeServiceInterface(16, true, surfaces_mojom.ResourceReturnerProxy.newFromEndpoint);
    }
    if (mainDataHeader.version >= 0) {
      
      result.displayRequest = decoder0.decodeInterfaceRequest(24, false, DisplayStub.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    const String structName = "_DisplayFactoryCreateParams";
    String fieldName;
    try {
      fieldName = "contextProvider";
      encoder0.encodeInterface(contextProvider, 8, false);
      fieldName = "returner";
      encoder0.encodeInterface(returner, 16, true);
      fieldName = "displayRequest";
      encoder0.encodeInterfaceRequest(displayRequest, 24, false);
    } on bindings.MojoCodecError catch(e) {
      bindings.Struct.fixErrorMessage(e, fieldName, structName);
      rethrow;
    }
  }

  String toString() {
    return "_DisplayFactoryCreateParams("
           "contextProvider: $contextProvider" ", "
           "returner: $returner" ", "
           "displayRequest: $displayRequest" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}

const int _displayMethodSubmitFrameName = 0;

class _DisplayServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class Display {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _DisplayServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static DisplayProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    DisplayProxy p = new DisplayProxy.unbound();
    String name = serviceName ?? Display.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void submitFrame(surfaces_mojom.Frame frame,void callback());
}

abstract class DisplayInterface
    implements bindings.MojoInterface<Display>,
               Display {
  factory DisplayInterface([Display impl]) =>
      new DisplayStub.unbound(impl);

  factory DisplayInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [Display impl]) =>
      new DisplayStub.fromEndpoint(endpoint, impl);

  factory DisplayInterface.fromMock(
      Display mock) =>
      new DisplayProxy.fromMock(mock);
}

abstract class DisplayInterfaceRequest
    implements bindings.MojoInterface<Display>,
               Display {
  factory DisplayInterfaceRequest() =>
      new DisplayProxy.unbound();
}

class _DisplayProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<Display> {
  Display impl;

  _DisplayProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _DisplayProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _DisplayProxyControl.unbound() : super.unbound();

  String get serviceName => Display.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      case _displayMethodSubmitFrameName:
        var r = DisplaySubmitFrameResponseParams.deserialize(
            message.payload);
        if (!message.header.hasRequestId) {
          proxyError("Expected a message with a valid request Id.");
          return;
        }
        Function callback = callbackMap[message.header.requestId];
        if (callback == null) {
          proxyError(
              "Message had unknown request Id: ${message.header.requestId}");
          return;
        }
        callbackMap.remove(message.header.requestId);
        callback();
        break;
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DisplayProxyControl($superString)";
  }
}

class DisplayProxy
    extends bindings.Proxy<Display>
    implements Display,
               DisplayInterface,
               DisplayInterfaceRequest {
  DisplayProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _DisplayProxyControl.fromEndpoint(endpoint));

  DisplayProxy.fromHandle(core.MojoHandle handle)
      : super(new _DisplayProxyControl.fromHandle(handle));

  DisplayProxy.unbound()
      : super(new _DisplayProxyControl.unbound());

  factory DisplayProxy.fromMock(Display mock) {
    DisplayProxy newMockedProxy =
        new DisplayProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static DisplayProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DisplayProxy"));
    return new DisplayProxy.fromEndpoint(endpoint);
  }


  void submitFrame(surfaces_mojom.Frame frame,void callback()) {
    if (impl != null) {
      impl.submitFrame(frame,callback);
      return;
    }
    var params = new _DisplaySubmitFrameParams();
    params.frame = frame;
    Function zonedCallback;
    if (identical(Zone.current, Zone.ROOT)) {
      zonedCallback = callback;
    } else {
      Zone z = Zone.current;
      zonedCallback = (() {
        z.bindCallback(() {
          callback();
        })();
      });
    }
    ctrl.sendMessageWithRequestId(
        params,
        _displayMethodSubmitFrameName,
        -1,
        bindings.MessageHeader.kMessageExpectsResponse,
        zonedCallback);
  }
}

class _DisplayStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<Display> {
  Display _impl;

  _DisplayStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Display impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _DisplayStubControl.fromHandle(
      core.MojoHandle handle, [Display impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _DisplayStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => Display.serviceName;


  Function _displaySubmitFrameResponseParamsResponder(
      int requestId) {
  return () {
      var result = new DisplaySubmitFrameResponseParams();
      sendResponse(buildResponseWithId(
          result,
          _displayMethodSubmitFrameName,
          requestId,
          bindings.MessageHeader.kMessageIsResponse));
    };
  }

  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _displayMethodSubmitFrameName:
        var params = _DisplaySubmitFrameParams.deserialize(
            message.payload);
        _impl.submitFrame(params.frame, _displaySubmitFrameResponseParamsResponder(message.header.requestId));
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  Display get impl => _impl;
  set impl(Display d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DisplayStubControl($superString)";
  }

  int get version => 0;
}

class DisplayStub
    extends bindings.Stub<Display>
    implements Display,
               DisplayInterface,
               DisplayInterfaceRequest {
  DisplayStub.unbound([Display impl])
      : super(new _DisplayStubControl.unbound(impl));

  DisplayStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [Display impl])
      : super(new _DisplayStubControl.fromEndpoint(endpoint, impl));

  DisplayStub.fromHandle(
      core.MojoHandle handle, [Display impl])
      : super(new _DisplayStubControl.fromHandle(handle, impl));

  static DisplayStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DisplayStub"));
    return new DisplayStub.fromEndpoint(endpoint);
  }


  void submitFrame(surfaces_mojom.Frame frame,void callback()) {
    return impl.submitFrame(frame,callback);
  }
}

const int _displayFactoryMethodCreateName = 0;

class _DisplayFactoryServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class DisplayFactory {
  static const String serviceName = "mojo::DisplayFactory";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _DisplayFactoryServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static DisplayFactoryProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    DisplayFactoryProxy p = new DisplayFactoryProxy.unbound();
    String name = serviceName ?? DisplayFactory.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void create(context_provider_mojom.ContextProviderInterface contextProvider, surfaces_mojom.ResourceReturnerInterface returner, DisplayInterfaceRequest displayRequest);
}

abstract class DisplayFactoryInterface
    implements bindings.MojoInterface<DisplayFactory>,
               DisplayFactory {
  factory DisplayFactoryInterface([DisplayFactory impl]) =>
      new DisplayFactoryStub.unbound(impl);

  factory DisplayFactoryInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [DisplayFactory impl]) =>
      new DisplayFactoryStub.fromEndpoint(endpoint, impl);

  factory DisplayFactoryInterface.fromMock(
      DisplayFactory mock) =>
      new DisplayFactoryProxy.fromMock(mock);
}

abstract class DisplayFactoryInterfaceRequest
    implements bindings.MojoInterface<DisplayFactory>,
               DisplayFactory {
  factory DisplayFactoryInterfaceRequest() =>
      new DisplayFactoryProxy.unbound();
}

class _DisplayFactoryProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<DisplayFactory> {
  DisplayFactory impl;

  _DisplayFactoryProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _DisplayFactoryProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _DisplayFactoryProxyControl.unbound() : super.unbound();

  String get serviceName => DisplayFactory.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DisplayFactoryProxyControl($superString)";
  }
}

class DisplayFactoryProxy
    extends bindings.Proxy<DisplayFactory>
    implements DisplayFactory,
               DisplayFactoryInterface,
               DisplayFactoryInterfaceRequest {
  DisplayFactoryProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _DisplayFactoryProxyControl.fromEndpoint(endpoint));

  DisplayFactoryProxy.fromHandle(core.MojoHandle handle)
      : super(new _DisplayFactoryProxyControl.fromHandle(handle));

  DisplayFactoryProxy.unbound()
      : super(new _DisplayFactoryProxyControl.unbound());

  factory DisplayFactoryProxy.fromMock(DisplayFactory mock) {
    DisplayFactoryProxy newMockedProxy =
        new DisplayFactoryProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static DisplayFactoryProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DisplayFactoryProxy"));
    return new DisplayFactoryProxy.fromEndpoint(endpoint);
  }


  void create(context_provider_mojom.ContextProviderInterface contextProvider, surfaces_mojom.ResourceReturnerInterface returner, DisplayInterfaceRequest displayRequest) {
    if (impl != null) {
      impl.create(contextProvider, returner, displayRequest);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _DisplayFactoryCreateParams();
    params.contextProvider = contextProvider;
    params.returner = returner;
    params.displayRequest = displayRequest;
    ctrl.sendMessage(params,
        _displayFactoryMethodCreateName);
  }
}

class _DisplayFactoryStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<DisplayFactory> {
  DisplayFactory _impl;

  _DisplayFactoryStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [DisplayFactory impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _DisplayFactoryStubControl.fromHandle(
      core.MojoHandle handle, [DisplayFactory impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _DisplayFactoryStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => DisplayFactory.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _displayFactoryMethodCreateName:
        var params = _DisplayFactoryCreateParams.deserialize(
            message.payload);
        _impl.create(params.contextProvider, params.returner, params.displayRequest);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  DisplayFactory get impl => _impl;
  set impl(DisplayFactory d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_DisplayFactoryStubControl($superString)";
  }

  int get version => 0;
}

class DisplayFactoryStub
    extends bindings.Stub<DisplayFactory>
    implements DisplayFactory,
               DisplayFactoryInterface,
               DisplayFactoryInterfaceRequest {
  DisplayFactoryStub.unbound([DisplayFactory impl])
      : super(new _DisplayFactoryStubControl.unbound(impl));

  DisplayFactoryStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [DisplayFactory impl])
      : super(new _DisplayFactoryStubControl.fromEndpoint(endpoint, impl));

  DisplayFactoryStub.fromHandle(
      core.MojoHandle handle, [DisplayFactory impl])
      : super(new _DisplayFactoryStubControl.fromHandle(handle, impl));

  static DisplayFactoryStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For DisplayFactoryStub"));
    return new DisplayFactoryStub.fromEndpoint(endpoint);
  }


  void create(context_provider_mojom.ContextProviderInterface contextProvider, surfaces_mojom.ResourceReturnerInterface returner, DisplayInterfaceRequest displayRequest) {
    return impl.create(contextProvider, returner, displayRequest);
  }
}



