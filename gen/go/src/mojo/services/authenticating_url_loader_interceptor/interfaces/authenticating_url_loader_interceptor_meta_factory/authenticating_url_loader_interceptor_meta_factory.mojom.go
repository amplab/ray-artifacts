// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     mojo/services/authenticating_url_loader_interceptor/interfaces/authenticating_url_loader_interceptor_meta_factory.mojom
//

package authenticating_url_loader_interceptor_meta_factory

import (
	sort "sort"
	service_describer "mojo/public/interfaces/bindings/service_describer"
	authentication "mojo/services/authentication/interfaces/authentication"
	url_loader_interceptor "mojo/services/network/interfaces/url_loader_interceptor"
	fmt "fmt"
	mojom_types "mojo/public/interfaces/bindings/mojom_types"
	bindings "mojo/public/go/bindings"
	system "mojo/public/go/system"
)


type AuthenticatingUrlLoaderInterceptorMetaFactory interface {
	CreateUrlLoaderInterceptorFactory(inFactoryRequest url_loader_interceptor.UrlLoaderInterceptorFactory_Request, inAuthenticationService authentication.AuthenticationService_Pointer) (err error)
}



var authenticatingURLLoaderInterceptorMetaFactory_Name = "mojo::AuthenticatingURLLoaderInterceptorMetaFactory"

type AuthenticatingUrlLoaderInterceptorMetaFactory_Request bindings.InterfaceRequest

func (r *AuthenticatingUrlLoaderInterceptorMetaFactory_Request) Name() string {
	return authenticatingURLLoaderInterceptorMetaFactory_Name
}


type AuthenticatingUrlLoaderInterceptorMetaFactory_Pointer bindings.InterfacePointer

func (p *AuthenticatingUrlLoaderInterceptorMetaFactory_Pointer) Name() string {
	return authenticatingURLLoaderInterceptorMetaFactory_Name
}

type AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceFactory struct{
	Delegate AuthenticatingUrlLoaderInterceptorMetaFactory_Factory
}

type AuthenticatingUrlLoaderInterceptorMetaFactory_Factory interface {
	Create(request AuthenticatingUrlLoaderInterceptorMetaFactory_Request)
}

func (f *AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceFactory) Name() string {
	return authenticatingURLLoaderInterceptorMetaFactory_Name
}

// TODO(rudominer) This should only be defined for top-level interfaces.
func (f *AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceFactory) ServiceDescription() service_describer.ServiceDescription {
	return &AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceDescription{}
}

func (f *AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceFactory) Create(messagePipe system.MessagePipeHandle) {
	request := AuthenticatingUrlLoaderInterceptorMetaFactory_Request{bindings.NewMessagePipeHandleOwner(messagePipe)}
	f.Delegate.Create(request)
}

// CreateMessagePipeForAuthenticatingUrlLoaderInterceptorMetaFactory creates a message pipe for use with the
// AuthenticatingUrlLoaderInterceptorMetaFactory interface with a AuthenticatingUrlLoaderInterceptorMetaFactory_Request on one end and a AuthenticatingUrlLoaderInterceptorMetaFactory_Pointer on the other.
func CreateMessagePipeForAuthenticatingUrlLoaderInterceptorMetaFactory() (AuthenticatingUrlLoaderInterceptorMetaFactory_Request, AuthenticatingUrlLoaderInterceptorMetaFactory_Pointer) {
        r, p := bindings.CreateMessagePipeForMojoInterface()
        return AuthenticatingUrlLoaderInterceptorMetaFactory_Request(r), AuthenticatingUrlLoaderInterceptorMetaFactory_Pointer(p)
}

const authenticatingURLLoaderInterceptorMetaFactory_CreateUrlLoaderInterceptorFactory_Name uint32 = 0

type AuthenticatingUrlLoaderInterceptorMetaFactory_Proxy struct {
	router *bindings.Router
	ids bindings.Counter
}

func NewAuthenticatingUrlLoaderInterceptorMetaFactoryProxy(p AuthenticatingUrlLoaderInterceptorMetaFactory_Pointer, waiter bindings.AsyncWaiter) *AuthenticatingUrlLoaderInterceptorMetaFactory_Proxy {
	return &AuthenticatingUrlLoaderInterceptorMetaFactory_Proxy{
		bindings.NewRouter(p.PassMessagePipe(), waiter),
		bindings.NewCounter(),
	}
}

func (p *AuthenticatingUrlLoaderInterceptorMetaFactory_Proxy) Close_Proxy() {
	p.router.Close()
}

type authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params struct {
	inFactoryRequest url_loader_interceptor.UrlLoaderInterceptorFactory_Request
	inAuthenticationService authentication.AuthenticationService_Pointer
}


func (s *authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params) Encode(encoder *bindings.Encoder) error {
	encoder.StartStruct(16, 0)
	if err := encoder.WriteHandle(s.inFactoryRequest.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.WriteInterface(s.inAuthenticationService.PassMessagePipe()); err != nil {
		return err
	}
	if err := encoder.Finish(); err != nil {
		return err
	}
	return nil
}

var authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params_Versions []bindings.DataHeader = []bindings.DataHeader{
	bindings.DataHeader{24, 0},
}

func (s *authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params) Decode(decoder *bindings.Decoder) error {
	header, err := decoder.StartStruct()
	if err != nil {
		return err
	}
	index := sort.Search(len(authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params_Versions), func(i int) bool {
		return authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params_Versions[i].ElementsOrVersion >= header.ElementsOrVersion
	})
	if index < len(authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params_Versions) {
		if authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params_Versions[index].ElementsOrVersion > header.ElementsOrVersion {
			index--
		}
		expectedSize := authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params_Versions[index].Size
		if expectedSize != header.Size {
			return &bindings.ValidationError{bindings.UnexpectedStructHeader,
				fmt.Sprintf("invalid struct header size: should be %d, but was %d", expectedSize, header.Size),
			}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadMessagePipeHandle()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inFactoryRequest = url_loader_interceptor.UrlLoaderInterceptorFactory_Request{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if header.ElementsOrVersion >= 0 {
		handle0, err := decoder.ReadInterface()
		if err != nil {
			return err
		}
		if handle0.IsValid() {
			handleOwner := bindings.NewMessagePipeHandleOwner(handle0)
			s.inAuthenticationService = authentication.AuthenticationService_Pointer{handleOwner}
		} else {
			return &bindings.ValidationError{bindings.UnexpectedInvalidHandle, "unexpected invalid handle"}
		}
	}
	if err := decoder.Finish(); err != nil {
		return err
	}
	return nil
}

func (p *AuthenticatingUrlLoaderInterceptorMetaFactory_Proxy) CreateUrlLoaderInterceptorFactory(inFactoryRequest url_loader_interceptor.UrlLoaderInterceptorFactory_Request, inAuthenticationService authentication.AuthenticationService_Pointer) (err error) {
	payload := &authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params{
		inFactoryRequest,
		inAuthenticationService,
	}
	header := bindings.MessageHeader{
		Type: authenticatingURLLoaderInterceptorMetaFactory_CreateUrlLoaderInterceptorFactory_Name,
		Flags: bindings.MessageNoFlag,
	}
	var message *bindings.Message
	if message, err = bindings.EncodeMessage(header, payload); err != nil {
		err = fmt.Errorf("can't encode request: %v", err.Error())
		p.Close_Proxy()
		return
	}
	if err = p.router.Accept(message); err != nil {
		p.Close_Proxy()
		return
	}
	return
}

type authenticatingURLLoaderInterceptorMetaFactory_Stub struct {
	connector *bindings.Connector
	impl AuthenticatingUrlLoaderInterceptorMetaFactory
}

func NewAuthenticatingUrlLoaderInterceptorMetaFactoryStub(r AuthenticatingUrlLoaderInterceptorMetaFactory_Request, impl AuthenticatingUrlLoaderInterceptorMetaFactory, waiter bindings.AsyncWaiter) *bindings.Stub {
	connector := bindings.NewConnector(r.PassMessagePipe(), waiter)
	return bindings.NewStub(connector, &authenticatingURLLoaderInterceptorMetaFactory_Stub{connector, impl})
}


func (f *AuthenticatingUrlLoaderInterceptorMetaFactory_Request) ServiceDescription() service_describer.ServiceDescription {
	return &AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceDescription{}
}


type AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceDescription struct{}

func (sd *AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceDescription) GetTopLevelInterface() (outMojomInterface mojom_types.MojomInterface, err error) {
	err = fmt.Errorf("GetTopLevelInterface not implemented")
	return
}

func (sd *AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceDescription) GetTypeDefinition(inTypeKey string) (outType mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetTypeDefinition not implemented")
	return
}

func (sd *AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceDescription) GetAllTypeDefinitions() (outDefinitions *map[string]mojom_types.UserDefinedType, err error) {
	err = fmt.Errorf("GetAllTypeDefinitions not implemented")
	return
}
var _ service_describer.ServiceDescription = (*AuthenticatingUrlLoaderInterceptorMetaFactory_ServiceDescription)(nil)


func (s *authenticatingURLLoaderInterceptorMetaFactory_Stub) Accept(message *bindings.Message) (err error) {
	switch message.Header.Type {
	case authenticatingURLLoaderInterceptorMetaFactory_CreateUrlLoaderInterceptorFactory_Name:
		if message.Header.Flags != bindings.MessageNoFlag {
			return &bindings.ValidationError{bindings.MessageHeaderInvalidFlags,
				fmt.Sprintf("invalid message header flag: %v", message.Header.Flags),
			}
		}
		var request authenticatingURLLoaderInterceptorMetaFactory_CreateURLLoaderInterceptorFactory_Params
		if err := message.DecodePayload(&request); err != nil {
			return err
		}
		err = s.impl.CreateUrlLoaderInterceptorFactory(request.inFactoryRequest, request.inAuthenticationService)
		if err != nil {
			return
		}
	default:
		return &bindings.ValidationError{
			bindings.MessageHeaderUnknownMethod,
			fmt.Sprintf("unknown method %v", message.Header.Type),
		}
	}
	return
}

