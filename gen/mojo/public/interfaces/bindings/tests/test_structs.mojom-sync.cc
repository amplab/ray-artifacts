// NOTE: This file was generated by the Mojo bindings generator.
#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "mojo/public/interfaces/bindings/tests/test_structs.mojom-sync.h"

#include <math.h>
#include <ostream>
#include <string>
#include <utility>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/bindings/message.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "mojo/public/interfaces/bindings/tests/test_structs.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/test_structs.mojom-common.h"
namespace mojo {
namespace test {

// --- Interface definitions ---
SomeInterface_SynchronousProxy::SomeInterface_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators)
          : connector_(connector), validators_(std::move(validators)) {
}


bool SomeInterface_SynchronousProxy::SomeMethod(RectPairPtr in_pair, RectPairPtr* out_other_pair) {
  size_t size = sizeof(internal::SomeInterface_SomeMethod_Params_Data);
  size += in_pair.is_null()
              ? 0
              : GetSerializedSize_(*in_pair);

  auto msg_name = static_cast<uint32_t>(internal::SomeInterface_Base::MessageOrdinals::SomeMethod);
  mojo::RequestMessageBuilder builder(msg_name, size);

  internal::SomeInterface_SomeMethod_Params_Data* out_params =
      internal::SomeInterface_SomeMethod_Params_Data::New(builder.buffer());
  {Serialize_(in_pair.get(),
               builder.buffer(),
               &out_params->pair.ptr);
  }
  if (!out_params->pair.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null pair in {{interface.name}}::{{method.name}}");
  }
  out_params->EncodePointersAndHandles(builder.message()->mutable_handles());
  
  if (!connector_->Write(builder.message()))
    return false;
  mojo::Message response_msg;
  if (!connector_->BlockingRead(&response_msg))
    return false; 
  
  // Validate the incoming message.
  std::string response_err;
  if (mojo::internal::RunValidatorsOnMessage(validators_, &response_msg,
                                             &response_err)
        != mojo::internal::ValidationError::NONE) {
    MOJO_LOG(WARNING) << response_err;
    return false;
  } 
  if (mojo::internal::ControlMessageHandler::IsControlMessage(&response_msg)) {
    MOJO_LOG(ERROR) << "Synchronous interface bindings currently don't support "
                       "interface control messages.";
    return false;
  }
  if (response_msg.name() != msg_name) {
    MOJO_LOG(ERROR) << "Expecting response for message = " << msg_name <<
                       ", but received message = " << response_msg.name();
    return false;
  }
  
  internal::SomeInterface_SomeMethod_ResponseParams_Data*
      response_params = reinterpret_cast<internal::SomeInterface_SomeMethod_ResponseParams_Data*>(
          response_msg.mutable_payload());
  response_params->DecodePointersAndHandles(response_msg.mutable_handles());
  
  do {
    // NOTE: The memory backing |response_params| may has be smaller than
    // |sizeof(*response_params)| if the message comes from an older version.
    if (response_params->other_pair.ptr) {
      (*out_other_pair) = RectPair::New();
      Deserialize_(response_params->other_pair.ptr, (*out_other_pair).get());
    }
  } while (false);
  return true;
}
}  // namespace test
}  // namespace mojo

#if defined(__clang__)
#pragma clang diagnostic pop
#endif
