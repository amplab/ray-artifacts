// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/sample_interfaces.mojom-common.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
namespace sample {

// --- Constants ---

namespace internal {

// --- Struct definitions ---


// --- Union definitions ---


// --- Definitions of the data structs for interface methods ---


// static
Provider_EchoString_Params_Data* Provider_EchoString_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoString_Params_Data))) Provider_EchoString_Params_Data();
}

// static
mojo::internal::ValidationError Provider_EchoString_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoString_Params_Data* object = static_cast<const Provider_EchoString_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->a.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null a field in Provider_EchoString_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->a.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams a_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->a.offset),
          bounds_checker, &a_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoString_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->a, handles);
}

void Provider_EchoString_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->a, handles);
}

Provider_EchoString_Params_Data::Provider_EchoString_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Provider_EchoString_ResponseParams_Data* Provider_EchoString_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoString_ResponseParams_Data))) Provider_EchoString_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Provider_EchoString_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoString_ResponseParams_Data* object = static_cast<const Provider_EchoString_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->a.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null a field in Provider_EchoString_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->a.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams a_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->a.offset),
          bounds_checker, &a_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoString_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->a, handles);
}

void Provider_EchoString_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->a, handles);
}

Provider_EchoString_ResponseParams_Data::Provider_EchoString_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Provider_EchoStrings_Params_Data* Provider_EchoStrings_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoStrings_Params_Data))) Provider_EchoStrings_Params_Data();
}

// static
mojo::internal::ValidationError Provider_EchoStrings_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoStrings_Params_Data* object = static_cast<const Provider_EchoStrings_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->a.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null a field in Provider_EchoStrings_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->a.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams a_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->a.offset),
          bounds_checker, &a_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->b.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null b field in Provider_EchoStrings_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->b.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams b_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->b.offset),
          bounds_checker, &b_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoStrings_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->a, handles);
  mojo::internal::Encode(&this->b, handles);
}

void Provider_EchoStrings_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->a, handles);
  mojo::internal::Decode(&this->b, handles);
}

Provider_EchoStrings_Params_Data::Provider_EchoStrings_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Provider_EchoStrings_ResponseParams_Data* Provider_EchoStrings_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoStrings_ResponseParams_Data))) Provider_EchoStrings_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Provider_EchoStrings_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoStrings_ResponseParams_Data* object = static_cast<const Provider_EchoStrings_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!object->a.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null a field in Provider_EchoStrings_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->a.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams a_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->a.offset),
          bounds_checker, &a_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }
  {
    
  if (!object->b.offset) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) <<
        "null b field in Provider_EchoStrings_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
  }
  if (!mojo::internal::ValidateEncodedPointer(&object->b.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams b_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->b.offset),
          bounds_checker, &b_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoStrings_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->a, handles);
  mojo::internal::Encode(&this->b, handles);
}

void Provider_EchoStrings_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->a, handles);
  mojo::internal::Decode(&this->b, handles);
}

Provider_EchoStrings_ResponseParams_Data::Provider_EchoStrings_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Provider_EchoMessagePipeHandle_Params_Data* Provider_EchoMessagePipeHandle_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoMessagePipeHandle_Params_Data))) Provider_EchoMessagePipeHandle_Params_Data();
}

// static
mojo::internal::ValidationError Provider_EchoMessagePipeHandle_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoMessagePipeHandle_Params_Data* object = static_cast<const Provider_EchoMessagePipeHandle_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle a_handle = object->a;
  if (a_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid a field in Provider_EchoMessagePipeHandle_Params struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(a_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoMessagePipeHandle_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->a, handles);
}

void Provider_EchoMessagePipeHandle_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->a, handles);
}

Provider_EchoMessagePipeHandle_Params_Data::Provider_EchoMessagePipeHandle_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Provider_EchoMessagePipeHandle_ResponseParams_Data* Provider_EchoMessagePipeHandle_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoMessagePipeHandle_ResponseParams_Data))) Provider_EchoMessagePipeHandle_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Provider_EchoMessagePipeHandle_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoMessagePipeHandle_ResponseParams_Data* object = static_cast<const Provider_EchoMessagePipeHandle_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  const mojo::Handle a_handle = object->a;
  if (a_handle.value() == mojo::internal::kEncodedInvalidHandleValue) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "invalid a field in Provider_EchoMessagePipeHandle_ResponseParams struct";
    return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
  }
  if (!bounds_checker->ClaimHandle(a_handle)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_HANDLE;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoMessagePipeHandle_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::EncodeHandle(&this->a, handles);
}

void Provider_EchoMessagePipeHandle_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::DecodeHandle(&this->a, handles);
}

Provider_EchoMessagePipeHandle_ResponseParams_Data::Provider_EchoMessagePipeHandle_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Provider_EchoEnum_Params_Data* Provider_EchoEnum_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoEnum_Params_Data))) Provider_EchoEnum_Params_Data();
}

// static
mojo::internal::ValidationError Provider_EchoEnum_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoEnum_Params_Data* object = static_cast<const Provider_EchoEnum_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoEnum_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Provider_EchoEnum_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Provider_EchoEnum_Params_Data::Provider_EchoEnum_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Provider_EchoEnum_ResponseParams_Data* Provider_EchoEnum_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoEnum_ResponseParams_Data))) Provider_EchoEnum_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Provider_EchoEnum_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoEnum_ResponseParams_Data* object = static_cast<const Provider_EchoEnum_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoEnum_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Provider_EchoEnum_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Provider_EchoEnum_ResponseParams_Data::Provider_EchoEnum_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
Provider_EchoInt_Params_Data* Provider_EchoInt_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoInt_Params_Data))) Provider_EchoInt_Params_Data();
}

// static
mojo::internal::ValidationError Provider_EchoInt_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoInt_Params_Data* object = static_cast<const Provider_EchoInt_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoInt_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Provider_EchoInt_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Provider_EchoInt_Params_Data::Provider_EchoInt_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
Provider_EchoInt_ResponseParams_Data* Provider_EchoInt_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(Provider_EchoInt_ResponseParams_Data))) Provider_EchoInt_ResponseParams_Data();
}

// static
mojo::internal::ValidationError Provider_EchoInt_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const Provider_EchoInt_ResponseParams_Data* object = static_cast<const Provider_EchoInt_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void Provider_EchoInt_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void Provider_EchoInt_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

Provider_EchoInt_ResponseParams_Data::Provider_EchoInt_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
IntegerAccessor_GetInteger_Params_Data* IntegerAccessor_GetInteger_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(IntegerAccessor_GetInteger_Params_Data))) IntegerAccessor_GetInteger_Params_Data();
}

// static
mojo::internal::ValidationError IntegerAccessor_GetInteger_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerAccessor_GetInteger_Params_Data* object = static_cast<const IntegerAccessor_GetInteger_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void IntegerAccessor_GetInteger_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void IntegerAccessor_GetInteger_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

IntegerAccessor_GetInteger_Params_Data::IntegerAccessor_GetInteger_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
IntegerAccessor_GetInteger_ResponseParams_Data* IntegerAccessor_GetInteger_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(IntegerAccessor_GetInteger_ResponseParams_Data))) IntegerAccessor_GetInteger_ResponseParams_Data();
}

// static
mojo::internal::ValidationError IntegerAccessor_GetInteger_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerAccessor_GetInteger_ResponseParams_Data* object = static_cast<const IntegerAccessor_GetInteger_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }, { 2, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void IntegerAccessor_GetInteger_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 2);
}

void IntegerAccessor_GetInteger_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

IntegerAccessor_GetInteger_ResponseParams_Data::IntegerAccessor_GetInteger_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 2;
}



// static
IntegerAccessor_SetInteger_Params_Data* IntegerAccessor_SetInteger_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(IntegerAccessor_SetInteger_Params_Data))) IntegerAccessor_SetInteger_Params_Data();
}

// static
mojo::internal::ValidationError IntegerAccessor_SetInteger_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const IntegerAccessor_SetInteger_Params_Data* object = static_cast<const IntegerAccessor_SetInteger_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 16 }, { 3, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void IntegerAccessor_SetInteger_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 3);
}

void IntegerAccessor_SetInteger_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

IntegerAccessor_SetInteger_Params_Data::IntegerAccessor_SetInteger_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 3;
}



// static
SampleInterface_SampleMethod1_Params_Data* SampleInterface_SampleMethod1_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(SampleInterface_SampleMethod1_Params_Data))) SampleInterface_SampleMethod1_Params_Data();
}

// static
mojo::internal::ValidationError SampleInterface_SampleMethod1_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SampleInterface_SampleMethod1_Params_Data* object = static_cast<const SampleInterface_SampleMethod1_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->in2.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams in2_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->in2.offset),
          bounds_checker, &in2_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void SampleInterface_SampleMethod1_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->in2, handles);
}

void SampleInterface_SampleMethod1_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->in2, handles);
}

SampleInterface_SampleMethod1_Params_Data::SampleInterface_SampleMethod1_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


// static
SampleInterface_SampleMethod1_ResponseParams_Data* SampleInterface_SampleMethod1_ResponseParams_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(SampleInterface_SampleMethod1_ResponseParams_Data))) SampleInterface_SampleMethod1_ResponseParams_Data();
}

// static
mojo::internal::ValidationError SampleInterface_SampleMethod1_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SampleInterface_SampleMethod1_ResponseParams_Data* object = static_cast<const SampleInterface_SampleMethod1_ResponseParams_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 24 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }
  {
    
  if (!mojo::internal::ValidateEncodedPointer(&object->out1.offset)) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::ILLEGAL_POINTER;
  }
  const mojo::internal::ArrayValidateParams out1_validate_params(
      0, false, nullptr);
  auto validate_retval =
      mojo::String::Data_::Validate(
          mojo::internal::DecodePointerRaw(&object->out1.offset),
          bounds_checker, &out1_validate_params, err);
  if (validate_retval != mojo::internal::ValidationError::NONE) {
    return validate_retval;
  }
  }

  return mojo::internal::ValidationError::NONE;
}

void SampleInterface_SampleMethod1_ResponseParams_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
  mojo::internal::Encode(&this->out1, handles);
}

void SampleInterface_SampleMethod1_ResponseParams_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
  mojo::internal::Decode(&this->out1, handles);
}

SampleInterface_SampleMethod1_ResponseParams_Data::SampleInterface_SampleMethod1_ResponseParams_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
SampleInterface_SampleMethod0_Params_Data* SampleInterface_SampleMethod0_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(SampleInterface_SampleMethod0_Params_Data))) SampleInterface_SampleMethod0_Params_Data();
}

// static
mojo::internal::ValidationError SampleInterface_SampleMethod0_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SampleInterface_SampleMethod0_Params_Data* object = static_cast<const SampleInterface_SampleMethod0_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void SampleInterface_SampleMethod0_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void SampleInterface_SampleMethod0_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

SampleInterface_SampleMethod0_Params_Data::SampleInterface_SampleMethod0_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}



// static
SampleInterface_SampleMethod2_Params_Data* SampleInterface_SampleMethod2_Params_Data::New(mojo::internal::Buffer* buf) {
  return new (buf->Allocate(sizeof(SampleInterface_SampleMethod2_Params_Data))) SampleInterface_SampleMethod2_Params_Data();
}

// static
mojo::internal::ValidationError SampleInterface_SampleMethod2_Params_Data::Validate(
    const void* data,
    mojo::internal::BoundsChecker* bounds_checker,
    std::string* err) {
  mojo::internal::ValidationError retval;
  
  if (!data)
    return mojo::internal::ValidationError::NONE;

  retval = ValidateStructHeaderAndClaimMemory(data, bounds_checker, err);
  if (retval != mojo::internal::ValidationError::NONE)
    return retval;

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  const SampleInterface_SampleMethod2_Params_Data* object = static_cast<const SampleInterface_SampleMethod2_Params_Data*>(data);

  static const struct {
    uint32_t version;
    uint32_t num_bytes;
  } kVersionSizes[] = {{ 0, 8 }};

  if (object->header_.version <=
          kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].version) {
    // Scan in reverse order to optimize for more recent versions.
    for (int i = MOJO_ARRAYSIZE(kVersionSizes) - 1; i >= 0; --i) {
      if (object->header_.version >= kVersionSizes[i].version) {
        if (object->header_.num_bytes == kVersionSizes[i].num_bytes)
          break;

        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
        return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
      }
    }
  } else if (object->header_.num_bytes <
                 kVersionSizes[MOJO_ARRAYSIZE(kVersionSizes) - 1].num_bytes) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "";
    return mojo::internal::ValidationError::UNEXPECTED_STRUCT_HEADER;
  }

  return mojo::internal::ValidationError::NONE;
}

void SampleInterface_SampleMethod2_Params_Data::EncodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  MOJO_CHECK(header_.version == 0);
}

void SampleInterface_SampleMethod2_Params_Data::DecodePointersAndHandles(
    std::vector<mojo::Handle>* handles) {
  // NOTE: The memory backing |this| may has be smaller than |sizeof(*this)|, if
  // the message comes from an older version.
}

SampleInterface_SampleMethod2_Params_Data::SampleInterface_SampleMethod2_Params_Data() {
  header_.num_bytes = sizeof(*this);
  header_.version = 0;
}


}  // namespace internal

// --- Request and response validator definitions for interfaces ---
mojo::internal::ValidationError ProviderRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'Provider', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::Provider_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Provider_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Provider_Base::MessageOrdinals::EchoString: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Provider', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Provider_EchoString_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Provider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoStrings: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Provider', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Provider_EchoStrings_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Provider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoMessagePipeHandle: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Provider', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Provider_EchoMessagePipeHandle_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Provider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoEnum: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Provider', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Provider_EchoEnum_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Provider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoInt: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'Provider', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::Provider_EchoInt_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'Provider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'Provider'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError ProviderResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'Provider', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Provider', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::Provider_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Provider_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Provider_Base::MessageOrdinals::EchoString: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Provider_EchoString_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Provider',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoStrings: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Provider_EchoStrings_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Provider',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoMessagePipeHandle: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Provider_EchoMessagePipeHandle_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Provider',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoEnum: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Provider_EchoEnum_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Provider',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::Provider_Base::MessageOrdinals::EchoInt: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::Provider_EchoInt_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'Provider',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'Provider'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError IntegerAccessorRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'IntegerAccessor', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::IntegerAccessor_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IntegerAccessor_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IntegerAccessor_Base::MessageOrdinals::GetInteger: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'IntegerAccessor', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::IntegerAccessor_GetInteger_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'IntegerAccessor', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::IntegerAccessor_Base::MessageOrdinals::SetInteger: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'IntegerAccessor', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::IntegerAccessor_SetInteger_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'IntegerAccessor', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'IntegerAccessor'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError IntegerAccessorResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'IntegerAccessor', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'IntegerAccessor', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::IntegerAccessor_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IntegerAccessor_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IntegerAccessor_Base::MessageOrdinals::GetInteger: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::IntegerAccessor_GetInteger_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'IntegerAccessor',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'IntegerAccessor'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError SampleInterfaceRequestValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlRequest(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "request validation error for interface 'SampleInterface', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  internal::SampleInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SampleInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SampleInterface_Base::MessageOrdinals::SampleMethod1: {
      retval =
          mojo::internal::ValidateMessageIsRequestExpectingResponse(message,
                                                                    err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'SampleInterface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::SampleInterface_SampleMethod1_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'SampleInterface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::SampleInterface_Base::MessageOrdinals::SampleMethod0: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'SampleInterface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::SampleInterface_SampleMethod0_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'SampleInterface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    case internal::SampleInterface_Base::MessageOrdinals::SampleMethod2: {
      retval = mojo::internal::ValidateMessageIsRequestWithoutResponse(message,
                                                                       err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
          << "request validation error for interface 'SampleInterface', "
             "message name '" << message->header()->name << "': " <<
             (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      retval = mojo::internal::ValidateMessagePayload<
                 internal::SampleInterface_SampleMethod2_Params_Data>(
                    message, err); 
      if (retval != mojo::internal::ValidationError::NONE) {
         MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "request validation error for interface 'SampleInterface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown request message name '"
                                         << message->header()->name
                                         << "' for interface "
                                            "'SampleInterface'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
}
mojo::internal::ValidationError SampleInterfaceResponseValidator::Validate(
    const mojo::Message* message,
    std::string* err) {
  mojo::internal::ValidationError retval;
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message)) {
    retval = mojo::internal::ValidateControlResponse(message, err);
    if (retval != mojo::internal::ValidationError::NONE) {
      MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
        << "response validation error for interface 'SampleInterface', "
           "message name '" << message->header()->name << "': " <<
           (err ? *err : "");
      ReportValidationError(retval, err);
      return retval;
    }
    return mojo::internal::ValidationError::NONE;
  }

  retval = mojo::internal::ValidateMessageIsResponse(message, err);
  if (retval != mojo::internal::ValidationError::NONE) {
    MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'SampleInterface', "
               "message name '" << message->header()->name << "': " <<
               (err ? *err : "");
    ReportValidationError(retval, err);
    return retval;
  }

  internal::SampleInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::SampleInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::SampleInterface_Base::MessageOrdinals::SampleMethod1: {
      retval = mojo::internal::ValidateMessagePayload<
                  internal::SampleInterface_SampleMethod1_ResponseParams_Data>(
                      message, err);
      if (retval != mojo::internal::ValidationError::NONE) {
        MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err)
            << "response validation error for interface 'SampleInterface',"
               " message name '" << message->header()->name << "': " <<
               (err ? *err : "");
        ReportValidationError(retval, err);
        return retval;
      }
      return mojo::internal::ValidationError::NONE;
    }
    default:
      break;
  }

  // Unrecognized message.
  MOJO_INTERNAL_DEBUG_SET_ERROR_MSG(err) << "unknown response message name '"
                                          << message->header()->name
                                          << "' for interface "
                                             "'SampleInterface'";
  ReportValidationError(
      mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD, err);
  return mojo::internal::ValidationError::MESSAGE_HEADER_UNKNOWN_METHOD;
} 

// --- Enums ---
bool Enum_IsValidValue(Enum value) {
  switch (static_cast<int32_t>(value)) {
    case 0:
      return true;
  }
  return false;
}
  
std::ostream& operator<<(std::ostream& stream, const Enum& val) {
  return (stream << static_cast<int32_t>(val));
}

// Base interface definitions (Name_, Version_, Constants, Enums)
const uint32_t internal::Provider_Base::Version_;

// Constants

// Enums
const uint32_t internal::IntegerAccessor_Base::Version_;

// Constants

// Enums
const uint32_t internal::SampleInterface_Base::Version_;

// Constants

// Enums

// Struct Constants

// --- Struct builder definitions ---

// --- Union builder definitions ---

// --- Struct Serialization Helpers ---

// --- Union Serialization Helpers ---

// --- Structs for interface method parameters ---


// static
Provider_EchoString_ParamsPtr Provider_EchoString_Params::New() {
  Provider_EchoString_ParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoString_Params>::Initialize(&rv);
  return rv;
}

Provider_EchoString_Params::Provider_EchoString_Params()
    : a() {
}

Provider_EchoString_Params::~Provider_EchoString_Params() {
}


Provider_EchoString_ParamsPtr Provider_EchoString_Params::Clone() const {
  Provider_EchoString_ParamsPtr rv(New());
  rv->a = a;
  return rv;
}


bool Provider_EchoString_Params::Equals(const Provider_EchoString_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoString_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoString_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoString_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoString_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoString_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoString_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoString_Params_Data* input =
      static_cast<internal::Provider_EchoString_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoString_Params& input) {
  size_t size = sizeof(internal::Provider_EchoString_Params_Data);
  size += GetSerializedSize_(input.a);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoString_Params* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoString_Params_Data** output) {
  if (input) {
    internal::Provider_EchoString_Params_Data* result =
        internal::Provider_EchoString_Params_Data::New(buf);
    SerializeString_(input->a, buf, &result->a.ptr);
    if (!result->a.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null a in Provider_EchoString_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoString_Params_Data* input,
                  Provider_EchoString_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->a.ptr, &result->a);
    } while (false);
  }
}


// static
Provider_EchoString_ResponseParamsPtr Provider_EchoString_ResponseParams::New() {
  Provider_EchoString_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoString_ResponseParams>::Initialize(&rv);
  return rv;
}

Provider_EchoString_ResponseParams::Provider_EchoString_ResponseParams()
    : a() {
}

Provider_EchoString_ResponseParams::~Provider_EchoString_ResponseParams() {
}


Provider_EchoString_ResponseParamsPtr Provider_EchoString_ResponseParams::Clone() const {
  Provider_EchoString_ResponseParamsPtr rv(New());
  rv->a = a;
  return rv;
}


bool Provider_EchoString_ResponseParams::Equals(const Provider_EchoString_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoString_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoString_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoString_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoString_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoString_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoString_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoString_ResponseParams_Data* input =
      static_cast<internal::Provider_EchoString_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoString_ResponseParams& input) {
  size_t size = sizeof(internal::Provider_EchoString_ResponseParams_Data);
  size += GetSerializedSize_(input.a);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoString_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoString_ResponseParams_Data** output) {
  if (input) {
    internal::Provider_EchoString_ResponseParams_Data* result =
        internal::Provider_EchoString_ResponseParams_Data::New(buf);
    SerializeString_(input->a, buf, &result->a.ptr);
    if (!result->a.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null a in Provider_EchoString_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoString_ResponseParams_Data* input,
                  Provider_EchoString_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->a.ptr, &result->a);
    } while (false);
  }
}



// static
Provider_EchoStrings_ParamsPtr Provider_EchoStrings_Params::New() {
  Provider_EchoStrings_ParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoStrings_Params>::Initialize(&rv);
  return rv;
}

Provider_EchoStrings_Params::Provider_EchoStrings_Params()
    : a(),
      b() {
}

Provider_EchoStrings_Params::~Provider_EchoStrings_Params() {
}


Provider_EchoStrings_ParamsPtr Provider_EchoStrings_Params::Clone() const {
  Provider_EchoStrings_ParamsPtr rv(New());
  rv->a = a;
  rv->b = b;
  return rv;
}


bool Provider_EchoStrings_Params::Equals(const Provider_EchoStrings_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->a, other.a))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->b, other.b))
    return false;
  return true;
}


size_t Provider_EchoStrings_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoStrings_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoStrings_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoStrings_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoStrings_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoStrings_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoStrings_Params_Data* input =
      static_cast<internal::Provider_EchoStrings_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoStrings_Params& input) {
  size_t size = sizeof(internal::Provider_EchoStrings_Params_Data);
  size += GetSerializedSize_(input.a);
  size += GetSerializedSize_(input.b);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoStrings_Params* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoStrings_Params_Data** output) {
  if (input) {
    internal::Provider_EchoStrings_Params_Data* result =
        internal::Provider_EchoStrings_Params_Data::New(buf);
    SerializeString_(input->a, buf, &result->a.ptr);
    if (!result->a.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null a in Provider_EchoStrings_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    SerializeString_(input->b, buf, &result->b.ptr);
    if (!result->b.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null b in Provider_EchoStrings_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoStrings_Params_Data* input,
                  Provider_EchoStrings_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->a.ptr, &result->a);
      Deserialize_(input->b.ptr, &result->b);
    } while (false);
  }
}


// static
Provider_EchoStrings_ResponseParamsPtr Provider_EchoStrings_ResponseParams::New() {
  Provider_EchoStrings_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoStrings_ResponseParams>::Initialize(&rv);
  return rv;
}

Provider_EchoStrings_ResponseParams::Provider_EchoStrings_ResponseParams()
    : a(),
      b() {
}

Provider_EchoStrings_ResponseParams::~Provider_EchoStrings_ResponseParams() {
}


Provider_EchoStrings_ResponseParamsPtr Provider_EchoStrings_ResponseParams::Clone() const {
  Provider_EchoStrings_ResponseParamsPtr rv(New());
  rv->a = a;
  rv->b = b;
  return rv;
}


bool Provider_EchoStrings_ResponseParams::Equals(const Provider_EchoStrings_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->a, other.a))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->b, other.b))
    return false;
  return true;
}


size_t Provider_EchoStrings_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoStrings_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoStrings_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoStrings_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoStrings_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoStrings_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoStrings_ResponseParams_Data* input =
      static_cast<internal::Provider_EchoStrings_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoStrings_ResponseParams& input) {
  size_t size = sizeof(internal::Provider_EchoStrings_ResponseParams_Data);
  size += GetSerializedSize_(input.a);
  size += GetSerializedSize_(input.b);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoStrings_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoStrings_ResponseParams_Data** output) {
  if (input) {
    internal::Provider_EchoStrings_ResponseParams_Data* result =
        internal::Provider_EchoStrings_ResponseParams_Data::New(buf);
    SerializeString_(input->a, buf, &result->a.ptr);
    if (!result->a.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null a in Provider_EchoStrings_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    SerializeString_(input->b, buf, &result->b.ptr);
    if (!result->b.ptr) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null b in Provider_EchoStrings_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoStrings_ResponseParams_Data* input,
                  Provider_EchoStrings_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->a.ptr, &result->a);
      Deserialize_(input->b.ptr, &result->b);
    } while (false);
  }
}



// static
Provider_EchoMessagePipeHandle_ParamsPtr Provider_EchoMessagePipeHandle_Params::New() {
  Provider_EchoMessagePipeHandle_ParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoMessagePipeHandle_Params>::Initialize(&rv);
  return rv;
}

Provider_EchoMessagePipeHandle_Params::Provider_EchoMessagePipeHandle_Params()
    : a() {
}

Provider_EchoMessagePipeHandle_Params::~Provider_EchoMessagePipeHandle_Params() {
}



bool Provider_EchoMessagePipeHandle_Params::Equals(const Provider_EchoMessagePipeHandle_Params& other) const {
  if (!mojo::internal::ValueTraits<mojo::ScopedMessagePipeHandle>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoMessagePipeHandle_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoMessagePipeHandle_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoMessagePipeHandle_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoMessagePipeHandle_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoMessagePipeHandle_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoMessagePipeHandle_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoMessagePipeHandle_Params_Data* input =
      static_cast<internal::Provider_EchoMessagePipeHandle_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoMessagePipeHandle_Params& input) {
  size_t size = sizeof(internal::Provider_EchoMessagePipeHandle_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoMessagePipeHandle_Params* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoMessagePipeHandle_Params_Data** output) {
  if (input) {
    internal::Provider_EchoMessagePipeHandle_Params_Data* result =
        internal::Provider_EchoMessagePipeHandle_Params_Data::New(buf);
    result->a = input->a.release();
    if (!result->a.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid a in Provider_EchoMessagePipeHandle_Params struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoMessagePipeHandle_Params_Data* input,
                  Provider_EchoMessagePipeHandle_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->a.reset(mojo::internal::FetchAndReset(&input->a));
    } while (false);
  }
}


// static
Provider_EchoMessagePipeHandle_ResponseParamsPtr Provider_EchoMessagePipeHandle_ResponseParams::New() {
  Provider_EchoMessagePipeHandle_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoMessagePipeHandle_ResponseParams>::Initialize(&rv);
  return rv;
}

Provider_EchoMessagePipeHandle_ResponseParams::Provider_EchoMessagePipeHandle_ResponseParams()
    : a() {
}

Provider_EchoMessagePipeHandle_ResponseParams::~Provider_EchoMessagePipeHandle_ResponseParams() {
}



bool Provider_EchoMessagePipeHandle_ResponseParams::Equals(const Provider_EchoMessagePipeHandle_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::ScopedMessagePipeHandle>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoMessagePipeHandle_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoMessagePipeHandle_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoMessagePipeHandle_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoMessagePipeHandle_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoMessagePipeHandle_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoMessagePipeHandle_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoMessagePipeHandle_ResponseParams_Data* input =
      static_cast<internal::Provider_EchoMessagePipeHandle_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoMessagePipeHandle_ResponseParams& input) {
  size_t size = sizeof(internal::Provider_EchoMessagePipeHandle_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoMessagePipeHandle_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoMessagePipeHandle_ResponseParams_Data** output) {
  if (input) {
    internal::Provider_EchoMessagePipeHandle_ResponseParams_Data* result =
        internal::Provider_EchoMessagePipeHandle_ResponseParams_Data::New(buf);
    result->a = input->a.release();
    if (!result->a.is_valid()) {
      MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid a in Provider_EchoMessagePipeHandle_ResponseParams struct");
      return mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE;
    }
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoMessagePipeHandle_ResponseParams_Data* input,
                  Provider_EchoMessagePipeHandle_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->a.reset(mojo::internal::FetchAndReset(&input->a));
    } while (false);
  }
}



// static
Provider_EchoEnum_ParamsPtr Provider_EchoEnum_Params::New() {
  Provider_EchoEnum_ParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoEnum_Params>::Initialize(&rv);
  return rv;
}

Provider_EchoEnum_Params::Provider_EchoEnum_Params()
    : a() {
}

Provider_EchoEnum_Params::~Provider_EchoEnum_Params() {
}


Provider_EchoEnum_ParamsPtr Provider_EchoEnum_Params::Clone() const {
  Provider_EchoEnum_ParamsPtr rv(New());
  rv->a = a;
  return rv;
}


bool Provider_EchoEnum_Params::Equals(const Provider_EchoEnum_Params& other) const {
  if (!mojo::internal::ValueTraits<Enum>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoEnum_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoEnum_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoEnum_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoEnum_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoEnum_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoEnum_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoEnum_Params_Data* input =
      static_cast<internal::Provider_EchoEnum_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoEnum_Params& input) {
  size_t size = sizeof(internal::Provider_EchoEnum_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoEnum_Params* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoEnum_Params_Data** output) {
  if (input) {
    internal::Provider_EchoEnum_Params_Data* result =
        internal::Provider_EchoEnum_Params_Data::New(buf);
    result->a =
      static_cast<int32_t>(input->a);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoEnum_Params_Data* input,
                  Provider_EchoEnum_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->a = static_cast<Enum>(input->a);
    } while (false);
  }
}


// static
Provider_EchoEnum_ResponseParamsPtr Provider_EchoEnum_ResponseParams::New() {
  Provider_EchoEnum_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoEnum_ResponseParams>::Initialize(&rv);
  return rv;
}

Provider_EchoEnum_ResponseParams::Provider_EchoEnum_ResponseParams()
    : a() {
}

Provider_EchoEnum_ResponseParams::~Provider_EchoEnum_ResponseParams() {
}


Provider_EchoEnum_ResponseParamsPtr Provider_EchoEnum_ResponseParams::Clone() const {
  Provider_EchoEnum_ResponseParamsPtr rv(New());
  rv->a = a;
  return rv;
}


bool Provider_EchoEnum_ResponseParams::Equals(const Provider_EchoEnum_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<Enum>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoEnum_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoEnum_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoEnum_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoEnum_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoEnum_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoEnum_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoEnum_ResponseParams_Data* input =
      static_cast<internal::Provider_EchoEnum_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoEnum_ResponseParams& input) {
  size_t size = sizeof(internal::Provider_EchoEnum_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoEnum_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoEnum_ResponseParams_Data** output) {
  if (input) {
    internal::Provider_EchoEnum_ResponseParams_Data* result =
        internal::Provider_EchoEnum_ResponseParams_Data::New(buf);
    result->a =
      static_cast<int32_t>(input->a);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoEnum_ResponseParams_Data* input,
                  Provider_EchoEnum_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->a = static_cast<Enum>(input->a);
    } while (false);
  }
}



// static
Provider_EchoInt_ParamsPtr Provider_EchoInt_Params::New() {
  Provider_EchoInt_ParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoInt_Params>::Initialize(&rv);
  return rv;
}

Provider_EchoInt_Params::Provider_EchoInt_Params()
    : a() {
}

Provider_EchoInt_Params::~Provider_EchoInt_Params() {
}


Provider_EchoInt_ParamsPtr Provider_EchoInt_Params::Clone() const {
  Provider_EchoInt_ParamsPtr rv(New());
  rv->a = a;
  return rv;
}


bool Provider_EchoInt_Params::Equals(const Provider_EchoInt_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoInt_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoInt_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoInt_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoInt_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoInt_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoInt_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoInt_Params_Data* input =
      static_cast<internal::Provider_EchoInt_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoInt_Params& input) {
  size_t size = sizeof(internal::Provider_EchoInt_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoInt_Params* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoInt_Params_Data** output) {
  if (input) {
    internal::Provider_EchoInt_Params_Data* result =
        internal::Provider_EchoInt_Params_Data::New(buf);
    result->a = input->a;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoInt_Params_Data* input,
                  Provider_EchoInt_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->a = input->a;
    } while (false);
  }
}


// static
Provider_EchoInt_ResponseParamsPtr Provider_EchoInt_ResponseParams::New() {
  Provider_EchoInt_ResponseParamsPtr rv;
  mojo::internal::StructHelper<Provider_EchoInt_ResponseParams>::Initialize(&rv);
  return rv;
}

Provider_EchoInt_ResponseParams::Provider_EchoInt_ResponseParams()
    : a() {
}

Provider_EchoInt_ResponseParams::~Provider_EchoInt_ResponseParams() {
}


Provider_EchoInt_ResponseParamsPtr Provider_EchoInt_ResponseParams::Clone() const {
  Provider_EchoInt_ResponseParamsPtr rv(New());
  rv->a = a;
  return rv;
}


bool Provider_EchoInt_ResponseParams::Equals(const Provider_EchoInt_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->a, other.a))
    return false;
  return true;
}


size_t Provider_EchoInt_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool Provider_EchoInt_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::Provider_EchoInt_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool Provider_EchoInt_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::Provider_EchoInt_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void Provider_EchoInt_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::Provider_EchoInt_ResponseParams_Data* input =
      static_cast<internal::Provider_EchoInt_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const Provider_EchoInt_ResponseParams& input) {
  size_t size = sizeof(internal::Provider_EchoInt_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    Provider_EchoInt_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::Provider_EchoInt_ResponseParams_Data** output) {
  if (input) {
    internal::Provider_EchoInt_ResponseParams_Data* result =
        internal::Provider_EchoInt_ResponseParams_Data::New(buf);
    result->a = input->a;
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::Provider_EchoInt_ResponseParams_Data* input,
                  Provider_EchoInt_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->a = input->a;
    } while (false);
  }
}



// static
IntegerAccessor_GetInteger_ParamsPtr IntegerAccessor_GetInteger_Params::New() {
  IntegerAccessor_GetInteger_ParamsPtr rv;
  mojo::internal::StructHelper<IntegerAccessor_GetInteger_Params>::Initialize(&rv);
  return rv;
}

IntegerAccessor_GetInteger_Params::IntegerAccessor_GetInteger_Params() {
}

IntegerAccessor_GetInteger_Params::~IntegerAccessor_GetInteger_Params() {
}


IntegerAccessor_GetInteger_ParamsPtr IntegerAccessor_GetInteger_Params::Clone() const {
  IntegerAccessor_GetInteger_ParamsPtr rv(New());
  return rv;
}


bool IntegerAccessor_GetInteger_Params::Equals(const IntegerAccessor_GetInteger_Params& other) const {
  return true;
}


size_t IntegerAccessor_GetInteger_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool IntegerAccessor_GetInteger_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::IntegerAccessor_GetInteger_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool IntegerAccessor_GetInteger_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::IntegerAccessor_GetInteger_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void IntegerAccessor_GetInteger_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::IntegerAccessor_GetInteger_Params_Data* input =
      static_cast<internal::IntegerAccessor_GetInteger_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const IntegerAccessor_GetInteger_Params& input) {
  size_t size = sizeof(internal::IntegerAccessor_GetInteger_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    IntegerAccessor_GetInteger_Params* input,
    mojo::internal::Buffer* buf,
    internal::IntegerAccessor_GetInteger_Params_Data** output) {
  if (input) {
    internal::IntegerAccessor_GetInteger_Params_Data* result =
        internal::IntegerAccessor_GetInteger_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::IntegerAccessor_GetInteger_Params_Data* input,
                  IntegerAccessor_GetInteger_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}


// static
IntegerAccessor_GetInteger_ResponseParamsPtr IntegerAccessor_GetInteger_ResponseParams::New() {
  IntegerAccessor_GetInteger_ResponseParamsPtr rv;
  mojo::internal::StructHelper<IntegerAccessor_GetInteger_ResponseParams>::Initialize(&rv);
  return rv;
}

IntegerAccessor_GetInteger_ResponseParams::IntegerAccessor_GetInteger_ResponseParams()
    : data(),
      type() {
}

IntegerAccessor_GetInteger_ResponseParams::~IntegerAccessor_GetInteger_ResponseParams() {
}


IntegerAccessor_GetInteger_ResponseParamsPtr IntegerAccessor_GetInteger_ResponseParams::Clone() const {
  IntegerAccessor_GetInteger_ResponseParamsPtr rv(New());
  rv->data = data;
  rv->type = type;
  return rv;
}


bool IntegerAccessor_GetInteger_ResponseParams::Equals(const IntegerAccessor_GetInteger_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->data, other.data))
    return false;
  if (!mojo::internal::ValueTraits<Enum>::Equals(this->type, other.type))
    return false;
  return true;
}


size_t IntegerAccessor_GetInteger_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool IntegerAccessor_GetInteger_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::IntegerAccessor_GetInteger_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool IntegerAccessor_GetInteger_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::IntegerAccessor_GetInteger_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void IntegerAccessor_GetInteger_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::IntegerAccessor_GetInteger_ResponseParams_Data* input =
      static_cast<internal::IntegerAccessor_GetInteger_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const IntegerAccessor_GetInteger_ResponseParams& input) {
  size_t size = sizeof(internal::IntegerAccessor_GetInteger_ResponseParams_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    IntegerAccessor_GetInteger_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::IntegerAccessor_GetInteger_ResponseParams_Data** output) {
  if (input) {
    internal::IntegerAccessor_GetInteger_ResponseParams_Data* result =
        internal::IntegerAccessor_GetInteger_ResponseParams_Data::New(buf);
    result->data = input->data;
    result->type =
      static_cast<int32_t>(input->type);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::IntegerAccessor_GetInteger_ResponseParams_Data* input,
                  IntegerAccessor_GetInteger_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->data = input->data;
      if (input->header_.version < 2)
        break;
      result->type = static_cast<Enum>(input->type);
    } while (false);
  }
}



// static
IntegerAccessor_SetInteger_ParamsPtr IntegerAccessor_SetInteger_Params::New() {
  IntegerAccessor_SetInteger_ParamsPtr rv;
  mojo::internal::StructHelper<IntegerAccessor_SetInteger_Params>::Initialize(&rv);
  return rv;
}

IntegerAccessor_SetInteger_Params::IntegerAccessor_SetInteger_Params()
    : data(),
      type() {
}

IntegerAccessor_SetInteger_Params::~IntegerAccessor_SetInteger_Params() {
}


IntegerAccessor_SetInteger_ParamsPtr IntegerAccessor_SetInteger_Params::Clone() const {
  IntegerAccessor_SetInteger_ParamsPtr rv(New());
  rv->data = data;
  rv->type = type;
  return rv;
}


bool IntegerAccessor_SetInteger_Params::Equals(const IntegerAccessor_SetInteger_Params& other) const {
  if (!mojo::internal::ValueTraits<int64_t>::Equals(this->data, other.data))
    return false;
  if (!mojo::internal::ValueTraits<Enum>::Equals(this->type, other.type))
    return false;
  return true;
}


size_t IntegerAccessor_SetInteger_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool IntegerAccessor_SetInteger_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::IntegerAccessor_SetInteger_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool IntegerAccessor_SetInteger_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::IntegerAccessor_SetInteger_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void IntegerAccessor_SetInteger_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::IntegerAccessor_SetInteger_Params_Data* input =
      static_cast<internal::IntegerAccessor_SetInteger_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const IntegerAccessor_SetInteger_Params& input) {
  size_t size = sizeof(internal::IntegerAccessor_SetInteger_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    IntegerAccessor_SetInteger_Params* input,
    mojo::internal::Buffer* buf,
    internal::IntegerAccessor_SetInteger_Params_Data** output) {
  if (input) {
    internal::IntegerAccessor_SetInteger_Params_Data* result =
        internal::IntegerAccessor_SetInteger_Params_Data::New(buf);
    result->data = input->data;
    result->type =
      static_cast<int32_t>(input->type);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::IntegerAccessor_SetInteger_Params_Data* input,
                  IntegerAccessor_SetInteger_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->data = input->data;
      if (input->header_.version < 3)
        break;
      result->type = static_cast<Enum>(input->type);
    } while (false);
  }
}



// static
SampleInterface_SampleMethod1_ParamsPtr SampleInterface_SampleMethod1_Params::New() {
  SampleInterface_SampleMethod1_ParamsPtr rv;
  mojo::internal::StructHelper<SampleInterface_SampleMethod1_Params>::Initialize(&rv);
  return rv;
}

SampleInterface_SampleMethod1_Params::SampleInterface_SampleMethod1_Params()
    : in1(),
      in2() {
}

SampleInterface_SampleMethod1_Params::~SampleInterface_SampleMethod1_Params() {
}


SampleInterface_SampleMethod1_ParamsPtr SampleInterface_SampleMethod1_Params::Clone() const {
  SampleInterface_SampleMethod1_ParamsPtr rv(New());
  rv->in1 = in1;
  rv->in2 = in2;
  return rv;
}


bool SampleInterface_SampleMethod1_Params::Equals(const SampleInterface_SampleMethod1_Params& other) const {
  if (!mojo::internal::ValueTraits<int32_t>::Equals(this->in1, other.in1))
    return false;
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->in2, other.in2))
    return false;
  return true;
}


size_t SampleInterface_SampleMethod1_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool SampleInterface_SampleMethod1_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::SampleInterface_SampleMethod1_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool SampleInterface_SampleMethod1_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::SampleInterface_SampleMethod1_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void SampleInterface_SampleMethod1_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::SampleInterface_SampleMethod1_Params_Data* input =
      static_cast<internal::SampleInterface_SampleMethod1_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const SampleInterface_SampleMethod1_Params& input) {
  size_t size = sizeof(internal::SampleInterface_SampleMethod1_Params_Data);
  size += GetSerializedSize_(input.in2);
  return size;
}

mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod1_Params* input,
    mojo::internal::Buffer* buf,
    internal::SampleInterface_SampleMethod1_Params_Data** output) {
  if (input) {
    internal::SampleInterface_SampleMethod1_Params_Data* result =
        internal::SampleInterface_SampleMethod1_Params_Data::New(buf);
    result->in1 = input->in1;
    SerializeString_(input->in2, buf, &result->in2.ptr);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::SampleInterface_SampleMethod1_Params_Data* input,
                  SampleInterface_SampleMethod1_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      result->in1 = input->in1;
      Deserialize_(input->in2.ptr, &result->in2);
    } while (false);
  }
}


// static
SampleInterface_SampleMethod1_ResponseParamsPtr SampleInterface_SampleMethod1_ResponseParams::New() {
  SampleInterface_SampleMethod1_ResponseParamsPtr rv;
  mojo::internal::StructHelper<SampleInterface_SampleMethod1_ResponseParams>::Initialize(&rv);
  return rv;
}

SampleInterface_SampleMethod1_ResponseParams::SampleInterface_SampleMethod1_ResponseParams()
    : out1(),
      out2() {
}

SampleInterface_SampleMethod1_ResponseParams::~SampleInterface_SampleMethod1_ResponseParams() {
}


SampleInterface_SampleMethod1_ResponseParamsPtr SampleInterface_SampleMethod1_ResponseParams::Clone() const {
  SampleInterface_SampleMethod1_ResponseParamsPtr rv(New());
  rv->out1 = out1;
  rv->out2 = out2;
  return rv;
}


bool SampleInterface_SampleMethod1_ResponseParams::Equals(const SampleInterface_SampleMethod1_ResponseParams& other) const {
  if (!mojo::internal::ValueTraits<mojo::String>::Equals(this->out1, other.out1))
    return false;
  if (!mojo::internal::ValueTraits<Enum>::Equals(this->out2, other.out2))
    return false;
  return true;
}


size_t SampleInterface_SampleMethod1_ResponseParams::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool SampleInterface_SampleMethod1_ResponseParams::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::SampleInterface_SampleMethod1_ResponseParams_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool SampleInterface_SampleMethod1_ResponseParams::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::SampleInterface_SampleMethod1_ResponseParams_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void SampleInterface_SampleMethod1_ResponseParams::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::SampleInterface_SampleMethod1_ResponseParams_Data* input =
      static_cast<internal::SampleInterface_SampleMethod1_ResponseParams_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const SampleInterface_SampleMethod1_ResponseParams& input) {
  size_t size = sizeof(internal::SampleInterface_SampleMethod1_ResponseParams_Data);
  size += GetSerializedSize_(input.out1);
  return size;
}

mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod1_ResponseParams* input,
    mojo::internal::Buffer* buf,
    internal::SampleInterface_SampleMethod1_ResponseParams_Data** output) {
  if (input) {
    internal::SampleInterface_SampleMethod1_ResponseParams_Data* result =
        internal::SampleInterface_SampleMethod1_ResponseParams_Data::New(buf);
    SerializeString_(input->out1, buf, &result->out1.ptr);
    result->out2 =
      static_cast<int32_t>(input->out2);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::SampleInterface_SampleMethod1_ResponseParams_Data* input,
                  SampleInterface_SampleMethod1_ResponseParams* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
      Deserialize_(input->out1.ptr, &result->out1);
      result->out2 = static_cast<Enum>(input->out2);
    } while (false);
  }
}



// static
SampleInterface_SampleMethod0_ParamsPtr SampleInterface_SampleMethod0_Params::New() {
  SampleInterface_SampleMethod0_ParamsPtr rv;
  mojo::internal::StructHelper<SampleInterface_SampleMethod0_Params>::Initialize(&rv);
  return rv;
}

SampleInterface_SampleMethod0_Params::SampleInterface_SampleMethod0_Params() {
}

SampleInterface_SampleMethod0_Params::~SampleInterface_SampleMethod0_Params() {
}


SampleInterface_SampleMethod0_ParamsPtr SampleInterface_SampleMethod0_Params::Clone() const {
  SampleInterface_SampleMethod0_ParamsPtr rv(New());
  return rv;
}


bool SampleInterface_SampleMethod0_Params::Equals(const SampleInterface_SampleMethod0_Params& other) const {
  return true;
}


size_t SampleInterface_SampleMethod0_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool SampleInterface_SampleMethod0_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::SampleInterface_SampleMethod0_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool SampleInterface_SampleMethod0_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::SampleInterface_SampleMethod0_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void SampleInterface_SampleMethod0_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::SampleInterface_SampleMethod0_Params_Data* input =
      static_cast<internal::SampleInterface_SampleMethod0_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const SampleInterface_SampleMethod0_Params& input) {
  size_t size = sizeof(internal::SampleInterface_SampleMethod0_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod0_Params* input,
    mojo::internal::Buffer* buf,
    internal::SampleInterface_SampleMethod0_Params_Data** output) {
  if (input) {
    internal::SampleInterface_SampleMethod0_Params_Data* result =
        internal::SampleInterface_SampleMethod0_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::SampleInterface_SampleMethod0_Params_Data* input,
                  SampleInterface_SampleMethod0_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}



// static
SampleInterface_SampleMethod2_ParamsPtr SampleInterface_SampleMethod2_Params::New() {
  SampleInterface_SampleMethod2_ParamsPtr rv;
  mojo::internal::StructHelper<SampleInterface_SampleMethod2_Params>::Initialize(&rv);
  return rv;
}

SampleInterface_SampleMethod2_Params::SampleInterface_SampleMethod2_Params() {
}

SampleInterface_SampleMethod2_Params::~SampleInterface_SampleMethod2_Params() {
}


SampleInterface_SampleMethod2_ParamsPtr SampleInterface_SampleMethod2_Params::Clone() const {
  SampleInterface_SampleMethod2_ParamsPtr rv(New());
  return rv;
}


bool SampleInterface_SampleMethod2_Params::Equals(const SampleInterface_SampleMethod2_Params& other) const {
  return true;
}


size_t SampleInterface_SampleMethod2_Params::GetSerializedSize() const {
  return GetSerializedSize_(*this);
}

bool SampleInterface_SampleMethod2_Params::Serialize(void* buf,
                                size_t buf_size,
                                size_t* bytes_written) {
  MOJO_DCHECK(buf);

  mojo::internal::FixedBuffer overlay_buf;
  overlay_buf.Initialize(buf, buf_size);

  internal::SampleInterface_SampleMethod2_Params_Data* output_ptr;
  auto err = Serialize_(this, &overlay_buf, &output_ptr);
  if (err != mojo::internal::ValidationError::NONE) {
    // TODO(vardhan): Once Serialize_() outputs handles that it serialized
    // (even partially, if there are failures), we should CHECK fail here if
    // handles are non-empty.
    MOJO_DLOG(ERROR) << "Could not serialize: " <<
        mojo::internal::ValidationErrorToString(err);

    if (bytes_written)
      *bytes_written = overlay_buf.BytesUsed();
    return false;
  }

  std::vector<mojo::Handle> handles;
  output_ptr->EncodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Serialize() does not support handles.";

  if (bytes_written)
    *bytes_written = overlay_buf.BytesUsed();
  return true;
}

bool SampleInterface_SampleMethod2_Params::Deserialize(void* buf, size_t buf_size) {
  MOJO_DCHECK(buf);

  mojo::internal::BoundsChecker checker(buf, buf_size, 0);

  std::string* err_str = nullptr;
#if !defined(NDEBUG)
  std::string err_str2;
  err_str = &err_str2;
#endif

  mojo::internal::ValidationError err =
      internal::SampleInterface_SampleMethod2_Params_Data::Validate(buf, &checker, err_str);
  if (err != mojo::internal::ValidationError::NONE) {
    MOJO_DLOG(ERROR) << "Deserialization error "
                     << mojo::internal::ValidationErrorToString(err)
                     << ": " << *err_str;
    return false;
  }

  DeserializeWithoutValidation(buf);
  return true;
}

// TODO(vardhan): Make this |buf| a |const void*| once deserialization becomes
// immutable.
void SampleInterface_SampleMethod2_Params::DeserializeWithoutValidation(void* buf) {
  MOJO_DCHECK(buf);

  internal::SampleInterface_SampleMethod2_Params_Data* input =
      static_cast<internal::SampleInterface_SampleMethod2_Params_Data*>(buf);
  std::vector<mojo::Handle> handles;
  input->DecodePointersAndHandles(&handles);
  MOJO_CHECK(handles.empty()) << "Deserialization does not support handles.";

  Deserialize_(input, this);
}

size_t GetSerializedSize_(const SampleInterface_SampleMethod2_Params& input) {
  size_t size = sizeof(internal::SampleInterface_SampleMethod2_Params_Data);
  return size;
}

mojo::internal::ValidationError Serialize_(
    SampleInterface_SampleMethod2_Params* input,
    mojo::internal::Buffer* buf,
    internal::SampleInterface_SampleMethod2_Params_Data** output) {
  if (input) {
    internal::SampleInterface_SampleMethod2_Params_Data* result =
        internal::SampleInterface_SampleMethod2_Params_Data::New(buf);
    *output = result;
  } else {
    *output = nullptr;
  }
  return mojo::internal::ValidationError::NONE;
}

void Deserialize_(internal::SampleInterface_SampleMethod2_Params_Data* input,
                  SampleInterface_SampleMethod2_Params* result) {
  if (input) {
    do {
      // NOTE: The memory backing |input| may has be smaller than
      // |sizeof(*input)| if the message comes from an older version.
    } while (false);
  }
}

}  // namespace sample
