// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_SYNC_H_
#define MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_SYNC_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/lib/synchronous_connector.h"
#include "mojo/services/sensors/interfaces/sensors.mojom-internal.h"
#include "mojo/services/sensors/interfaces/sensors.mojom-common.h"


namespace sensors {

// --- Synchronous interface declaration ---

class SensorListener_SynchronousProxy;
class SensorListener_Synchronous
  : public internal::SensorListener_Base {
 public:
  virtual ~SensorListener_Synchronous() override {}
  
  using Proxy_ = SensorListener_SynchronousProxy;
  virtual bool OnAccuracyChanged(
      int32_t in_accuracy)const= 0;
  virtual bool OnSensorChanged(
      SensorDataPtr in_data)const= 0;
};

class SensorListener_SynchronousProxy
    : public SensorListener_Synchronous {
 public:
  explicit SensorListener_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool OnAccuracyChanged(int32_t in_accuracy) const  override;
  bool OnSensorChanged(SensorDataPtr in_data) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

class SensorService_SynchronousProxy;
class SensorService_Synchronous
  : public internal::SensorService_Base {
 public:
  virtual ~SensorService_Synchronous() override {}
  
  using Proxy_ = SensorService_SynchronousProxy;
  virtual bool AddListener(
      SensorType in_type, mojo::InterfaceHandle<SensorListener> in_listener)const= 0;
};

class SensorService_SynchronousProxy
    : public SensorService_Synchronous {
 public:
  explicit SensorService_SynchronousProxy(
      mojo::internal::SynchronousConnector* connector,
      mojo::internal::MessageValidatorList&& validators);
  bool AddListener(SensorType in_type, mojo::InterfaceHandle<SensorListener> in_listener) const  override;

 private:
  // |connector_| is passed to us, and is not owned by us.
  mojo::internal::SynchronousConnector* const connector_;
  mojo::internal::MessageValidatorList const validators_;
};

}  // namespace sensors

#endif  // MOJO_SERVICES_SENSORS_INTERFACES_SENSORS_MOJOM_SYNC_H_
