// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/bindings/tests/validation_test_interfaces.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {
namespace test {

// --- Interface definitions ---

InterfaceAProxy::InterfaceAProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}

InterfaceAStub::InterfaceAStub()
    : sink_(nullptr),
      control_message_handler_(InterfaceA::Version_) {
}

InterfaceAStub::~InterfaceAStub() {}

bool InterfaceAStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  return false;
}

bool InterfaceAStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  return false;
}

class BoundsCheckTestInterface_Method0_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  BoundsCheckTestInterface_Method0_ForwardToCallback(
      const BoundsCheckTestInterface::Method0Callback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  BoundsCheckTestInterface::Method0Callback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(BoundsCheckTestInterface_Method0_ForwardToCallback);
};
bool BoundsCheckTestInterface_Method0_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::BoundsCheckTestInterface_Method0_ResponseParams_Data* params =
      reinterpret_cast<internal::BoundsCheckTestInterface_Method0_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  uint8_t p_param0 {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_param0 = params->param0;
  } while (false);
  callback_.Run(p_param0);
  return true;
}

BoundsCheckTestInterfaceProxy::BoundsCheckTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void BoundsCheckTestInterfaceProxy::Method0(
    uint8_t in_param0, const Method0Callback& callback) {
  size_t size = sizeof(internal::BoundsCheckTestInterface_Method0_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method0), size);

  internal::BoundsCheckTestInterface_Method0_Params_Data* params =
      internal::BoundsCheckTestInterface_Method0_Params_Data::New(builder.buffer());
  params->param0 = in_param0;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new BoundsCheckTestInterface_Method0_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void BoundsCheckTestInterfaceProxy::Method1(
    uint8_t in_param0) {
  size_t size = sizeof(internal::BoundsCheckTestInterface_Method1_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method1), size);

  internal::BoundsCheckTestInterface_Method1_Params_Data* params =
      internal::BoundsCheckTestInterface_Method1_Params_Data::New(builder.buffer());
  params->param0 = in_param0;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class BoundsCheckTestInterface_Method0_ProxyToResponder
    : public BoundsCheckTestInterface::Method0Callback::Runnable {
 public:
  ~BoundsCheckTestInterface_Method0_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "BoundsCheckTestInterface::Method0(p_param0, callback) "
        "was never run.";
  }

  BoundsCheckTestInterface_Method0_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(uint8_t in_param0) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(BoundsCheckTestInterface_Method0_ProxyToResponder);
};

void BoundsCheckTestInterface_Method0_ProxyToResponder::Run(
    uint8_t in_param0) const {
  size_t size = sizeof(internal::BoundsCheckTestInterface_Method0_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method0), size, request_id_);
  internal::BoundsCheckTestInterface_Method0_ResponseParams_Data* params =
      internal::BoundsCheckTestInterface_Method0_ResponseParams_Data::New(builder.buffer());
  params->param0 = in_param0;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

BoundsCheckTestInterfaceStub::BoundsCheckTestInterfaceStub()
    : sink_(nullptr),
      control_message_handler_(BoundsCheckTestInterface::Version_) {
}

BoundsCheckTestInterfaceStub::~BoundsCheckTestInterfaceStub() {}

bool BoundsCheckTestInterfaceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::BoundsCheckTestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::BoundsCheckTestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method0: {
      break;
    }
    case internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method1: {
      internal::BoundsCheckTestInterface_Method1_Params_Data* params =
          reinterpret_cast<internal::BoundsCheckTestInterface_Method1_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      uint8_t p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_param0 = params->param0;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method1(p_param0);
      return true;
    }
  }
  return false;
}

bool BoundsCheckTestInterfaceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::BoundsCheckTestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::BoundsCheckTestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method0: {
      internal::BoundsCheckTestInterface_Method0_Params_Data* params =
          reinterpret_cast<internal::BoundsCheckTestInterface_Method0_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      BoundsCheckTestInterface::Method0Callback::Runnable* runnable =
          new BoundsCheckTestInterface_Method0_ProxyToResponder(
              message->request_id(), responder);
      BoundsCheckTestInterface::Method0Callback callback(runnable);
      
      uint8_t p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_param0 = params->param0;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method0(p_param0, callback);
      return true;
    }
    case internal::BoundsCheckTestInterface_Base::MessageOrdinals::Method1: {
      break;
    }
  }
  return false;
}

class ConformanceTestInterface_Method12_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ConformanceTestInterface_Method12_ForwardToCallback(
      const ConformanceTestInterface::Method12Callback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  ConformanceTestInterface::Method12Callback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ConformanceTestInterface_Method12_ForwardToCallback);
};
bool ConformanceTestInterface_Method12_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::ConformanceTestInterface_Method12_ResponseParams_Data* params =
      reinterpret_cast<internal::ConformanceTestInterface_Method12_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  float p_param0 {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    p_param0 = params->param0;
  } while (false);
  callback_.Run(p_param0);
  return true;
}

ConformanceTestInterfaceProxy::ConformanceTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ConformanceTestInterfaceProxy::Method0(
    float in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method0_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method0), size);

  internal::ConformanceTestInterface_Method0_Params_Data* params =
      internal::ConformanceTestInterface_Method0_Params_Data::New(builder.buffer());
  params->param0 = in_param0;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method1(
    StructAPtr in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method1_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method1), size);

  internal::ConformanceTestInterface_Method1_Params_Data* params =
      internal::ConformanceTestInterface_Method1_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method1 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method2(
    StructBPtr in_param0, StructAPtr in_param1) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method2_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  size += in_param1.is_null()
              ? 0
              : GetSerializedSize_(*in_param1);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method2), size);

  internal::ConformanceTestInterface_Method2_Params_Data* params =
      internal::ConformanceTestInterface_Method2_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method2 request");
  }
  {Serialize_(in_param1.get(),
               builder.buffer(),
               &params->param1.ptr);
  }
  if (!params->param1.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param1 in ConformanceTestInterface.Method2 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method3(
    mojo::Array<bool> in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method3_Params_Data);
  size += GetSerializedSize_(in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method3), size);

  internal::ConformanceTestInterface_Method3_Params_Data* params =
      internal::ConformanceTestInterface_Method3_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_param0, builder.buffer(), &params->param0.ptr,
                          &param0_validate_params);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method3 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method4(
    StructCPtr in_param0, mojo::Array<uint8_t> in_param1) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method4_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  size += GetSerializedSize_(in_param1);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method4), size);

  internal::ConformanceTestInterface_Method4_Params_Data* params =
      internal::ConformanceTestInterface_Method4_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method4 request");
  }
  {
    const mojo::internal::ArrayValidateParams param1_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_param1, builder.buffer(), &params->param1.ptr,
                          &param1_validate_params);
  }
  if (!params->param1.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param1 in ConformanceTestInterface.Method4 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method5(
    StructEPtr in_param0, mojo::ScopedDataPipeProducerHandle in_param1) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method5_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method5), size);

  internal::ConformanceTestInterface_Method5_Params_Data* params =
      internal::ConformanceTestInterface_Method5_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method5 request");
  }
  params->param1 = in_param1.release();
  if (!params->param1.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid param1 in ConformanceTestInterface.Method5 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method6(
    mojo::Array<mojo::Array<uint8_t> > in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method6_Params_Data);
  size += GetSerializedSize_(in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method6), size);

  internal::ConformanceTestInterface_Method6_Params_Data* params =
      internal::ConformanceTestInterface_Method6_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_param0, builder.buffer(), &params->param0.ptr,
                          &param0_validate_params);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method6 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method7(
    StructFPtr in_param0, mojo::Array<mojo::Array<uint8_t> > in_param1) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method7_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  size += GetSerializedSize_(in_param1);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method7), size);

  internal::ConformanceTestInterface_Method7_Params_Data* params =
      internal::ConformanceTestInterface_Method7_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method7 request");
  }
  {
    const mojo::internal::ArrayValidateParams param1_validate_params(
      2, true, new mojo::internal::ArrayValidateParams(3, false, nullptr));mojo::SerializeArray_(&in_param1, builder.buffer(), &params->param1.ptr,
                          &param1_validate_params);
  }
  if (!params->param1.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param1 in ConformanceTestInterface.Method7 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method8(
    mojo::Array<mojo::Array<mojo::String> > in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method8_Params_Data);
  size += GetSerializedSize_(in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method8), size);

  internal::ConformanceTestInterface_Method8_Params_Data* params =
      internal::ConformanceTestInterface_Method8_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, true, new mojo::internal::ArrayValidateParams(0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr)));mojo::SerializeArray_(&in_param0, builder.buffer(), &params->param0.ptr,
                          &param0_validate_params);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method8 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method9(
    mojo::Array<mojo::Array<mojo::ScopedHandle> > in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method9_Params_Data);
  size += GetSerializedSize_(in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method9), size);

  internal::ConformanceTestInterface_Method9_Params_Data* params =
      internal::ConformanceTestInterface_Method9_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, true, nullptr));mojo::SerializeArray_(&in_param0, builder.buffer(), &params->param0.ptr,
                          &param0_validate_params);
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method10(
    mojo::Map<mojo::String, uint8_t> in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method10_Params_Data);
  size += GetSerializedSize_(in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method10), size);

  internal::ConformanceTestInterface_Method10_Params_Data* params =
      internal::ConformanceTestInterface_Method10_Params_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
        0, false, nullptr);mojo::SerializeMap_(
        &in_param0, builder.buffer(), &params->param0.ptr,
        &param0_validate_params);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method10 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method11(
    StructGPtr in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method11_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method11), size);

  internal::ConformanceTestInterface_Method11_Params_Data* params =
      internal::ConformanceTestInterface_Method11_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method11 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method12(
    float in_param0, const Method12Callback& callback) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method12_Params_Data);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method12), size);

  internal::ConformanceTestInterface_Method12_Params_Data* params =
      internal::ConformanceTestInterface_Method12_Params_Data::New(builder.buffer());
  params->param0 = in_param0;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new ConformanceTestInterface_Method12_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
void ConformanceTestInterfaceProxy::Method13(
    mojo::InterfaceHandle<InterfaceA> in_param0, uint32_t in_param1, mojo::InterfaceHandle<InterfaceA> in_param2) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method13_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method13), size);

  internal::ConformanceTestInterface_Method13_Params_Data* params =
      internal::ConformanceTestInterface_Method13_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_param0.Pass(),
                                        &params->param0);
  params->param1 = in_param1;
  mojo::internal::InterfaceHandleToData(in_param2.Pass(),
                                        &params->param2);
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method14(
    UnionAPtr in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method14_Params_Data);
  size += GetSerializedSize_(in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method14), size);

  internal::ConformanceTestInterface_Method14_Params_Data* params =
      internal::ConformanceTestInterface_Method14_Params_Data::New(builder.buffer());
  internal::UnionA_Data* param0_ptr = &params->param0;
  {
      SerializeUnion_(in_param0.get(),
                      builder.buffer(),
                      &param0_ptr);
  }
  if (params->param0.is_null()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method14 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ConformanceTestInterfaceProxy::Method15(
    StructHPtr in_param0) {
  size_t size = sizeof(internal::ConformanceTestInterface_Method15_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method15), size);

  internal::ConformanceTestInterface_Method15_Params_Data* params =
      internal::ConformanceTestInterface_Method15_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in ConformanceTestInterface.Method15 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class ConformanceTestInterface_Method12_ProxyToResponder
    : public ConformanceTestInterface::Method12Callback::Runnable {
 public:
  ~ConformanceTestInterface_Method12_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "ConformanceTestInterface::Method12(p_param0, callback) "
        "was never run.";
  }

  ConformanceTestInterface_Method12_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(float in_param0) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(ConformanceTestInterface_Method12_ProxyToResponder);
};

void ConformanceTestInterface_Method12_ProxyToResponder::Run(
    float in_param0) const {
  size_t size = sizeof(internal::ConformanceTestInterface_Method12_ResponseParams_Data);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::ConformanceTestInterface_Base::MessageOrdinals::Method12), size, request_id_);
  internal::ConformanceTestInterface_Method12_ResponseParams_Data* params =
      internal::ConformanceTestInterface_Method12_ResponseParams_Data::New(builder.buffer());
  params->param0 = in_param0;
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

ConformanceTestInterfaceStub::ConformanceTestInterfaceStub()
    : sink_(nullptr),
      control_message_handler_(ConformanceTestInterface::Version_) {
}

ConformanceTestInterfaceStub::~ConformanceTestInterfaceStub() {}

bool ConformanceTestInterfaceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::ConformanceTestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ConformanceTestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method0: {
      internal::ConformanceTestInterface_Method0_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method0_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      float p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_param0 = params->param0;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method0(p_param0);
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method1: {
      internal::ConformanceTestInterface_Method1_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method1_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      StructAPtr p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = StructA::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method1(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method2: {
      internal::ConformanceTestInterface_Method2_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method2_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      StructBPtr p_param0 {};
      StructAPtr p_param1 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = StructB::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
        if (params->param1.ptr) {
          p_param1 = StructA::New();
          Deserialize_(params->param1.ptr, p_param1.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method2(p_param0.Pass(), p_param1.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method3: {
      internal::ConformanceTestInterface_Method3_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method3_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::Array<bool> p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->param0.ptr, &p_param0);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method3(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method4: {
      internal::ConformanceTestInterface_Method4_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method4_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      StructCPtr p_param0 {};
      mojo::Array<uint8_t> p_param1 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = StructC::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
        Deserialize_(params->param1.ptr, &p_param1);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method4(p_param0.Pass(), p_param1.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method5: {
      internal::ConformanceTestInterface_Method5_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method5_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      StructEPtr p_param0 {};
      mojo::ScopedDataPipeProducerHandle p_param1 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = StructE::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
        p_param1.reset(mojo::internal::FetchAndReset(&params->param1));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method5(p_param0.Pass(), p_param1.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method6: {
      internal::ConformanceTestInterface_Method6_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method6_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::Array<mojo::Array<uint8_t> > p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->param0.ptr, &p_param0);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method6(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method7: {
      internal::ConformanceTestInterface_Method7_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method7_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      StructFPtr p_param0 {};
      mojo::Array<mojo::Array<uint8_t> > p_param1 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = StructF::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
        Deserialize_(params->param1.ptr, &p_param1);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method7(p_param0.Pass(), p_param1.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method8: {
      internal::ConformanceTestInterface_Method8_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method8_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::Array<mojo::Array<mojo::String> > p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->param0.ptr, &p_param0);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method8(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method9: {
      internal::ConformanceTestInterface_Method9_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method9_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::Array<mojo::Array<mojo::ScopedHandle> > p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->param0.ptr, &p_param0);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method9(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method10: {
      internal::ConformanceTestInterface_Method10_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method10_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::Map<mojo::String, uint8_t> p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->param0.ptr, &p_param0);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method10(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method11: {
      internal::ConformanceTestInterface_Method11_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method11_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      StructGPtr p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = StructG::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method11(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method12: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method13: {
      internal::ConformanceTestInterface_Method13_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method13_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<InterfaceA> p_param0 {};
      uint32_t p_param1 {};
      mojo::InterfaceHandle<InterfaceA> p_param2 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->param0, &p_param0);
        p_param1 = params->param1;
        mojo::internal::InterfaceDataToHandle(&params->param2, &p_param2);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method13(p_param0.Pass(), p_param1, p_param2.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method14: {
      internal::ConformanceTestInterface_Method14_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method14_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      UnionAPtr p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (!params->param0.is_null()) {
          p_param0 = UnionA::New();
          Deserialize_(&params->param0, p_param0.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method14(p_param0.Pass());
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method15: {
      internal::ConformanceTestInterface_Method15_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method15_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      StructHPtr p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = StructH::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method15(p_param0.Pass());
      return true;
    }
  }
  return false;
}

bool ConformanceTestInterfaceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::ConformanceTestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::ConformanceTestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method0: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method1: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method2: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method3: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method4: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method5: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method6: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method7: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method8: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method9: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method10: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method11: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method12: {
      internal::ConformanceTestInterface_Method12_Params_Data* params =
          reinterpret_cast<internal::ConformanceTestInterface_Method12_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      ConformanceTestInterface::Method12Callback::Runnable* runnable =
          new ConformanceTestInterface_Method12_ProxyToResponder(
              message->request_id(), responder);
      ConformanceTestInterface::Method12Callback callback(runnable);
      
      float p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        p_param0 = params->param0;
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method12(p_param0, callback);
      return true;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method13: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method14: {
      break;
    }
    case internal::ConformanceTestInterface_Base::MessageOrdinals::Method15: {
      break;
    }
  }
  return false;
}

class IntegrationTestInterface_Method0_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IntegrationTestInterface_Method0_ForwardToCallback(
      const IntegrationTestInterface::Method0Callback& callback)
      : callback_(callback) {
  }
  bool Accept(mojo::Message* message) override;
 private:
  IntegrationTestInterface::Method0Callback callback_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(IntegrationTestInterface_Method0_ForwardToCallback);
};
bool IntegrationTestInterface_Method0_ForwardToCallback::Accept(
    mojo::Message* message) {
  internal::IntegrationTestInterface_Method0_ResponseParams_Data* params =
      reinterpret_cast<internal::IntegrationTestInterface_Method0_ResponseParams_Data*>(
          message->mutable_payload());

  params->DecodePointersAndHandles(message->mutable_handles());
  
  mojo::Array<uint8_t> p_param0 {};
  do {
    // NOTE: The memory backing |params| may has be smaller than
    // |sizeof(*params)| if the message comes from an older version.
    Deserialize_(params->param0.ptr, &p_param0);
  } while (false);
  callback_.Run(p_param0.Pass());
  return true;
}

IntegrationTestInterfaceProxy::IntegrationTestInterfaceProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void IntegrationTestInterfaceProxy::Method0(
    BasicStructPtr in_param0, const Method0Callback& callback) {
  size_t size = sizeof(internal::IntegrationTestInterface_Method0_Params_Data);
  size += in_param0.is_null()
              ? 0
              : GetSerializedSize_(*in_param0);
  mojo::RequestMessageBuilder builder(
      static_cast<uint32_t>(internal::IntegrationTestInterface_Base::MessageOrdinals::Method0), size);

  internal::IntegrationTestInterface_Method0_Params_Data* params =
      internal::IntegrationTestInterface_Method0_Params_Data::New(builder.buffer());
  {Serialize_(in_param0.get(),
               builder.buffer(),
               &params->param0.ptr);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in IntegrationTestInterface.Method0 request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  mojo::MessageReceiver* responder =
      new IntegrationTestInterface_Method0_ForwardToCallback(callback);
  if (!receiver_->AcceptWithResponder(builder.message(), responder))
    delete responder;
}
// This class implements a method's response callback: it serializes the
// response args into a mojo message and passes it to the MessageReceiver it
// was created with.
class IntegrationTestInterface_Method0_ProxyToResponder
    : public IntegrationTestInterface::Method0Callback::Runnable {
 public:
  ~IntegrationTestInterface_Method0_ProxyToResponder() override {
    // Is the Mojo application destroying the callback without running it
    // and without first closing the pipe?
    bool callback_was_dropped = responder_ && responder_->IsValid();
    // If the Callback was dropped then deleting the responder will close
    // the pipe so the calling application knows to stop waiting for a reply.
    delete responder_;
    MOJO_DCHECK(!callback_was_dropped)  << "The callback passed to "
        "IntegrationTestInterface::Method0(p_param0.Pass(), callback) "
        "was never run.";
  }

  IntegrationTestInterface_Method0_ProxyToResponder(
      uint64_t request_id,
      mojo::MessageReceiverWithStatus* responder)
      : request_id_(request_id),
        responder_(responder) {
  }

  void Run(mojo::Array<uint8_t> in_param0) const override;

 private:
  uint64_t request_id_;
  mutable mojo::MessageReceiverWithStatus* responder_;
  MOJO_DISALLOW_COPY_AND_ASSIGN(IntegrationTestInterface_Method0_ProxyToResponder);
};

void IntegrationTestInterface_Method0_ProxyToResponder::Run(
    mojo::Array<uint8_t> in_param0) const {
  size_t size = sizeof(internal::IntegrationTestInterface_Method0_ResponseParams_Data);
  size += GetSerializedSize_(in_param0);
  mojo::ResponseMessageBuilder builder(
      static_cast<uint32_t>(internal::IntegrationTestInterface_Base::MessageOrdinals::Method0), size, request_id_);
  internal::IntegrationTestInterface_Method0_ResponseParams_Data* params =
      internal::IntegrationTestInterface_Method0_ResponseParams_Data::New(builder.buffer());
  {
    const mojo::internal::ArrayValidateParams param0_validate_params(
      0, false, nullptr);mojo::SerializeArray_(&in_param0, builder.buffer(), &params->param0.ptr,
                          &param0_validate_params);
  }
  if (!params->param0.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null param0 in IntegrationTestInterface.Method0 response");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = responder_->Accept(builder.message());
  MOJO_ALLOW_UNUSED_LOCAL(ok);
  // TODO(darin): !ok returned here indicates a malformed message, and that may
  // be good reason to close the connection. However, we don't have a way to do
  // that from here. We should add a way.
  delete responder_;
  responder_ = nullptr;
}

IntegrationTestInterfaceStub::IntegrationTestInterfaceStub()
    : sink_(nullptr),
      control_message_handler_(IntegrationTestInterface::Version_) {
}

IntegrationTestInterfaceStub::~IntegrationTestInterfaceStub() {}

bool IntegrationTestInterfaceStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::IntegrationTestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IntegrationTestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IntegrationTestInterface_Base::MessageOrdinals::Method0: {
      break;
    }
  }
  return false;
}

bool IntegrationTestInterfaceStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::IntegrationTestInterface_Base::MessageOrdinals method_ordinal =
      static_cast<internal::IntegrationTestInterface_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::IntegrationTestInterface_Base::MessageOrdinals::Method0: {
      internal::IntegrationTestInterface_Method0_Params_Data* params =
          reinterpret_cast<internal::IntegrationTestInterface_Method0_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      IntegrationTestInterface::Method0Callback::Runnable* runnable =
          new IntegrationTestInterface_Method0_ProxyToResponder(
              message->request_id(), responder);
      IntegrationTestInterface::Method0Callback callback(runnable);
      
      BasicStructPtr p_param0 {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        if (params->param0.ptr) {
          p_param0 = BasicStruct::New();
          Deserialize_(params->param0.ptr, p_param0.get());
        }
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Method0(p_param0.Pass(), callback);
      return true;
    }
  }
  return false;
}

}  // namespace test
}  // namespace mojo
