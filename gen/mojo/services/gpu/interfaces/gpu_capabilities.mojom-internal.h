// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_GPU_INTERFACES_GPU_CAPABILITIES_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_GPU_INTERFACES_GPU_CAPABILITIES_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace mojo {

class GpuShaderPrecision;
class GpuPerStagePrecisions;
class GpuCapabilities;


namespace internal {

class GpuShaderPrecision_Data;
class GpuPerStagePrecisions_Data;
class GpuCapabilities_Data;



#pragma pack(push, 1)


class GpuShaderPrecision_Data {
 public:
  static GpuShaderPrecision_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t min_range;
  int32_t max_range;
  int32_t precision;
  uint8_t padfinal_[4];

 private:
  GpuShaderPrecision_Data();
  ~GpuShaderPrecision_Data() = delete;
};
static_assert(sizeof(GpuShaderPrecision_Data) == 24,
              "Bad sizeof(GpuShaderPrecision_Data)");

class GpuPerStagePrecisions_Data {
 public:
  static GpuPerStagePrecisions_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::GpuShaderPrecision_Data> low_int;
  mojo::internal::StructPointer<internal::GpuShaderPrecision_Data> medium_int;
  mojo::internal::StructPointer<internal::GpuShaderPrecision_Data> high_int;
  mojo::internal::StructPointer<internal::GpuShaderPrecision_Data> low_float;
  mojo::internal::StructPointer<internal::GpuShaderPrecision_Data> medium_float;
  mojo::internal::StructPointer<internal::GpuShaderPrecision_Data> high_float;

 private:
  GpuPerStagePrecisions_Data();
  ~GpuPerStagePrecisions_Data() = delete;
};
static_assert(sizeof(GpuPerStagePrecisions_Data) == 56,
              "Bad sizeof(GpuPerStagePrecisions_Data)");

class GpuCapabilities_Data {
 public:
  static GpuCapabilities_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::StructPointer<internal::GpuPerStagePrecisions_Data> vertex_shader_precisions;
  mojo::internal::StructPointer<internal::GpuPerStagePrecisions_Data> fragment_shader_precisions;
  int32_t max_combined_texture_image_units;
  int32_t max_cube_map_texture_size;
  int32_t max_fragment_uniform_vectors;
  int32_t max_renderbuffer_size;
  int32_t max_texture_image_units;
  int32_t max_texture_size;
  int32_t max_varying_vectors;
  int32_t max_vertex_attribs;
  int32_t max_vertex_texture_image_units;
  int32_t max_vertex_uniform_vectors;
  int32_t num_compressed_texture_formats;
  int32_t num_shader_binary_formats;
  int32_t bind_generates_resource_chromium;
  uint8_t post_sub_buffer : 1;
  uint8_t egl_image_external : 1;
  uint8_t texture_format_bgra8888 : 1;
  uint8_t texture_format_etc1 : 1;
  uint8_t texture_format_etc1_npot : 1;
  uint8_t texture_rectangle : 1;
  uint8_t iosurface : 1;
  uint8_t texture_usage : 1;
  uint8_t texture_storage : 1;
  uint8_t discard_framebuffer : 1;
  uint8_t sync_query : 1;
  uint8_t image : 1;
  uint8_t future_sync_points : 1;
  uint8_t blend_equation_advanced : 1;
  uint8_t blend_equation_advanced_coherent : 1;
  uint8_t padfinal_[2];

 private:
  GpuCapabilities_Data();
  ~GpuCapabilities_Data() = delete;
};
static_assert(sizeof(GpuCapabilities_Data) == 80,
              "Bad sizeof(GpuCapabilities_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace mojo

#endif  // MOJO_SERVICES_GPU_INTERFACES_GPU_CAPABILITIES_MOJOM_INTERNAL_H_
