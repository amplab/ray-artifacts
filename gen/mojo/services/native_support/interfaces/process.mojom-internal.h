// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_INTERNAL_H_
#define MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_INTERNAL_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/union_accessor.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/services/files/interfaces/file.mojom-internal.h"
#include "mojo/services/files/interfaces/types.mojom-internal.h"

namespace mojo {
namespace internal {
class BoundsChecker;
}
}
namespace native_support {



namespace internal {




#pragma pack(push, 1)



class Process_Spawn_Params_Data {
 public:
  static Process_Spawn_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<uint8_t> path;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<uint8_t>*> argv;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<uint8_t>*> envp;
  mojo::internal::Interface_Data stdin_file;
  mojo::internal::Interface_Data stdout_file;
  mojo::internal::Interface_Data stderr_file;
  mojo::MessagePipeHandle process_controller;
  uint8_t padfinal_[4];

 private:
  Process_Spawn_Params_Data();
  ~Process_Spawn_Params_Data() = delete;
};
static_assert(sizeof(Process_Spawn_Params_Data) == 64,
              "Bad sizeof(Process_Spawn_Params_Data)");

class Process_Spawn_ResponseParams_Data {
 public:
  static Process_Spawn_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Process_Spawn_ResponseParams_Data();
  ~Process_Spawn_ResponseParams_Data() = delete;
};
static_assert(sizeof(Process_Spawn_ResponseParams_Data) == 16,
              "Bad sizeof(Process_Spawn_ResponseParams_Data)");


class Process_SpawnWithTerminal_Params_Data {
 public:
  static Process_SpawnWithTerminal_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  mojo::internal::ArrayPointer<uint8_t> path;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<uint8_t>*> argv;
  mojo::internal::ArrayPointer<mojo::internal::Array_Data<uint8_t>*> envp;
  mojo::internal::Interface_Data terminal_file;
  mojo::MessagePipeHandle process_controller;
  uint8_t padfinal_[4];

 private:
  Process_SpawnWithTerminal_Params_Data();
  ~Process_SpawnWithTerminal_Params_Data() = delete;
};
static_assert(sizeof(Process_SpawnWithTerminal_Params_Data) == 48,
              "Bad sizeof(Process_SpawnWithTerminal_Params_Data)");

class Process_SpawnWithTerminal_ResponseParams_Data {
 public:
  static Process_SpawnWithTerminal_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  Process_SpawnWithTerminal_ResponseParams_Data();
  ~Process_SpawnWithTerminal_ResponseParams_Data() = delete;
};
static_assert(sizeof(Process_SpawnWithTerminal_ResponseParams_Data) == 16,
              "Bad sizeof(Process_SpawnWithTerminal_ResponseParams_Data)");


class ProcessController_Wait_Params_Data {
 public:
  static ProcessController_Wait_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;

 private:
  ProcessController_Wait_Params_Data();
  ~ProcessController_Wait_Params_Data() = delete;
};
static_assert(sizeof(ProcessController_Wait_Params_Data) == 8,
              "Bad sizeof(ProcessController_Wait_Params_Data)");

class ProcessController_Wait_ResponseParams_Data {
 public:
  static ProcessController_Wait_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  int32_t exit_status;

 private:
  ProcessController_Wait_ResponseParams_Data();
  ~ProcessController_Wait_ResponseParams_Data() = delete;
};
static_assert(sizeof(ProcessController_Wait_ResponseParams_Data) == 16,
              "Bad sizeof(ProcessController_Wait_ResponseParams_Data)");


class ProcessController_Kill_Params_Data {
 public:
  static ProcessController_Kill_Params_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t signal;
  uint8_t padfinal_[4];

 private:
  ProcessController_Kill_Params_Data();
  ~ProcessController_Kill_Params_Data() = delete;
};
static_assert(sizeof(ProcessController_Kill_Params_Data) == 16,
              "Bad sizeof(ProcessController_Kill_Params_Data)");

class ProcessController_Kill_ResponseParams_Data {
 public:
  static ProcessController_Kill_ResponseParams_Data* New(mojo::internal::Buffer* buf);

  static mojo::internal::ValidationError Validate(
      const void* data,
      mojo::internal::BoundsChecker* bounds_checker,
      std::string* err);

  void EncodePointersAndHandles(std::vector<mojo::Handle>* handles);
  void DecodePointersAndHandles(std::vector<mojo::Handle>* handles);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  ProcessController_Kill_ResponseParams_Data();
  ~ProcessController_Kill_ResponseParams_Data() = delete;
};
static_assert(sizeof(ProcessController_Kill_ResponseParams_Data) == 16,
              "Bad sizeof(ProcessController_Kill_ResponseParams_Data)");


#pragma pack(pop)

}  // namespace internal
}  // namespace native_support

#endif  // MOJO_SERVICES_NATIVE_SUPPORT_INTERFACES_PROCESS_MOJOM_INTERNAL_H_
