// NOTE: This file was generated by the Mojo bindings generator.
#ifndef MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_FACTORY_MOJOM_COMMON_H_
#define MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_FACTORY_MOJOM_COMMON_H_

#include <stdint.h>
#include <iosfwd>

#include "mojo/public/cpp/bindings/array.h"
#include "mojo/public/cpp/bindings/callback.h"
#include "mojo/public/cpp/bindings/interface_handle.h"
#include "mojo/public/cpp/bindings/interface_request.h"
#include "mojo/public/cpp/bindings/map.h"
#include "mojo/public/cpp/bindings/message_validator.h"
#include "mojo/public/cpp/bindings/string.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/system/buffer.h"
#include "mojo/public/cpp/system/data_pipe.h"
#include "mojo/public/cpp/system/handle.h"
#include "mojo/public/cpp/system/message_pipe.h"
#include "mojo/public/interfaces/bindings/tests/sample_factory.mojom-internal.h"
#include "mojo/public/interfaces/bindings/tests/sample_import.mojom-common.h"
namespace sample {

// --- Interface Forward Declarations ---
class NamedObject;
class NamedObjectRequestValidator;
class NamedObjectResponseValidator;
class NamedObject_Synchronous;
class Factory;
class FactoryRequestValidator;
class FactoryResponseValidator;
class Factory_Synchronous;

// --- Struct Forward Declarations ---
class Request;

using RequestPtr = mojo::StructPtr<Request>;


class Response;

using ResponsePtr = mojo::StructPtr<Response>;



// --- Union Forward Declarations ---

// --- Enums Declarations ---

// --- Constants ---

// --- Interface declarations ---
namespace internal {
class NamedObject_Base {
 public:
  static const char Name_[];
  static const uint32_t Version_ = 0;

  using RequestValidator_ = NamedObjectRequestValidator;
  using ResponseValidator_ = NamedObjectResponseValidator;
  using Synchronous_ = NamedObject_Synchronous;
  enum class MessageOrdinals : uint32_t {
    SetName = 0,
    GetName = 1,
  };


  virtual ~NamedObject_Base() {}
};

}  // namespace internal

// Async interface declaration

class NamedObjectProxy;
class NamedObjectStub;
class NamedObject_Synchronous;

class NamedObjectRequestValidator;
class NamedObjectResponseValidator;

class NamedObject : public internal::NamedObject_Base {
 public:
  virtual ~NamedObject() override {}

  using Proxy_ = NamedObjectProxy;
  using Stub_ = NamedObjectStub;
  virtual void SetName(const mojo::String& name) = 0;
  using GetNameCallback = mojo::Callback<void(mojo::String)>;
  virtual void GetName(const GetNameCallback& callback) = 0;
};

namespace internal {
class Factory_Base {
 public:
  static const uint32_t Version_ = 0;

  using RequestValidator_ = FactoryRequestValidator;
  using ResponseValidator_ = FactoryResponseValidator;
  using Synchronous_ = Factory_Synchronous;
  enum class MessageOrdinals : uint32_t {
    DoStuff = 0,
    DoStuff2 = 1,
    CreateNamedObject = 2,
    RequestImportedInterface = 3,
    TakeImportedInterface = 4,
  };


  virtual ~Factory_Base() {}
};

}  // namespace internal

// Async interface declaration

class FactoryProxy;
class FactoryStub;
class Factory_Synchronous;

class FactoryRequestValidator;
class FactoryResponseValidator;

class Factory : public internal::Factory_Base {
 public:
  virtual ~Factory() override {}

  using Proxy_ = FactoryProxy;
  using Stub_ = FactoryStub;
  using DoStuffCallback = mojo::Callback<void(ResponsePtr, mojo::String)>;
  virtual void DoStuff(RequestPtr request, mojo::ScopedMessagePipeHandle pipe, const DoStuffCallback& callback) = 0;
  using DoStuff2Callback = mojo::Callback<void(mojo::String)>;
  virtual void DoStuff2(mojo::ScopedDataPipeConsumerHandle pipe, const DoStuff2Callback& callback) = 0;
  virtual void CreateNamedObject(mojo::InterfaceRequest<NamedObject> obj) = 0;
  using RequestImportedInterfaceCallback = mojo::Callback<void(mojo::InterfaceRequest<imported::ImportedInterface>)>;
  virtual void RequestImportedInterface(mojo::InterfaceRequest<imported::ImportedInterface> obj, const RequestImportedInterfaceCallback& callback) = 0;
  using TakeImportedInterfaceCallback = mojo::Callback<void(mojo::InterfaceHandle<imported::ImportedInterface>)>;
  virtual void TakeImportedInterface(mojo::InterfaceHandle<imported::ImportedInterface> obj, const TakeImportedInterfaceCallback& callback) = 0;
};

}  // namespace sample

// --- Internal Template Specializations ---

namespace mojo {
namespace internal {
template <>
struct WrapperTraits<sample::RequestPtr, true, false> {
  using DataType = sample::internal::Request_Data*;
};
template <>
struct WrapperTraits<sample::ResponsePtr, true, false> {
  using DataType = sample::internal::Response_Data*;
};

}  // internal
}  // mojo
namespace sample {

// --- Interface Request Validators ---
class NamedObjectRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class FactoryRequestValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface Response Validators ---
class NamedObjectResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};

class FactoryResponseValidator
    : public mojo::internal::MessageValidator {
 public:
  mojo::internal::ValidationError Validate(const mojo::Message* message,
                                           std::string* err) override;
};


// --- Interface enum operators ---

// --- Unions ---
// Unions must be declared first because they can be members of structs.

// --- Inlined structs ---

// --- Non-inlined structs ---
class Request {
 public:
  using Data_ = internal::Request_Data;

  static RequestPtr New();

  template <typename U>
  static RequestPtr From(const U& u) {
    return mojo::TypeConverter<RequestPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Request>::Convert(*this);
  }

  Request();
  ~Request();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Request& other) const;

  int32_t x;
  mojo::ScopedMessagePipeHandle pipe;
  mojo::Array<mojo::ScopedMessagePipeHandle> more_pipes;
  mojo::InterfaceHandle<imported::ImportedInterface> obj;
};


class Response {
 public:
  using Data_ = internal::Response_Data;

  static ResponsePtr New();

  template <typename U>
  static ResponsePtr From(const U& u) {
    return mojo::TypeConverter<ResponsePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Response>::Convert(*this);
  }

  Response();
  ~Response();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Response& other) const;

  int32_t x;
  mojo::ScopedMessagePipeHandle pipe;
};



// --- Struct serialization helpers ---
size_t GetSerializedSize_(const Request& input);
mojo::internal::ValidationError Serialize_(
    Request* input,
    mojo::internal::Buffer* buffer,
    internal::Request_Data** output);
void Deserialize_(internal::Request_Data* input,
                  Request* output);

size_t GetSerializedSize_(const Response& input);
mojo::internal::ValidationError Serialize_(
    Response* input,
    mojo::internal::Buffer* buffer,
    internal::Response_Data** output);
void Deserialize_(internal::Response_Data* input,
                  Response* output);


// --- Union serialization helpers ---

// --- Request and response parameter structs for Interface methods ---
      

class NamedObject_SetName_Params;

using NamedObject_SetName_ParamsPtr = mojo::InlinedStructPtr<NamedObject_SetName_Params>;


size_t GetSerializedSize_(const NamedObject_SetName_Params& input);
mojo::internal::ValidationError Serialize_(
    NamedObject_SetName_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NamedObject_SetName_Params_Data** output);
void Deserialize_(internal::NamedObject_SetName_Params_Data* input,
                  NamedObject_SetName_Params* output);

class NamedObject_SetName_Params {
 public:
  using Data_ = internal::NamedObject_SetName_Params_Data;

  static NamedObject_SetName_ParamsPtr New();

  template <typename U>
  static NamedObject_SetName_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NamedObject_SetName_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NamedObject_SetName_Params>::Convert(*this);
  }

  NamedObject_SetName_Params();
  ~NamedObject_SetName_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NamedObject_SetName_ParamsPtr Clone() const;
  bool Equals(const NamedObject_SetName_Params& other) const;

  mojo::String name;
};




class NamedObject_GetName_Params;

using NamedObject_GetName_ParamsPtr = mojo::InlinedStructPtr<NamedObject_GetName_Params>;


size_t GetSerializedSize_(const NamedObject_GetName_Params& input);
mojo::internal::ValidationError Serialize_(
    NamedObject_GetName_Params* input,
    mojo::internal::Buffer* buffer,
    internal::NamedObject_GetName_Params_Data** output);
void Deserialize_(internal::NamedObject_GetName_Params_Data* input,
                  NamedObject_GetName_Params* output);

class NamedObject_GetName_Params {
 public:
  using Data_ = internal::NamedObject_GetName_Params_Data;

  static NamedObject_GetName_ParamsPtr New();

  template <typename U>
  static NamedObject_GetName_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<NamedObject_GetName_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NamedObject_GetName_Params>::Convert(*this);
  }

  NamedObject_GetName_Params();
  ~NamedObject_GetName_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NamedObject_GetName_ParamsPtr Clone() const;
  bool Equals(const NamedObject_GetName_Params& other) const;

};



class NamedObject_GetName_ResponseParams;

using NamedObject_GetName_ResponseParamsPtr = mojo::InlinedStructPtr<NamedObject_GetName_ResponseParams>;


size_t GetSerializedSize_(const NamedObject_GetName_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    NamedObject_GetName_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::NamedObject_GetName_ResponseParams_Data** output);
void Deserialize_(internal::NamedObject_GetName_ResponseParams_Data* input,
                  NamedObject_GetName_ResponseParams* output);

class NamedObject_GetName_ResponseParams {
 public:
  using Data_ = internal::NamedObject_GetName_ResponseParams_Data;

  static NamedObject_GetName_ResponseParamsPtr New();

  template <typename U>
  static NamedObject_GetName_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<NamedObject_GetName_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NamedObject_GetName_ResponseParams>::Convert(*this);
  }

  NamedObject_GetName_ResponseParams();
  ~NamedObject_GetName_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  NamedObject_GetName_ResponseParamsPtr Clone() const;
  bool Equals(const NamedObject_GetName_ResponseParams& other) const;

  mojo::String name;
};


      

class Factory_DoStuff_Params;

using Factory_DoStuff_ParamsPtr = mojo::StructPtr<Factory_DoStuff_Params>;


size_t GetSerializedSize_(const Factory_DoStuff_Params& input);
mojo::internal::ValidationError Serialize_(
    Factory_DoStuff_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_DoStuff_Params_Data** output);
void Deserialize_(internal::Factory_DoStuff_Params_Data* input,
                  Factory_DoStuff_Params* output);

class Factory_DoStuff_Params {
 public:
  using Data_ = internal::Factory_DoStuff_Params_Data;

  static Factory_DoStuff_ParamsPtr New();

  template <typename U>
  static Factory_DoStuff_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_DoStuff_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_DoStuff_Params>::Convert(*this);
  }

  Factory_DoStuff_Params();
  ~Factory_DoStuff_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_DoStuff_Params& other) const;

  RequestPtr request;
  mojo::ScopedMessagePipeHandle pipe;
};



class Factory_DoStuff_ResponseParams;

using Factory_DoStuff_ResponseParamsPtr = mojo::StructPtr<Factory_DoStuff_ResponseParams>;


size_t GetSerializedSize_(const Factory_DoStuff_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Factory_DoStuff_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_DoStuff_ResponseParams_Data** output);
void Deserialize_(internal::Factory_DoStuff_ResponseParams_Data* input,
                  Factory_DoStuff_ResponseParams* output);

class Factory_DoStuff_ResponseParams {
 public:
  using Data_ = internal::Factory_DoStuff_ResponseParams_Data;

  static Factory_DoStuff_ResponseParamsPtr New();

  template <typename U>
  static Factory_DoStuff_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_DoStuff_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_DoStuff_ResponseParams>::Convert(*this);
  }

  Factory_DoStuff_ResponseParams();
  ~Factory_DoStuff_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_DoStuff_ResponseParams& other) const;

  ResponsePtr response;
  mojo::String text;
};



class Factory_DoStuff2_Params;

using Factory_DoStuff2_ParamsPtr = mojo::StructPtr<Factory_DoStuff2_Params>;


size_t GetSerializedSize_(const Factory_DoStuff2_Params& input);
mojo::internal::ValidationError Serialize_(
    Factory_DoStuff2_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_DoStuff2_Params_Data** output);
void Deserialize_(internal::Factory_DoStuff2_Params_Data* input,
                  Factory_DoStuff2_Params* output);

class Factory_DoStuff2_Params {
 public:
  using Data_ = internal::Factory_DoStuff2_Params_Data;

  static Factory_DoStuff2_ParamsPtr New();

  template <typename U>
  static Factory_DoStuff2_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_DoStuff2_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_DoStuff2_Params>::Convert(*this);
  }

  Factory_DoStuff2_Params();
  ~Factory_DoStuff2_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_DoStuff2_Params& other) const;

  mojo::ScopedDataPipeConsumerHandle pipe;
};



class Factory_DoStuff2_ResponseParams;

using Factory_DoStuff2_ResponseParamsPtr = mojo::InlinedStructPtr<Factory_DoStuff2_ResponseParams>;


size_t GetSerializedSize_(const Factory_DoStuff2_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Factory_DoStuff2_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_DoStuff2_ResponseParams_Data** output);
void Deserialize_(internal::Factory_DoStuff2_ResponseParams_Data* input,
                  Factory_DoStuff2_ResponseParams* output);

class Factory_DoStuff2_ResponseParams {
 public:
  using Data_ = internal::Factory_DoStuff2_ResponseParams_Data;

  static Factory_DoStuff2_ResponseParamsPtr New();

  template <typename U>
  static Factory_DoStuff2_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_DoStuff2_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_DoStuff2_ResponseParams>::Convert(*this);
  }

  Factory_DoStuff2_ResponseParams();
  ~Factory_DoStuff2_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  Factory_DoStuff2_ResponseParamsPtr Clone() const;
  bool Equals(const Factory_DoStuff2_ResponseParams& other) const;

  mojo::String text;
};



class Factory_CreateNamedObject_Params;

using Factory_CreateNamedObject_ParamsPtr = mojo::StructPtr<Factory_CreateNamedObject_Params>;


size_t GetSerializedSize_(const Factory_CreateNamedObject_Params& input);
mojo::internal::ValidationError Serialize_(
    Factory_CreateNamedObject_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_CreateNamedObject_Params_Data** output);
void Deserialize_(internal::Factory_CreateNamedObject_Params_Data* input,
                  Factory_CreateNamedObject_Params* output);

class Factory_CreateNamedObject_Params {
 public:
  using Data_ = internal::Factory_CreateNamedObject_Params_Data;

  static Factory_CreateNamedObject_ParamsPtr New();

  template <typename U>
  static Factory_CreateNamedObject_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_CreateNamedObject_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_CreateNamedObject_Params>::Convert(*this);
  }

  Factory_CreateNamedObject_Params();
  ~Factory_CreateNamedObject_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_CreateNamedObject_Params& other) const;

  mojo::InterfaceRequest<NamedObject> obj;
};




class Factory_RequestImportedInterface_Params;

using Factory_RequestImportedInterface_ParamsPtr = mojo::StructPtr<Factory_RequestImportedInterface_Params>;


size_t GetSerializedSize_(const Factory_RequestImportedInterface_Params& input);
mojo::internal::ValidationError Serialize_(
    Factory_RequestImportedInterface_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_RequestImportedInterface_Params_Data** output);
void Deserialize_(internal::Factory_RequestImportedInterface_Params_Data* input,
                  Factory_RequestImportedInterface_Params* output);

class Factory_RequestImportedInterface_Params {
 public:
  using Data_ = internal::Factory_RequestImportedInterface_Params_Data;

  static Factory_RequestImportedInterface_ParamsPtr New();

  template <typename U>
  static Factory_RequestImportedInterface_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_RequestImportedInterface_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_RequestImportedInterface_Params>::Convert(*this);
  }

  Factory_RequestImportedInterface_Params();
  ~Factory_RequestImportedInterface_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_RequestImportedInterface_Params& other) const;

  mojo::InterfaceRequest<imported::ImportedInterface> obj;
};



class Factory_RequestImportedInterface_ResponseParams;

using Factory_RequestImportedInterface_ResponseParamsPtr = mojo::StructPtr<Factory_RequestImportedInterface_ResponseParams>;


size_t GetSerializedSize_(const Factory_RequestImportedInterface_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Factory_RequestImportedInterface_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_RequestImportedInterface_ResponseParams_Data** output);
void Deserialize_(internal::Factory_RequestImportedInterface_ResponseParams_Data* input,
                  Factory_RequestImportedInterface_ResponseParams* output);

class Factory_RequestImportedInterface_ResponseParams {
 public:
  using Data_ = internal::Factory_RequestImportedInterface_ResponseParams_Data;

  static Factory_RequestImportedInterface_ResponseParamsPtr New();

  template <typename U>
  static Factory_RequestImportedInterface_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_RequestImportedInterface_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_RequestImportedInterface_ResponseParams>::Convert(*this);
  }

  Factory_RequestImportedInterface_ResponseParams();
  ~Factory_RequestImportedInterface_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_RequestImportedInterface_ResponseParams& other) const;

  mojo::InterfaceRequest<imported::ImportedInterface> obj;
};



class Factory_TakeImportedInterface_Params;

using Factory_TakeImportedInterface_ParamsPtr = mojo::StructPtr<Factory_TakeImportedInterface_Params>;


size_t GetSerializedSize_(const Factory_TakeImportedInterface_Params& input);
mojo::internal::ValidationError Serialize_(
    Factory_TakeImportedInterface_Params* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_TakeImportedInterface_Params_Data** output);
void Deserialize_(internal::Factory_TakeImportedInterface_Params_Data* input,
                  Factory_TakeImportedInterface_Params* output);

class Factory_TakeImportedInterface_Params {
 public:
  using Data_ = internal::Factory_TakeImportedInterface_Params_Data;

  static Factory_TakeImportedInterface_ParamsPtr New();

  template <typename U>
  static Factory_TakeImportedInterface_ParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_TakeImportedInterface_ParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_TakeImportedInterface_Params>::Convert(*this);
  }

  Factory_TakeImportedInterface_Params();
  ~Factory_TakeImportedInterface_Params();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_TakeImportedInterface_Params& other) const;

  mojo::InterfaceHandle<imported::ImportedInterface> obj;
};



class Factory_TakeImportedInterface_ResponseParams;

using Factory_TakeImportedInterface_ResponseParamsPtr = mojo::StructPtr<Factory_TakeImportedInterface_ResponseParams>;


size_t GetSerializedSize_(const Factory_TakeImportedInterface_ResponseParams& input);
mojo::internal::ValidationError Serialize_(
    Factory_TakeImportedInterface_ResponseParams* input,
    mojo::internal::Buffer* buffer,
    internal::Factory_TakeImportedInterface_ResponseParams_Data** output);
void Deserialize_(internal::Factory_TakeImportedInterface_ResponseParams_Data* input,
                  Factory_TakeImportedInterface_ResponseParams* output);

class Factory_TakeImportedInterface_ResponseParams {
 public:
  using Data_ = internal::Factory_TakeImportedInterface_ResponseParams_Data;

  static Factory_TakeImportedInterface_ResponseParamsPtr New();

  template <typename U>
  static Factory_TakeImportedInterface_ResponseParamsPtr From(const U& u) {
    return mojo::TypeConverter<Factory_TakeImportedInterface_ResponseParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Factory_TakeImportedInterface_ResponseParams>::Convert(*this);
  }

  Factory_TakeImportedInterface_ResponseParams();
  ~Factory_TakeImportedInterface_ResponseParams();
  
  // Returns the number of bytes it would take to serialize this struct's data.
  size_t GetSerializedSize() const;

  // Returns true on successful serialization. On failure, part of the data may
  // be serialized, until the point of failure. This API does not support
  // serializing handles. If not null, |bytes_written| is set to the number of
  // bytes written to |buf|, even if this function return false. 
  //
  // TODO(vardhan): For now, we return true for success. Should we define a
  // public error type for serialization? Should we open up
  // internal::ValidationError?
  bool Serialize(void* buf, size_t buf_size, size_t* bytes_written = nullptr);

  // Deserializes the given |buf| of size |buf_size| representing a serialized
  // version of this struct. The buffer is validated before it is deserialized.
  // Returns true on successful deserialization.
  // TODO(vardhan): Recover the validation error if there is one?
  bool Deserialize(void* buf, size_t buf_size);

  // Deserializes the given |buf| representing a serialized version of this
  // struct. The buffer is NOT validated before it is deserialized, so the user
  // must be confident of its validity and that |buf| points to enough data to
  // finish deserializing.
  void DeserializeWithoutValidation(void* buf);


  bool Equals(const Factory_TakeImportedInterface_ResponseParams& other) const;

  mojo::InterfaceHandle<imported::ImportedInterface> obj;
};


}  // namespace sample

#endif  // MOJO_PUBLIC_INTERFACES_BINDINGS_TESTS_SAMPLE_FACTORY_MOJOM_COMMON_H_
