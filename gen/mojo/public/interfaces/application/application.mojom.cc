// NOTE: This file was generated by the Mojo bindings generator.
#include "mojo/public/interfaces/application/application.mojom.h"

#include <math.h>
#include <ostream>

#include "mojo/public/cpp/bindings/lib/array_serialization.h"
#include "mojo/public/cpp/bindings/lib/bindings_serialization.h"
#include "mojo/public/cpp/bindings/lib/bounds_checker.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/map_serialization.h"
#include "mojo/public/cpp/bindings/lib/message_builder.h"
#include "mojo/public/cpp/bindings/lib/message_validation.h"
#include "mojo/public/cpp/bindings/lib/string_serialization.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "mojo/public/cpp/environment/logging.h"
namespace mojo {

// --- Interface definitions ---

ApplicationProxy::ApplicationProxy(mojo::MessageReceiverWithResponder* receiver)
    : ControlMessageProxy(receiver) {
}
void ApplicationProxy::Initialize(
    mojo::InterfaceHandle<mojo::Shell> in_shell, mojo::Array<mojo::String> in_args, const mojo::String& in_url) {
  size_t size = sizeof(internal::Application_Initialize_Params_Data);
  size += GetSerializedSize_(in_args);
  size += GetSerializedSize_(in_url);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Application_Base::MessageOrdinals::Initialize), size);

  internal::Application_Initialize_Params_Data* params =
      internal::Application_Initialize_Params_Data::New(builder.buffer());
  mojo::internal::InterfaceHandleToData(in_shell.Pass(),
                                        &params->shell);
  if (!params->shell.handle.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid shell in Application.Initialize request");
  }
  {
    const mojo::internal::ArrayValidateParams args_validate_params(
      0, false, new mojo::internal::ArrayValidateParams(0, false, nullptr));mojo::SerializeArray_(&in_args, builder.buffer(), &params->args.ptr,
                          &args_validate_params);
  }
  SerializeString_(in_url, builder.buffer(), &params->url.ptr);
  if (!params->url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null url in Application.Initialize request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ApplicationProxy::AcceptConnection(
    const mojo::String& in_requestor_url, const mojo::String& in_resolved_url, mojo::InterfaceRequest<mojo::ServiceProvider> in_services) {
  size_t size = sizeof(internal::Application_AcceptConnection_Params_Data);
  size += GetSerializedSize_(in_requestor_url);
  size += GetSerializedSize_(in_resolved_url);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Application_Base::MessageOrdinals::AcceptConnection), size);

  internal::Application_AcceptConnection_Params_Data* params =
      internal::Application_AcceptConnection_Params_Data::New(builder.buffer());
  SerializeString_(in_requestor_url, builder.buffer(), &params->requestor_url.ptr);
  if (!params->requestor_url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null requestor_url in Application.AcceptConnection request");
  }
  SerializeString_(in_resolved_url, builder.buffer(), &params->resolved_url.ptr);
  if (!params->resolved_url.ptr) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_NULL_POINTER, "null resolved_url in Application.AcceptConnection request");
  }
  params->services = in_services.PassMessagePipe().release();
  if (!params->services.is_valid()) {
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(mojo::internal::ValidationError::UNEXPECTED_INVALID_HANDLE, "invalid services in Application.AcceptConnection request");
  }
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}
void ApplicationProxy::RequestQuit(
    ) {
  size_t size = sizeof(internal::Application_RequestQuit_Params_Data);
  mojo::MessageBuilder builder(
    static_cast<uint32_t>(internal::Application_Base::MessageOrdinals::RequestQuit), size);

  internal::Application_RequestQuit_Params_Data* params =
      internal::Application_RequestQuit_Params_Data::New(builder.buffer());
  params->EncodePointersAndHandles(builder.message()->mutable_handles());
  bool ok = receiver_->Accept(builder.message());
  // This return value may be ignored as !ok implies the Connector has
  // encountered an error, which will be visible through other means.
  MOJO_ALLOW_UNUSED_LOCAL(ok);
}

ApplicationStub::ApplicationStub()
    : sink_(nullptr),
      control_message_handler_(Application::Version_) {
}

ApplicationStub::~ApplicationStub() {}

bool ApplicationStub::Accept(mojo::Message* message) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.Accept(message);
  internal::Application_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Application_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Application_Base::MessageOrdinals::Initialize: {
      internal::Application_Initialize_Params_Data* params =
          reinterpret_cast<internal::Application_Initialize_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::InterfaceHandle<mojo::Shell> p_shell {};
      mojo::Array<mojo::String> p_args {};
      mojo::String p_url {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        mojo::internal::InterfaceDataToHandle(&params->shell, &p_shell);
        Deserialize_(params->args.ptr, &p_args);
        Deserialize_(params->url.ptr, &p_url);
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->Initialize(p_shell.Pass(), p_args.Pass(), p_url);
      return true;
    }
    case internal::Application_Base::MessageOrdinals::AcceptConnection: {
      internal::Application_AcceptConnection_Params_Data* params =
          reinterpret_cast<internal::Application_AcceptConnection_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      mojo::String p_requestor_url {};
      mojo::String p_resolved_url {};
      mojo::InterfaceRequest<mojo::ServiceProvider> p_services {};
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
        Deserialize_(params->requestor_url.ptr, &p_requestor_url);
        Deserialize_(params->resolved_url.ptr, &p_resolved_url);
        p_services.Bind(mojo::MakeScopedHandle(mojo::internal::FetchAndReset(&params->services)));
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->AcceptConnection(p_requestor_url, p_resolved_url, p_services.Pass());
      return true;
    }
    case internal::Application_Base::MessageOrdinals::RequestQuit: {
      internal::Application_RequestQuit_Params_Data* params =
          reinterpret_cast<internal::Application_RequestQuit_Params_Data*>(
              message->mutable_payload());

      params->DecodePointersAndHandles(message->mutable_handles());
      
      do {
        // NOTE: The memory backing |params| may has be smaller than
        // |sizeof(*params)| if the message comes from an older version.
      } while (false);
      // A null |sink_| means no implementation was bound.
      assert(sink_);
      sink_->RequestQuit();
      return true;
    }
  }
  return false;
}

bool ApplicationStub::AcceptWithResponder(
    mojo::Message* message, mojo::MessageReceiverWithStatus* responder) {
  if (mojo::internal::ControlMessageHandler::IsControlMessage(message))
    return control_message_handler_.AcceptWithResponder(message, responder);
  internal::Application_Base::MessageOrdinals method_ordinal =
      static_cast<internal::Application_Base::MessageOrdinals>(message->header()->name);
  switch (method_ordinal) {
    case internal::Application_Base::MessageOrdinals::Initialize: {
      break;
    }
    case internal::Application_Base::MessageOrdinals::AcceptConnection: {
      break;
    }
    case internal::Application_Base::MessageOrdinals::RequestQuit: {
      break;
    }
  }
  return false;
}

}  // namespace mojo
